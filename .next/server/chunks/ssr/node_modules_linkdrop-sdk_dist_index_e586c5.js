module.exports = {

"[project]/node_modules/linkdrop-sdk/dist/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require } = __turbopack_context__;
{
/*! For license information please see index.js.LICENSE.txt */ !function(f, e) {
    ("TURBOPACK compile-time truthy", 1) ? module.exports = e() : ("TURBOPACK unreachable", undefined);
}(this, ()=>(()=>{
        var f = {
            299: function(f, e, t) {
                function n(f, e) {
                    var t = Object.keys(f);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(f);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(f, e).enumerable;
                        })), t.push.apply(t, n);
                    }
                    return t;
                }
                function r(f) {
                    for(var e = 1; e < arguments.length; e++){
                        var t = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(t), !0).forEach(function(e) {
                            a(f, e, t[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : n(Object(t)).forEach(function(e) {
                            Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                        });
                    }
                    return f;
                }
                function a(f, e, t) {
                    return (e = function(f) {
                        var e = function(f) {
                            if ("object" != typeof f || !f) return f;
                            var e = f[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var t = e.call(f, "string");
                                if ("object" != typeof t) return t;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(f);
                        }(f);
                        return "symbol" == typeof e ? e : e + "";
                    }(e)) in f ? Object.defineProperty(f, e, {
                        value: t,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : f[e] = t, f;
                }
                var i;
                i = ()=>(()=>{
                        "use strict";
                        var f = {
                            d: (e, t)=>{
                                for(var n in t)f.o(t, n) && !f.o(e, n) && Object.defineProperty(e, n, {
                                    enumerable: !0,
                                    get: t[n]
                                });
                            },
                            o: (f, e)=>Object.prototype.hasOwnProperty.call(f, e),
                            r: (f)=>{
                                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(f, Symbol.toStringTag, {
                                    value: "Module"
                                }), Object.defineProperty(f, "__esModule", {
                                    value: !0
                                });
                            }
                        }, e = {};
                        f.r(e), f.d(e, {
                            ClaimLink: ()=>kc,
                            LinkdropP2P: ()=>Sc
                        });
                        var n = {};
                        f.r(n), f.d(n, {
                            dQ: ()=>mr,
                            ci: ()=>or,
                            bytesToNumberBE: ()=>dr,
                            ty: ()=>ur,
                            eV: ()=>yr,
                            n$: ()=>vr,
                            ql: ()=>pr,
                            hexToBytes: ()=>cr,
                            tL: ()=>lr,
                            S5: ()=>hr,
                            FF: ()=>Tr
                        });
                        const a = "6.10.0";
                        function i(f, e, t) {
                            const n = e.split("|").map((f)=>f.trim());
                            for(let t = 0; t < n.length; t++)switch(e){
                                case "any":
                                    return;
                                case "bigint":
                                case "boolean":
                                case "number":
                                case "string":
                                    if (typeof f === e) return;
                            }
                            const r = new Error("invalid value for type ".concat(e));
                            throw r.code = "INVALID_ARGUMENT", r.argument = "value.".concat(t), r.value = f, r;
                        }
                        async function s(f) {
                            const e = Object.keys(f);
                            return (await Promise.all(e.map((e)=>Promise.resolve(f[e])))).reduce((f, t, n)=>(f[e[n]] = t, f), {});
                        }
                        function o(f, e, t) {
                            for(let n in e){
                                let r = e[n];
                                const a = t ? t[n] : null;
                                a && i(r, a, n), Object.defineProperty(f, n, {
                                    enumerable: !0,
                                    value: r,
                                    writable: !1
                                });
                            }
                        }
                        function b(f) {
                            if (null == f) return "null";
                            if (Array.isArray(f)) return "[ " + f.map(b).join(", ") + " ]";
                            if (f instanceof Uint8Array) {
                                const e = "0123456789abcdef";
                                let t = "0x";
                                for(let n = 0; n < f.length; n++)t += e[f[n] >> 4], t += e[15 & f[n]];
                                return t;
                            }
                            if ("object" == typeof f && "function" == typeof f.toJSON) return b(f.toJSON());
                            switch(typeof f){
                                case "boolean":
                                case "symbol":
                                case "number":
                                    return f.toString();
                                case "bigint":
                                    return BigInt(f).toString();
                                case "string":
                                    return JSON.stringify(f);
                                case "object":
                                    {
                                        const e = Object.keys(f);
                                        return e.sort(), "{ " + e.map((e)=>"".concat(b(e), ": ").concat(b(f[e]))).join(", ") + " }";
                                    }
                            }
                            return "[ COULD NOT SERIALIZE ]";
                        }
                        function c(f, e) {
                            return f && f.code === e;
                        }
                        function d(f, e, t) {
                            let n, r = f;
                            {
                                const n = [];
                                if (t) {
                                    if ("message" in t || "code" in t || "name" in t) throw new Error("value will overwrite populated values: ".concat(b(t)));
                                    for(const f in t){
                                        if ("shortMessage" === f) continue;
                                        const e = t[f];
                                        n.push(f + "=" + b(e));
                                    }
                                }
                                n.push("code=".concat(e)), n.push("version=".concat(a)), n.length && (f += " (" + n.join(", ") + ")");
                            }
                            switch(e){
                                case "INVALID_ARGUMENT":
                                    n = new TypeError(f);
                                    break;
                                case "NUMERIC_FAULT":
                                case "BUFFER_OVERRUN":
                                    n = new RangeError(f);
                                    break;
                                default:
                                    n = new Error(f);
                            }
                            return o(n, {
                                code: e
                            }), t && Object.assign(n, t), null == n.shortMessage && o(n, {
                                shortMessage: r
                            }), n;
                        }
                        function u(f, e, t, n) {
                            if (!f) throw d(e, t, n);
                        }
                        function l(f, e, t, n) {
                            u(f, e, "INVALID_ARGUMENT", {
                                argument: t,
                                value: n
                            });
                        }
                        function h(f, e, t) {
                            null == t && (t = ""), t && (t = ": " + t), u(f >= e, "missing arguemnt" + t, "MISSING_ARGUMENT", {
                                count: f,
                                expectedCount: e
                            }), u(f <= e, "too many arguemnts" + t, "UNEXPECTED_ARGUMENT", {
                                count: f,
                                expectedCount: e
                            });
                        }
                        const p = [
                            "NFD",
                            "NFC",
                            "NFKD",
                            "NFKC"
                        ].reduce((f, e)=>{
                            try {
                                if ("test" !== "test".normalize(e)) throw new Error("bad");
                                if ("NFD" === e && String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken");
                                f.push(e);
                            } catch (f) {}
                            return f;
                        }, []);
                        function y(f) {
                            u(p.indexOf(f) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
                                operation: "String.prototype.normalize",
                                info: {
                                    form: f
                                }
                            });
                        }
                        function m(f, e, t) {
                            if (null == t && (t = ""), f !== e) {
                                let f = t, e = "new";
                                t && (f += ".", e += " " + t), u(!1, "private constructor; use ".concat(f, "from* methods"), "UNSUPPORTED_OPERATION", {
                                    operation: e
                                });
                            }
                        }
                        function g(f, e, t) {
                            if (f instanceof Uint8Array) return t ? new Uint8Array(f) : f;
                            if ("string" == typeof f && f.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
                                const e = new Uint8Array((f.length - 2) / 2);
                                let t = 2;
                                for(let n = 0; n < e.length; n++)e[n] = parseInt(f.substring(t, t + 2), 16), t += 2;
                                return e;
                            }
                            l(!1, "invalid BytesLike value", e || "value", f);
                        }
                        function w(f, e) {
                            return g(f, e, !1);
                        }
                        function v(f, e) {
                            return g(f, e, !0);
                        }
                        function E(f, e) {
                            return !("string" != typeof f || !f.match(/^0x[0-9A-Fa-f]*$/) || "number" == typeof e && f.length !== 2 + 2 * e || !0 === e && f.length % 2 != 0);
                        }
                        function T(f) {
                            return E(f, !0) || f instanceof Uint8Array;
                        }
                        const A = "0123456789abcdef";
                        function x(f) {
                            const e = w(f);
                            let t = "0x";
                            for(let f = 0; f < e.length; f++){
                                const n = e[f];
                                t += A[(240 & n) >> 4] + A[15 & n];
                            }
                            return t;
                        }
                        function I(f) {
                            return "0x" + f.map((f)=>x(f).substring(2)).join("");
                        }
                        function k(f) {
                            return E(f, !0) ? (f.length - 2) / 2 : w(f).length;
                        }
                        function O(f, e, t) {
                            const n = w(f);
                            return null != t && t > n.length && u(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
                                buffer: n,
                                length: n.length,
                                offset: t
                            }), x(n.slice(null == e ? 0 : e, null == t ? n.length : t));
                        }
                        function _(f, e, t) {
                            const n = w(f);
                            u(e >= n.length, "padding exceeds data length", "BUFFER_OVERRUN", {
                                buffer: new Uint8Array(n),
                                length: e,
                                offset: e + 1
                            });
                            const r = new Uint8Array(e);
                            return r.fill(0), t ? r.set(n, e - n.length) : r.set(n, 0), x(r);
                        }
                        function P(f, e) {
                            return _(f, e, !0);
                        }
                        function S(f, e) {
                            return _(f, e, !1);
                        }
                        const R = BigInt(0), N = BigInt(1), C = 9007199254740991;
                        function U(f, e) {
                            let t = B(f, "value");
                            const n = BigInt(j(e, "width")), r = N << n - N;
                            return t < R ? (t = -t, u(t <= r, "too low", "NUMERIC_FAULT", {
                                operation: "toTwos",
                                fault: "overflow",
                                value: f
                            }), (~t & (N << n) - N) + N) : (u(t < r, "too high", "NUMERIC_FAULT", {
                                operation: "toTwos",
                                fault: "overflow",
                                value: f
                            }), t);
                        }
                        function L(f, e) {
                            const t = D(f, "value"), n = BigInt(j(e, "bits"));
                            return t & (N << n) - N;
                        }
                        function B(f, e) {
                            switch(typeof f){
                                case "bigint":
                                    return f;
                                case "number":
                                    return l(Number.isInteger(f), "underflow", e || "value", f), l(f >= -C && f <= C, "overflow", e || "value", f), BigInt(f);
                                case "string":
                                    try {
                                        if ("" === f) throw new Error("empty string");
                                        return "-" === f[0] && "-" !== f[1] ? -BigInt(f.substring(1)) : BigInt(f);
                                    } catch (t) {
                                        l(!1, "invalid BigNumberish string: ".concat(t.message), e || "value", f);
                                    }
                            }
                            l(!1, "invalid BigNumberish value", e || "value", f);
                        }
                        function D(f, e) {
                            const t = B(f, e);
                            return u(t >= R, "unsigned value cannot be negative", "NUMERIC_FAULT", {
                                fault: "overflow",
                                operation: "getUint",
                                value: f
                            }), t;
                        }
                        const F = "0123456789abcdef";
                        function M(f) {
                            if (f instanceof Uint8Array) {
                                let e = "0x0";
                                for (const t of f)e += F[t >> 4], e += F[15 & t];
                                return BigInt(e);
                            }
                            return B(f);
                        }
                        function j(f, e) {
                            switch(typeof f){
                                case "bigint":
                                    return l(f >= -C && f <= C, "overflow", e || "value", f), Number(f);
                                case "number":
                                    return l(Number.isInteger(f), "underflow", e || "value", f), l(f >= -C && f <= C, "overflow", e || "value", f), f;
                                case "string":
                                    try {
                                        if ("" === f) throw new Error("empty string");
                                        return j(BigInt(f), e);
                                    } catch (t) {
                                        l(!1, "invalid numeric string: ".concat(t.message), e || "value", f);
                                    }
                            }
                            l(!1, "invalid numeric value", e || "value", f);
                        }
                        function K(f, e) {
                            let t = D(f, "value").toString(16);
                            if (null == e) t.length % 2 && (t = "0" + t);
                            else {
                                const n = j(e, "width");
                                for(u(2 * n >= t.length, "value exceeds width (".concat(n, " bytes)"), "NUMERIC_FAULT", {
                                    operation: "toBeHex",
                                    fault: "overflow",
                                    value: f
                                }); t.length < 2 * n;)t = "0" + t;
                            }
                            return "0x" + t;
                        }
                        function z(f) {
                            const e = D(f, "value");
                            if (e === R) return new Uint8Array([]);
                            let t = e.toString(16);
                            t.length % 2 && (t = "0" + t);
                            const n = new Uint8Array(t.length / 2);
                            for(let f = 0; f < n.length; f++){
                                const e = 2 * f;
                                n[f] = parseInt(t.substring(e, e + 2), 16);
                            }
                            return n;
                        }
                        class V extends Error {
                            constructor(f, e){
                                super("Validation Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 400, this.error = e;
                            }
                        }
                        const G = V, H = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"LinkdropEscrow","sourceName":"contracts/LinkdropEscrow.sol","abi":[{"inputs":[{"internalType":"address","name":"relayer_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Cancel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint120","name":"expiration","type":"uint120"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"address","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint128","name":"fee","type":"uint128"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"claimFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"depositFee","type":"uint128"}],"name":"UpdateFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"UpdateRelayer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeReceiver","type":"address"},{"indexed":false,"internalType":"address","name":"token_","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawFees","type":"event"},{"inputs":[],"name":"EIP712_DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_TRANSFER_TYPE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"accruedFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"depositETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"bytes4","name":"authorizationSelector_","type":"bytes4"},{"internalType":"uint128","name":"fee_","type":"uint128"},{"internalType":"bytes","name":"receiveAuthorization_","type":"bytes"}],"name":"depositWithAuthorization","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint8","name":"tokenType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domain","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"getDeposit","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint8","name":"tokenType","type":"uint8"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"recoverLinkKeyId","outputs":[{"internalType":"address","name":"linkKeyId","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"linkKeyId_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"recoverSender","outputs":[{"internalType":"address","name":"sender","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"redeemRecovered","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"relayers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer_","type":"address"},{"internalType":"bool","name":"active_","type":"bool"}],"name":"setRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"verifyFeeAuthorization","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"withdrawAccruedFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"bytecode":"","deployedBytecode":"0x6080604052600436106101405760003560e01c8063824c1db5116100b6578063d6e69a001161006f578063d6e69a0014610445578063dc0c81b514610482578063ecd8dc3a146104ad578063ee2578ab146104d6578063f08204ad14610516578063f2fde38b1461053f57610140565b8063824c1db51461032e57806386fc05ba146103575780638da5cb5b14610398578063c2fb26a6146103c3578063c7977be7146103f1578063ce0ea5971461041c57610140565b80633e0dd0d9116101085780633e0dd0d91461022d5780635300f8411461026a57806357815a68146102a75780636b2ac46d146102d0578063715018a6146102ec57806371d683721461030357610140565b806307311283146101455780632cfdcc741461018257806336d5026c146101ab5780633d6e85e6146101c75780633e05dc4c14610204575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906135da565b610568565b6040516101799190613620565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190613787565b610580565b005b6101c560048036038101906101c09190613836565b6108ed565b005b3480156101d357600080fd5b506101ee60048036038101906101e991906138f8565b610a44565b6040516101fb9190613967565b60405180910390f35b34801561021057600080fd5b5061022b60048036038101906102269190613982565b610ad0565b005b34801561023957600080fd5b50610254600480360381019061024f9190613a0a565b610b7f565b6040516102619190613967565b60405180910390f35b34801561027657600080fd5b50610291600480360381019061028c91906135da565b610be7565b60405161029e9190613a99565b60405180910390f35b3480156102b357600080fd5b506102ce60048036038101906102c99190613ab4565b610c07565b005b6102ea60048036038101906102e59190613b07565b611033565b005b3480156102f857600080fd5b50610301611304565b005b34801561030f57600080fd5b50610318611318565b6040516103259190613bba565b60405180910390f35b34801561033a57600080fd5b5061035560048036038101906103509190613bd5565b61133c565b005b34801561036357600080fd5b5061037e60048036038101906103799190613ab4565b6116eb565b60405161038f959493929190613c4f565b60405180910390f35b3480156103a457600080fd5b506103ad61189d565b6040516103ba9190613967565b60405180910390f35b3480156103cf57600080fd5b506103d86118c7565b6040516103e89493929190613d32565b60405180910390f35b3480156103fd57600080fd5b50610406611a15565b6040516104139190613bba565b60405180910390f35b34801561042857600080fd5b50610443600480360381019061043e9190613d85565b611a39565b005b34801561045157600080fd5b5061046c60048036038101906104679190613e6d565b611afb565b6040516104799190613a99565b60405180910390f35b34801561048e57600080fd5b50610497611bee565b6040516104a49190613bba565b60405180910390f35b3480156104b957600080fd5b506104d460048036038101906104cf9190613f84565b611c12565b005b3480156104e257600080fd5b506104fd60048036038101906104f89190613ab4565b611cae565b60405161050d9493929190613fc4565b60405180910390f35b34801561052257600080fd5b5061053d600480360381019061053891906135da565b611d3c565b005b34801561054b57600080fd5b50610566600480360381019061056191906135da565b611e55565b005b60056020528060005260406000206000915090505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661060c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106039061407b565b60405180910390fd5b63e1560fd360e01b847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610665575063ef55bec660e01b847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906140e7565b60405180910390fd5b600080600080600080878760009060c0926106c193929190614111565b8101906106ce91906141b6565b809650819750829850839950849a50859b505050505050503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b906142db565b60405180910390fd5b80868d868e8d60405160200161076e9594939291906143d0565b60405160208183030381529060405280519060200120146107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb906144c7565b60405180910390fd5b60008d73ffffffffffffffffffffffffffffffffffffffff168b8a8a6040516020016107f293929190614547565b60405160208183030381529060405260405161080e91906145ad565b6000604051808303816000865af19150503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e610850565b606091505b5050905080610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b90614610565b60405180910390fd5b5050505063e1560fd360e01b877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036108d2576108d18a843084611ed8565b5b6108e1838b8b848c8f8c612030565b50505050505050505050565b6108f561231b565b600061090a338a8a60008b8b8b8b8b8b611afb565b90508061094c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610943906146a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290614734565b60405180910390fd5b6109d98933308a6fffffffffffffffffffffffffffffffff16611ed8565b8873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a2157610a1b338a8a8a8a8a8a612030565b50610a32565b610a30338a8a8a8a8a8a61236a565b505b610a3a612636565b5050505050505050565b600080610a7685604051602001610a5b9190614754565b60405160208183030381529060405280519060200120612640565b9050610ac68185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612670565b9150509392505050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b539061407b565b60405180910390fd5b6000610b69868484610a44565b9050610b7785858389612697565b505050505050565b600080610b8c8686612aa6565b9050610bdc8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612670565b915050949350505050565b60066020528060005260406000206000915054906101000a900460ff1681565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a9061407b565b60405180910390fd5b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a906147e1565b60405180910390fd5b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff02191690555050610fbf86888484876fffffffffffffffffffffffffffffffff16612b48565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5938a86ca33c66cb817f2fdc8d5cd4073bfe03e3f6c846c3c91e7d3f6beaae9f878585886040516110229493929190614801565b60405180910390a350505050505050565b61103b61231b565b60008060008061105633858c8560ff168d8d898e8e8e611afb565b905080611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90614892565b60405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16146111c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bc90614924565b60405180910390fd5b42886effffffffffffffffffffffffffffff1611611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f906149b6565b60405180910390fd5b886fffffffffffffffffffffffffffffffff16341461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390614a48565b60405180910390fd5b866fffffffffffffffffffffffffffffffff16896fffffffffffffffffffffffffffffffff16116112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c990614ada565b60405180910390fd5b86896112de9190614b29565b98506112f033858c8c8c87898e612ca9565b505050506112fc612636565b505050505050565b61130c612f38565b6113166000612fb6565b565b7fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e681565b61134461231b565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611611534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152b90614bdf565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061167086338484876fffffffffffffffffffffffffffffffff16612b48565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab3691e99d7a7c44b5bbf42b6113806f3fa641468fdf21dd778892ea680d0486878585886040516116d39493929190614801565b60405180910390a3505050506116e7612636565b5050565b600080600080600080600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090508881606001518260000151836020015184604001519550955095509550955050939792965093509350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060000180546118d890614c2e565b80601f016020809104026020016040519081016040528092919081815260200182805461190490614c2e565b80156119515780601f1061192657610100808354040283529160200191611951565b820191906000526020600020905b81548152906001019060200180831161193457829003601f168201915b50505050509080600101805461196690614c2e565b80601f016020809104026020016040519081016040528092919081815260200182805461199290614c2e565b80156119df5780601f106119b4576101008083540402835291602001916119df565b820191906000526020600020905b8154815290600101906020018083116119c257829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abc9061407b565b60405180910390fd5b6000611ad2888686610a44565b90506000611ae282888686610b7f565b9050611af08189898c612697565b505050505050505050565b600080611b3b8c8c8c8c8c8c8c8c604051602001611b20989796959493929190614c5f565b60405160208183030381529060405280519060200120612640565b90506000611b8d8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612670565b9050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16925050509a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611c1a612f38565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f34e1cf41794bd5b78c6251cacf103835b835d3ad103d8471ae5f3df532ff31128282604051611ca2929190614cf1565b60405180910390a15050565b600860205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a90046effffffffffffffffffffffffffffff169080600101601f9054906101000a900460ff16905084565b611d44612f38565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611e0757600190505b611e15833383600086612b48565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e4338484604051611e4893929190614d1a565b60405180910390a1505050565b611e5d612f38565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec390614dc3565b60405180910390fd5b611ed581612fb6565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401611f0f93929190614d1a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f7991906145ad565b6000604051808303816000865af19150503d8060008114611fb6576040519150601f19603f3d011682016040523d82523d6000602084013e611fbb565b606091505b5091509150818015611fe95750600081511480611fe8575080806020019051810190611fe79190614df8565b5b5b612028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201f90614e71565b60405180910390fd5b505050505050565b6000600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161461215d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215490614924565b60405180910390fd5b42836effffffffffffffffffffffffffffff16116121b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a7906149b6565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461221e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221590614f29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361228d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228490614fbb565b60405180910390fd5b806fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16116122f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ea90614ada565b60405180910390fd5b80846122ff9190614b29565b9350612312878787878760018888612ca9565b50505050505050565b600260075403612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790615027565b60405180910390fd5b6002600781905550565b6000600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614612497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248e90614924565b60405180910390fd5b42836effffffffffffffffffffffffffffff16116124ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e1906149b6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612550906150df565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036125c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bf90614fbb565b60405180910390fd5b806fffffffffffffffffffffffffffffffff16341461261c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126139061514b565b60405180910390fd5b61262d878787878760018888612ca9565b50505050505050565b6001600781905550565b60008160405160200161265391906151e3565b604051602081830303815290604052805190602001209050919050565b600080600061267f858561307c565b9150915061268c816130cd565b819250505092915050565b6000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611612887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287e9061527b565b60405180910390fd5b83604001516effffffffffffffffffffffffffffff1642106128de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d59061530d565b60405180910390fd5b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff02191690555050612a1a87868484876fffffffffffffffffffffffffffffffff16612b48565b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167ff81d021f277085e9e959eecea61062bd1eff62d82edad55732d811abb5e5496989868689604051612a949493929190614801565b60405180910390a45050505050505050565b6000807fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e68484604051602001612ade9392919061532d565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000081604051602001612b299291906153b0565b6040516020818303038152906040528051906020012091505092915050565b60028360ff1610612b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8590615459565b60405180910390fd5b60008360ff1603612c1757600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bff906154eb565b60405180910390fd5b612c128482613233565b612ca2565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7d9061557d565b60405180910390fd5b60018360ff1603612ca157612c9c858583613333565b612ca2565b5b5050505050565b604051806080016040528060008152602001866fffffffffffffffffffffffffffffffff168152602001856effffffffffffffffffffffffffffff1681526020018460ff16815250600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550606082015181600101601f6101000a81548160ff021916908360ff160217905550905050806fffffffffffffffffffffffffffffffff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612eb5919061559d565b925050819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f1d48f3ec0544fd684c5a9331f70963c5401a4fb089b9475628f52911dce6936e88878760008b8989604051612f269796959493929190615616565b60405180910390a35050505050505050565b612f40613488565b73ffffffffffffffffffffffffffffffffffffffff16612f5e61189d565b73ffffffffffffffffffffffffffffffffffffffff1614612fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fab906156d1565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060418351036130bd5760008060006020860151925060408601519150606086015160001a90506130b187828585613490565b945094505050506130c6565b60006002915091505b9250929050565b600060048111156130e1576130e06156f1565b5b8160048111156130f4576130f36156f1565b5b0315613230576001600481111561310e5761310d6156f1565b5b816004811115613121576131206156f1565b5b03613161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131589061576c565b60405180910390fd5b60026004811115613175576131746156f1565b5b816004811115613188576131876156f1565b5b036131c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131bf906157d8565b60405180910390fd5b600360048111156131dc576131db6156f1565b5b8160048111156131ef576131ee6156f1565b5b0361322f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132269061586a565b60405180910390fd5b5b50565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156132685761326761588a565b5b6040519080825280601f01601f19166020018201604052801561329a5781602001600182028036833780820191505090505b506040516132a891906145ad565b60006040518083038185875af1925050503d80600081146132e5576040519150601f19603f3d011682016040523d82523d6000602084013e6132ea565b606091505b505090508061332e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161332590615905565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401613368929190615925565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516133d291906145ad565b6000604051808303816000865af19150503d806000811461340f576040519150601f19603f3d011682016040523d82523d6000602084013e613414565b606091505b509150915081801561344257506000815114806134415750808060200190518101906134409190614df8565b5b5b613481576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134789061599a565b60405180910390fd5b5050505050565b600033905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156134cb576000600391509150613569565b6000600187878787604051600081526020016040526040516134f094939291906159ba565b6020604051602081039080840390855afa158015613512573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361356057600060019250925050613569565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135a78261357c565b9050919050565b6135b78161359c565b81146135c257600080fd5b50565b6000813590506135d4816135ae565b92915050565b6000602082840312156135f0576135ef613572565b5b60006135fe848285016135c5565b91505092915050565b6000819050919050565b61361a81613607565b82525050565b60006020820190506136356000830184613611565b92915050565b60006effffffffffffffffffffffffffffff82169050919050565b61365f8161363b565b811461366a57600080fd5b50565b60008135905061367c81613656565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136b781613682565b81146136c257600080fd5b50565b6000813590506136d4816136ae565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6136ff816136da565b811461370a57600080fd5b50565b60008135905061371c816136f6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261374757613746613722565b5b8235905067ffffffffffffffff81111561376457613763613727565b5b6020830191508360018202830111156137805761377f61372c565b5b9250929050565b600080600080600080600060c0888a0312156137a6576137a5613572565b5b60006137b48a828b016135c5565b97505060206137c58a828b016135c5565b96505060406137d68a828b0161366d565b95505060606137e78a828b016136c5565b94505060806137f88a828b0161370d565b93505060a088013567ffffffffffffffff81111561381957613818613577565b5b6138258a828b01613731565b925092505092959891949750929550565b60008060008060008060008060e0898b03121561385657613855613572565b5b60006138648b828c016135c5565b98505060206138758b828c016135c5565b97505060406138868b828c0161370d565b96505060606138978b828c0161366d565b95505060806138a88b828c016135c5565b94505060a06138b98b828c0161370d565b93505060c089013567ffffffffffffffff8111156138da576138d9613577565b5b6138e68b828c01613731565b92509250509295985092959890939650565b60008060006040848603121561391157613910613572565b5b600061391f868287016135c5565b935050602084013567ffffffffffffffff8111156139405761393f613577565b5b61394c86828701613731565b92509250509250925092565b6139618161359c565b82525050565b600060208201905061397c6000830184613958565b92915050565b60008060008060006080868803121561399e5761399d613572565b5b60006139ac888289016135c5565b95505060206139bd888289016135c5565b94505060406139ce888289016135c5565b935050606086013567ffffffffffffffff8111156139ef576139ee613577565b5b6139fb88828901613731565b92509250509295509295909350565b60008060008060608587031215613a2457613a23613572565b5b6000613a32878288016135c5565b9450506020613a43878288016135c5565b935050604085013567ffffffffffffffff811115613a6457613a63613577565b5b613a7087828801613731565b925092505092959194509250565b60008115159050919050565b613a9381613a7e565b82525050565b6000602082019050613aae6000830184613a8a565b92915050565b600080600060608486031215613acd57613acc613572565b5b6000613adb868287016135c5565b9350506020613aec868287016135c5565b9250506040613afd868287016135c5565b9150509250925092565b60008060008060008060a08789031215613b2457613b23613572565b5b6000613b3289828a016135c5565b9650506020613b4389828a0161370d565b9550506040613b5489828a0161366d565b9450506060613b6589828a0161370d565b935050608087013567ffffffffffffffff811115613b8657613b85613577565b5b613b9289828a01613731565b92509250509295509295509295565b6000819050919050565b613bb481613ba1565b82525050565b6000602082019050613bcf6000830184613bab565b92915050565b60008060408385031215613bec57613beb613572565b5b6000613bfa858286016135c5565b9250506020613c0b858286016135c5565b9150509250929050565b600060ff82169050919050565b613c2b81613c15565b82525050565b613c3a816136da565b82525050565b613c498161363b565b82525050565b600060a082019050613c646000830188613958565b613c716020830187613c22565b613c7e6040830186613611565b613c8b6060830185613c31565b613c986080830184613c40565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cdc578082015181840152602081019050613cc1565b60008484015250505050565b6000601f19601f8301169050919050565b6000613d0482613ca2565b613d0e8185613cad565b9350613d1e818560208601613cbe565b613d2781613ce8565b840191505092915050565b60006080820190508181036000830152613d4c8187613cf9565b90508181036020830152613d608186613cf9565b9050613d6f6040830185613611565b613d7c6060830184613958565b95945050505050565b600080600080600080600060a0888a031215613da457613da3613572565b5b6000613db28a828b016135c5565b9750506020613dc38a828b016135c5565b9650506040613dd48a828b016135c5565b955050606088013567ffffffffffffffff811115613df557613df4613577565b5b613e018a828b01613731565b9450945050608088013567ffffffffffffffff811115613e2457613e23613577565b5b613e308a828b01613731565b925092505092959891949750929550565b613e4a81613607565b8114613e5557600080fd5b50565b600081359050613e6781613e41565b92915050565b6000806000806000806000806000806101208b8d031215613e9157613e90613572565b5b6000613e9f8d828e016135c5565b9a50506020613eb08d828e016135c5565b9950506040613ec18d828e016135c5565b9850506060613ed28d828e01613e58565b9750506080613ee38d828e0161370d565b96505060a0613ef48d828e0161366d565b95505060c0613f058d828e016135c5565b94505060e0613f168d828e0161370d565b9350506101008b013567ffffffffffffffff811115613f3857613f37613577565b5b613f448d828e01613731565b92509250509295989b9194979a5092959850565b613f6181613a7e565b8114613f6c57600080fd5b50565b600081359050613f7e81613f58565b92915050565b60008060408385031215613f9b57613f9a613572565b5b6000613fa9858286016135c5565b9250506020613fba85828601613f6f565b9150509250929050565b6000608082019050613fd96000830187613611565b613fe66020830186613c31565b613ff36040830185613c40565b6140006060830184613c22565b95945050505050565b7f4c696e6b64726f70457363726f773a206d73672e73656e646572206973206e6f60008201527f742072656c617965722e00000000000000000000000000000000000000000000602082015250565b6000614065602a83613cad565b915061407082614009565b604082019050919050565b6000602082019050818103600083015261409481614058565b9050919050565b7f4c696e6b64726f70457363726f773a20696e76616c69642073656c6563746f72600082015250565b60006140d1602083613cad565b91506140dc8261409b565b602082019050919050565b60006020820190508181036000830152614100816140c4565b9050919050565b600080fd5b600080fd5b6000808585111561412557614124614107565b5b838611156141365761413561410c565b5b6001850283019150848603905094509492505050565b60006141578261357c565b9050919050565b6141678161414c565b811461417257600080fd5b50565b6000813590506141848161415e565b92915050565b61419381613ba1565b811461419e57600080fd5b50565b6000813590506141b08161418a565b92915050565b60008060008060008060c087890312156141d3576141d2613572565b5b60006141e189828a01614175565b96505060206141f289828a01614175565b955050604061420389828a01613e58565b945050606061421489828a01613e58565b935050608061422589828a01613e58565b92505060a061423689828a016141a1565b9150509295509295509295565b7f4c696e6b64726f70457363726f773a2072656365697665417574686f72697a6160008201527f74696f6e5f206465636f6465206661696c2e20526563697069656e742069732060208201527f6e6f74207468697320636f6e74726163742e0000000000000000000000000000604082015250565b60006142c5605283613cad565b91506142d082614243565b606082019050919050565b600060208201905081810360008301526142f4816142b8565b9050919050565b60008160601b9050919050565b6000614313826142fb565b9050919050565b600061432582614308565b9050919050565b61433d6143388261359c565b61431a565b82525050565b6000819050919050565b61435e61435982613607565b614343565b82525050565b60008160881b9050919050565b600061437c82614364565b9050919050565b61439461438f8261363b565b614371565b82525050565b60008160801b9050919050565b60006143b28261439a565b9050919050565b6143ca6143c5826136da565b6143a7565b82525050565b60006143dc828861432c565b6014820191506143ec828761432c565b6014820191506143fc828661434d565b60208201915061440c8285614383565b600f8201915061441c82846143b9565b6010820191508190509695505050505050565b7f4c696e6b64726f70457363726f773a2072656365697665417574686f72697a6160008201527f74696f6e5f206465636f6465206661696c2e20496e76616c6964206e6f6e636560208201527f2e00000000000000000000000000000000000000000000000000000000000000604082015250565b60006144b1604183613cad565b91506144bc8261442f565b606082019050919050565b600060208201905081810360008301526144e0816144a4565b9050919050565b6000819050919050565b6145026144fd82613682565b6144e7565b82525050565b600081905092915050565b82818337600083830152505050565b600061452e8385614508565b935061453b838584614513565b82840190509392505050565b600061455382866144f1565b600482019150614564828486614522565b9150819050949350505050565b600081519050919050565b600061458782614571565b6145918185614508565b93506145a1818560208601613cbe565b80840191505092915050565b60006145b9828461457c565b915081905092915050565b7f4c696e6b64726f70457363726f773a20617070726f7665206661696c65642e00600082015250565b60006145fa601f83613cad565b9150614605826145c4565b602082019050919050565b60006020820190508181036000830152614629816145ed565b9050919050565b7f4c696e6b64726f70457363726f773a2046656573206e6f7420617574686f726960008201527f7a65642e00000000000000000000000000000000000000000000000000000000602082015250565b600061468c602483613cad565b915061469782614630565b604082019050919050565b600060208201905081810360008301526146bb8161467f565b9050919050565b7f4c696e6b64726f70457363726f773a2063616e2774206265206164647265737360008201527f283029206173206120746f6b656e2e0000000000000000000000000000000000602082015250565b600061471e602f83613cad565b9150614729826146c2565b604082019050919050565b6000602082019050818103600083015261474d81614711565b9050919050565b6000614760828461432c565b60148201915081905092915050565b7f4c696e6b64726f70457363726f773a20696e76616c6964207472616e7366657260008201527f2049440000000000000000000000000000000000000000000000000000000000602082015250565b60006147cb602383613cad565b91506147d68261476f565b604082019050919050565b600060208201905081810360008301526147fa816147be565b9050919050565b60006080820190506148166000830187613958565b6148236020830186613c22565b6148306040830185613611565b61483d6060830184613c31565b95945050505050565b7f46656573206e6f7420617574686f72697a65642e000000000000000000000000600082015250565b600061487c601483613cad565b915061488782614846565b602082019050919050565b600060208201905081810360008301526148ab8161486f565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572496420697320696e60008201527f207573652e000000000000000000000000000000000000000000000000000000602082015250565b600061490e602583613cad565b9150614919826148b2565b604082019050919050565b6000602082019050818103600083015261493d81614901565b9050919050565b7f4c696e6b64726f70457363726f773a206465706f736974696e6720776974682060008201527f696e76616c69642065787069726174696f6e2e00000000000000000000000000602082015250565b60006149a0603383613cad565b91506149ab82614944565b604082019050919050565b600060208201905081810360008301526149cf81614993565b9050919050565b7f4c696e6b64726f70457363726f773a20616d6f756e74206e6f7420636f76657260008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6000614a32602383613cad565b9150614a3d826149d6565b604082019050919050565b60006020820190508181036000830152614a6181614a25565b9050919050565b7f4c696e6b64726f70457363726f773a20616d6f756e7420646f6573206e6f742060008201527f636f766572206665652e00000000000000000000000000000000000000000000602082015250565b6000614ac4602a83613cad565b9150614acf82614a68565b604082019050919050565b60006020820190508181036000830152614af381614ab7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b34826136da565b9150614b3f836136da565b925082820390506fffffffffffffffffffffffffffffffff811115614b6757614b66614afa565b5b92915050565b7f4c696e6b64726f70457363726f773a204465706f736974206e6f7420666f756e60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614bc9602183613cad565b9150614bd482614b6d565b604082019050919050565b60006020820190508181036000830152614bf881614bbc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614c4657607f821691505b602082108103614c5957614c58614bff565b5b50919050565b6000614c6b828b61432c565b601482019150614c7b828a61432c565b601482019150614c8b828961432c565b601482019150614c9b828861434d565b602082019150614cab82876143b9565b601082019150614cbb8286614383565b600f82019150614ccb828561432c565b601482019150614cdb82846143b9565b6010820191508190509998505050505050505050565b6000604082019050614d066000830185613958565b614d136020830184613a8a565b9392505050565b6000606082019050614d2f6000830186613958565b614d3c6020830185613958565b614d496040830184613611565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614dad602683613cad565b9150614db882614d51565b604082019050919050565b60006020820190508181036000830152614ddc81614da0565b9050919050565b600081519050614df281613f58565b92915050565b600060208284031215614e0e57614e0d613572565b5b6000614e1c84828501614de3565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000614e5b600383613cad565b9150614e6682614e25565b602082019050919050565b60006020820190508181036000830152614e8a81614e4e565b9050919050565b7f4c696e6b64726f70457363726f773a204665657320666f72207472616e73666560008201527f727320696e20737461626c65636f696e732073686f756c64206265207061696460208201527f20696e2074686520737461626c65636f696e20746f6b656e2e00000000000000604082015250565b6000614f13605983613cad565b9150614f1e82614e91565b606082019050919050565b60006020820190508181036000830152614f4281614f06565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2073686f756c64206e6f7460008201527f2062652061646472657373283029000000000000000000000000000000000000602082015250565b6000614fa5602e83613cad565b9150614fb082614f49565b604082019050919050565b60006020820190508181036000830152614fd481614f98565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615011601f83613cad565b915061501c82614fdb565b602082019050919050565b6000602082019050818103600083015261504081615004565b9050919050565b7f4c696e6b64726f70457363726f773a206665657320666f72204552433230207460008201527f6f6b656e732063616e206265207061696420696e206e617469766520746f6b6560208201527f6e73206f6e6c792e000000000000000000000000000000000000000000000000604082015250565b60006150c9604883613cad565b91506150d482615047565b606082019050919050565b600060208201905081810360008301526150f8816150bc565b9050919050565b7f4c696e6b64726f70457363726f773a20666565206e6f7420636f76657265642e600082015250565b6000615135602083613cad565b9150615140826150ff565b602082019050919050565b6000602082019050818103600083015261516481615128565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006151ac601c8361516b565b91506151b782615176565b601c82019050919050565b6000819050919050565b6151dd6151d882613ba1565b6151c2565b82525050565b60006151ee8261519f565b91506151fa82846151cc565b60208201915081905092915050565b7f4c696e6b64726f70457363726f773a20696e76616c69642072656465656d207060008201527f6172616d73000000000000000000000000000000000000000000000000000000602082015250565b6000615265602583613cad565b915061527082615209565b604082019050919050565b6000602082019050818103600083015261529481615258565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572206578706972656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006152f7602183613cad565b91506153028261529b565b604082019050919050565b60006020820190508181036000830152615326816152ea565b9050919050565b60006060820190506153426000830186613bab565b61534f6020830185613958565b61535c6040830184613958565b949350505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061539a60028361516b565b91506153a582615364565b600282019050919050565b60006153bb8261538d565b91506153c782856151cc565b6020820191506153d782846151cc565b6020820191508190509392505050565b7f4c696e6b64726f70457363726f773a20756e6b6e6f776e20746f6b656e20747960008201527f7065000000000000000000000000000000000000000000000000000000000000602082015250565b6000615443602283613cad565b915061544e826153e7565b604082019050919050565b6000602082019050818103600083015261547281615436565b9050919050565b7f4c696e6b64726f70457363726f773a20616464726573732073686f756c64206260008201527f65203020666f7220455448207472616e73666572730000000000000000000000602082015250565b60006154d5603583613cad565b91506154e082615479565b604082019050919050565b60006020820190508181036000830152615504816154c8565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2061646472657373206e6f60008201527f742070726f766964656420746f206d616b65207472616e736665720000000000602082015250565b6000615567603b83613cad565b91506155728261550b565b604082019050919050565b600060208201905081810360008301526155968161555a565b9050919050565b60006155a882613607565b91506155b383613607565b92508282019050808211156155cb576155ca614afa565b5b92915050565b6000819050919050565b6000819050919050565b60006156006155fb6155f6846155d1565b6155db565b613607565b9050919050565b615610816155e5565b82525050565b600060e08201905061562b600083018a613958565b6156386020830189613c40565b6156456040830188613c22565b6156526060830187615607565b61565f6080830186613c31565b61566c60a0830185613958565b61567960c0830184613c31565b98975050505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006156bb602083613cad565b91506156c682615685565b602082019050919050565b600060208201905081810360008301526156ea816156ae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615756601883613cad565b915061576182615720565b602082019050919050565b6000602082019050818103600083015261578581615749565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006157c2601f83613cad565b91506157cd8261578c565b602082019050919050565b600060208201905081810360008301526157f1816157b5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000615854602283613cad565b915061585f826157f8565b604082019050919050565b6000602082019050818103600083015261588381615847565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f5354450000000000000000000000000000000000000000000000000000000000600082015250565b60006158ef600383613cad565b91506158fa826158b9565b602082019050919050565b6000602082019050818103600083015261591e816158e2565b9050919050565b600060408201905061593a6000830185613958565b6159476020830184613611565b9392505050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000615984600283613cad565b915061598f8261594e565b602082019050919050565b600060208201905081810360008301526159b381615977565b9050919050565b60006080820190506159cf6000830187613bab565b6159dc6020830186613c22565b6159e96040830185613bab565b6159f66060830184613bab565b9594505050505056fea2646970667358221220b129cdcf9c3cce408d5858a9ad00c8fe15671ef4f7b42ab5cb83265286894a8664736f6c63430008110033","linkReferences":{},"deployedLinkReferences":{}}'), W = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"LinkdropEscrowNFT","sourceName":"contracts/LinkdropEscrowNFT.sol","abi":[{"inputs":[{"internalType":"address","name":"relayer_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Cancel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint120","name":"expiration","type":"uint120"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"address","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint128","name":"fee","type":"uint128"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"claimFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"depositFee","type":"uint128"}],"name":"UpdateFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"UpdateRelayer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeReceiver","type":"address"},{"indexed":false,"internalType":"address","name":"token_","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawFees","type":"event"},{"inputs":[],"name":"EIP712_DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_TRANSFER_TYPE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"accruedFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"decodeOnERC721ReceivedData","outputs":[{"internalType":"address","name":"transferId","type":"address"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint128","name":"feeAmount","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"depositERC1155","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"depositERC721","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint8","name":"tokenType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domain","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"getDeposit","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint8","name":"tokenType","type":"uint8"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator_","type":"address"},{"internalType":"address","name":"from_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint256","name":"amount_","type":"uint256"},{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator_","type":"address"},{"internalType":"address","name":"from_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"recoverLinkKeyId","outputs":[{"internalType":"address","name":"linkKeyId","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"linkKeyId_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"recoverSender","outputs":[{"internalType":"address","name":"sender","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"redeemRecovered","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"relayers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer_","type":"address"},{"internalType":"bool","name":"active_","type":"bool"}],"name":"setRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"verifyFeeAuthorization","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"withdrawAccruedFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"bytecode":"","deployedBytecode":"0x6080604052600436106101665760003560e01c806386fc05ba116100d1578063d6e69a001161008a578063ee2578ab11610064578063ee2578ab14610551578063f08204ad14610591578063f23a6e61146105ba578063f2fde38b146105f757610166565b8063d6e69a00146104c0578063dc0c81b5146104fd578063ecd8dc3a1461052857610166565b806386fc05ba146103915780638da5cb5b146103d25780639b1d847b146103fd578063c2fb26a61461043e578063c7977be71461046c578063ce0ea5971461049757610166565b80635300f841116101235780635300f841146102a457806357815a68146102e1578063613ae82a1461030a578063715018a61461032657806371d683721461033d578063824c1db51461036857610166565b8063073112831461016b578063150b7a02146101a85780633d6e85e6146101e55780633e05dc4c146102225780633e0dd0d91461024b57806343f070ae14610288575b600080fd5b34801561017757600080fd5b50610192600480360381019061018d91906132fb565b610620565b60405161019f9190613341565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca91906133ed565b610638565b6040516101dc91906134b0565b60405180910390f35b3480156101f157600080fd5b5061020c600480360381019061020791906134cb565b61070e565b604051610219919061353a565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190613555565b61079a565b005b34801561025757600080fd5b50610272600480360381019061026d91906135dd565b610849565b60405161027f919061353a565b60405180910390f35b6102a2600480360381019061029d91906136e0565b6108b1565b005b3480156102b057600080fd5b506102cb60048036038101906102c691906132fb565b610949565b6040516102d891906137aa565b60405180910390f35b3480156102ed57600080fd5b50610308600480360381019061030391906137c5565b610969565b005b610324600480360381019061031f9190613818565b610d95565b005b34801561033257600080fd5b5061033b610e92565b005b34801561034957600080fd5b50610352610ea6565b60405161035f91906138f3565b60405180910390f35b34801561037457600080fd5b5061038f600480360381019061038a919061390e565b610eca565b005b34801561039d57600080fd5b506103b860048036038101906103b391906137c5565b611279565b6040516103c9959493929190613988565b60405180910390f35b3480156103de57600080fd5b506103e761142b565b6040516103f4919061353a565b60405180910390f35b34801561040957600080fd5b50610424600480360381019061041f91906139db565b611455565b604051610435959493929190613a86565b60405180910390f35b34801561044a57600080fd5b506104536114b6565b6040516104639493929190613b53565b60405180910390f35b34801561047857600080fd5b50610481611604565b60405161048e91906138f3565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b99190613ba6565b611628565b005b3480156104cc57600080fd5b506104e760048036038101906104e29190613c62565b6116ea565b6040516104f491906137aa565b60405180910390f35b34801561050957600080fd5b506105126117dd565b60405161051f91906138f3565b60405180910390f35b34801561053457600080fd5b5061054f600480360381019061054a9190613d79565b611801565b005b34801561055d57600080fd5b50610578600480360381019061057391906137c5565b61189d565b6040516105889493929190613db9565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b391906132fb565b61192b565b005b3480156105c657600080fd5b506105e160048036038101906105dc9190613dfe565b611a44565b6040516105ee91906134b0565b60405180910390f35b34801561060357600080fd5b5061061e600480360381019061061991906132fb565b611b6f565b005b60076020528060005260406000206000915090505481565b60008573ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361067c5763150b7a0260e01b9050610705565b600060749050808484905010156106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90613ee4565b60405180910390fd5b60008060003660006106da8989611455565b945094509450945094506106f48b33878d88888888611bf2565b63150b7a0260e01b96505050505050505b95945050505050565b600080610740856040516020016107259190613f4c565b60405160208183030381529060405280519060200120611eac565b90506107908185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611edc565b9150509392505050565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d90613fd9565b60405180910390fd5b600061083386848461070e565b905061084185858389611f03565b505050505050565b6000806108568686612312565b90506108a68185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611edc565b915050949350505050565b6108b96123b4565b6108c93388888888888888611bf2565b8673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330886040518463ffffffff1660e01b815260040161090693929190613ff9565b600060405180830381600087803b15801561092057600080fd5b505af1158015610934573d6000803e3d6000fd5b50505050610940612403565b50505050505050565b60086020528060005260406000206000915054906101000a900460ff1681565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90613fd9565b60405180910390fd5b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdc906140a2565b60405180910390fd5b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff02191690555050610d2186888484876fffffffffffffffffffffffffffffffff1661240d565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5938a86ca33c66cb817f2fdc8d5cd4073bfe03e3f6c846c3c91e7d3f6beaae9f87858588604051610d8494939291906140c2565b60405180910390a350505050505050565b610d9d6123b4565b610dae3389898989898989896126bd565b8773ffffffffffffffffffffffffffffffffffffffff1663f242432a333089896fffffffffffffffffffffffffffffffff16600067ffffffffffffffff811115610dfb57610dfa614107565b5b6040519080825280601f01601f191660200182016040528015610e2d5781602001600182028036833780820191505090505b506040518663ffffffff1660e01b8152600401610e4e95949392919061417a565b600060405180830381600087803b158015610e6857600080fd5b505af1158015610e7c573d6000803e3d6000fd5b50505050610e88612403565b5050505050505050565b610e9a6129cb565b610ea46000612a49565b565b7fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e681565b610ed26123b4565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff16116110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990614246565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff021916905550506111fe86338484876fffffffffffffffffffffffffffffffff1661240d565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab3691e99d7a7c44b5bbf42b6113806f3fa641468fdf21dd778892ea680d04868785858860405161126194939291906140c2565b60405180910390a350505050611275612403565b5050565b600080600080600080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090508881606001518260000151836020015184604001519550955095509550955050939792965093509350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000366000868681019061146c91906142a4565b809550819650829750505050868660608989905061148a9190614326565b90601f8a8a905061149b9190614326565b926114a893929190614364565b915091509295509295909350565b60008060000180546114c7906143ce565b80601f01602080910402602001604051908101604052809291908181526020018280546114f3906143ce565b80156115405780601f1061151557610100808354040283529160200191611540565b820191906000526020600020905b81548152906001019060200180831161152357829003601f168201915b505050505090806001018054611555906143ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611581906143ce565b80156115ce5780601f106115a3576101008083540402835291602001916115ce565b820191906000526020600020905b8154815290600101906020018083116115b157829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90613fd9565b60405180910390fd5b60006116c188868661070e565b905060006116d182888686610849565b90506116df8189898c611f03565b505050505050505050565b60008061172a8c8c8c8c8c8c8c8c60405160200161170f98979695949392919061448c565b60405160208183030381529060405280519060200120611eac565b9050600061177c8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611edc565b9050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16925050509a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6118096129cb565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f34e1cf41794bd5b78c6251cacf103835b835d3ad103d8471ae5f3df532ff3112828260405161189192919061451e565b60405180910390a15050565b600660205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a90046effffffffffffffffffffffffffffff169080600101601f9054906101000a900460ff16905084565b6119336129cb565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146119f657600190505b611a0483338360008661240d565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e4338484604051611a3793929190613ff9565b60405180910390a1505050565b60006fffffffffffffffffffffffffffffffff841115611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a90906145b9565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611adb5763f23a6e6160e01b9050611b65565b60006074905080848490501015611b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1e90613ee4565b60405180910390fd5b6000806000366000611b398989611455565b94509450945094509450611b548c33878e8e898989896126bd565b63f23a6e6160e01b96505050505050505b9695505050505050565b611b776129cb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd9061464b565b60405180910390fd5b611bef81612a49565b50565b6000611c088989898960018a60008b8b8b6116ea565b905080611c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c41906146dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603611cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb09061476f565b60405180910390fd5b6000600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614611de6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddd90614801565b60405180910390fd5b42856effffffffffffffffffffffffffffff1611611e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3090614893565b60405180910390fd5b836fffffffffffffffffffffffffffffffff163414611e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e84906148ff565b60405180910390fd5b611ea18989898960018a600260008c612b0f565b505050505050505050565b600081604051602001611ebf9190614997565b604051602081830303815290604052805190602001209050919050565b6000806000611eeb8585612d9d565b91509150611ef881612dee565b819250505092915050565b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff16116120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea90614a2f565b60405180910390fd5b83604001516effffffffffffffffffffffffffffff16421061214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214190614ac1565b60405180910390fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061228687868484876fffffffffffffffffffffffffffffffff1661240d565b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167ff81d021f277085e9e959eecea61062bd1eff62d82edad55732d811abb5e549698986868960405161230094939291906140c2565b60405180910390a45050505050505050565b6000807fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e6848460405160200161234a93929190614ae1565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000081604051602001612395929190614b64565b6040516020818303038152906040528051906020012091505092915050565b6002600554036123f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f090614be7565b60405180910390fd5b6002600581905550565b6001600581905550565b60048360ff1610612453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244a90614c79565b60405180910390fd5b60008360ff16036124dc57600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146124cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c490614d0b565b60405180910390fd5b6124d78482612f54565b6126b6565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361254b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254290614d9d565b60405180910390fd5b60018360ff160361256657612561858583613054565b6126b6565b60028360ff16036125e5578473ffffffffffffffffffffffffffffffffffffffff166342842e0e3086856040518463ffffffff1660e01b81526004016125ae93929190613ff9565b600060405180830381600087803b1580156125c857600080fd5b505af11580156125dc573d6000803e3d6000fd5b505050506126b6565b60038360ff16036126b5578473ffffffffffffffffffffffffffffffffffffffff1663f242432a30868585600067ffffffffffffffff81111561262b5761262a614107565b5b6040519080825280601f01601f19166020018201604052801561265d5781602001600182028036833780820191505090505b506040518663ffffffff1660e01b815260040161267e95949392919061417a565b600060405180830381600087803b15801561269857600080fd5b505af11580156126ac573d6000803e3d6000fd5b505050506126b6565b5b5050505050565b60006126d28a8a8a8a8a8a60008b8b8b6116ea565b90506000866fffffffffffffffffffffffffffffffff1603612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272090614e09565b60405180910390fd5b80612769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612760906146dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036127d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cf9061476f565b60405180910390fd5b6000600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614612905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fc90614801565b60405180910390fd5b42856effffffffffffffffffffffffffffff1611612958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294f90614893565b60405180910390fd5b836fffffffffffffffffffffffffffffffff1634146129ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a3906148ff565b60405180910390fd5b6129bf8a8a8a8a8a8a600360008c612b0f565b50505050505050505050565b6129d36131a9565b73ffffffffffffffffffffffffffffffffffffffff166129f161142b565b73ffffffffffffffffffffffffffffffffffffffff1614612a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3e90614e75565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060800160405280878152602001866fffffffffffffffffffffffffffffffff168152602001856effffffffffffffffffffffffffffff1681526020018460ff16815250600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550606082015181600101601f6101000a81548160ff021916908360ff160217905550905050806fffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d1a9190614e95565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f1d48f3ec0544fd684c5a9331f70963c5401a4fb089b9475628f52911dce6936e8987878b8b8989604051612d8a9796959493929190614ec9565b60405180910390a3505050505050505050565b6000806041835103612dde5760008060006020860151925060408601519150606086015160001a9050612dd2878285856131b1565b94509450505050612de7565b60006002915091505b9250929050565b60006004811115612e0257612e01614f38565b5b816004811115612e1557612e14614f38565b5b0315612f515760016004811115612e2f57612e2e614f38565b5b816004811115612e4257612e41614f38565b5b03612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7990614fb3565b60405180910390fd5b60026004811115612e9657612e95614f38565b5b816004811115612ea957612ea8614f38565b5b03612ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee09061501f565b60405180910390fd5b60036004811115612efd57612efc614f38565b5b816004811115612f1057612f0f614f38565b5b03612f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f47906150b1565b60405180910390fd5b5b50565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612f8957612f88614107565b5b6040519080825280601f01601f191660200182016040528015612fbb5781602001600182028036833780820191505090505b50604051612fc9919061510d565b60006040518083038185875af1925050503d8060008114613006576040519150601f19603f3d011682016040523d82523d6000602084013e61300b565b606091505b505090508061304f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304690615170565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401613089929190615190565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516130f3919061510d565b6000604051808303816000865af19150503d8060008114613130576040519150601f19603f3d011682016040523d82523d6000602084013e613135565b606091505b5091509150818015613163575060008151148061316257508080602001905181019061316191906151ce565b5b5b6131a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161319990615247565b60405180910390fd5b5050505050565b600033905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156131ec57600060039150915061328a565b6000600187878787604051600081526020016040526040516132119493929190615267565b6020604051602081039080840390855afa158015613233573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036132815760006001925092505061328a565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132c88261329d565b9050919050565b6132d8816132bd565b81146132e357600080fd5b50565b6000813590506132f5816132cf565b92915050565b60006020828403121561331157613310613293565b5b600061331f848285016132e6565b91505092915050565b6000819050919050565b61333b81613328565b82525050565b60006020820190506133566000830184613332565b92915050565b61336581613328565b811461337057600080fd5b50565b6000813590506133828161335c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126133ad576133ac613388565b5b8235905067ffffffffffffffff8111156133ca576133c961338d565b5b6020830191508360018202830111156133e6576133e5613392565b5b9250929050565b60008060008060006080868803121561340957613408613293565b5b6000613417888289016132e6565b9550506020613428888289016132e6565b945050604061343988828901613373565b935050606086013567ffffffffffffffff81111561345a57613459613298565b5b61346688828901613397565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134aa81613475565b82525050565b60006020820190506134c560008301846134a1565b92915050565b6000806000604084860312156134e4576134e3613293565b5b60006134f2868287016132e6565b935050602084013567ffffffffffffffff81111561351357613512613298565b5b61351f86828701613397565b92509250509250925092565b613534816132bd565b82525050565b600060208201905061354f600083018461352b565b92915050565b60008060008060006080868803121561357157613570613293565b5b600061357f888289016132e6565b9550506020613590888289016132e6565b94505060406135a1888289016132e6565b935050606086013567ffffffffffffffff8111156135c2576135c1613298565b5b6135ce88828901613397565b92509250509295509295909350565b600080600080606085870312156135f7576135f6613293565b5b6000613605878288016132e6565b9450506020613616878288016132e6565b935050604085013567ffffffffffffffff81111561363757613636613298565b5b61364387828801613397565b925092505092959194509250565b60006effffffffffffffffffffffffffffff82169050919050565b61367581613651565b811461368057600080fd5b50565b6000813590506136928161366c565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6136bd81613698565b81146136c857600080fd5b50565b6000813590506136da816136b4565b92915050565b600080600080600080600060c0888a0312156136ff576136fe613293565b5b600061370d8a828b016132e6565b975050602061371e8a828b016132e6565b965050604061372f8a828b01613373565b95505060606137408a828b01613683565b94505060806137518a828b016136cb565b93505060a088013567ffffffffffffffff81111561377257613771613298565b5b61377e8a828b01613397565b925092505092959891949750929550565b60008115159050919050565b6137a48161378f565b82525050565b60006020820190506137bf600083018461379b565b92915050565b6000806000606084860312156137de576137dd613293565b5b60006137ec868287016132e6565b93505060206137fd868287016132e6565b925050604061380e868287016132e6565b9150509250925092565b60008060008060008060008060e0898b03121561383857613837613293565b5b60006138468b828c016132e6565b98505060206138578b828c016132e6565b97505060406138688b828c01613373565b96505060606138798b828c016136cb565b955050608061388a8b828c01613683565b94505060a061389b8b828c016136cb565b93505060c089013567ffffffffffffffff8111156138bc576138bb613298565b5b6138c88b828c01613397565b92509250509295985092959890939650565b6000819050919050565b6138ed816138da565b82525050565b600060208201905061390860008301846138e4565b92915050565b6000806040838503121561392557613924613293565b5b6000613933858286016132e6565b9250506020613944858286016132e6565b9150509250929050565b600060ff82169050919050565b6139648161394e565b82525050565b61397381613698565b82525050565b61398281613651565b82525050565b600060a08201905061399d600083018861352b565b6139aa602083018761395b565b6139b76040830186613332565b6139c4606083018561396a565b6139d16080830184613979565b9695505050505050565b600080602083850312156139f2576139f1613293565b5b600083013567ffffffffffffffff811115613a1057613a0f613298565b5b613a1c85828601613397565b92509250509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000613a658385613a28565b9350613a72838584613a39565b613a7b83613a48565b840190509392505050565b6000608082019050613a9b600083018861352b565b613aa86020830187613979565b613ab5604083018661396a565b8181036060830152613ac8818486613a59565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b0e578082015181840152602081019050613af3565b60008484015250505050565b6000613b2582613ad4565b613b2f8185613adf565b9350613b3f818560208601613af0565b613b4881613a48565b840191505092915050565b60006080820190508181036000830152613b6d8187613b1a565b90508181036020830152613b818186613b1a565b9050613b906040830185613332565b613b9d606083018461352b565b95945050505050565b600080600080600080600060a0888a031215613bc557613bc4613293565b5b6000613bd38a828b016132e6565b9750506020613be48a828b016132e6565b9650506040613bf58a828b016132e6565b955050606088013567ffffffffffffffff811115613c1657613c15613298565b5b613c228a828b01613397565b9450945050608088013567ffffffffffffffff811115613c4557613c44613298565b5b613c518a828b01613397565b925092505092959891949750929550565b6000806000806000806000806000806101208b8d031215613c8657613c85613293565b5b6000613c948d828e016132e6565b9a50506020613ca58d828e016132e6565b9950506040613cb68d828e016132e6565b9850506060613cc78d828e01613373565b9750506080613cd88d828e016136cb565b96505060a0613ce98d828e01613683565b95505060c0613cfa8d828e016132e6565b94505060e0613d0b8d828e016136cb565b9350506101008b013567ffffffffffffffff811115613d2d57613d2c613298565b5b613d398d828e01613397565b92509250509295989b9194979a5092959850565b613d568161378f565b8114613d6157600080fd5b50565b600081359050613d7381613d4d565b92915050565b60008060408385031215613d9057613d8f613293565b5b6000613d9e858286016132e6565b9250506020613daf85828601613d64565b9150509250929050565b6000608082019050613dce6000830187613332565b613ddb602083018661396a565b613de86040830185613979565b613df5606083018461395b565b95945050505050565b60008060008060008060a08789031215613e1b57613e1a613293565b5b6000613e2989828a016132e6565b9650506020613e3a89828a016132e6565b9550506040613e4b89828a01613373565b9450506060613e5c89828a01613373565b935050608087013567ffffffffffffffff811115613e7d57613e7c613298565b5b613e8989828a01613397565b92509250509295509295509295565b7f44617461206c656e67746820697320696e73756666696369656e740000000000600082015250565b6000613ece601b83613adf565b9150613ed982613e98565b602082019050919050565b60006020820190508181036000830152613efd81613ec1565b9050919050565b60008160601b9050919050565b6000613f1c82613f04565b9050919050565b6000613f2e82613f11565b9050919050565b613f46613f41826132bd565b613f23565b82525050565b6000613f588284613f35565b60148201915081905092915050565b7f4c696e6b64726f70457363726f773a206d73672e73656e646572206973206e6f60008201527f742072656c617965722e00000000000000000000000000000000000000000000602082015250565b6000613fc3602a83613adf565b9150613fce82613f67565b604082019050919050565b60006020820190508181036000830152613ff281613fb6565b9050919050565b600060608201905061400e600083018661352b565b61401b602083018561352b565b6140286040830184613332565b949350505050565b7f4c696e6b64726f70457363726f773a20696e76616c6964207472616e7366657260008201527f2049440000000000000000000000000000000000000000000000000000000000602082015250565b600061408c602383613adf565b915061409782614030565b604082019050919050565b600060208201905081810360008301526140bb8161407f565b9050919050565b60006080820190506140d7600083018761352b565b6140e4602083018661395b565b6140f16040830185613332565b6140fe606083018461396a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600061414c82614136565b6141568185613a28565b9350614166818560208601613af0565b61416f81613a48565b840191505092915050565b600060a08201905061418f600083018861352b565b61419c602083018761352b565b6141a96040830186613332565b6141b66060830185613332565b81810360808301526141c88184614141565b90509695505050505050565b7f4c696e6b64726f70457363726f773a204465706f736974206e6f7420666f756e60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614230602183613adf565b915061423b826141d4565b604082019050919050565b6000602082019050818103600083015261425f81614223565b9050919050565b60006142718261329d565b9050919050565b61428181614266565b811461428c57600080fd5b50565b60008135905061429e81614278565b92915050565b6000806000606084860312156142bd576142bc613293565b5b60006142cb8682870161428f565b93505060206142dc86828701613683565b92505060406142ed868287016136cb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061433182613328565b915061433c83613328565b9250828203905081811115614354576143536142f7565b5b92915050565b600080fd5b600080fd5b600080858511156143785761437761435a565b5b838611156143895761438861435f565b5b6001850283019150848603905094509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806143e657607f821691505b6020821081036143f9576143f861439f565b5b50919050565b6000819050919050565b61441a61441582613328565b6143ff565b82525050565b60008160801b9050919050565b600061443882614420565b9050919050565b61445061444b82613698565b61442d565b82525050565b60008160881b9050919050565b600061446e82614456565b9050919050565b61448661448182613651565b614463565b82525050565b6000614498828b613f35565b6014820191506144a8828a613f35565b6014820191506144b88289613f35565b6014820191506144c88288614409565b6020820191506144d8828761443f565b6010820191506144e88286614475565b600f820191506144f88285613f35565b601482019150614508828461443f565b6010820191508190509998505050505050505050565b6000604082019050614533600083018561352b565b614540602083018461379b565b9392505050565b7f616d6f756e742065786365656473206d6178696d756d20616c6c6f776564207660008201527f616c756520666f722075696e7431323800000000000000000000000000000000602082015250565b60006145a3603083613adf565b91506145ae82614547565b604082019050919050565b600060208201905081810360008301526145d281614596565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614635602683613adf565b9150614640826145d9565b604082019050919050565b6000602082019050818103600083015261466481614628565b9050919050565b7f4c696e6b64726f70457363726f773a2046656573206e6f7420617574686f726960008201527f7a65642e00000000000000000000000000000000000000000000000000000000602082015250565b60006146c7602483613adf565b91506146d28261466b565b604082019050919050565b600060208201905081810360008301526146f6816146ba565b9050919050565b7f4c696e6b64726f70457363726f773a2063616e2774206265206164647265737360008201527f283029206173206120746f6b656e2e0000000000000000000000000000000000602082015250565b6000614759602f83613adf565b9150614764826146fd565b604082019050919050565b600060208201905081810360008301526147888161474c565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572496420697320696e60008201527f207573652e000000000000000000000000000000000000000000000000000000602082015250565b60006147eb602583613adf565b91506147f68261478f565b604082019050919050565b6000602082019050818103600083015261481a816147de565b9050919050565b7f4c696e6b64726f70457363726f773a206465706f736974696e6720776974682060008201527f696e76616c69642065787069726174696f6e2e00000000000000000000000000602082015250565b600061487d603383613adf565b915061488882614821565b604082019050919050565b600060208201905081810360008301526148ac81614870565b9050919050565b7f4c696e6b64726f70457363726f773a20666565206e6f7420636f76657265642e600082015250565b60006148e9602083613adf565b91506148f4826148b3565b602082019050919050565b60006020820190508181036000830152614918816148dc565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000614960601c8361491f565b915061496b8261492a565b601c82019050919050565b6000819050919050565b61499161498c826138da565b614976565b82525050565b60006149a282614953565b91506149ae8284614980565b60208201915081905092915050565b7f4c696e6b64726f70457363726f773a20696e76616c69642072656465656d207060008201527f6172616d73000000000000000000000000000000000000000000000000000000602082015250565b6000614a19602583613adf565b9150614a24826149bd565b604082019050919050565b60006020820190508181036000830152614a4881614a0c565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572206578706972656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614aab602183613adf565b9150614ab682614a4f565b604082019050919050565b60006020820190508181036000830152614ada81614a9e565b9050919050565b6000606082019050614af660008301866138e4565b614b03602083018561352b565b614b10604083018461352b565b949350505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b4e60028361491f565b9150614b5982614b18565b600282019050919050565b6000614b6f82614b41565b9150614b7b8285614980565b602082019150614b8b8284614980565b6020820191508190509392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614bd1601f83613adf565b9150614bdc82614b9b565b602082019050919050565b60006020820190508181036000830152614c0081614bc4565b9050919050565b7f4c696e6b64726f70457363726f773a20756e6b6e6f776e20746f6b656e20747960008201527f7065000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c63602283613adf565b9150614c6e82614c07565b604082019050919050565b60006020820190508181036000830152614c9281614c56565b9050919050565b7f4c696e6b64726f70457363726f773a20616464726573732073686f756c64206260008201527f65203020666f7220455448207472616e73666572730000000000000000000000602082015250565b6000614cf5603583613adf565b9150614d0082614c99565b604082019050919050565b60006020820190508181036000830152614d2481614ce8565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2061646472657373206e6f60008201527f742070726f766964656420746f206d616b65207472616e736665720000000000602082015250565b6000614d87603b83613adf565b9150614d9282614d2b565b604082019050919050565b60006020820190508181036000830152614db681614d7a565b9050919050565b7f416d6f756e74206973206e6f742070726f766964656400000000000000000000600082015250565b6000614df3601683613adf565b9150614dfe82614dbd565b602082019050919050565b60006020820190508181036000830152614e2281614de6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614e5f602083613adf565b9150614e6a82614e29565b602082019050919050565b60006020820190508181036000830152614e8e81614e52565b9050919050565b6000614ea082613328565b9150614eab83613328565b9250828201905080821115614ec357614ec26142f7565b5b92915050565b600060e082019050614ede600083018a61352b565b614eeb6020830189613979565b614ef8604083018861395b565b614f056060830187613332565b614f12608083018661396a565b614f1f60a083018561352b565b614f2c60c083018461396a565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000614f9d601883613adf565b9150614fa882614f67565b602082019050919050565b60006020820190508181036000830152614fcc81614f90565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000615009601f83613adf565b915061501482614fd3565b602082019050919050565b6000602082019050818103600083015261503881614ffc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061509b602283613adf565b91506150a68261503f565b604082019050919050565b600060208201905081810360008301526150ca8161508e565b9050919050565b600081905092915050565b60006150e782614136565b6150f181856150d1565b9350615101818560208601613af0565b80840191505092915050565b600061511982846150dc565b915081905092915050565b7f5354450000000000000000000000000000000000000000000000000000000000600082015250565b600061515a600383613adf565b915061516582615124565b602082019050919050565b600060208201905081810360008301526151898161514d565b9050919050565b60006040820190506151a5600083018561352b565b6151b26020830184613332565b9392505050565b6000815190506151c881613d4d565b92915050565b6000602082840312156151e4576151e3613293565b5b60006151f2848285016151b9565b91505092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000615231600283613adf565b915061523c826151fb565b602082019050919050565b6000602082019050818103600083015261526081615224565b9050919050565b600060808201905061527c60008301876138e4565b615289602083018661395b565b61529660408301856138e4565b6152a360608301846138e4565b9594505050505056fea26469706673582212205902f9eb2e8f7d9e089067d5f659f17d77aeb410a8f14bd19c3995c7e63f1eb164736f6c63430008110033","linkReferences":{},"deployedLinkReferences":{}}');
                        function $(f) {
                            if (!Number.isSafeInteger(f) || f < 0) throw new Error("Wrong positive integer: ".concat(f));
                        }
                        function J(f) {
                            if (!(f instanceof Uint8Array)) throw new Error("Expected Uint8Array");
                            for(var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)t[n - 1] = arguments[n];
                            if (t.length > 0 && !t.includes(f.length)) throw new Error("Expected Uint8Array of length ".concat(t, ", not of length=").concat(f.length));
                        }
                        function Y(f) {
                            if ("function" != typeof f || "function" != typeof f.create) throw new Error("Hash should be wrapped by utils.wrapConstructor");
                            $(f.outputLen), $(f.blockLen);
                        }
                        function q(f) {
                            let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                            if (f.destroyed) throw new Error("Hash instance has been destroyed");
                            if (e && f.finished) throw new Error("Hash#digest() has already been called");
                        }
                        function Z(f, e) {
                            J(f);
                            const t = e.outputLen;
                            if (f.length < t) throw new Error("digestInto() expects output buffer of length at least ".concat(t));
                        }
                        const X = BigInt(2 ** 32 - 1), Q = BigInt(32);
                        function ff(f) {
                            return arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? {
                                h: Number(f & X),
                                l: Number(f >> Q & X)
                            } : {
                                h: 0 | Number(f >> Q & X),
                                l: 0 | Number(f & X)
                            };
                        }
                        function ef(f) {
                            let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], t = new Uint32Array(f.length), n = new Uint32Array(f.length);
                            for(let r = 0; r < f.length; r++){
                                const { h: a, l: i } = ff(f[r], e);
                                [t[r], n[r]] = [
                                    a,
                                    i
                                ];
                            }
                            return [
                                t,
                                n
                            ];
                        }
                        const tf = (f, e, t)=>f << t | e >>> 32 - t, nf = (f, e, t)=>e << t | f >>> 32 - t, rf = (f, e, t)=>e << t - 32 | f >>> 64 - t, af = (f, e, t)=>f << t - 32 | e >>> 64 - t, sf = {
                            fromBig: ff,
                            split: ef,
                            toBig: (f, e)=>BigInt(f >>> 0) << Q | BigInt(e >>> 0),
                            shrSH: (f, e, t)=>f >>> t,
                            shrSL: (f, e, t)=>f << 32 - t | e >>> t,
                            rotrSH: (f, e, t)=>f >>> t | e << 32 - t,
                            rotrSL: (f, e, t)=>f << 32 - t | e >>> t,
                            rotrBH: (f, e, t)=>f << 64 - t | e >>> t - 32,
                            rotrBL: (f, e, t)=>f >>> t - 32 | e << 64 - t,
                            rotr32H: (f, e)=>e,
                            rotr32L: (f, e)=>f,
                            rotlSH: tf,
                            rotlSL: nf,
                            rotlBH: rf,
                            rotlBL: af,
                            add: function(f, e, t, n) {
                                const r = (e >>> 0) + (n >>> 0);
                                return {
                                    h: f + t + (r / 2 ** 32 | 0) | 0,
                                    l: 0 | r
                                };
                            },
                            add3L: (f, e, t)=>(f >>> 0) + (e >>> 0) + (t >>> 0),
                            add3H: (f, e, t, n)=>e + t + n + (f / 2 ** 32 | 0) | 0,
                            add4L: (f, e, t, n)=>(f >>> 0) + (e >>> 0) + (t >>> 0) + (n >>> 0),
                            add4H: (f, e, t, n, r)=>e + t + n + r + (f / 2 ** 32 | 0) | 0,
                            add5H: (f, e, t, n, r, a)=>e + t + n + r + a + (f / 2 ** 32 | 0) | 0,
                            add5L: (f, e, t, n, r)=>(f >>> 0) + (e >>> 0) + (t >>> 0) + (n >>> 0) + (r >>> 0)
                        }, of = "object" == typeof globalThis && "crypto" in globalThis ? globalThis.crypto : void 0, bf = (f)=>f instanceof Uint8Array, cf = (f)=>new Uint32Array(f.buffer, f.byteOffset, Math.floor(f.byteLength / 4)), df = (f)=>new DataView(f.buffer, f.byteOffset, f.byteLength), uf = (f, e)=>f << 32 - e | f >>> e;
                        if (68 !== new Uint8Array(new Uint32Array([
                            287454020
                        ]).buffer)[0]) throw new Error("Non little-endian hardware is not supported");
                        const lf = async ()=>{};
                        async function hf(f, e, t) {
                            let n = Date.now();
                            for(let r = 0; r < f; r++){
                                t(r);
                                const f = Date.now() - n;
                                f >= 0 && f < e || (await lf(), n += f);
                            }
                        }
                        function pf(f) {
                            if ("string" == typeof f && (f = function(f) {
                                if ("string" != typeof f) throw new Error("utf8ToBytes expected string, got ".concat(typeof f));
                                return new Uint8Array((new TextEncoder).encode(f));
                            }(f)), !bf(f)) throw new Error("expected Uint8Array, got ".concat(typeof f));
                            return f;
                        }
                        class yf {
                            clone() {
                                return this._cloneInto();
                            }
                        }
                        const mf = {}.toString;
                        function gf(f, e) {
                            if (void 0 !== e && "[object Object]" !== mf.call(e)) throw new Error("Options should be object or undefined");
                            return Object.assign(f, e);
                        }
                        function wf(f) {
                            const e = (e)=>f().update(pf(e)).digest(), t = f();
                            return e.outputLen = t.outputLen, e.blockLen = t.blockLen, e.create = ()=>f(), e;
                        }
                        function vf() {
                            let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 32;
                            if (of && "function" == typeof of.getRandomValues) return of.getRandomValues(new Uint8Array(f));
                            throw new Error("crypto.getRandomValues must be defined");
                        }
                        const [Ef, Tf, Af] = [
                            [],
                            [],
                            []
                        ], xf = BigInt(0), If = BigInt(1), kf = BigInt(2), Of = BigInt(7), _f = BigInt(256), Pf = BigInt(113);
                        for(let f = 0, e = If, t = 1, n = 0; f < 24; f++){
                            [t, n] = [
                                n,
                                (2 * t + 3 * n) % 5
                            ], Ef.push(2 * (5 * n + t)), Tf.push((f + 1) * (f + 2) / 2 % 64);
                            let r = xf;
                            for(let f = 0; f < 7; f++)e = (e << If ^ (e >> Of) * Pf) % _f, e & kf && (r ^= If << (If << BigInt(f)) - If);
                            Af.push(r);
                        }
                        const [Sf, Rf] = ef(Af, !0), Nf = (f, e, t)=>t > 32 ? rf(f, e, t) : tf(f, e, t), Cf = (f, e, t)=>t > 32 ? af(f, e, t) : nf(f, e, t);
                        class Uf extends yf {
                            constructor(f, e, t){
                                let n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 24;
                                if (super(), this.blockLen = f, this.suffix = e, this.outputLen = t, this.enableXOF = n, this.rounds = r, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, $(t), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
                                this.state = new Uint8Array(200), this.state32 = cf(this.state);
                            }
                            keccak() {
                                !function(f) {
                                    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 24;
                                    const t = new Uint32Array(10);
                                    for(let n = 24 - e; n < 24; n++){
                                        for(let e = 0; e < 10; e++)t[e] = f[e] ^ f[e + 10] ^ f[e + 20] ^ f[e + 30] ^ f[e + 40];
                                        for(let e = 0; e < 10; e += 2){
                                            const n = (e + 8) % 10, r = (e + 2) % 10, a = t[r], i = t[r + 1], s = Nf(a, i, 1) ^ t[n], o = Cf(a, i, 1) ^ t[n + 1];
                                            for(let t = 0; t < 50; t += 10)f[e + t] ^= s, f[e + t + 1] ^= o;
                                        }
                                        let e = f[2], r = f[3];
                                        for(let t = 0; t < 24; t++){
                                            const n = Tf[t], a = Nf(e, r, n), i = Cf(e, r, n), s = Ef[t];
                                            e = f[s], r = f[s + 1], f[s] = a, f[s + 1] = i;
                                        }
                                        for(let e = 0; e < 50; e += 10){
                                            for(let n = 0; n < 10; n++)t[n] = f[e + n];
                                            for(let n = 0; n < 10; n++)f[e + n] ^= ~t[(n + 2) % 10] & t[(n + 4) % 10];
                                        }
                                        f[0] ^= Sf[n], f[1] ^= Rf[n];
                                    }
                                    t.fill(0);
                                }(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
                            }
                            update(f) {
                                q(this);
                                const { blockLen: e, state: t } = this, n = (f = pf(f)).length;
                                for(let r = 0; r < n;){
                                    const a = Math.min(e - this.pos, n - r);
                                    for(let e = 0; e < a; e++)t[this.pos++] ^= f[r++];
                                    this.pos === e && this.keccak();
                                }
                                return this;
                            }
                            finish() {
                                if (this.finished) return;
                                this.finished = !0;
                                const { state: f, suffix: e, pos: t, blockLen: n } = this;
                                f[t] ^= e, !!(128 & e) && t === n - 1 && this.keccak(), f[n - 1] ^= 128, this.keccak();
                            }
                            writeInto(f) {
                                q(this, !1), J(f), this.finish();
                                const e = this.state, { blockLen: t } = this;
                                for(let n = 0, r = f.length; n < r;){
                                    this.posOut >= t && this.keccak();
                                    const a = Math.min(t - this.posOut, r - n);
                                    f.set(e.subarray(this.posOut, this.posOut + a), n), this.posOut += a, n += a;
                                }
                                return f;
                            }
                            xofInto(f) {
                                if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
                                return this.writeInto(f);
                            }
                            xof(f) {
                                return $(f), this.xofInto(new Uint8Array(f));
                            }
                            digestInto(f) {
                                if (Z(f, this), this.finished) throw new Error("digest() was already called");
                                return this.writeInto(f), this.destroy(), f;
                            }
                            digest() {
                                return this.digestInto(new Uint8Array(this.outputLen));
                            }
                            destroy() {
                                this.destroyed = !0, this.state.fill(0);
                            }
                            _cloneInto(f) {
                                const { blockLen: e, suffix: t, outputLen: n, rounds: r, enableXOF: a } = this;
                                return f || (f = new Uf(e, t, n, a, r)), f.state32.set(this.state32), f.pos = this.pos, f.posOut = this.posOut, f.finished = this.finished, f.rounds = r, f.suffix = t, f.outputLen = n, f.enableXOF = a, f.destroyed = this.destroyed, f;
                            }
                        }
                        const Lf = wf(()=>new Uf(136, 1, 32));
                        let Bf = !1;
                        const Df = function(f) {
                            return Lf(f);
                        };
                        let Ff = Df;
                        function Mf(f) {
                            const e = w(f, "data");
                            return x(Ff(e));
                        }
                        Mf._ = Df, Mf.lock = function() {
                            Bf = !0;
                        }, Mf.register = function(f) {
                            if (Bf) throw new TypeError("keccak256 is locked");
                            Ff = f;
                        }, Object.freeze(Mf);
                        const jf = BigInt(0), Kf = BigInt(36);
                        function zf(f) {
                            const e = (f = f.toLowerCase()).substring(2).split(""), t = new Uint8Array(40);
                            for(let f = 0; f < 40; f++)t[f] = e[f].charCodeAt(0);
                            const n = w(Mf(t));
                            for(let f = 0; f < 40; f += 2)n[f >> 1] >> 4 >= 8 && (e[f] = e[f].toUpperCase()), (15 & n[f >> 1]) >= 8 && (e[f + 1] = e[f + 1].toUpperCase());
                            return "0x" + e.join("");
                        }
                        const Vf = {};
                        for(let f = 0; f < 10; f++)Vf[String(f)] = String(f);
                        for(let f = 0; f < 26; f++)Vf[String.fromCharCode(65 + f)] = String(10 + f);
                        const Gf = function() {
                            const f = {};
                            for(let e = 0; e < 36; e++)f["0123456789abcdefghijklmnopqrstuvwxyz"[e]] = BigInt(e);
                            return f;
                        }();
                        function Hf(f) {
                            if (l("string" == typeof f, "invalid address", "address", f), f.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
                                f.startsWith("0x") || (f = "0x" + f);
                                const e = zf(f);
                                return l(!f.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || e === f, "bad address checksum", "address", f), e;
                            }
                            if (f.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                                l(f.substring(2, 4) === function(f) {
                                    let e = (f = (f = f.toUpperCase()).substring(4) + f.substring(0, 2) + "00").split("").map((f)=>Vf[f]).join("");
                                    for(; e.length >= 15;){
                                        let f = e.substring(0, 15);
                                        e = parseInt(f, 10) % 97 + e.substring(f.length);
                                    }
                                    let t = String(98 - parseInt(e, 10) % 97);
                                    for(; t.length < 2;)t = "0" + t;
                                    return t;
                                }(f), "bad icap checksum", "address", f);
                                let e = (function(f) {
                                    f = f.toLowerCase();
                                    let e = jf;
                                    for(let t = 0; t < f.length; t++)e = e * Kf + Gf[f[t]];
                                    return e;
                                })(f.substring(4)).toString(16);
                                for(; e.length < 40;)e = "0" + e;
                                return zf("0x" + e);
                            }
                            l(!1, "invalid address", "address", f);
                        }
                        function Wf(f, e, t, n, r) {
                            if ("BAD_PREFIX" === f || "UNEXPECTED_CONTINUE" === f) {
                                let f = 0;
                                for(let n = e + 1; n < t.length && t[n] >> 6 == 2; n++)f++;
                                return f;
                            }
                            return "OVERRUN" === f ? t.length - e - 1 : 0;
                        }
                        const $f = Object.freeze({
                            error: function(f, e, t, n, r) {
                                l(!1, "invalid codepoint at offset ".concat(e, "; ").concat(f), "bytes", t);
                            },
                            ignore: Wf,
                            replace: function(f, e, t, n, r) {
                                return "OVERLONG" === f ? (l("number" == typeof r, "invalid bad code point for replacement", "badCodepoint", r), n.push(r), 0) : (n.push(65533), Wf(f, e, t));
                            }
                        });
                        function Jf(f, e) {
                            null != e && (y(e), f = f.normalize(e));
                            let t = [];
                            for(let e = 0; e < f.length; e++){
                                const n = f.charCodeAt(e);
                                if (n < 128) t.push(n);
                                else if (n < 2048) t.push(n >> 6 | 192), t.push(63 & n | 128);
                                else if (55296 == (64512 & n)) {
                                    e++;
                                    const r = f.charCodeAt(e);
                                    l(e < f.length && 56320 == (64512 & r), "invalid surrogate pair", "str", f);
                                    const a = 65536 + ((1023 & n) << 10) + (1023 & r);
                                    t.push(a >> 18 | 240), t.push(a >> 12 & 63 | 128), t.push(a >> 6 & 63 | 128), t.push(63 & a | 128);
                                } else t.push(n >> 12 | 224), t.push(n >> 6 & 63 | 128), t.push(63 & n | 128);
                            }
                            return new Uint8Array(t);
                        }
                        const Yf = new RegExp("^bytes([0-9]+)$"), qf = new RegExp("^(u?int)([0-9]*)$"), Zf = new RegExp("^(.*)\\[([0-9]*)\\]$");
                        function Xf(f, e, t) {
                            switch(f){
                                case "address":
                                    return w(t ? P(e, 32) : Hf(e));
                                case "string":
                                    return Jf(e);
                                case "bytes":
                                    return w(e);
                                case "bool":
                                    return e = e ? "0x01" : "0x00", w(t ? P(e, 32) : e);
                            }
                            let n = f.match(qf);
                            if (n) {
                                let r = "int" === n[1], a = parseInt(n[2] || "256");
                                return l((!n[2] || n[2] === String(a)) && a % 8 == 0 && 0 !== a && a <= 256, "invalid number type", "type", f), t && (a = 256), r && (e = U(e, a)), w(P(z(e), a / 8));
                            }
                            if (n = f.match(Yf), n) {
                                const r = parseInt(n[1]);
                                return l(String(r) === n[1] && 0 !== r && r <= 32, "invalid bytes type", "type", f), l(k(e) === r, "invalid value for ".concat(f), "value", e), t ? w(S(e, 32)) : e;
                            }
                            if (n = f.match(Zf), n && Array.isArray(e)) {
                                const t = n[1];
                                l(parseInt(n[2] || String(e.length)) === e.length, "invalid array length for ".concat(f), "value", e);
                                const r = [];
                                return e.forEach(function(f) {
                                    r.push(Xf(t, f, !0));
                                }), w(I(r));
                            }
                            l(!1, "invalid type", "type", f);
                        }
                        function Qf(f, e) {
                            l(f.length === e.length, "wrong number of values; expected ${ types.length }", "values", e);
                            const t = [];
                            return f.forEach(function(f, n) {
                                t.push(Xf(f, e[n]));
                            }), x(I(t));
                        }
                        function fe(f, e) {
                            return Mf(Qf(f, e));
                        }
                        const ee = (f, e, t, n, r)=>fe([
                                "address",
                                "address",
                                "uint256",
                                "uint120",
                                "uint128"
                            ], [
                                f,
                                e,
                                t,
                                n,
                                r
                            ]);
                        let te = function(f) {
                            return f[f.polygon = 137] = "polygon", f[f.sepolia = 11155111] = "sepolia", f[f.base = 8453] = "base", f[f.baseGoerli = 84531] = "baseGoerli", f[f.avalanche = 43114] = "avalanche", f[f.optimism = 10] = "optimism", f[f.arbitrum = 42161] = "arbitrum", f[f.gnosis = 100] = "gnosis", f;
                        }({}), ne = function(f) {
                            return f.usdcBridgedPolygon = "0x2791bca1f2de4661ed88a30c99a7a9449aa84174", f.usdcPolygon = "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359", f.usdcBase = "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913", f.usdcBaseGoerli = "0xf175520c52418dfe19c8098071a252da48cd1c19", f.usdcSepolia = "0x1c7d4b196cb0c7b01d743fbc6116a902379c7238", f.usdcArbitrum = "0xaf88d065e77c8cc2239327c5edb3a432268e5831", f.usdcOptimism = "0x0b2c639c533813f4aa9d7837caf62653d097ff85", f.usdcAvalanche = "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e", f;
                        }({}), re = function(f) {
                            return f.approveWithAuthorization = "0xe1560fd3", f.receiveWithAuthorization = "0xef55bec6", f;
                        }({});
                        const ae = "0x0000000000000000000000000000000000000000000000000000000000000000";
                        let ie;
                        function se(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var oe = 0;
                        function be(f) {
                            return "__private_" + oe++ + "_" + f;
                        }
                        const ce = BigInt(0), de = BigInt(1), ue = BigInt(2), le = BigInt(27), he = BigInt(28), pe = BigInt(35), ye = {};
                        function me(f) {
                            return P(z(f), 32);
                        }
                        var ge = be("r"), we = be("s"), ve = be("v"), Ee = be("networkV");
                        ie = Symbol.for("nodejs.util.inspect.custom");
                        class Te {
                            get r() {
                                return se(this, ge)[ge];
                            }
                            set r(f) {
                                l(32 === k(f), "invalid r", "value", f), se(this, ge)[ge] = x(f);
                            }
                            get s() {
                                return se(this, we)[we];
                            }
                            set s(f) {
                                l(32 === k(f), "invalid s", "value", f);
                                const e = x(f);
                                l(parseInt(e.substring(0, 3)) < 8, "non-canonical s", "value", e), se(this, we)[we] = e;
                            }
                            get v() {
                                return se(this, ve)[ve];
                            }
                            set v(f) {
                                const e = j(f, "value");
                                l(27 === e || 28 === e, "invalid v", "v", f), se(this, ve)[ve] = e;
                            }
                            get networkV() {
                                return se(this, Ee)[Ee];
                            }
                            get legacyChainId() {
                                const f = this.networkV;
                                return null == f ? null : Te.getChainId(f);
                            }
                            get yParity() {
                                return 27 === this.v ? 0 : 1;
                            }
                            get yParityAndS() {
                                const f = w(this.s);
                                return this.yParity && (f[0] |= 128), x(f);
                            }
                            get compactSerialized() {
                                return I([
                                    this.r,
                                    this.yParityAndS
                                ]);
                            }
                            get serialized() {
                                return I([
                                    this.r,
                                    this.s,
                                    this.yParity ? "0x1c" : "0x1b"
                                ]);
                            }
                            constructor(f, e, t, n){
                                Object.defineProperty(this, ge, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, we, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, ve, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Ee, {
                                    writable: !0,
                                    value: void 0
                                }), m(f, ye, "Signature"), se(this, ge)[ge] = e, se(this, we)[we] = t, se(this, ve)[ve] = n, se(this, Ee)[Ee] = null;
                            }
                            [ie]() {
                                return 'Signature { r: "'.concat(this.r, '", s: "').concat(this.s, '", yParity: ').concat(this.yParity, ", networkV: ").concat(this.networkV, " }");
                            }
                            clone() {
                                const f = new Te(ye, this.r, this.s, this.v);
                                return this.networkV && (se(f, Ee)[Ee] = this.networkV), f;
                            }
                            toJSON() {
                                const f = this.networkV;
                                return {
                                    _type: "signature",
                                    networkV: null != f ? f.toString() : null,
                                    r: this.r,
                                    s: this.s,
                                    v: this.v
                                };
                            }
                            static getChainId(f) {
                                const e = B(f, "v");
                                return e == le || e == he ? ce : (l(e >= pe, "invalid EIP-155 v", "v", f), (e - pe) / ue);
                            }
                            static getChainIdV(f, e) {
                                return B(f) * ue + BigInt(35 + e - 27);
                            }
                            static getNormalizedV(f) {
                                const e = B(f);
                                return e === ce || e === le ? 27 : e === de || e === he ? 28 : (l(e >= pe, "invalid v", "v", f), e & de ? 27 : 28);
                            }
                            static from(f) {
                                function e(e, t) {
                                    l(e, t, "signature", f);
                                }
                                if (null == f) return new Te(ye, ae, ae, 27);
                                if ("string" == typeof f) {
                                    const t = w(f, "signature");
                                    if (64 === t.length) {
                                        const f = x(t.slice(0, 32)), e = t.slice(32, 64), n = 128 & e[0] ? 28 : 27;
                                        return e[0] &= 127, new Te(ye, f, x(e), n);
                                    }
                                    if (65 === t.length) {
                                        const f = x(t.slice(0, 32)), n = t.slice(32, 64);
                                        e(!(128 & n[0]), "non-canonical s");
                                        const r = Te.getNormalizedV(t[64]);
                                        return new Te(ye, f, x(n), r);
                                    }
                                    e(!1, "invalid raw signature length");
                                }
                                if (f instanceof Te) return f.clone();
                                const t = f.r;
                                e(null != t, "missing r");
                                const n = me(t), r = function(f, t) {
                                    if (null != f) return me(f);
                                    if (null != t) {
                                        e(E(t, 32), "invalid yParityAndS");
                                        const f = w(t);
                                        return f[0] &= 127, x(f);
                                    }
                                    e(!1, "missing s");
                                }(f.s, f.yParityAndS);
                                e(!(128 & w(r)[0]), "non-canonical s");
                                const { networkV: a, v: i } = function(f, t, n) {
                                    if (null != f) {
                                        const e = B(f);
                                        return {
                                            networkV: e >= pe ? e : void 0,
                                            v: Te.getNormalizedV(e)
                                        };
                                    }
                                    if (null != t) return e(E(t, 32), "invalid yParityAndS"), {
                                        v: 128 & w(t)[0] ? 28 : 27
                                    };
                                    if (null != n) {
                                        switch(j(n, "sig.yParity")){
                                            case 0:
                                                return {
                                                    v: 27
                                                };
                                            case 1:
                                                return {
                                                    v: 28
                                                };
                                        }
                                        e(!1, "invalid yParity");
                                    }
                                    e(!1, "missing v");
                                }(f.v, f.yParityAndS, f.yParity), s = new Te(ye, n, r, i);
                                return a && (se(s, Ee)[Ee] = a), e(null == f.yParity || j(f.yParity, "sig.yParity") === s.yParity, "yParity mismatch"), e(null == f.yParityAndS || f.yParityAndS === s.yParityAndS, "yParityAndS mismatch"), s;
                            }
                        }
                        function Ae(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var xe = 0;
                        function Ie(f) {
                            return "__private_" + xe++ + "_" + f;
                        }
                        const ke = 32, Oe = new Uint8Array(ke), _e = [
                            "then"
                        ], Pe = {};
                        function Se(f, e) {
                            const t = new Error("deferred error during ABI decoding triggered accessing ".concat(f));
                            throw t.error = e, t;
                        }
                        var Re = Ie("names");
                        class Ne extends Array {
                            constructor(){
                                for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                                const n = e[0];
                                let r = e[1], a = (e[2] || []).slice(), i = !0;
                                n !== Pe && (r = e, a = [], i = !1), super(r.length), Object.defineProperty(this, Re, {
                                    writable: !0,
                                    value: void 0
                                }), r.forEach((f, e)=>{
                                    this[e] = f;
                                });
                                const s = a.reduce((f, e)=>("string" == typeof e && f.set(e, (f.get(e) || 0) + 1), f), new Map);
                                if (Ae(this, Re)[Re] = Object.freeze(r.map((f, e)=>{
                                    const t = a[e];
                                    return null != t && 1 === s.get(t) ? t : null;
                                })), i) return Object.freeze(this), new Proxy(this, {
                                    get: (f, e, t)=>{
                                        if ("string" == typeof e) {
                                            if (e.match(/^[0-9]+$/)) {
                                                const t = j(e, "%index");
                                                if (t < 0 || t >= this.length) throw new RangeError("out of result range");
                                                const n = f[t];
                                                return n instanceof Error && Se("index ".concat(t), n), n;
                                            }
                                            if (_e.indexOf(e) >= 0) return Reflect.get(f, e, t);
                                            const n = f[e];
                                            if (n instanceof Function) return function() {
                                                for(var e = arguments.length, r = new Array(e), a = 0; a < e; a++)r[a] = arguments[a];
                                                return n.apply(this === t ? f : this, r);
                                            };
                                            if (!(e in f)) return f.getValue.apply(this === t ? f : this, [
                                                e
                                            ]);
                                        }
                                        return Reflect.get(f, e, t);
                                    }
                                });
                            }
                            toArray() {
                                const f = [];
                                return this.forEach((e, t)=>{
                                    e instanceof Error && Se("index ".concat(t), e), f.push(e);
                                }), f;
                            }
                            toObject() {
                                return Ae(this, Re)[Re].reduce((f, e, t)=>(u(null != e, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
                                        operation: "toObject()"
                                    }), e in f || (f[e] = this.getValue(e)), f), {});
                            }
                            slice(f, e) {
                                null == f && (f = 0), f < 0 && (f += this.length) < 0 && (f = 0), null == e && (e = this.length), e < 0 && (e += this.length) < 0 && (e = 0), e > this.length && (e = this.length);
                                const t = [], n = [];
                                for(let r = f; r < e; r++)t.push(this[r]), n.push(Ae(this, Re)[Re][r]);
                                return new Ne(Pe, t, n);
                            }
                            filter(f, e) {
                                const t = [], n = [];
                                for(let r = 0; r < this.length; r++){
                                    const a = this[r];
                                    a instanceof Error && Se("index ".concat(r), a), f.call(e, a, r, this) && (t.push(a), n.push(Ae(this, Re)[Re][r]));
                                }
                                return new Ne(Pe, t, n);
                            }
                            map(f, e) {
                                const t = [];
                                for(let n = 0; n < this.length; n++){
                                    const r = this[n];
                                    r instanceof Error && Se("index ".concat(n), r), t.push(f.call(e, r, n, this));
                                }
                                return t;
                            }
                            getValue(f) {
                                const e = Ae(this, Re)[Re].indexOf(f);
                                if (-1 === e) return;
                                const t = this[e];
                                return t instanceof Error && Se("property ".concat(JSON.stringify(f)), t.error), t;
                            }
                            static fromItems(f, e) {
                                return new Ne(Pe, f, e);
                            }
                        }
                        function Ce(f) {
                            let e = z(f);
                            return u(e.length <= ke, "value out-of-bounds", "BUFFER_OVERRUN", {
                                buffer: e,
                                length: ke,
                                offset: e.length
                            }), e.length !== ke && (e = v(I([
                                Oe.slice(e.length % ke),
                                e
                            ]))), e;
                        }
                        class Ue {
                            constructor(f, e, t, n){
                                this.name = void 0, this.type = void 0, this.localName = void 0, this.dynamic = void 0, o(this, {
                                    name: f,
                                    type: e,
                                    localName: t,
                                    dynamic: n
                                }, {
                                    name: "string",
                                    type: "string",
                                    localName: "string",
                                    dynamic: "boolean"
                                });
                            }
                            _throwError(f, e) {
                                l(!1, f, this.localName, e);
                            }
                        }
                        var Le = Ie("data"), Be = Ie("dataLength"), De = Ie("writeData");
                        class Fe {
                            constructor(){
                                Object.defineProperty(this, De, {
                                    value: Me
                                }), Object.defineProperty(this, Le, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Be, {
                                    writable: !0,
                                    value: void 0
                                }), Ae(this, Le)[Le] = [], Ae(this, Be)[Be] = 0;
                            }
                            get data() {
                                return I(Ae(this, Le)[Le]);
                            }
                            get length() {
                                return Ae(this, Be)[Be];
                            }
                            appendWriter(f) {
                                return Ae(this, De)[De](v(f.data));
                            }
                            writeBytes(f) {
                                let e = v(f);
                                const t = e.length % ke;
                                return t && (e = v(I([
                                    e,
                                    Oe.slice(t)
                                ]))), Ae(this, De)[De](e);
                            }
                            writeValue(f) {
                                return Ae(this, De)[De](Ce(f));
                            }
                            writeUpdatableValue() {
                                const f = Ae(this, Le)[Le].length;
                                return Ae(this, Le)[Le].push(Oe), Ae(this, Be)[Be] += ke, (e)=>{
                                    Ae(this, Le)[Le][f] = Ce(e);
                                };
                            }
                        }
                        function Me(f) {
                            return Ae(this, Le)[Le].push(f), Ae(this, Be)[Be] += f.length, f.length;
                        }
                        var je = Ie("data"), Ke = Ie("offset"), ze = Ie("bytesRead"), Ve = Ie("parent"), Ge = Ie("maxInflation"), He = Ie("incrementBytesRead"), We = Ie("peekBytes");
                        class $e {
                            constructor(f, e, t){
                                Object.defineProperty(this, We, {
                                    value: Ye
                                }), Object.defineProperty(this, He, {
                                    value: Je
                                }), this.allowLoose = void 0, Object.defineProperty(this, je, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Ke, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, ze, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Ve, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Ge, {
                                    writable: !0,
                                    value: void 0
                                }), o(this, {
                                    allowLoose: !!e
                                }), Ae(this, je)[je] = v(f), Ae(this, ze)[ze] = 0, Ae(this, Ve)[Ve] = null, Ae(this, Ge)[Ge] = null != t ? t : 1024, Ae(this, Ke)[Ke] = 0;
                            }
                            get data() {
                                return x(Ae(this, je)[je]);
                            }
                            get dataLength() {
                                return Ae(this, je)[je].length;
                            }
                            get consumed() {
                                return Ae(this, Ke)[Ke];
                            }
                            get bytes() {
                                return new Uint8Array(Ae(this, je)[je]);
                            }
                            subReader(f) {
                                const e = new $e(Ae(this, je)[je].slice(Ae(this, Ke)[Ke] + f), this.allowLoose, Ae(this, Ge)[Ge]);
                                return Ae(e, Ve)[Ve] = this, e;
                            }
                            readBytes(f, e) {
                                let t = Ae(this, We)[We](0, f, !!e);
                                return Ae(this, He)[He](f), Ae(this, Ke)[Ke] += t.length, t.slice(0, f);
                            }
                            readValue() {
                                return M(this.readBytes(ke));
                            }
                            readIndex() {
                                return j(M(this.readBytes(ke)));
                            }
                        }
                        function Je(f) {
                            if (Ae(this, Ve)[Ve]) return Ae(Ae(this, Ve)[Ve], He)[He](f);
                            Ae(this, ze)[ze] += f, u(Ae(this, Ge)[Ge] < 1 || Ae(this, ze)[ze] <= Ae(this, Ge)[Ge] * this.dataLength, "compressed ABI data exceeds inflation ratio of ".concat(Ae(this, Ge)[Ge], " ( see: https://github.com/ethers-io/ethers.js/issues/4537 )"), "BUFFER_OVERRUN", {
                                buffer: v(Ae(this, je)[je]),
                                offset: Ae(this, Ke)[Ke],
                                length: f,
                                info: {
                                    bytesRead: Ae(this, ze)[ze],
                                    dataLength: this.dataLength
                                }
                            });
                        }
                        function Ye(f, e, t) {
                            let n = Math.ceil(e / ke) * ke;
                            return Ae(this, Ke)[Ke] + n > Ae(this, je)[je].length && (this.allowLoose && t && Ae(this, Ke)[Ke] + e <= Ae(this, je)[je].length ? n = e : u(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
                                buffer: v(Ae(this, je)[je]),
                                length: Ae(this, je)[je].length,
                                offset: Ae(this, Ke)[Ke] + n
                            })), Ae(this, je)[je].slice(Ae(this, Ke)[Ke], Ae(this, Ke)[Ke] + n);
                        }
                        function qe(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var Ze = 0;
                        const Xe = {};
                        function Qe(f, e) {
                            let t = !1;
                            return e < 0 && (t = !0, e *= -1), new nt(Xe, "".concat(t ? "" : "u", "int").concat(e), f, {
                                signed: t,
                                width: e
                            });
                        }
                        function ft(f, e) {
                            return new nt(Xe, "bytes".concat(e || ""), f, {
                                size: e
                            });
                        }
                        const et = Symbol.for("_ethers_typed");
                        var tt = "__private_" + Ze++ + "_options";
                        class nt {
                            constructor(f, e, t, n){
                                this.type = void 0, this.value = void 0, Object.defineProperty(this, tt, {
                                    writable: !0,
                                    value: void 0
                                }), this._typedSymbol = void 0, null == n && (n = null), m(Xe, f, "Typed"), o(this, {
                                    _typedSymbol: et,
                                    type: e,
                                    value: t
                                }), qe(this, tt)[tt] = n, this.format();
                            }
                            format() {
                                if ("array" === this.type) throw new Error("");
                                if ("dynamicArray" === this.type) throw new Error("");
                                return "tuple" === this.type ? "tuple(".concat(this.value.map((f)=>f.format()).join(","), ")") : this.type;
                            }
                            defaultValue() {
                                return 0;
                            }
                            minValue() {
                                return 0;
                            }
                            maxValue() {
                                return 0;
                            }
                            isBigInt() {
                                return !!this.type.match(/^u?int[0-9]+$/);
                            }
                            isData() {
                                return this.type.startsWith("bytes");
                            }
                            isString() {
                                return "string" === this.type;
                            }
                            get tupleName() {
                                if ("tuple" !== this.type) throw TypeError("not a tuple");
                                return qe(this, tt)[tt];
                            }
                            get arrayLength() {
                                if ("array" !== this.type) throw TypeError("not an array");
                                return !0 === qe(this, tt)[tt] ? -1 : !1 === qe(this, tt)[tt] ? this.value.length : null;
                            }
                            static from(f, e) {
                                return new nt(Xe, f, e);
                            }
                            static uint8(f) {
                                return Qe(f, 8);
                            }
                            static uint16(f) {
                                return Qe(f, 16);
                            }
                            static uint24(f) {
                                return Qe(f, 24);
                            }
                            static uint32(f) {
                                return Qe(f, 32);
                            }
                            static uint40(f) {
                                return Qe(f, 40);
                            }
                            static uint48(f) {
                                return Qe(f, 48);
                            }
                            static uint56(f) {
                                return Qe(f, 56);
                            }
                            static uint64(f) {
                                return Qe(f, 64);
                            }
                            static uint72(f) {
                                return Qe(f, 72);
                            }
                            static uint80(f) {
                                return Qe(f, 80);
                            }
                            static uint88(f) {
                                return Qe(f, 88);
                            }
                            static uint96(f) {
                                return Qe(f, 96);
                            }
                            static uint104(f) {
                                return Qe(f, 104);
                            }
                            static uint112(f) {
                                return Qe(f, 112);
                            }
                            static uint120(f) {
                                return Qe(f, 120);
                            }
                            static uint128(f) {
                                return Qe(f, 128);
                            }
                            static uint136(f) {
                                return Qe(f, 136);
                            }
                            static uint144(f) {
                                return Qe(f, 144);
                            }
                            static uint152(f) {
                                return Qe(f, 152);
                            }
                            static uint160(f) {
                                return Qe(f, 160);
                            }
                            static uint168(f) {
                                return Qe(f, 168);
                            }
                            static uint176(f) {
                                return Qe(f, 176);
                            }
                            static uint184(f) {
                                return Qe(f, 184);
                            }
                            static uint192(f) {
                                return Qe(f, 192);
                            }
                            static uint200(f) {
                                return Qe(f, 200);
                            }
                            static uint208(f) {
                                return Qe(f, 208);
                            }
                            static uint216(f) {
                                return Qe(f, 216);
                            }
                            static uint224(f) {
                                return Qe(f, 224);
                            }
                            static uint232(f) {
                                return Qe(f, 232);
                            }
                            static uint240(f) {
                                return Qe(f, 240);
                            }
                            static uint248(f) {
                                return Qe(f, 248);
                            }
                            static uint256(f) {
                                return Qe(f, 256);
                            }
                            static uint(f) {
                                return Qe(f, 256);
                            }
                            static int8(f) {
                                return Qe(f, -8);
                            }
                            static int16(f) {
                                return Qe(f, -16);
                            }
                            static int24(f) {
                                return Qe(f, -24);
                            }
                            static int32(f) {
                                return Qe(f, -32);
                            }
                            static int40(f) {
                                return Qe(f, -40);
                            }
                            static int48(f) {
                                return Qe(f, -48);
                            }
                            static int56(f) {
                                return Qe(f, -56);
                            }
                            static int64(f) {
                                return Qe(f, -64);
                            }
                            static int72(f) {
                                return Qe(f, -72);
                            }
                            static int80(f) {
                                return Qe(f, -80);
                            }
                            static int88(f) {
                                return Qe(f, -88);
                            }
                            static int96(f) {
                                return Qe(f, -96);
                            }
                            static int104(f) {
                                return Qe(f, -104);
                            }
                            static int112(f) {
                                return Qe(f, -112);
                            }
                            static int120(f) {
                                return Qe(f, -120);
                            }
                            static int128(f) {
                                return Qe(f, -128);
                            }
                            static int136(f) {
                                return Qe(f, -136);
                            }
                            static int144(f) {
                                return Qe(f, -144);
                            }
                            static int152(f) {
                                return Qe(f, -152);
                            }
                            static int160(f) {
                                return Qe(f, -160);
                            }
                            static int168(f) {
                                return Qe(f, -168);
                            }
                            static int176(f) {
                                return Qe(f, -176);
                            }
                            static int184(f) {
                                return Qe(f, -184);
                            }
                            static int192(f) {
                                return Qe(f, -192);
                            }
                            static int200(f) {
                                return Qe(f, -200);
                            }
                            static int208(f) {
                                return Qe(f, -208);
                            }
                            static int216(f) {
                                return Qe(f, -216);
                            }
                            static int224(f) {
                                return Qe(f, -224);
                            }
                            static int232(f) {
                                return Qe(f, -232);
                            }
                            static int240(f) {
                                return Qe(f, -240);
                            }
                            static int248(f) {
                                return Qe(f, -248);
                            }
                            static int256(f) {
                                return Qe(f, -256);
                            }
                            static int(f) {
                                return Qe(f, -256);
                            }
                            static bytes1(f) {
                                return ft(f, 1);
                            }
                            static bytes2(f) {
                                return ft(f, 2);
                            }
                            static bytes3(f) {
                                return ft(f, 3);
                            }
                            static bytes4(f) {
                                return ft(f, 4);
                            }
                            static bytes5(f) {
                                return ft(f, 5);
                            }
                            static bytes6(f) {
                                return ft(f, 6);
                            }
                            static bytes7(f) {
                                return ft(f, 7);
                            }
                            static bytes8(f) {
                                return ft(f, 8);
                            }
                            static bytes9(f) {
                                return ft(f, 9);
                            }
                            static bytes10(f) {
                                return ft(f, 10);
                            }
                            static bytes11(f) {
                                return ft(f, 11);
                            }
                            static bytes12(f) {
                                return ft(f, 12);
                            }
                            static bytes13(f) {
                                return ft(f, 13);
                            }
                            static bytes14(f) {
                                return ft(f, 14);
                            }
                            static bytes15(f) {
                                return ft(f, 15);
                            }
                            static bytes16(f) {
                                return ft(f, 16);
                            }
                            static bytes17(f) {
                                return ft(f, 17);
                            }
                            static bytes18(f) {
                                return ft(f, 18);
                            }
                            static bytes19(f) {
                                return ft(f, 19);
                            }
                            static bytes20(f) {
                                return ft(f, 20);
                            }
                            static bytes21(f) {
                                return ft(f, 21);
                            }
                            static bytes22(f) {
                                return ft(f, 22);
                            }
                            static bytes23(f) {
                                return ft(f, 23);
                            }
                            static bytes24(f) {
                                return ft(f, 24);
                            }
                            static bytes25(f) {
                                return ft(f, 25);
                            }
                            static bytes26(f) {
                                return ft(f, 26);
                            }
                            static bytes27(f) {
                                return ft(f, 27);
                            }
                            static bytes28(f) {
                                return ft(f, 28);
                            }
                            static bytes29(f) {
                                return ft(f, 29);
                            }
                            static bytes30(f) {
                                return ft(f, 30);
                            }
                            static bytes31(f) {
                                return ft(f, 31);
                            }
                            static bytes32(f) {
                                return ft(f, 32);
                            }
                            static address(f) {
                                return new nt(Xe, "address", f);
                            }
                            static bool(f) {
                                return new nt(Xe, "bool", !!f);
                            }
                            static bytes(f) {
                                return new nt(Xe, "bytes", f);
                            }
                            static string(f) {
                                return new nt(Xe, "string", f);
                            }
                            static array(f, e) {
                                throw new Error("not implemented yet");
                            }
                            static tuple(f, e) {
                                throw new Error("not implemented yet");
                            }
                            static overrides(f) {
                                return new nt(Xe, "overrides", Object.assign({}, f));
                            }
                            static isTyped(f) {
                                return f && "object" == typeof f && "_typedSymbol" in f && f._typedSymbol === et;
                            }
                            static dereference(f, e) {
                                if (nt.isTyped(f)) {
                                    if (f.type !== e) throw new Error("invalid type: expecetd ".concat(e, ", got ").concat(f.type));
                                    return f.value;
                                }
                                return f;
                            }
                        }
                        class rt extends Ue {
                            constructor(f){
                                super("address", "address", f, !1);
                            }
                            defaultValue() {
                                return "0x0000000000000000000000000000000000000000";
                            }
                            encode(f, e) {
                                let t = nt.dereference(e, "string");
                                try {
                                    t = Hf(t);
                                } catch (f) {
                                    return this._throwError(f.message, e);
                                }
                                return f.writeValue(t);
                            }
                            decode(f) {
                                return Hf(K(f.readValue(), 20));
                            }
                        }
                        class at extends Ue {
                            constructor(f){
                                super(f.name, f.type, "_", f.dynamic), this.coder = void 0, this.coder = f;
                            }
                            defaultValue() {
                                return this.coder.defaultValue();
                            }
                            encode(f, e) {
                                return this.coder.encode(f, e);
                            }
                            decode(f) {
                                return this.coder.decode(f);
                            }
                        }
                        function it(f, e, t) {
                            let n = [];
                            if (Array.isArray(t)) n = t;
                            else if (t && "object" == typeof t) {
                                let f = {};
                                n = e.map((e)=>{
                                    const n = e.localName;
                                    return u(n, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", {
                                        argument: "values",
                                        info: {
                                            coder: e
                                        },
                                        value: t
                                    }), u(!f[n], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", {
                                        argument: "values",
                                        info: {
                                            coder: e
                                        },
                                        value: t
                                    }), f[n] = !0, t[n];
                                });
                            } else l(!1, "invalid tuple value", "tuple", t);
                            l(e.length === n.length, "types/value length mismatch", "tuple", t);
                            let r = new Fe, a = new Fe, i = [];
                            e.forEach((f, e)=>{
                                let t = n[e];
                                if (f.dynamic) {
                                    let e = a.length;
                                    f.encode(a, t);
                                    let n = r.writeUpdatableValue();
                                    i.push((f)=>{
                                        n(f + e);
                                    });
                                } else f.encode(r, t);
                            }), i.forEach((f)=>{
                                f(r.length);
                            });
                            let s = f.appendWriter(r);
                            return s += f.appendWriter(a), s;
                        }
                        function st(f, e) {
                            let t = [], n = [], r = f.subReader(0);
                            return e.forEach((e)=>{
                                let a = null;
                                if (e.dynamic) {
                                    let t = f.readIndex(), n = r.subReader(t);
                                    try {
                                        a = e.decode(n);
                                    } catch (f) {
                                        if (c(f, "BUFFER_OVERRUN")) throw f;
                                        a = f, a.baseType = e.name, a.name = e.localName, a.type = e.type;
                                    }
                                } else try {
                                    a = e.decode(f);
                                } catch (f) {
                                    if (c(f, "BUFFER_OVERRUN")) throw f;
                                    a = f, a.baseType = e.name, a.name = e.localName, a.type = e.type;
                                }
                                if (null == a) throw new Error("investigate");
                                t.push(a), n.push(e.localName || null);
                            }), Ne.fromItems(t, n);
                        }
                        class ot extends Ue {
                            constructor(f, e, t){
                                super("array", f.type + "[" + (e >= 0 ? e : "") + "]", t, -1 === e || f.dynamic), this.coder = void 0, this.length = void 0, o(this, {
                                    coder: f,
                                    length: e
                                });
                            }
                            defaultValue() {
                                const f = this.coder.defaultValue(), e = [];
                                for(let t = 0; t < this.length; t++)e.push(f);
                                return e;
                            }
                            encode(f, e) {
                                const t = nt.dereference(e, "array");
                                Array.isArray(t) || this._throwError("expected array value", t);
                                let n = this.length;
                                -1 === n && (n = t.length, f.writeValue(t.length)), h(t.length, n, "coder array" + (this.localName ? " " + this.localName : ""));
                                let r = [];
                                for(let f = 0; f < t.length; f++)r.push(this.coder);
                                return it(f, r, t);
                            }
                            decode(f) {
                                let e = this.length;
                                -1 === e && (e = f.readIndex(), u(e * ke <= f.dataLength, "insufficient data length", "BUFFER_OVERRUN", {
                                    buffer: f.bytes,
                                    offset: e * ke,
                                    length: f.dataLength
                                }));
                                let t = [];
                                for(let f = 0; f < e; f++)t.push(new at(this.coder));
                                return st(f, t);
                            }
                        }
                        class bt extends Ue {
                            constructor(f){
                                super("bool", "bool", f, !1);
                            }
                            defaultValue() {
                                return !1;
                            }
                            encode(f, e) {
                                const t = nt.dereference(e, "bool");
                                return f.writeValue(t ? 1 : 0);
                            }
                            decode(f) {
                                return !!f.readValue();
                            }
                        }
                        class ct extends Ue {
                            constructor(f, e){
                                super(f, f, e, !0);
                            }
                            defaultValue() {
                                return "0x";
                            }
                            encode(f, e) {
                                e = v(e);
                                let t = f.writeValue(e.length);
                                return t += f.writeBytes(e), t;
                            }
                            decode(f) {
                                return f.readBytes(f.readIndex(), !0);
                            }
                        }
                        class dt extends ct {
                            constructor(f){
                                super("bytes", f);
                            }
                            decode(f) {
                                return x(super.decode(f));
                            }
                        }
                        class ut extends Ue {
                            constructor(f, e){
                                let t = "bytes" + String(f);
                                super(t, t, e, !1), this.size = void 0, o(this, {
                                    size: f
                                }, {
                                    size: "number"
                                });
                            }
                            defaultValue() {
                                return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
                            }
                            encode(f, e) {
                                let t = v(nt.dereference(e, this.type));
                                return t.length !== this.size && this._throwError("incorrect data length", e), f.writeBytes(t);
                            }
                            decode(f) {
                                return x(f.readBytes(this.size));
                            }
                        }
                        const lt = new Uint8Array([]);
                        class ht extends Ue {
                            constructor(f){
                                super("null", "", f, !1);
                            }
                            defaultValue() {
                                return null;
                            }
                            encode(f, e) {
                                return null != e && this._throwError("not null", e), f.writeBytes(lt);
                            }
                            decode(f) {
                                return f.readBytes(0), null;
                            }
                        }
                        const pt = BigInt(0), yt = BigInt(1), mt = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                        class gt extends Ue {
                            constructor(f, e, t){
                                const n = (e ? "int" : "uint") + 8 * f;
                                super(n, n, t, !1), this.size = void 0, this.signed = void 0, o(this, {
                                    size: f,
                                    signed: e
                                }, {
                                    size: "number",
                                    signed: "boolean"
                                });
                            }
                            defaultValue() {
                                return 0;
                            }
                            encode(f, e) {
                                let t = B(nt.dereference(e, this.type)), n = L(mt, 256);
                                if (this.signed) {
                                    let f = L(n, 8 * this.size - 1);
                                    (t > f || t < -(f + yt)) && this._throwError("value out-of-bounds", e), t = U(t, 256);
                                } else (t < pt || t > L(n, 8 * this.size)) && this._throwError("value out-of-bounds", e);
                                return f.writeValue(t);
                            }
                            decode(f) {
                                let e = L(f.readValue(), 8 * this.size);
                                return this.signed && (e = function(f, e) {
                                    const t = D(f, "value"), n = BigInt(j(e, "width"));
                                    return u(t >> n === R, "overflow", "NUMERIC_FAULT", {
                                        operation: "fromTwos",
                                        fault: "overflow",
                                        value: f
                                    }), t >> n - N ? -((~t & (N << n) - N) + N) : t;
                                }(e, 8 * this.size)), e;
                            }
                        }
                        class wt extends ct {
                            constructor(f){
                                super("string", f);
                            }
                            defaultValue() {
                                return "";
                            }
                            encode(f, e) {
                                return super.encode(f, Jf(nt.dereference(e, "string")));
                            }
                            decode(f) {
                                return function(f) {
                                    return (function(f, e) {
                                        null == e && (e = $f.error);
                                        const t = w(f, "bytes"), n = [];
                                        let r = 0;
                                        for(; r < t.length;){
                                            const f = t[r++];
                                            if (!(f >> 7)) {
                                                n.push(f);
                                                continue;
                                            }
                                            let a = null, i = null;
                                            if (192 == (224 & f)) a = 1, i = 127;
                                            else if (224 == (240 & f)) a = 2, i = 2047;
                                            else {
                                                if (240 != (248 & f)) {
                                                    r += e(128 == (192 & f) ? "UNEXPECTED_CONTINUE" : "BAD_PREFIX", r - 1, t, n);
                                                    continue;
                                                }
                                                a = 3, i = 65535;
                                            }
                                            if (r - 1 + a >= t.length) {
                                                r += e("OVERRUN", r - 1, t, n);
                                                continue;
                                            }
                                            let s = f & (1 << 8 - a - 1) - 1;
                                            for(let f = 0; f < a; f++){
                                                let f = t[r];
                                                if (128 != (192 & f)) {
                                                    r += e("MISSING_CONTINUE", r, t, n), s = null;
                                                    break;
                                                }
                                                s = s << 6 | 63 & f, r++;
                                            }
                                            null !== s && (s > 1114111 ? r += e("OUT_OF_RANGE", r - 1 - a, t, n, s) : s >= 55296 && s <= 57343 ? r += e("UTF16_SURROGATE", r - 1 - a, t, n, s) : s <= i ? r += e("OVERLONG", r - 1 - a, t, n, s) : n.push(s));
                                        }
                                        return n;
                                    })(f, void 0).map((f)=>f <= 65535 ? String.fromCharCode(f) : (f -= 65536, String.fromCharCode(55296 + (f >> 10 & 1023), 56320 + (1023 & f)))).join("");
                                }(super.decode(f));
                            }
                        }
                        class vt extends Ue {
                            constructor(f, e){
                                let t = !1;
                                const n = [];
                                f.forEach((f)=>{
                                    f.dynamic && (t = !0), n.push(f.type);
                                }), super("tuple", "tuple(" + n.join(",") + ")", e, t), this.coders = void 0, o(this, {
                                    coders: Object.freeze(f.slice())
                                });
                            }
                            defaultValue() {
                                const f = [];
                                this.coders.forEach((e)=>{
                                    f.push(e.defaultValue());
                                });
                                const e = this.coders.reduce((f, e)=>{
                                    const t = e.localName;
                                    return t && (f[t] || (f[t] = 0), f[t]++), f;
                                }, {});
                                return this.coders.forEach((t, n)=>{
                                    let r = t.localName;
                                    r && 1 === e[r] && ("length" === r && (r = "_length"), null == f[r] && (f[r] = f[n]));
                                }), Object.freeze(f);
                            }
                            encode(f, e) {
                                const t = nt.dereference(e, "tuple");
                                return it(f, this.coders, t);
                            }
                            decode(f) {
                                return st(f, this.coders);
                            }
                        }
                        function Et(f) {
                            return Mf(Jf(f));
                        }
                        var Tt;
                        function At(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var xt = 0;
                        function It(f) {
                            return "__private_" + xt++ + "_" + f;
                        }
                        function kt(f) {
                            const e = new Set;
                            return f.forEach((f)=>e.add(f)), Object.freeze(e);
                        }
                        const Ot = kt("external public payable".split(" ")), _t = "constant external internal payable private public pure view", Pt = kt(_t.split(" ")), St = "constructor error event fallback function receive struct", Rt = kt(St.split(" ")), Nt = "calldata memory storage payable indexed", Ct = kt(Nt.split(" ")), Ut = kt([
                            St,
                            Nt,
                            "tuple returns",
                            _t
                        ].join(" ").split(" ")), Lt = {
                            "(": "OPEN_PAREN",
                            ")": "CLOSE_PAREN",
                            "[": "OPEN_BRACKET",
                            "]": "CLOSE_BRACKET",
                            ",": "COMMA",
                            "@": "AT"
                        }, Bt = new RegExp("^(\\s*)"), Dt = new RegExp("^([0-9]+)"), Ft = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), Mt = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), jt = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
                        var Kt = It("offset"), zt = It("tokens"), Vt = It("subTokenString");
                        class Gt {
                            get offset() {
                                return At(this, Kt)[Kt];
                            }
                            get length() {
                                return At(this, zt)[zt].length - At(this, Kt)[Kt];
                            }
                            constructor(f){
                                Object.defineProperty(this, Vt, {
                                    value: Ht
                                }), Object.defineProperty(this, Kt, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, zt, {
                                    writable: !0,
                                    value: void 0
                                }), At(this, Kt)[Kt] = 0, At(this, zt)[zt] = f.slice();
                            }
                            clone() {
                                return new Gt(At(this, zt)[zt]);
                            }
                            reset() {
                                At(this, Kt)[Kt] = 0;
                            }
                            popKeyword(f) {
                                const e = this.peek();
                                if ("KEYWORD" !== e.type || !f.has(e.text)) throw new Error("expected keyword ".concat(e.text));
                                return this.pop().text;
                            }
                            popType(f) {
                                if (this.peek().type !== f) throw new Error("expected ".concat(f, "; got ").concat(JSON.stringify(this.peek())));
                                return this.pop().text;
                            }
                            popParen() {
                                const f = this.peek();
                                if ("OPEN_PAREN" !== f.type) throw new Error("bad start");
                                const e = At(this, Vt)[Vt](At(this, Kt)[Kt] + 1, f.match + 1);
                                return At(this, Kt)[Kt] = f.match + 1, e;
                            }
                            popParams() {
                                const f = this.peek();
                                if ("OPEN_PAREN" !== f.type) throw new Error("bad start");
                                const e = [];
                                for(; At(this, Kt)[Kt] < f.match - 1;){
                                    const f = this.peek().linkNext;
                                    e.push(At(this, Vt)[Vt](At(this, Kt)[Kt] + 1, f)), At(this, Kt)[Kt] = f;
                                }
                                return At(this, Kt)[Kt] = f.match + 1, e;
                            }
                            peek() {
                                if (At(this, Kt)[Kt] >= At(this, zt)[zt].length) throw new Error("out-of-bounds");
                                return At(this, zt)[zt][At(this, Kt)[Kt]];
                            }
                            peekKeyword(f) {
                                const e = this.peekType("KEYWORD");
                                return null != e && f.has(e) ? e : null;
                            }
                            peekType(f) {
                                if (0 === this.length) return null;
                                const e = this.peek();
                                return e.type === f ? e.text : null;
                            }
                            pop() {
                                const f = this.peek();
                                return At(this, Kt)[Kt]++, f;
                            }
                            toString() {
                                const f = [];
                                for(let e = At(this, Kt)[Kt]; e < At(this, zt)[zt].length; e++){
                                    const t = At(this, zt)[zt][e];
                                    f.push("".concat(t.type, ":").concat(t.text));
                                }
                                return "<TokenString ".concat(f.join(" "), ">");
                            }
                        }
                        function Ht() {
                            let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                            return new Tt(At(this, zt)[zt].slice(f, e).map((e)=>Object.freeze(Object.assign({}, e, {
                                    match: e.match - f,
                                    linkBack: e.linkBack - f,
                                    linkNext: e.linkNext - f
                                }))));
                        }
                        function Wt(f) {
                            const e = [], t = (e)=>{
                                const t = a < f.length ? JSON.stringify(f[a]) : "$EOI";
                                throw new Error("invalid token ".concat(t, " at ").concat(a, ": ").concat(e));
                            };
                            let n = [], r = [], a = 0;
                            for(; a < f.length;){
                                let i = f.substring(a), s = i.match(Bt);
                                s && (a += s[1].length, i = f.substring(a));
                                const o = {
                                    depth: n.length,
                                    linkBack: -1,
                                    linkNext: -1,
                                    match: -1,
                                    type: "",
                                    text: "",
                                    offset: a,
                                    value: -1
                                };
                                e.push(o);
                                let b = Lt[i[0]] || "";
                                if (b) {
                                    if (o.type = b, o.text = i[0], a++, "OPEN_PAREN" === b) n.push(e.length - 1), r.push(e.length - 1);
                                    else if ("CLOSE_PAREN" == b) 0 === n.length && t("no matching open bracket"), o.match = n.pop(), e[o.match].match = e.length - 1, o.depth--, o.linkBack = r.pop(), e[o.linkBack].linkNext = e.length - 1;
                                    else if ("COMMA" === b) o.linkBack = r.pop(), e[o.linkBack].linkNext = e.length - 1, r.push(e.length - 1);
                                    else if ("OPEN_BRACKET" === b) o.type = "BRACKET";
                                    else if ("CLOSE_BRACKET" === b) {
                                        let f = e.pop().text;
                                        if (e.length > 0 && "NUMBER" === e[e.length - 1].type) {
                                            const t = e.pop().text;
                                            f = t + f, e[e.length - 1].value = j(t);
                                        }
                                        if (0 === e.length || "BRACKET" !== e[e.length - 1].type) throw new Error("missing opening bracket");
                                        e[e.length - 1].text += f;
                                    }
                                } else if (s = i.match(Ft), s) {
                                    if (o.text = s[1], a += o.text.length, Ut.has(o.text)) {
                                        o.type = "KEYWORD";
                                        continue;
                                    }
                                    if (o.text.match(jt)) {
                                        o.type = "TYPE";
                                        continue;
                                    }
                                    o.type = "ID";
                                } else {
                                    if (s = i.match(Dt), !s) throw new Error("unexpected token ".concat(JSON.stringify(i[0]), " at position ").concat(a));
                                    o.text = s[1], o.type = "NUMBER", a += o.text.length;
                                }
                            }
                            return new Gt(e.map((f)=>Object.freeze(f)));
                        }
                        function $t(f, e) {
                            let t = [];
                            for(const n in e.keys())f.has(n) && t.push(n);
                            if (t.length > 1) throw new Error("conflicting types: ".concat(t.join(", ")));
                        }
                        function Jt(f, e) {
                            if (e.peekKeyword(Rt)) {
                                const t = e.pop().text;
                                if (t !== f) throw new Error("expected ".concat(f, ", got ").concat(t));
                            }
                            return e.popType("ID");
                        }
                        function Yt(f, e) {
                            const t = new Set;
                            for(;;){
                                const n = f.peekType("KEYWORD");
                                if (null == n || e && !e.has(n)) break;
                                if (f.pop(), t.has(n)) throw new Error("duplicate keywords: ".concat(JSON.stringify(n)));
                                t.add(n);
                            }
                            return Object.freeze(t);
                        }
                        function qt(f) {
                            let e = Yt(f, Pt);
                            return $t(e, kt("constant payable nonpayable".split(" "))), $t(e, kt("pure view payable nonpayable".split(" "))), e.has("view") ? "view" : e.has("pure") ? "pure" : e.has("payable") ? "payable" : e.has("nonpayable") ? "nonpayable" : e.has("constant") ? "view" : "nonpayable";
                        }
                        function Zt(f, e) {
                            return f.popParams().map((f)=>ln.from(f, e));
                        }
                        function Xt(f) {
                            if (f.peekType("AT")) {
                                if (f.pop(), f.peekType("NUMBER")) return B(f.pop().text);
                                throw new Error("invalid gas");
                            }
                            return null;
                        }
                        function Qt(f) {
                            if (f.length) throw new Error("unexpected tokens: ".concat(f.toString()));
                        }
                        Tt = Gt;
                        const fn = new RegExp(/^(.*)\[([0-9]*)\]$/);
                        function en(f) {
                            const e = f.match(jt);
                            if (l(e, "invalid type", "type", f), "uint" === f) return "uint256";
                            if ("int" === f) return "int256";
                            if (e[2]) {
                                const t = parseInt(e[2]);
                                l(0 !== t && t <= 32, "invalid bytes length", "type", f);
                            } else if (e[3]) {
                                const t = parseInt(e[3]);
                                l(0 !== t && t <= 256 && t % 8 == 0, "invalid numeric width", "type", f);
                            }
                            return f;
                        }
                        const tn = {}, nn = Symbol.for("_ethers_internal"), rn = "_ParamTypeInternal", an = "_ErrorInternal", sn = "_EventInternal", on = "_ConstructorInternal", bn = "_FallbackInternal", cn = "_FunctionInternal", dn = "_StructInternal";
                        var un = It("walkAsync");
                        class ln {
                            constructor(f, e, t, n, r, a, i, s){
                                if (Object.defineProperty(this, un, {
                                    value: hn
                                }), this.name = void 0, this.type = void 0, this.baseType = void 0, this.indexed = void 0, this.components = void 0, this.arrayLength = void 0, this.arrayChildren = void 0, m(f, tn, "ParamType"), Object.defineProperty(this, nn, {
                                    value: rn
                                }), a && (a = Object.freeze(a.slice())), "array" === n) {
                                    if (null == i || null == s) throw new Error("");
                                } else if (null != i || null != s) throw new Error("");
                                if ("tuple" === n) {
                                    if (null == a) throw new Error("");
                                } else if (null != a) throw new Error("");
                                o(this, {
                                    name: e,
                                    type: t,
                                    baseType: n,
                                    indexed: r,
                                    components: a,
                                    arrayLength: i,
                                    arrayChildren: s
                                });
                            }
                            format(f) {
                                if (null == f && (f = "sighash"), "json" === f) {
                                    const e = this.name || "";
                                    if (this.isArray()) {
                                        const f = JSON.parse(this.arrayChildren.format("json"));
                                        return f.name = e, f.type += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]"), JSON.stringify(f);
                                    }
                                    const t = {
                                        type: "tuple" === this.baseType ? "tuple" : this.type,
                                        name: e
                                    };
                                    return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.isTuple() && (t.components = this.components.map((e)=>JSON.parse(e.format(f)))), JSON.stringify(t);
                                }
                                let e = "";
                                return this.isArray() ? (e += this.arrayChildren.format(f), e += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]")) : this.isTuple() ? e += "(" + this.components.map((e)=>e.format(f)).join("full" === f ? ", " : ",") + ")" : e += this.type, "sighash" !== f && (!0 === this.indexed && (e += " indexed"), "full" === f && this.name && (e += " " + this.name)), e;
                            }
                            isArray() {
                                return "array" === this.baseType;
                            }
                            isTuple() {
                                return "tuple" === this.baseType;
                            }
                            isIndexable() {
                                return null != this.indexed;
                            }
                            walk(f, e) {
                                if (this.isArray()) {
                                    if (!Array.isArray(f)) throw new Error("invalid array value");
                                    if (-1 !== this.arrayLength && f.length !== this.arrayLength) throw new Error("array is wrong length");
                                    const t = this;
                                    return f.map((f)=>t.arrayChildren.walk(f, e));
                                }
                                if (this.isTuple()) {
                                    if (!Array.isArray(f)) throw new Error("invalid tuple value");
                                    if (f.length !== this.components.length) throw new Error("array is wrong length");
                                    const t = this;
                                    return f.map((f, n)=>t.components[n].walk(f, e));
                                }
                                return e(this.type, f);
                            }
                            async walkAsync(f, e) {
                                const t = [], n = [
                                    f
                                ];
                                return At(this, un)[un](t, f, e, (f)=>{
                                    n[0] = f;
                                }), t.length && await Promise.all(t), n[0];
                            }
                            static from(f, e) {
                                if (ln.isParamType(f)) return f;
                                if ("string" == typeof f) try {
                                    return ln.from(Wt(f), e);
                                } catch (e) {
                                    l(!1, "invalid param type", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    let t = "", n = "", r = null;
                                    Yt(f, kt([
                                        "tuple"
                                    ])).has("tuple") || f.peekType("OPEN_PAREN") ? (n = "tuple", r = f.popParams().map((f)=>ln.from(f)), t = "tuple(".concat(r.map((f)=>f.format()).join(","), ")")) : (t = en(f.popType("TYPE")), n = t);
                                    let a = null, i = null;
                                    for(; f.length && f.peekType("BRACKET");){
                                        const e = f.pop();
                                        a = new ln(tn, "", t, n, null, r, i, a), i = e.value, t += e.text, n = "array", r = null;
                                    }
                                    let s = null;
                                    if (Yt(f, Ct).has("indexed")) {
                                        if (!e) throw new Error("");
                                        s = !0;
                                    }
                                    const o = f.peekType("ID") ? f.pop().text : "";
                                    if (f.length) throw new Error("leftover tokens");
                                    return new ln(tn, o, t, n, s, r, i, a);
                                }
                                const t = f.name;
                                l(!t || "string" == typeof t && t.match(Mt), "invalid name", "obj.name", t);
                                let n = f.indexed;
                                null != n && (l(e, "parameter cannot be indexed", "obj.indexed", f.indexed), n = !!n);
                                let r = f.type, a = r.match(fn);
                                if (a) {
                                    const e = parseInt(a[2] || "-1"), i = ln.from({
                                        type: a[1],
                                        components: f.components
                                    });
                                    return new ln(tn, t || "", r, "array", n, null, e, i);
                                }
                                if ("tuple" === r || r.startsWith("tuple(") || r.startsWith("(")) {
                                    const e = null != f.components ? f.components.map((f)=>ln.from(f)) : null;
                                    return new ln(tn, t || "", r, "tuple", n, e, null, null);
                                }
                                return r = en(f.type), new ln(tn, t || "", r, r, n, null, null, null);
                            }
                            static isParamType(f) {
                                return f && f[nn] === rn;
                            }
                        }
                        function hn(f, e, t, n) {
                            if (this.isArray()) {
                                if (!Array.isArray(e)) throw new Error("invalid array value");
                                if (-1 !== this.arrayLength && e.length !== this.arrayLength) throw new Error("array is wrong length");
                                const r = this.arrayChildren, a = e.slice();
                                return a.forEach((e, n)=>{
                                    At(r, un)[un](f, e, t, (f)=>{
                                        a[n] = f;
                                    });
                                }), void n(a);
                            }
                            if (this.isTuple()) {
                                const r = this.components;
                                let a;
                                if (Array.isArray(e)) a = e.slice();
                                else {
                                    if (null == e || "object" != typeof e) throw new Error("invalid tuple value");
                                    a = r.map((f)=>{
                                        if (!f.name) throw new Error("cannot use object value with unnamed components");
                                        if (!(f.name in e)) throw new Error("missing value for component ".concat(f.name));
                                        return e[f.name];
                                    });
                                }
                                if (a.length !== this.components.length) throw new Error("array is wrong length");
                                return a.forEach((e, n)=>{
                                    At(r[n], un)[un](f, e, t, (f)=>{
                                        a[n] = f;
                                    });
                                }), void n(a);
                            }
                            const r = t(this.type, e);
                            r.then ? f.push(async function() {
                                n(await r);
                            }()) : n(r);
                        }
                        class pn {
                            constructor(f, e, t){
                                this.type = void 0, this.inputs = void 0, m(f, tn, "Fragment"), o(this, {
                                    type: e,
                                    inputs: t = Object.freeze(t.slice())
                                });
                            }
                            static from(f) {
                                if ("string" == typeof f) {
                                    try {
                                        pn.from(JSON.parse(f));
                                    } catch (f) {}
                                    return pn.from(Wt(f));
                                }
                                if (f instanceof Gt) switch(f.peekKeyword(Rt)){
                                    case "constructor":
                                        return vn.from(f);
                                    case "error":
                                        return gn.from(f);
                                    case "event":
                                        return wn.from(f);
                                    case "fallback":
                                    case "receive":
                                        return En.from(f);
                                    case "function":
                                        return Tn.from(f);
                                    case "struct":
                                        return An.from(f);
                                }
                                else if ("object" == typeof f) {
                                    switch(f.type){
                                        case "constructor":
                                            return vn.from(f);
                                        case "error":
                                            return gn.from(f);
                                        case "event":
                                            return wn.from(f);
                                        case "fallback":
                                        case "receive":
                                            return En.from(f);
                                        case "function":
                                            return Tn.from(f);
                                        case "struct":
                                            return An.from(f);
                                    }
                                    u(!1, "unsupported type: ".concat(f.type), "UNSUPPORTED_OPERATION", {
                                        operation: "Fragment.from"
                                    });
                                }
                                l(!1, "unsupported frgament object", "obj", f);
                            }
                            static isConstructor(f) {
                                return vn.isFragment(f);
                            }
                            static isError(f) {
                                return gn.isFragment(f);
                            }
                            static isEvent(f) {
                                return wn.isFragment(f);
                            }
                            static isFunction(f) {
                                return Tn.isFragment(f);
                            }
                            static isStruct(f) {
                                return An.isFragment(f);
                            }
                        }
                        class yn extends pn {
                            constructor(f, e, t, n){
                                super(f, e, n), this.name = void 0, l("string" == typeof t && t.match(Mt), "invalid identifier", "name", t), n = Object.freeze(n.slice()), o(this, {
                                    name: t
                                });
                            }
                        }
                        function mn(f, e) {
                            return "(" + e.map((e)=>e.format(f)).join("full" === f ? ", " : ",") + ")";
                        }
                        class gn extends yn {
                            constructor(f, e, t){
                                super(f, "error", e, t), Object.defineProperty(this, nn, {
                                    value: an
                                });
                            }
                            get selector() {
                                return Et(this.format("sighash")).substring(0, 10);
                            }
                            format(f) {
                                if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                                    type: "error",
                                    name: this.name,
                                    inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                                });
                                const e = [];
                                return "sighash" !== f && e.push("error"), e.push(this.name + mn(f, this.inputs)), e.join(" ");
                            }
                            static from(f) {
                                if (gn.isFragment(f)) return f;
                                if ("string" == typeof f) return gn.from(Wt(f));
                                if (f instanceof Gt) {
                                    const e = Jt("error", f), t = Zt(f);
                                    return Qt(f), new gn(tn, e, t);
                                }
                                return new gn(tn, f.name, f.inputs ? f.inputs.map(ln.from) : []);
                            }
                            static isFragment(f) {
                                return f && f[nn] === an;
                            }
                        }
                        class wn extends yn {
                            constructor(f, e, t, n){
                                super(f, "event", e, t), this.anonymous = void 0, Object.defineProperty(this, nn, {
                                    value: sn
                                }), o(this, {
                                    anonymous: n
                                });
                            }
                            get topicHash() {
                                return Et(this.format("sighash"));
                            }
                            format(f) {
                                if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                                    type: "event",
                                    anonymous: this.anonymous,
                                    name: this.name,
                                    inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                                });
                                const e = [];
                                return "sighash" !== f && e.push("event"), e.push(this.name + mn(f, this.inputs)), "sighash" !== f && this.anonymous && e.push("anonymous"), e.join(" ");
                            }
                            static getTopicHash(f, e) {
                                return e = (e || []).map((f)=>ln.from(f)), new wn(tn, f, e, !1).topicHash;
                            }
                            static from(f) {
                                if (wn.isFragment(f)) return f;
                                if ("string" == typeof f) try {
                                    return wn.from(Wt(f));
                                } catch (e) {
                                    l(!1, "invalid event fragment", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    const e = Jt("event", f), t = Zt(f, !0), n = !!Yt(f, kt([
                                        "anonymous"
                                    ])).has("anonymous");
                                    return Qt(f), new wn(tn, e, t, n);
                                }
                                return new wn(tn, f.name, f.inputs ? f.inputs.map((f)=>ln.from(f, !0)) : [], !!f.anonymous);
                            }
                            static isFragment(f) {
                                return f && f[nn] === sn;
                            }
                        }
                        class vn extends pn {
                            constructor(f, e, t, n, r){
                                super(f, e, t), this.payable = void 0, this.gas = void 0, Object.defineProperty(this, nn, {
                                    value: on
                                }), o(this, {
                                    payable: n,
                                    gas: r
                                });
                            }
                            format(f) {
                                if (u(null != f && "sighash" !== f, "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", {
                                    operation: "format(sighash)"
                                }), "json" === f) return JSON.stringify({
                                    type: "constructor",
                                    stateMutability: this.payable ? "payable" : "undefined",
                                    payable: this.payable,
                                    gas: null != this.gas ? this.gas : void 0,
                                    inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                                });
                                const e = [
                                    "constructor".concat(mn(f, this.inputs))
                                ];
                                return this.payable && e.push("payable"), null != this.gas && e.push("@".concat(this.gas.toString())), e.join(" ");
                            }
                            static from(f) {
                                if (vn.isFragment(f)) return f;
                                if ("string" == typeof f) try {
                                    return vn.from(Wt(f));
                                } catch (e) {
                                    l(!1, "invalid constuctor fragment", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    Yt(f, kt([
                                        "constructor"
                                    ]));
                                    const e = Zt(f), t = !!Yt(f, Ot).has("payable"), n = Xt(f);
                                    return Qt(f), new vn(tn, "constructor", e, t, n);
                                }
                                return new vn(tn, "constructor", f.inputs ? f.inputs.map(ln.from) : [], !!f.payable, null != f.gas ? f.gas : null);
                            }
                            static isFragment(f) {
                                return f && f[nn] === on;
                            }
                        }
                        class En extends pn {
                            constructor(f, e, t){
                                super(f, "fallback", e), this.payable = void 0, Object.defineProperty(this, nn, {
                                    value: bn
                                }), o(this, {
                                    payable: t
                                });
                            }
                            format(f) {
                                const e = 0 === this.inputs.length ? "receive" : "fallback";
                                if ("json" === f) {
                                    const f = this.payable ? "payable" : "nonpayable";
                                    return JSON.stringify({
                                        type: e,
                                        stateMutability: f
                                    });
                                }
                                return "".concat(e, "()").concat(this.payable ? " payable" : "");
                            }
                            static from(f) {
                                if (En.isFragment(f)) return f;
                                if ("string" == typeof f) try {
                                    return En.from(Wt(f));
                                } catch (e) {
                                    l(!1, "invalid fallback fragment", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    const e = f.toString();
                                    if (l(f.peekKeyword(kt([
                                        "fallback",
                                        "receive"
                                    ])), "type must be fallback or receive", "obj", e), "receive" === f.popKeyword(kt([
                                        "fallback",
                                        "receive"
                                    ]))) {
                                        const e = Zt(f);
                                        return l(0 === e.length, "receive cannot have arguments", "obj.inputs", e), Yt(f, kt([
                                            "payable"
                                        ])), Qt(f), new En(tn, [], !0);
                                    }
                                    let t = Zt(f);
                                    t.length ? l(1 === t.length && "bytes" === t[0].type, "invalid fallback inputs", "obj.inputs", t.map((f)=>f.format("minimal")).join(", ")) : t = [
                                        ln.from("bytes")
                                    ];
                                    const n = qt(f);
                                    if (l("nonpayable" === n || "payable" === n, "fallback cannot be constants", "obj.stateMutability", n), Yt(f, kt([
                                        "returns"
                                    ])).has("returns")) {
                                        const e = Zt(f);
                                        l(1 === e.length && "bytes" === e[0].type, "invalid fallback outputs", "obj.outputs", e.map((f)=>f.format("minimal")).join(", "));
                                    }
                                    return Qt(f), new En(tn, t, "payable" === n);
                                }
                                if ("receive" === f.type) return new En(tn, [], !0);
                                if ("fallback" === f.type) {
                                    const e = [
                                        ln.from("bytes")
                                    ], t = "payable" === f.stateMutability;
                                    return new En(tn, e, t);
                                }
                                l(!1, "invalid fallback description", "obj", f);
                            }
                            static isFragment(f) {
                                return f && f[nn] === bn;
                            }
                        }
                        class Tn extends yn {
                            constructor(f, e, t, n, r, a){
                                super(f, "function", e, n), this.constant = void 0, this.outputs = void 0, this.stateMutability = void 0, this.payable = void 0, this.gas = void 0, Object.defineProperty(this, nn, {
                                    value: cn
                                }), o(this, {
                                    constant: "view" === t || "pure" === t,
                                    gas: a,
                                    outputs: r = Object.freeze(r.slice()),
                                    payable: "payable" === t,
                                    stateMutability: t
                                });
                            }
                            get selector() {
                                return Et(this.format("sighash")).substring(0, 10);
                            }
                            format(f) {
                                if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                                    type: "function",
                                    name: this.name,
                                    constant: this.constant,
                                    stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                                    payable: this.payable,
                                    gas: null != this.gas ? this.gas : void 0,
                                    inputs: this.inputs.map((e)=>JSON.parse(e.format(f))),
                                    outputs: this.outputs.map((e)=>JSON.parse(e.format(f)))
                                });
                                const e = [];
                                return "sighash" !== f && e.push("function"), e.push(this.name + mn(f, this.inputs)), "sighash" !== f && ("nonpayable" !== this.stateMutability && e.push(this.stateMutability), this.outputs && this.outputs.length && (e.push("returns"), e.push(mn(f, this.outputs))), null != this.gas && e.push("@".concat(this.gas.toString()))), e.join(" ");
                            }
                            static getSelector(f, e) {
                                return e = (e || []).map((f)=>ln.from(f)), new Tn(tn, f, "view", e, [], null).selector;
                            }
                            static from(f) {
                                if (Tn.isFragment(f)) return f;
                                if ("string" == typeof f) try {
                                    return Tn.from(Wt(f));
                                } catch (e) {
                                    l(!1, "invalid function fragment", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    const e = Jt("function", f), t = Zt(f), n = qt(f);
                                    let r = [];
                                    Yt(f, kt([
                                        "returns"
                                    ])).has("returns") && (r = Zt(f));
                                    const a = Xt(f);
                                    return Qt(f), new Tn(tn, e, n, t, r, a);
                                }
                                let e = f.stateMutability;
                                return null == e && (e = "payable", "boolean" == typeof f.constant ? (e = "view", f.constant || (e = "payable", "boolean" != typeof f.payable || f.payable || (e = "nonpayable"))) : "boolean" != typeof f.payable || f.payable || (e = "nonpayable")), new Tn(tn, f.name, e, f.inputs ? f.inputs.map(ln.from) : [], f.outputs ? f.outputs.map(ln.from) : [], null != f.gas ? f.gas : null);
                            }
                            static isFragment(f) {
                                return f && f[nn] === cn;
                            }
                        }
                        class An extends yn {
                            constructor(f, e, t){
                                super(f, "struct", e, t), Object.defineProperty(this, nn, {
                                    value: dn
                                });
                            }
                            format() {
                                throw new Error("@TODO");
                            }
                            static from(f) {
                                if ("string" == typeof f) try {
                                    return An.from(Wt(f));
                                } catch (e) {
                                    l(!1, "invalid struct fragment", "obj", f);
                                }
                                else if (f instanceof Gt) {
                                    const e = Jt("struct", f), t = Zt(f);
                                    return Qt(f), new An(tn, e, t);
                                }
                                return new An(tn, f.name, f.inputs ? f.inputs.map(ln.from) : []);
                            }
                            static isFragment(f) {
                                return f && f[nn] === dn;
                            }
                        }
                        function xn(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var In = 0;
                        const kn = new Map;
                        kn.set(0, "GENERIC_PANIC"), kn.set(1, "ASSERT_FALSE"), kn.set(17, "OVERFLOW"), kn.set(18, "DIVIDE_BY_ZERO"), kn.set(33, "ENUM_RANGE_ERROR"), kn.set(34, "BAD_STORAGE_DATA"), kn.set(49, "STACK_UNDERFLOW"), kn.set(50, "ARRAY_RANGE_ERROR"), kn.set(65, "OUT_OF_MEMORY"), kn.set(81, "UNINITIALIZED_FUNCTION_CALL");
                        const On = new RegExp(/^bytes([0-9]*)$/), _n = new RegExp(/^(u?int)([0-9]*)$/);
                        let Pn = null, Sn = 1024;
                        var Rn = "__private_" + In++ + "_getCoder";
                        class Nn {
                            constructor(){
                                Object.defineProperty(this, Rn, {
                                    value: Cn
                                });
                            }
                            getDefaultValue(f) {
                                const e = f.map((f)=>xn(this, Rn)[Rn](ln.from(f)));
                                return new vt(e, "_").defaultValue();
                            }
                            encode(f, e) {
                                h(e.length, f.length, "types/values length mismatch");
                                const t = f.map((f)=>xn(this, Rn)[Rn](ln.from(f))), n = new vt(t, "_"), r = new Fe;
                                return n.encode(r, e), r.data;
                            }
                            decode(f, e, t) {
                                const n = f.map((f)=>xn(this, Rn)[Rn](ln.from(f)));
                                return new vt(n, "_").decode(new $e(e, t, Sn));
                            }
                            static _setDefaultMaxInflation(f) {
                                l("number" == typeof f && Number.isInteger(f), "invalid defaultMaxInflation factor", "value", f), Sn = f;
                            }
                            static defaultAbiCoder() {
                                return null == Pn && (Pn = new Nn), Pn;
                            }
                            static getBuiltinCallException(f, e, t) {
                                return function(f, e, t, n) {
                                    let r = "missing revert data", a = null, i = null;
                                    if (t) {
                                        r = "execution reverted";
                                        const e = w(t);
                                        if (t = x(t), 0 === e.length) r += " (no data present; likely require(false) occurred", a = "require(false)";
                                        else if (e.length % 32 != 4) r += " (could not decode reason; invalid data length)";
                                        else if ("0x08c379a0" === x(e.slice(0, 4))) try {
                                            a = n.decode([
                                                "string"
                                            ], e.slice(4))[0], i = {
                                                signature: "Error(string)",
                                                name: "Error",
                                                args: [
                                                    a
                                                ]
                                            }, r += ": ".concat(JSON.stringify(a));
                                        } catch (f) {
                                            r += " (could not decode reason; invalid string data)";
                                        }
                                        else if ("0x4e487b71" === x(e.slice(0, 4))) try {
                                            const f = Number(n.decode([
                                                "uint256"
                                            ], e.slice(4))[0]);
                                            i = {
                                                signature: "Panic(uint256)",
                                                name: "Panic",
                                                args: [
                                                    f
                                                ]
                                            }, a = "Panic due to ".concat(kn.get(f) || "UNKNOWN", "(").concat(f, ")"), r += ": ".concat(a);
                                        } catch (f) {
                                            r += " (could not decode panic code)";
                                        }
                                        else r += " (unknown custom error)";
                                    }
                                    const s = {
                                        to: e.to ? Hf(e.to) : null,
                                        data: e.data || "0x"
                                    };
                                    return e.from && (s.from = Hf(e.from)), d(r, "CALL_EXCEPTION", {
                                        action: f,
                                        data: t,
                                        reason: a,
                                        transaction: s,
                                        invocation: null,
                                        revert: i
                                    });
                                }(f, e, t, Nn.defaultAbiCoder());
                            }
                        }
                        function Cn(f) {
                            if (f.isArray()) return new ot(xn(this, Rn)[Rn](f.arrayChildren), f.arrayLength, f.name);
                            if (f.isTuple()) return new vt(f.components.map((f)=>xn(this, Rn)[Rn](f)), f.name);
                            switch(f.baseType){
                                case "address":
                                    return new rt(f.name);
                                case "bool":
                                    return new bt(f.name);
                                case "string":
                                    return new wt(f.name);
                                case "bytes":
                                    return new dt(f.name);
                                case "":
                                    return new ht(f.name);
                            }
                            let e = f.type.match(_n);
                            if (e) {
                                let t = parseInt(e[2] || "256");
                                return l(0 !== t && t <= 256 && t % 8 == 0, "invalid " + e[1] + " bit length", "param", f), new gt(t / 8, "int" === e[1], f.name);
                            }
                            if (e = f.type.match(On), e) {
                                let t = parseInt(e[1]);
                                return l(0 !== t && t <= 32, "invalid bytes length", "param", f), new ut(t, f.name);
                            }
                            l(!1, "invalid type", "type", f.type);
                        }
                        class Un extends yf {
                            constructor(f, e){
                                super(), this.finished = !1, this.destroyed = !1, Y(f);
                                const t = pf(e);
                                if (this.iHash = f.create(), "function" != typeof this.iHash.update) throw new Error("Expected instance of class which extends utils.Hash");
                                this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
                                const n = this.blockLen, r = new Uint8Array(n);
                                r.set(t.length > n ? f.create().update(t).digest() : t);
                                for(let f = 0; f < r.length; f++)r[f] ^= 54;
                                this.iHash.update(r), this.oHash = f.create();
                                for(let f = 0; f < r.length; f++)r[f] ^= 106;
                                this.oHash.update(r), r.fill(0);
                            }
                            update(f) {
                                return q(this), this.iHash.update(f), this;
                            }
                            digestInto(f) {
                                q(this), J(f, this.outputLen), this.finished = !0, this.iHash.digestInto(f), this.oHash.update(f), this.oHash.digestInto(f), this.destroy();
                            }
                            digest() {
                                const f = new Uint8Array(this.oHash.outputLen);
                                return this.digestInto(f), f;
                            }
                            _cloneInto(f) {
                                f || (f = Object.create(Object.getPrototypeOf(this), {}));
                                const { oHash: e, iHash: t, finished: n, destroyed: r, blockLen: a, outputLen: i } = this;
                                return f.finished = n, f.destroyed = r, f.blockLen = a, f.outputLen = i, f.oHash = e._cloneInto(f.oHash), f.iHash = t._cloneInto(f.iHash), f;
                            }
                            destroy() {
                                this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
                            }
                        }
                        const Ln = (f, e, t)=>new Un(f, e).update(t).digest();
                        function Bn(f, e, t, n) {
                            const { c: r, dkLen: a, DK: i, PRF: s, PRFSalt: o } = function(f, e, t, n) {
                                Y(f);
                                const r = gf({
                                    dkLen: 32,
                                    asyncTick: 10
                                }, n), { c: a, dkLen: i, asyncTick: s } = r;
                                if ($(a), $(i), $(s), a < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
                                const o = pf(e), b = pf(t), c = new Uint8Array(i), d = Ln.create(f, o), u = d._cloneInto().update(b);
                                return {
                                    c: a,
                                    dkLen: i,
                                    asyncTick: s,
                                    DK: c,
                                    PRF: d,
                                    PRFSalt: u
                                };
                            }(f, e, t, n);
                            let b;
                            const c = new Uint8Array(4), d = df(c), u = new Uint8Array(s.outputLen);
                            for(let f = 1, e = 0; e < a; f++, e += s.outputLen){
                                const t = i.subarray(e, e + s.outputLen);
                                d.setInt32(0, f, !1), (b = o._cloneInto(b)).update(c).digestInto(u), t.set(u.subarray(0, t.length));
                                for(let f = 1; f < r; f++){
                                    s._cloneInto(b).update(u).digestInto(u);
                                    for(let f = 0; f < t.length; f++)t[f] ^= u[f];
                                }
                            }
                            return function(f, e, t, n, r) {
                                return f.destroy(), e.destroy(), n && n.destroy(), r.fill(0), t;
                            }(s, o, i, b, u);
                        }
                        Ln.create = (f, e)=>new Un(f, e);
                        class Dn extends yf {
                            constructor(f, e, t, n){
                                super(), this.blockLen = f, this.outputLen = e, this.padOffset = t, this.isLE = n, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(f), this.view = df(this.buffer);
                            }
                            update(f) {
                                q(this);
                                const { view: e, buffer: t, blockLen: n } = this, r = (f = pf(f)).length;
                                for(let a = 0; a < r;){
                                    const i = Math.min(n - this.pos, r - a);
                                    if (i !== n) t.set(f.subarray(a, a + i), this.pos), this.pos += i, a += i, this.pos === n && (this.process(e, 0), this.pos = 0);
                                    else {
                                        const e = df(f);
                                        for(; n <= r - a; a += n)this.process(e, a);
                                    }
                                }
                                return this.length += f.length, this.roundClean(), this;
                            }
                            digestInto(f) {
                                q(this), Z(f, this), this.finished = !0;
                                const { buffer: e, view: t, blockLen: n, isLE: r } = this;
                                let { pos: a } = this;
                                e[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > n - a && (this.process(t, 0), a = 0);
                                for(let f = a; f < n; f++)e[f] = 0;
                                !function(f, e, t, n) {
                                    if ("function" == typeof f.setBigUint64) return f.setBigUint64(e, t, n);
                                    const r = BigInt(32), a = BigInt(4294967295), i = Number(t >> r & a), s = Number(t & a), o = n ? 4 : 0, b = n ? 0 : 4;
                                    f.setUint32(e + o, i, n), f.setUint32(e + b, s, n);
                                }(t, n - 8, BigInt(8 * this.length), r), this.process(t, 0);
                                const i = df(f), s = this.outputLen;
                                if (s % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
                                const o = s / 4, b = this.get();
                                if (o > b.length) throw new Error("_sha2: outputLen bigger than state");
                                for(let f = 0; f < o; f++)i.setUint32(4 * f, b[f], r);
                            }
                            digest() {
                                const { buffer: f, outputLen: e } = this;
                                this.digestInto(f);
                                const t = f.slice(0, e);
                                return this.destroy(), t;
                            }
                            _cloneInto(f) {
                                f || (f = new this.constructor), f.set(...this.get());
                                const { blockLen: e, buffer: t, length: n, finished: r, destroyed: a, pos: i } = this;
                                return f.length = n, f.pos = i, f.finished = r, f.destroyed = a, n % e && f.buffer.set(t), f;
                            }
                        }
                        const Fn = (f, e, t)=>f & e ^ ~f & t, Mn = (f, e, t)=>f & e ^ f & t ^ e & t, jn = new Uint32Array([
                            1116352408,
                            1899447441,
                            3049323471,
                            3921009573,
                            961987163,
                            1508970993,
                            2453635748,
                            2870763221,
                            3624381080,
                            310598401,
                            607225278,
                            1426881987,
                            1925078388,
                            2162078206,
                            2614888103,
                            3248222580,
                            3835390401,
                            4022224774,
                            264347078,
                            604807628,
                            770255983,
                            1249150122,
                            1555081692,
                            1996064986,
                            2554220882,
                            2821834349,
                            2952996808,
                            3210313671,
                            3336571891,
                            3584528711,
                            113926993,
                            338241895,
                            666307205,
                            773529912,
                            1294757372,
                            1396182291,
                            1695183700,
                            1986661051,
                            2177026350,
                            2456956037,
                            2730485921,
                            2820302411,
                            3259730800,
                            3345764771,
                            3516065817,
                            3600352804,
                            4094571909,
                            275423344,
                            430227734,
                            506948616,
                            659060556,
                            883997877,
                            958139571,
                            1322822218,
                            1537002063,
                            1747873779,
                            1955562222,
                            2024104815,
                            2227730452,
                            2361852424,
                            2428436474,
                            2756734187,
                            3204031479,
                            3329325298
                        ]), Kn = new Uint32Array([
                            1779033703,
                            3144134277,
                            1013904242,
                            2773480762,
                            1359893119,
                            2600822924,
                            528734635,
                            1541459225
                        ]), zn = new Uint32Array(64);
                        class Vn extends Dn {
                            constructor(){
                                super(64, 32, 8, !1), this.A = 0 | Kn[0], this.B = 0 | Kn[1], this.C = 0 | Kn[2], this.D = 0 | Kn[3], this.E = 0 | Kn[4], this.F = 0 | Kn[5], this.G = 0 | Kn[6], this.H = 0 | Kn[7];
                            }
                            get() {
                                const { A: f, B: e, C: t, D: n, E: r, F: a, G: i, H: s } = this;
                                return [
                                    f,
                                    e,
                                    t,
                                    n,
                                    r,
                                    a,
                                    i,
                                    s
                                ];
                            }
                            set(f, e, t, n, r, a, i, s) {
                                this.A = 0 | f, this.B = 0 | e, this.C = 0 | t, this.D = 0 | n, this.E = 0 | r, this.F = 0 | a, this.G = 0 | i, this.H = 0 | s;
                            }
                            process(f, e) {
                                for(let t = 0; t < 16; t++, e += 4)zn[t] = f.getUint32(e, !1);
                                for(let f = 16; f < 64; f++){
                                    const e = zn[f - 15], t = zn[f - 2], n = uf(e, 7) ^ uf(e, 18) ^ e >>> 3, r = uf(t, 17) ^ uf(t, 19) ^ t >>> 10;
                                    zn[f] = r + zn[f - 7] + n + zn[f - 16] | 0;
                                }
                                let { A: t, B: n, C: r, D: a, E: i, F: s, G: o, H: b } = this;
                                for(let f = 0; f < 64; f++){
                                    const e = b + (uf(i, 6) ^ uf(i, 11) ^ uf(i, 25)) + Fn(i, s, o) + jn[f] + zn[f] | 0, c = (uf(t, 2) ^ uf(t, 13) ^ uf(t, 22)) + Mn(t, n, r) | 0;
                                    b = o, o = s, s = i, i = a + e | 0, a = r, r = n, n = t, t = e + c | 0;
                                }
                                t = t + this.A | 0, n = n + this.B | 0, r = r + this.C | 0, a = a + this.D | 0, i = i + this.E | 0, s = s + this.F | 0, o = o + this.G | 0, b = b + this.H | 0, this.set(t, n, r, a, i, s, o, b);
                            }
                            roundClean() {
                                zn.fill(0);
                            }
                            destroy() {
                                this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
                            }
                        }
                        const Gn = wf(()=>new Vn), [Hn, Wn] = sf.split([
                            "0x428a2f98d728ae22",
                            "0x7137449123ef65cd",
                            "0xb5c0fbcfec4d3b2f",
                            "0xe9b5dba58189dbbc",
                            "0x3956c25bf348b538",
                            "0x59f111f1b605d019",
                            "0x923f82a4af194f9b",
                            "0xab1c5ed5da6d8118",
                            "0xd807aa98a3030242",
                            "0x12835b0145706fbe",
                            "0x243185be4ee4b28c",
                            "0x550c7dc3d5ffb4e2",
                            "0x72be5d74f27b896f",
                            "0x80deb1fe3b1696b1",
                            "0x9bdc06a725c71235",
                            "0xc19bf174cf692694",
                            "0xe49b69c19ef14ad2",
                            "0xefbe4786384f25e3",
                            "0x0fc19dc68b8cd5b5",
                            "0x240ca1cc77ac9c65",
                            "0x2de92c6f592b0275",
                            "0x4a7484aa6ea6e483",
                            "0x5cb0a9dcbd41fbd4",
                            "0x76f988da831153b5",
                            "0x983e5152ee66dfab",
                            "0xa831c66d2db43210",
                            "0xb00327c898fb213f",
                            "0xbf597fc7beef0ee4",
                            "0xc6e00bf33da88fc2",
                            "0xd5a79147930aa725",
                            "0x06ca6351e003826f",
                            "0x142929670a0e6e70",
                            "0x27b70a8546d22ffc",
                            "0x2e1b21385c26c926",
                            "0x4d2c6dfc5ac42aed",
                            "0x53380d139d95b3df",
                            "0x650a73548baf63de",
                            "0x766a0abb3c77b2a8",
                            "0x81c2c92e47edaee6",
                            "0x92722c851482353b",
                            "0xa2bfe8a14cf10364",
                            "0xa81a664bbc423001",
                            "0xc24b8b70d0f89791",
                            "0xc76c51a30654be30",
                            "0xd192e819d6ef5218",
                            "0xd69906245565a910",
                            "0xf40e35855771202a",
                            "0x106aa07032bbd1b8",
                            "0x19a4c116b8d2d0c8",
                            "0x1e376c085141ab53",
                            "0x2748774cdf8eeb99",
                            "0x34b0bcb5e19b48a8",
                            "0x391c0cb3c5c95a63",
                            "0x4ed8aa4ae3418acb",
                            "0x5b9cca4f7763e373",
                            "0x682e6ff3d6b2b8a3",
                            "0x748f82ee5defb2fc",
                            "0x78a5636f43172f60",
                            "0x84c87814a1f0ab72",
                            "0x8cc702081a6439ec",
                            "0x90befffa23631e28",
                            "0xa4506cebde82bde9",
                            "0xbef9a3f7b2c67915",
                            "0xc67178f2e372532b",
                            "0xca273eceea26619c",
                            "0xd186b8c721c0c207",
                            "0xeada7dd6cde0eb1e",
                            "0xf57d4f7fee6ed178",
                            "0x06f067aa72176fba",
                            "0x0a637dc5a2c898a6",
                            "0x113f9804bef90dae",
                            "0x1b710b35131c471b",
                            "0x28db77f523047d84",
                            "0x32caab7b40c72493",
                            "0x3c9ebe0a15c9bebc",
                            "0x431d67c49c100d4c",
                            "0x4cc5d4becb3e42b6",
                            "0x597f299cfc657e2a",
                            "0x5fcb6fab3ad6faec",
                            "0x6c44198c4a475817"
                        ].map((f)=>BigInt(f))), $n = new Uint32Array(80), Jn = new Uint32Array(80);
                        class Yn extends Dn {
                            constructor(){
                                super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
                            }
                            get() {
                                const { Ah: f, Al: e, Bh: t, Bl: n, Ch: r, Cl: a, Dh: i, Dl: s, Eh: o, El: b, Fh: c, Fl: d, Gh: u, Gl: l, Hh: h, Hl: p } = this;
                                return [
                                    f,
                                    e,
                                    t,
                                    n,
                                    r,
                                    a,
                                    i,
                                    s,
                                    o,
                                    b,
                                    c,
                                    d,
                                    u,
                                    l,
                                    h,
                                    p
                                ];
                            }
                            set(f, e, t, n, r, a, i, s, o, b, c, d, u, l, h, p) {
                                this.Ah = 0 | f, this.Al = 0 | e, this.Bh = 0 | t, this.Bl = 0 | n, this.Ch = 0 | r, this.Cl = 0 | a, this.Dh = 0 | i, this.Dl = 0 | s, this.Eh = 0 | o, this.El = 0 | b, this.Fh = 0 | c, this.Fl = 0 | d, this.Gh = 0 | u, this.Gl = 0 | l, this.Hh = 0 | h, this.Hl = 0 | p;
                            }
                            process(f, e) {
                                for(let t = 0; t < 16; t++, e += 4)$n[t] = f.getUint32(e), Jn[t] = f.getUint32(e += 4);
                                for(let f = 16; f < 80; f++){
                                    const e = 0 | $n[f - 15], t = 0 | Jn[f - 15], n = sf.rotrSH(e, t, 1) ^ sf.rotrSH(e, t, 8) ^ sf.shrSH(e, t, 7), r = sf.rotrSL(e, t, 1) ^ sf.rotrSL(e, t, 8) ^ sf.shrSL(e, t, 7), a = 0 | $n[f - 2], i = 0 | Jn[f - 2], s = sf.rotrSH(a, i, 19) ^ sf.rotrBH(a, i, 61) ^ sf.shrSH(a, i, 6), o = sf.rotrSL(a, i, 19) ^ sf.rotrBL(a, i, 61) ^ sf.shrSL(a, i, 6), b = sf.add4L(r, o, Jn[f - 7], Jn[f - 16]), c = sf.add4H(b, n, s, $n[f - 7], $n[f - 16]);
                                    $n[f] = 0 | c, Jn[f] = 0 | b;
                                }
                                let { Ah: t, Al: n, Bh: r, Bl: a, Ch: i, Cl: s, Dh: o, Dl: b, Eh: c, El: d, Fh: u, Fl: l, Gh: h, Gl: p, Hh: y, Hl: m } = this;
                                for(let f = 0; f < 80; f++){
                                    const e = sf.rotrSH(c, d, 14) ^ sf.rotrSH(c, d, 18) ^ sf.rotrBH(c, d, 41), g = sf.rotrSL(c, d, 14) ^ sf.rotrSL(c, d, 18) ^ sf.rotrBL(c, d, 41), w = c & u ^ ~c & h, v = d & l ^ ~d & p, E = sf.add5L(m, g, v, Wn[f], Jn[f]), T = sf.add5H(E, y, e, w, Hn[f], $n[f]), A = 0 | E, x = sf.rotrSH(t, n, 28) ^ sf.rotrBH(t, n, 34) ^ sf.rotrBH(t, n, 39), I = sf.rotrSL(t, n, 28) ^ sf.rotrBL(t, n, 34) ^ sf.rotrBL(t, n, 39), k = t & r ^ t & i ^ r & i, O = n & a ^ n & s ^ a & s;
                                    y = 0 | h, m = 0 | p, h = 0 | u, p = 0 | l, u = 0 | c, l = 0 | d, ({ h: c, l: d } = sf.add(0 | o, 0 | b, 0 | T, 0 | A)), o = 0 | i, b = 0 | s, i = 0 | r, s = 0 | a, r = 0 | t, a = 0 | n;
                                    const _ = sf.add3L(A, I, O);
                                    t = sf.add3H(_, T, x, k), n = 0 | _;
                                }
                                ({ h: t, l: n } = sf.add(0 | this.Ah, 0 | this.Al, 0 | t, 0 | n)), ({ h: r, l: a } = sf.add(0 | this.Bh, 0 | this.Bl, 0 | r, 0 | a)), ({ h: i, l: s } = sf.add(0 | this.Ch, 0 | this.Cl, 0 | i, 0 | s)), ({ h: o, l: b } = sf.add(0 | this.Dh, 0 | this.Dl, 0 | o, 0 | b)), ({ h: c, l: d } = sf.add(0 | this.Eh, 0 | this.El, 0 | c, 0 | d)), ({ h: u, l } = sf.add(0 | this.Fh, 0 | this.Fl, 0 | u, 0 | l)), ({ h, l: p } = sf.add(0 | this.Gh, 0 | this.Gl, 0 | h, 0 | p)), ({ h: y, l: m } = sf.add(0 | this.Hh, 0 | this.Hl, 0 | y, 0 | m)), this.set(t, n, r, a, i, s, o, b, c, d, u, l, h, p, y, m);
                            }
                            roundClean() {
                                $n.fill(0), Jn.fill(0);
                            }
                            destroy() {
                                this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                            }
                        }
                        const qn = wf(()=>new Yn), Zn = function() {
                            if ("undefined" != typeof self) return self;
                            if ("TURBOPACK compile-time falsy", 0) {
                                "TURBOPACK unreachable";
                            }
                            if (void 0 !== t.g) return t.g;
                            throw new Error("unable to locate global object");
                        }(), Xn = Zn.crypto || Zn.msCrypto;
                        function Qn(f) {
                            switch(f){
                                case "sha256":
                                    return Gn.create();
                                case "sha512":
                                    return qn.create();
                            }
                            l(!1, "invalid hashing algorithm name", "algorithm", f);
                        }
                        let fr = !1;
                        const er = function(f) {
                            return new Uint8Array(function(f) {
                                u(null != Xn, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
                                    operation: "randomBytes"
                                }), l(Number.isInteger(f) && f > 0 && f <= 1024, "invalid length", "length", f);
                                const e = new Uint8Array(f);
                                return Xn.getRandomValues(e), e;
                            }(f));
                        };
                        let tr = er;
                        function nr(f) {
                            return tr(f);
                        }
                        nr._ = er, nr.lock = function() {
                            fr = !0;
                        }, nr.register = function(f) {
                            if (fr) throw new Error("randomBytes is locked");
                            tr = f;
                        }, Object.freeze(nr), BigInt(0);
                        const rr = BigInt(1), ar = BigInt(2), ir = (f)=>f instanceof Uint8Array, sr = Array.from({
                            length: 256
                        }, (f, e)=>e.toString(16).padStart(2, "0"));
                        function or(f) {
                            if (!ir(f)) throw new Error("Uint8Array expected");
                            let e = "";
                            for(let t = 0; t < f.length; t++)e += sr[f[t]];
                            return e;
                        }
                        function br(f) {
                            if ("string" != typeof f) throw new Error("hex string expected, got " + typeof f);
                            return BigInt("" === f ? "0" : "0x".concat(f));
                        }
                        function cr(f) {
                            if ("string" != typeof f) throw new Error("hex string expected, got " + typeof f);
                            const e = f.length;
                            if (e % 2) throw new Error("padded hex string expected, got unpadded hex of length " + e);
                            const t = new Uint8Array(e / 2);
                            for(let e = 0; e < t.length; e++){
                                const n = 2 * e, r = f.slice(n, n + 2), a = Number.parseInt(r, 16);
                                if (Number.isNaN(a) || a < 0) throw new Error("Invalid byte sequence");
                                t[e] = a;
                            }
                            return t;
                        }
                        function dr(f) {
                            return br(or(f));
                        }
                        function ur(f) {
                            if (!ir(f)) throw new Error("Uint8Array expected");
                            return br(or(Uint8Array.from(f).reverse()));
                        }
                        function lr(f, e) {
                            return cr(f.toString(16).padStart(2 * e, "0"));
                        }
                        function hr(f, e) {
                            return lr(f, e).reverse();
                        }
                        function pr(f, e, t) {
                            let n;
                            if ("string" == typeof e) try {
                                n = cr(e);
                            } catch (t) {
                                throw new Error("".concat(f, ' must be valid hex string, got "').concat(e, '". Cause: ').concat(t));
                            }
                            else {
                                if (!ir(e)) throw new Error("".concat(f, " must be hex string or Uint8Array"));
                                n = Uint8Array.from(e);
                            }
                            const r = n.length;
                            if ("number" == typeof t && r !== t) throw new Error("".concat(f, " expected ").concat(t, " bytes, got ").concat(r));
                            return n;
                        }
                        function yr() {
                            for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                            const n = new Uint8Array(e.reduce((f, e)=>f + e.length, 0));
                            let r = 0;
                            return e.forEach((f)=>{
                                if (!ir(f)) throw new Error("Uint8Array expected");
                                n.set(f, r), r += f.length;
                            }), n;
                        }
                        const mr = (f)=>(ar << BigInt(f - 1)) - rr, gr = (f)=>new Uint8Array(f), wr = (f)=>Uint8Array.from(f);
                        function vr(f, e, t) {
                            if ("number" != typeof f || f < 2) throw new Error("hashLen must be a number");
                            if ("number" != typeof e || e < 2) throw new Error("qByteLen must be a number");
                            if ("function" != typeof t) throw new Error("hmacFn must be a function");
                            let n = gr(f), r = gr(f), a = 0;
                            const i = ()=>{
                                n.fill(1), r.fill(0), a = 0;
                            }, s = function() {
                                for(var f = arguments.length, e = new Array(f), a = 0; a < f; a++)e[a] = arguments[a];
                                return t(r, n, ...e);
                            }, o = function() {
                                let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gr();
                                r = s(wr([
                                    0
                                ]), f), n = s(), 0 !== f.length && (r = s(wr([
                                    1
                                ]), f), n = s());
                            }, b = ()=>{
                                if (a++ >= 1e3) throw new Error("drbg: tried 1000 values");
                                let f = 0;
                                const t = [];
                                for(; f < e;){
                                    n = s();
                                    const e = n.slice();
                                    t.push(e), f += n.length;
                                }
                                return yr(...t);
                            };
                            return (f, e)=>{
                                let t;
                                for(i(), o(f); !(t = e(b()));)o();
                                return i(), t;
                            };
                        }
                        const Er = {
                            bigint: (f)=>"bigint" == typeof f,
                            function: (f)=>"function" == typeof f,
                            boolean: (f)=>"boolean" == typeof f,
                            string: (f)=>"string" == typeof f,
                            stringOrUint8Array: (f)=>"string" == typeof f || f instanceof Uint8Array,
                            isSafeInteger: (f)=>Number.isSafeInteger(f),
                            array: (f)=>Array.isArray(f),
                            field: (f, e)=>e.Fp.isValid(f),
                            hash: (f)=>"function" == typeof f && Number.isSafeInteger(f.outputLen)
                        };
                        function Tr(f, e) {
                            let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                            const n = (e, t, n)=>{
                                const r = Er[t];
                                if ("function" != typeof r) throw new Error('Invalid validator "'.concat(t, '", expected function'));
                                const a = f[e];
                                if (!(n && void 0 === a || r(a, f))) throw new Error("Invalid param ".concat(String(e), "=").concat(a, " (").concat(typeof a, "), expected ").concat(t));
                            };
                            for (const [f, t] of Object.entries(e))n(f, t, !1);
                            for (const [f, e] of Object.entries(t))n(f, e, !0);
                            return f;
                        }
                        const Ar = BigInt(0), xr = BigInt(1), Ir = BigInt(2), kr = BigInt(3), Or = BigInt(4), _r = BigInt(5), Pr = BigInt(8);
                        function Sr(f, e) {
                            const t = f % e;
                            return t >= Ar ? t : e + t;
                        }
                        function Rr(f, e, t) {
                            if (t <= Ar || e < Ar) throw new Error("Expected power/modulo > 0");
                            if (t === xr) return Ar;
                            let n = xr;
                            for(; e > Ar;)e & xr && (n = n * f % t), f = f * f % t, e >>= xr;
                            return n;
                        }
                        function Nr(f, e, t) {
                            let n = f;
                            for(; e-- > Ar;)n *= n, n %= t;
                            return n;
                        }
                        function Cr(f, e) {
                            if (f === Ar || e <= Ar) throw new Error("invert: expected positive integers, got n=".concat(f, " mod=").concat(e));
                            let t = Sr(f, e), n = e, r = Ar, a = xr, i = xr, s = Ar;
                            for(; t !== Ar;){
                                const f = n / t, e = n % t, o = r - i * f, b = a - s * f;
                                n = t, t = e, r = i, a = s, i = o, s = b;
                            }
                            if (n !== xr) throw new Error("invert: does not exist");
                            return Sr(r, e);
                        }
                        BigInt(9), BigInt(16);
                        const Ur = [
                            "create",
                            "isValid",
                            "is0",
                            "neg",
                            "inv",
                            "sqrt",
                            "sqr",
                            "eql",
                            "add",
                            "sub",
                            "mul",
                            "pow",
                            "div",
                            "addN",
                            "subN",
                            "mulN",
                            "sqrN"
                        ];
                        function Lr(f, e) {
                            const t = void 0 !== e ? e : f.toString(2).length;
                            return {
                                nBitLength: t,
                                nByteLength: Math.ceil(t / 8)
                            };
                        }
                        function Br(f) {
                            if ("bigint" != typeof f) throw new Error("field order must be bigint");
                            const e = f.toString(2).length;
                            return Math.ceil(e / 8);
                        }
                        function Dr(f) {
                            const e = Br(f);
                            return e + Math.ceil(e / 2);
                        }
                        const Fr = BigInt(0), Mr = BigInt(1);
                        function jr(f) {
                            return Tr(f.Fp, Ur.reduce((f, e)=>(f[e] = "function", f), {
                                ORDER: "bigint",
                                MASK: "bigint",
                                BYTES: "isSafeInteger",
                                BITS: "isSafeInteger"
                            })), Tr(f, {
                                n: "bigint",
                                h: "bigint",
                                Gx: "field",
                                Gy: "field"
                            }, {
                                nBitLength: "isSafeInteger",
                                nByteLength: "isSafeInteger"
                            }), Object.freeze(r(r(r({}, Lr(f.n, f.nBitLength)), f), {}, {
                                p: f.Fp.ORDER
                            }));
                        }
                        const { bytesToNumberBE: Kr, hexToBytes: zr } = n, Vr = {
                            Err: class extends Error {
                                constructor(){
                                    super(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "");
                                }
                            },
                            _parseInt (f) {
                                const { Err: e } = Vr;
                                if (f.length < 2 || 2 !== f[0]) throw new e("Invalid signature integer tag");
                                const t = f[1], n = f.subarray(2, t + 2);
                                if (!t || n.length !== t) throw new e("Invalid signature integer: wrong length");
                                if (128 & n[0]) throw new e("Invalid signature integer: negative");
                                if (0 === n[0] && !(128 & n[1])) throw new e("Invalid signature integer: unnecessary leading zero");
                                return {
                                    d: Kr(n),
                                    l: f.subarray(t + 2)
                                };
                            },
                            toSig (f) {
                                const { Err: e } = Vr, t = "string" == typeof f ? zr(f) : f;
                                if (!(t instanceof Uint8Array)) throw new Error("ui8a expected");
                                let n = t.length;
                                if (n < 2 || 48 != t[0]) throw new e("Invalid signature tag");
                                if (t[1] !== n - 2) throw new e("Invalid signature: incorrect length");
                                const { d: r, l: a } = Vr._parseInt(t.subarray(2)), { d: i, l: s } = Vr._parseInt(a);
                                if (s.length) throw new e("Invalid signature: left bytes after parsing");
                                return {
                                    r,
                                    s: i
                                };
                            },
                            hexFromSig (f) {
                                const e = (f)=>8 & Number.parseInt(f[0], 16) ? "00" + f : f, t = (f)=>{
                                    const e = f.toString(16);
                                    return 1 & e.length ? "0".concat(e) : e;
                                }, n = e(t(f.s)), r = e(t(f.r)), a = n.length / 2, i = r.length / 2, s = t(a), o = t(i);
                                return "30".concat(t(i + a + 4), "02").concat(o).concat(r, "02").concat(s).concat(n);
                            }
                        }, Gr = BigInt(0), Hr = BigInt(1), Wr = (BigInt(2), BigInt(3));
                        BigInt(4);
                        const $r = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), Jr = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Yr = BigInt(1), qr = BigInt(2), Zr = (f, e)=>(f + e / qr) / e, Xr = function(f, e) {
                            let t = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                            if (f <= Ar) throw new Error("Expected Field ORDER > 0, got ".concat(f));
                            const { nBitLength: r, nByteLength: a } = Lr(f, e);
                            if (a > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
                            const i = function(f) {
                                if (f % Or === kr) {
                                    const e = (f + xr) / Or;
                                    return function(f, t) {
                                        const n = f.pow(t, e);
                                        if (!f.eql(f.sqr(n), t)) throw new Error("Cannot find square root");
                                        return n;
                                    };
                                }
                                if (f % Pr === _r) {
                                    const e = (f - _r) / Pr;
                                    return function(f, t) {
                                        const n = f.mul(t, Ir), r = f.pow(n, e), a = f.mul(t, r), i = f.mul(f.mul(a, Ir), r), s = f.mul(a, f.sub(i, f.ONE));
                                        if (!f.eql(f.sqr(s), t)) throw new Error("Cannot find square root");
                                        return s;
                                    };
                                }
                                return function(f) {
                                    const e = (f - xr) / Ir;
                                    let t, n, r;
                                    for(t = f - xr, n = 0; t % Ir === Ar; t /= Ir, n++);
                                    for(r = Ir; r < f && Rr(r, e, f) !== f - xr; r++);
                                    if (1 === n) {
                                        const e = (f + xr) / Or;
                                        return function(f, t) {
                                            const n = f.pow(t, e);
                                            if (!f.eql(f.sqr(n), t)) throw new Error("Cannot find square root");
                                            return n;
                                        };
                                    }
                                    const a = (t + xr) / Ir;
                                    return function(f, i) {
                                        if (f.pow(i, e) === f.neg(f.ONE)) throw new Error("Cannot find square root");
                                        let s = n, o = f.pow(f.mul(f.ONE, r), t), b = f.pow(i, a), c = f.pow(i, t);
                                        for(; !f.eql(c, f.ONE);){
                                            if (f.eql(c, f.ZERO)) return f.ZERO;
                                            let e = 1;
                                            for(let t = f.sqr(c); e < s && !f.eql(t, f.ONE); e++)t = f.sqr(t);
                                            const t = f.pow(o, xr << BigInt(s - e - 1));
                                            o = f.sqr(t), b = f.mul(b, t), c = f.mul(c, o), s = e;
                                        }
                                        return b;
                                    };
                                }(f);
                            }(f), s = Object.freeze({
                                ORDER: f,
                                BITS: r,
                                BYTES: a,
                                MASK: mr(r),
                                ZERO: Ar,
                                ONE: xr,
                                create: (e)=>Sr(e, f),
                                isValid: (e)=>{
                                    if ("bigint" != typeof e) throw new Error("Invalid field element: expected bigint, got ".concat(typeof e));
                                    return Ar <= e && e < f;
                                },
                                is0: (f)=>f === Ar,
                                isOdd: (f)=>(f & xr) === xr,
                                neg: (e)=>Sr(-e, f),
                                eql: (f, e)=>f === e,
                                sqr: (e)=>Sr(e * e, f),
                                add: (e, t)=>Sr(e + t, f),
                                sub: (e, t)=>Sr(e - t, f),
                                mul: (e, t)=>Sr(e * t, f),
                                pow: (f, e)=>(function(f, e, t) {
                                        if (t < Ar) throw new Error("Expected power > 0");
                                        if (t === Ar) return f.ONE;
                                        if (t === xr) return e;
                                        let n = f.ONE, r = e;
                                        for(; t > Ar;)t & xr && (n = f.mul(n, r)), r = f.sqr(r), t >>= xr;
                                        return n;
                                    })(s, f, e),
                                div: (e, t)=>Sr(e * Cr(t, f), f),
                                sqrN: (f)=>f * f,
                                addN: (f, e)=>f + e,
                                subN: (f, e)=>f - e,
                                mulN: (f, e)=>f * e,
                                inv: (e)=>Cr(e, f),
                                sqrt: n.sqrt || ((f)=>i(s, f)),
                                invertBatch: (f)=>(function(f, e) {
                                        const t = new Array(e.length), n = e.reduce((e, n, r)=>f.is0(n) ? e : (t[r] = e, f.mul(e, n)), f.ONE), r = f.inv(n);
                                        return e.reduceRight((e, n, r)=>f.is0(n) ? e : (t[r] = f.mul(e, t[r]), f.mul(e, n)), r), t;
                                    })(s, f),
                                cmov: (f, e, t)=>t ? e : f,
                                toBytes: (f)=>t ? hr(f, a) : lr(f, a),
                                fromBytes: (f)=>{
                                    if (f.length !== a) throw new Error("Fp.fromBytes: expected ".concat(a, ", got ").concat(f.length));
                                    return t ? ur(f) : dr(f);
                                }
                            });
                            return Object.freeze(s);
                        }($r, void 0, void 0, {
                            sqrt: function(f) {
                                const e = $r, t = BigInt(3), n = BigInt(6), r = BigInt(11), a = BigInt(22), i = BigInt(23), s = BigInt(44), o = BigInt(88), b = f * f * f % e, c = b * b * f % e, d = Nr(c, t, e) * c % e, u = Nr(d, t, e) * c % e, l = Nr(u, qr, e) * b % e, h = Nr(l, r, e) * l % e, p = Nr(h, a, e) * h % e, y = Nr(p, s, e) * p % e, m = Nr(y, o, e) * y % e, g = Nr(m, s, e) * p % e, w = Nr(g, t, e) * c % e, v = Nr(w, i, e) * h % e, E = Nr(v, n, e) * b % e, T = Nr(E, qr, e);
                                if (!Xr.eql(Xr.sqr(T), f)) throw new Error("Cannot find square root");
                                return T;
                            }
                        }), Qr = function(f, e) {
                            const t = (e)=>(function(f) {
                                    const e = function(f) {
                                        const e = jr(f);
                                        return Tr(e, {
                                            hash: "hash",
                                            hmac: "function",
                                            randomBytes: "function"
                                        }, {
                                            bits2int: "function",
                                            bits2int_modN: "function",
                                            lowS: "boolean"
                                        }), Object.freeze(r({
                                            lowS: !0
                                        }, e));
                                    }(f), { Fp: t, n } = e, a = t.BYTES + 1, i = 2 * t.BYTES + 1;
                                    function s(f) {
                                        return Sr(f, n);
                                    }
                                    function o(f) {
                                        return Cr(f, n);
                                    }
                                    const { ProjectivePoint: b, normPrivateKeyToScalar: c, weierstrassEquation: d, isWithinCurveOrder: u } = function(f) {
                                        const e = function(f) {
                                            const e = jr(f);
                                            Tr(e, {
                                                a: "field",
                                                b: "field"
                                            }, {
                                                allowedPrivateKeyLengths: "array",
                                                wrapPrivateKey: "boolean",
                                                isTorsionFree: "function",
                                                clearCofactor: "function",
                                                allowInfinityPoint: "boolean",
                                                fromBytes: "function",
                                                toBytes: "function"
                                            });
                                            const { endo: t, Fp: n, a } = e;
                                            if (t) {
                                                if (!n.eql(a, n.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
                                                if ("object" != typeof t || "bigint" != typeof t.beta || "function" != typeof t.splitScalar) throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
                                            }
                                            return Object.freeze(r({}, e));
                                        }(f), { Fp: t } = e, n = e.toBytes || ((f, e, n)=>{
                                            const r = e.toAffine();
                                            return yr(Uint8Array.from([
                                                4
                                            ]), t.toBytes(r.x), t.toBytes(r.y));
                                        }), a = e.fromBytes || ((f)=>{
                                            const e = f.subarray(1);
                                            return {
                                                x: t.fromBytes(e.subarray(0, t.BYTES)),
                                                y: t.fromBytes(e.subarray(t.BYTES, 2 * t.BYTES))
                                            };
                                        });
                                        function i(f) {
                                            const { a: n, b: r } = e, a = t.sqr(f), i = t.mul(a, f);
                                            return t.add(t.add(i, t.mul(f, n)), r);
                                        }
                                        if (!t.eql(t.sqr(e.Gy), i(e.Gx))) throw new Error("bad generator point: equation left != right");
                                        function s(f) {
                                            return "bigint" == typeof f && Gr < f && f < e.n;
                                        }
                                        function o(f) {
                                            if (!s(f)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
                                        }
                                        function b(f) {
                                            const { allowedPrivateKeyLengths: t, nByteLength: n, wrapPrivateKey: r, n: a } = e;
                                            if (t && "bigint" != typeof f) {
                                                if (f instanceof Uint8Array && (f = or(f)), "string" != typeof f || !t.includes(f.length)) throw new Error("Invalid key");
                                                f = f.padStart(2 * n, "0");
                                            }
                                            let i;
                                            try {
                                                i = "bigint" == typeof f ? f : dr(pr("private key", f, n));
                                            } catch (e) {
                                                throw new Error("private key must be ".concat(n, " bytes, hex or bigint, not ").concat(typeof f));
                                            }
                                            return r && (i = Sr(i, a)), o(i), i;
                                        }
                                        const c = new Map;
                                        function d(f) {
                                            if (!(f instanceof u)) throw new Error("ProjectivePoint expected");
                                        }
                                        class u {
                                            constructor(f, e, n){
                                                if (this.px = f, this.py = e, this.pz = n, null == f || !t.isValid(f)) throw new Error("x required");
                                                if (null == e || !t.isValid(e)) throw new Error("y required");
                                                if (null == n || !t.isValid(n)) throw new Error("z required");
                                            }
                                            static fromAffine(f) {
                                                const { x: e, y: n } = f || {};
                                                if (!f || !t.isValid(e) || !t.isValid(n)) throw new Error("invalid affine point");
                                                if (f instanceof u) throw new Error("projective point not allowed");
                                                const r = (f)=>t.eql(f, t.ZERO);
                                                return r(e) && r(n) ? u.ZERO : new u(e, n, t.ONE);
                                            }
                                            get x() {
                                                return this.toAffine().x;
                                            }
                                            get y() {
                                                return this.toAffine().y;
                                            }
                                            static normalizeZ(f) {
                                                const e = t.invertBatch(f.map((f)=>f.pz));
                                                return f.map((f, t)=>f.toAffine(e[t])).map(u.fromAffine);
                                            }
                                            static fromHex(f) {
                                                const e = u.fromAffine(a(pr("pointHex", f)));
                                                return e.assertValidity(), e;
                                            }
                                            static fromPrivateKey(f) {
                                                return u.BASE.multiply(b(f));
                                            }
                                            _setWindowSize(f) {
                                                this._WINDOW_SIZE = f, c.delete(this);
                                            }
                                            assertValidity() {
                                                if (this.is0()) {
                                                    if (e.allowInfinityPoint && !t.is0(this.py)) return;
                                                    throw new Error("bad point: ZERO");
                                                }
                                                const { x: f, y: n } = this.toAffine();
                                                if (!t.isValid(f) || !t.isValid(n)) throw new Error("bad point: x or y not FE");
                                                const r = t.sqr(n), a = i(f);
                                                if (!t.eql(r, a)) throw new Error("bad point: equation left != right");
                                                if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
                                            }
                                            hasEvenY() {
                                                const { y: f } = this.toAffine();
                                                if (t.isOdd) return !t.isOdd(f);
                                                throw new Error("Field doesn't support isOdd");
                                            }
                                            equals(f) {
                                                d(f);
                                                const { px: e, py: n, pz: r } = this, { px: a, py: i, pz: s } = f, o = t.eql(t.mul(e, s), t.mul(a, r)), b = t.eql(t.mul(n, s), t.mul(i, r));
                                                return o && b;
                                            }
                                            negate() {
                                                return new u(this.px, t.neg(this.py), this.pz);
                                            }
                                            double() {
                                                const { a: f, b: n } = e, r = t.mul(n, Wr), { px: a, py: i, pz: s } = this;
                                                let o = t.ZERO, b = t.ZERO, c = t.ZERO, d = t.mul(a, a), l = t.mul(i, i), h = t.mul(s, s), p = t.mul(a, i);
                                                return p = t.add(p, p), c = t.mul(a, s), c = t.add(c, c), o = t.mul(f, c), b = t.mul(r, h), b = t.add(o, b), o = t.sub(l, b), b = t.add(l, b), b = t.mul(o, b), o = t.mul(p, o), c = t.mul(r, c), h = t.mul(f, h), p = t.sub(d, h), p = t.mul(f, p), p = t.add(p, c), c = t.add(d, d), d = t.add(c, d), d = t.add(d, h), d = t.mul(d, p), b = t.add(b, d), h = t.mul(i, s), h = t.add(h, h), d = t.mul(h, p), o = t.sub(o, d), c = t.mul(h, l), c = t.add(c, c), c = t.add(c, c), new u(o, b, c);
                                            }
                                            add(f) {
                                                d(f);
                                                const { px: n, py: r, pz: a } = this, { px: i, py: s, pz: o } = f;
                                                let b = t.ZERO, c = t.ZERO, l = t.ZERO;
                                                const h = e.a, p = t.mul(e.b, Wr);
                                                let y = t.mul(n, i), m = t.mul(r, s), g = t.mul(a, o), w = t.add(n, r), v = t.add(i, s);
                                                w = t.mul(w, v), v = t.add(y, m), w = t.sub(w, v), v = t.add(n, a);
                                                let E = t.add(i, o);
                                                return v = t.mul(v, E), E = t.add(y, g), v = t.sub(v, E), E = t.add(r, a), b = t.add(s, o), E = t.mul(E, b), b = t.add(m, g), E = t.sub(E, b), l = t.mul(h, v), b = t.mul(p, g), l = t.add(b, l), b = t.sub(m, l), l = t.add(m, l), c = t.mul(b, l), m = t.add(y, y), m = t.add(m, y), g = t.mul(h, g), v = t.mul(p, v), m = t.add(m, g), g = t.sub(y, g), g = t.mul(h, g), v = t.add(v, g), y = t.mul(m, v), c = t.add(c, y), y = t.mul(E, v), b = t.mul(w, b), b = t.sub(b, y), y = t.mul(w, m), l = t.mul(E, l), l = t.add(l, y), new u(b, c, l);
                                            }
                                            subtract(f) {
                                                return this.add(f.negate());
                                            }
                                            is0() {
                                                return this.equals(u.ZERO);
                                            }
                                            wNAF(f) {
                                                return h.wNAFCached(this, c, f, (f)=>{
                                                    const e = t.invertBatch(f.map((f)=>f.pz));
                                                    return f.map((f, t)=>f.toAffine(e[t])).map(u.fromAffine);
                                                });
                                            }
                                            multiplyUnsafe(f) {
                                                const n = u.ZERO;
                                                if (f === Gr) return n;
                                                if (o(f), f === Hr) return this;
                                                const { endo: r } = e;
                                                if (!r) return h.unsafeLadder(this, f);
                                                let { k1neg: a, k1: i, k2neg: s, k2: b } = r.splitScalar(f), c = n, d = n, l = this;
                                                for(; i > Gr || b > Gr;)i & Hr && (c = c.add(l)), b & Hr && (d = d.add(l)), l = l.double(), i >>= Hr, b >>= Hr;
                                                return a && (c = c.negate()), s && (d = d.negate()), d = new u(t.mul(d.px, r.beta), d.py, d.pz), c.add(d);
                                            }
                                            multiply(f) {
                                                o(f);
                                                let n, r, a = f;
                                                const { endo: i } = e;
                                                if (i) {
                                                    const { k1neg: f, k1: e, k2neg: s, k2: o } = i.splitScalar(a);
                                                    let { p: b, f: c } = this.wNAF(e), { p: d, f: l } = this.wNAF(o);
                                                    b = h.constTimeNegate(f, b), d = h.constTimeNegate(s, d), d = new u(t.mul(d.px, i.beta), d.py, d.pz), n = b.add(d), r = c.add(l);
                                                } else {
                                                    const { p: f, f: e } = this.wNAF(a);
                                                    n = f, r = e;
                                                }
                                                return u.normalizeZ([
                                                    n,
                                                    r
                                                ])[0];
                                            }
                                            multiplyAndAddUnsafe(f, e, t) {
                                                const n = u.BASE, r = (f, e)=>e !== Gr && e !== Hr && f.equals(n) ? f.multiply(e) : f.multiplyUnsafe(e), a = r(this, e).add(r(f, t));
                                                return a.is0() ? void 0 : a;
                                            }
                                            toAffine(f) {
                                                const { px: e, py: n, pz: r } = this, a = this.is0();
                                                null == f && (f = a ? t.ONE : t.inv(r));
                                                const i = t.mul(e, f), s = t.mul(n, f), o = t.mul(r, f);
                                                if (a) return {
                                                    x: t.ZERO,
                                                    y: t.ZERO
                                                };
                                                if (!t.eql(o, t.ONE)) throw new Error("invZ was invalid");
                                                return {
                                                    x: i,
                                                    y: s
                                                };
                                            }
                                            isTorsionFree() {
                                                const { h: f, isTorsionFree: t } = e;
                                                if (f === Hr) return !0;
                                                if (t) return t(u, this);
                                                throw new Error("isTorsionFree() has not been declared for the elliptic curve");
                                            }
                                            clearCofactor() {
                                                const { h: f, clearCofactor: t } = e;
                                                return f === Hr ? this : t ? t(u, this) : this.multiplyUnsafe(e.h);
                                            }
                                            toRawBytes() {
                                                let f = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                                                return this.assertValidity(), n(u, this, f);
                                            }
                                            toHex() {
                                                let f = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                                                return or(this.toRawBytes(f));
                                            }
                                        }
                                        u.BASE = new u(e.Gx, e.Gy, t.ONE), u.ZERO = new u(t.ZERO, t.ONE, t.ZERO);
                                        const l = e.nBitLength, h = function(f, e) {
                                            const t = (f, e)=>{
                                                const t = e.negate();
                                                return f ? t : e;
                                            }, n = (f)=>({
                                                    windows: Math.ceil(e / f) + 1,
                                                    windowSize: 2 ** (f - 1)
                                                });
                                            return {
                                                constTimeNegate: t,
                                                unsafeLadder (e, t) {
                                                    let n = f.ZERO, r = e;
                                                    for(; t > Fr;)t & Mr && (n = n.add(r)), r = r.double(), t >>= Mr;
                                                    return n;
                                                },
                                                precomputeWindow (f, e) {
                                                    const { windows: t, windowSize: r } = n(e), a = [];
                                                    let i = f, s = i;
                                                    for(let f = 0; f < t; f++){
                                                        s = i, a.push(s);
                                                        for(let f = 1; f < r; f++)s = s.add(i), a.push(s);
                                                        i = s.double();
                                                    }
                                                    return a;
                                                },
                                                wNAF (e, r, a) {
                                                    const { windows: i, windowSize: s } = n(e);
                                                    let o = f.ZERO, b = f.BASE;
                                                    const c = BigInt(2 ** e - 1), d = 2 ** e, u = BigInt(e);
                                                    for(let f = 0; f < i; f++){
                                                        const e = f * s;
                                                        let n = Number(a & c);
                                                        a >>= u, n > s && (n -= d, a += Mr);
                                                        const i = e, l = e + Math.abs(n) - 1, h = f % 2 != 0, p = n < 0;
                                                        0 === n ? b = b.add(t(h, r[i])) : o = o.add(t(p, r[l]));
                                                    }
                                                    return {
                                                        p: o,
                                                        f: b
                                                    };
                                                },
                                                wNAFCached (f, e, t, n) {
                                                    const r = f._WINDOW_SIZE || 1;
                                                    let a = e.get(f);
                                                    return a || (a = this.precomputeWindow(f, r), 1 !== r && e.set(f, n(a))), this.wNAF(r, a, t);
                                                }
                                            };
                                        }(u, e.endo ? Math.ceil(l / 2) : l);
                                        return {
                                            CURVE: e,
                                            ProjectivePoint: u,
                                            normPrivateKeyToScalar: b,
                                            weierstrassEquation: i,
                                            isWithinCurveOrder: s
                                        };
                                    }(r(r({}, e), {}, {
                                        toBytes (f, e, n) {
                                            const r = e.toAffine(), a = t.toBytes(r.x), i = yr;
                                            return n ? i(Uint8Array.from([
                                                e.hasEvenY() ? 2 : 3
                                            ]), a) : i(Uint8Array.from([
                                                4
                                            ]), a, t.toBytes(r.y));
                                        },
                                        fromBytes (f) {
                                            const e = f.length, n = f[0], r = f.subarray(1);
                                            if (e !== a || 2 !== n && 3 !== n) {
                                                if (e === i && 4 === n) return {
                                                    x: t.fromBytes(r.subarray(0, t.BYTES)),
                                                    y: t.fromBytes(r.subarray(t.BYTES, 2 * t.BYTES))
                                                };
                                                throw new Error("Point of length ".concat(e, " was invalid. Expected ").concat(a, " compressed bytes or ").concat(i, " uncompressed bytes"));
                                            }
                                            {
                                                const f = dr(r);
                                                if (!(Gr < (s = f) && s < t.ORDER)) throw new Error("Point is not on curve");
                                                const e = d(f);
                                                let a = t.sqrt(e);
                                                return !(1 & ~n) != ((a & Hr) === Hr) && (a = t.neg(a)), {
                                                    x: f,
                                                    y: a
                                                };
                                            }
                                            "TURBOPACK unreachable";
                                            var s;
                                        }
                                    })), l = (f)=>or(lr(f, e.nByteLength));
                                    function h(f) {
                                        return f > n >> Hr;
                                    }
                                    const p = (f, e, t)=>dr(f.slice(e, t));
                                    class y {
                                        constructor(f, e, t){
                                            this.r = f, this.s = e, this.recovery = t, this.assertValidity();
                                        }
                                        static fromCompact(f) {
                                            const t = e.nByteLength;
                                            return f = pr("compactSignature", f, 2 * t), new y(p(f, 0, t), p(f, t, 2 * t));
                                        }
                                        static fromDER(f) {
                                            const { r: e, s: t } = Vr.toSig(pr("DER", f));
                                            return new y(e, t);
                                        }
                                        assertValidity() {
                                            if (!u(this.r)) throw new Error("r must be 0 < r < CURVE.n");
                                            if (!u(this.s)) throw new Error("s must be 0 < s < CURVE.n");
                                        }
                                        addRecoveryBit(f) {
                                            return new y(this.r, this.s, f);
                                        }
                                        recoverPublicKey(f) {
                                            const { r: n, s: r, recovery: a } = this, i = v(pr("msgHash", f));
                                            if (null == a || ![
                                                0,
                                                1,
                                                2,
                                                3
                                            ].includes(a)) throw new Error("recovery id invalid");
                                            const c = 2 === a || 3 === a ? n + e.n : n;
                                            if (c >= t.ORDER) throw new Error("recovery id 2 or 3 invalid");
                                            const d = 1 & a ? "03" : "02", u = b.fromHex(d + l(c)), h = o(c), p = s(-i * h), y = s(r * h), m = b.BASE.multiplyAndAddUnsafe(u, p, y);
                                            if (!m) throw new Error("point at infinify");
                                            return m.assertValidity(), m;
                                        }
                                        hasHighS() {
                                            return h(this.s);
                                        }
                                        normalizeS() {
                                            return this.hasHighS() ? new y(this.r, s(-this.s), this.recovery) : this;
                                        }
                                        toDERRawBytes() {
                                            return cr(this.toDERHex());
                                        }
                                        toDERHex() {
                                            return Vr.hexFromSig({
                                                r: this.r,
                                                s: this.s
                                            });
                                        }
                                        toCompactRawBytes() {
                                            return cr(this.toCompactHex());
                                        }
                                        toCompactHex() {
                                            return l(this.r) + l(this.s);
                                        }
                                    }
                                    const m = {
                                        isValidPrivateKey (f) {
                                            try {
                                                return c(f), !0;
                                            } catch (f) {
                                                return !1;
                                            }
                                        },
                                        normPrivateKeyToScalar: c,
                                        randomPrivateKey: ()=>{
                                            const f = Dr(e.n);
                                            return function(f, e) {
                                                let t = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                                                const n = f.length, r = Br(e), a = Dr(e);
                                                if (n < 16 || n < a || n > 1024) throw new Error("expected ".concat(a, "-1024 bytes of input, got ").concat(n));
                                                const i = Sr(t ? dr(f) : ur(f), e - xr) + xr;
                                                return t ? hr(i, r) : lr(i, r);
                                            }(e.randomBytes(f), e.n);
                                        },
                                        precompute () {
                                            let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : b.BASE;
                                            return e._setWindowSize(f), e.multiply(BigInt(3)), e;
                                        }
                                    };
                                    function g(f) {
                                        const e = f instanceof Uint8Array, t = "string" == typeof f, n = (e || t) && f.length;
                                        return e ? n === a || n === i : t ? n === 2 * a || n === 2 * i : f instanceof b;
                                    }
                                    const w = e.bits2int || function(f) {
                                        const t = dr(f), n = 8 * f.length - e.nBitLength;
                                        return n > 0 ? t >> BigInt(n) : t;
                                    }, v = e.bits2int_modN || function(f) {
                                        return s(w(f));
                                    }, E = mr(e.nBitLength);
                                    function T(f) {
                                        if ("bigint" != typeof f) throw new Error("bigint expected");
                                        if (!(Gr <= f && f < E)) throw new Error("bigint expected < 2^".concat(e.nBitLength));
                                        return lr(f, e.nByteLength);
                                    }
                                    const A = {
                                        lowS: e.lowS,
                                        prehash: !1
                                    }, x = {
                                        lowS: e.lowS,
                                        prehash: !1
                                    };
                                    return b.BASE._setWindowSize(8), {
                                        CURVE: e,
                                        getPublicKey: function(f) {
                                            let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                                            return b.fromPrivateKey(f).toRawBytes(e);
                                        },
                                        getSharedSecret: function(f, e) {
                                            let t = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                                            if (g(f)) throw new Error("first arg must be private key");
                                            if (!g(e)) throw new Error("second arg must be public key");
                                            return b.fromHex(e).multiply(c(f)).toRawBytes(t);
                                        },
                                        sign: function(f, n) {
                                            let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : A;
                                            const { seed: a, k2sig: i } = function(f, n) {
                                                let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : A;
                                                if ([
                                                    "recovered",
                                                    "canonical"
                                                ].some((f)=>f in r)) throw new Error("sign() legacy options not supported");
                                                const { hash: a, randomBytes: i } = e;
                                                let { lowS: d, prehash: l, extraEntropy: p } = r;
                                                null == d && (d = !0), f = pr("msgHash", f), l && (f = pr("prehashed msgHash", a(f)));
                                                const m = v(f), g = c(n), E = [
                                                    T(g),
                                                    T(m)
                                                ];
                                                if (null != p) {
                                                    const f = !0 === p ? i(t.BYTES) : p;
                                                    E.push(pr("extraEntropy", f));
                                                }
                                                const x = yr(...E), I = m;
                                                return {
                                                    seed: x,
                                                    k2sig: function(f) {
                                                        const e = w(f);
                                                        if (!u(e)) return;
                                                        const t = o(e), n = b.BASE.multiply(e).toAffine(), r = s(n.x);
                                                        if (r === Gr) return;
                                                        const a = s(t * s(I + r * g));
                                                        if (a === Gr) return;
                                                        let i = (n.x === r ? 0 : 2) | Number(n.y & Hr), c = a;
                                                        return d && h(a) && (c = function(f) {
                                                            return h(f) ? s(-f) : f;
                                                        }(a), i ^= 1), new y(r, c, i);
                                                    }
                                                };
                                            }(f, n, r), d = e;
                                            return vr(d.hash.outputLen, d.nByteLength, d.hmac)(a, i);
                                        },
                                        verify: function(f, t, n) {
                                            var r;
                                            let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : x;
                                            const i = f;
                                            if (t = pr("msgHash", t), n = pr("publicKey", n), "strict" in a) throw new Error("options.strict was renamed to lowS");
                                            const { lowS: c, prehash: d } = a;
                                            let u, l;
                                            try {
                                                if ("string" == typeof i || i instanceof Uint8Array) try {
                                                    u = y.fromDER(i);
                                                } catch (f) {
                                                    if (!(f instanceof Vr.Err)) throw f;
                                                    u = y.fromCompact(i);
                                                }
                                                else {
                                                    if ("object" != typeof i || "bigint" != typeof i.r || "bigint" != typeof i.s) throw new Error("PARSE");
                                                    {
                                                        const { r: f, s: e } = i;
                                                        u = new y(f, e);
                                                    }
                                                }
                                                l = b.fromHex(n);
                                            } catch (f) {
                                                if ("PARSE" === f.message) throw new Error("signature must be Signature instance, Uint8Array or hex string");
                                                return !1;
                                            }
                                            if (c && u.hasHighS()) return !1;
                                            d && (t = e.hash(t));
                                            const { r: h, s: p } = u, m = v(t), g = o(p), w = s(m * g), E = s(h * g), T = null === (r = b.BASE.multiplyAndAddUnsafe(l, w, E)) || void 0 === r ? void 0 : r.toAffine();
                                            return !!T && s(T.x) === h;
                                        },
                                        ProjectivePoint: b,
                                        Signature: y,
                                        utils: m
                                    };
                                })(r(r({}, f), function(f) {
                                    return {
                                        hash: f,
                                        hmac: function(e) {
                                            for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];
                                            return Ln(f, e, function() {
                                                for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                                                const n = new Uint8Array(e.reduce((f, e)=>f + e.length, 0));
                                                let r = 0;
                                                return e.forEach((f)=>{
                                                    if (!bf(f)) throw new Error("Uint8Array expected");
                                                    n.set(f, r), r += f.length;
                                                }), n;
                                            }(...n));
                                        },
                                        randomBytes: vf
                                    };
                                }(e)));
                            return Object.freeze(r(r({}, t(e)), {}, {
                                create: t
                            }));
                        }({
                            a: BigInt(0),
                            b: BigInt(7),
                            Fp: Xr,
                            n: Jr,
                            Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
                            Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
                            h: BigInt(1),
                            lowS: !0,
                            endo: {
                                beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
                                splitScalar: (f)=>{
                                    const e = Jr, t = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -Yr * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), r = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), a = t, i = BigInt("0x100000000000000000000000000000000"), s = Zr(a * f, e), o = Zr(-n * f, e);
                                    let b = Sr(f - s * t - o * r, e), c = Sr(-s * n - o * a, e);
                                    const d = b > i, u = c > i;
                                    if (d && (b = e - b), u && (c = e - c), b > i || c > i) throw new Error("splitScalar: Endomorphism failed, k=" + f);
                                    return {
                                        k1neg: d,
                                        k1: b,
                                        k2neg: u,
                                        k2: c
                                    };
                                }
                            }
                        }, Gn);
                        function fa(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        BigInt(0), Qr.ProjectivePoint;
                        var ea = 0, ta = "__private_" + ea++ + "_privateKey";
                        class na {
                            constructor(f){
                                Object.defineProperty(this, ta, {
                                    writable: !0,
                                    value: void 0
                                }), l(32 === k(f), "invalid private key", "privateKey", "[REDACTED]"), fa(this, ta)[ta] = x(f);
                            }
                            get privateKey() {
                                return fa(this, ta)[ta];
                            }
                            get publicKey() {
                                return na.computePublicKey(fa(this, ta)[ta]);
                            }
                            get compressedPublicKey() {
                                return na.computePublicKey(fa(this, ta)[ta], !0);
                            }
                            sign(f) {
                                l(32 === k(f), "invalid digest length", "digest", f);
                                const e = Qr.sign(v(f), v(fa(this, ta)[ta]), {
                                    lowS: !0
                                });
                                return Te.from({
                                    r: K(e.r, 32),
                                    s: K(e.s, 32),
                                    v: e.recovery ? 28 : 27
                                });
                            }
                            computeSharedSecret(f) {
                                const e = na.computePublicKey(f);
                                return x(Qr.getSharedSecret(v(fa(this, ta)[ta]), w(e), !1));
                            }
                            static computePublicKey(f, e) {
                                let t = w(f, "key");
                                if (32 === t.length) return x(Qr.getPublicKey(t, !!e));
                                if (64 === t.length) {
                                    const f = new Uint8Array(65);
                                    f[0] = 4, f.set(t, 1), t = f;
                                }
                                return x(Qr.ProjectivePoint.fromHex(t).toRawBytes(e));
                            }
                            static recoverPublicKey(f, e) {
                                l(32 === k(f), "invalid digest length", "digest", f);
                                const t = Te.from(e);
                                let n = Qr.Signature.fromCompact(v(I([
                                    t.r,
                                    t.s
                                ])));
                                n = n.addRecoveryBit(t.yParity);
                                const r = n.recoverPublicKey(v(f));
                                return l(null != r, "invalid signautre for digest", "signature", e), "0x" + r.toHex(!1);
                            }
                            static addPoints(f, e, t) {
                                const n = Qr.ProjectivePoint.fromHex(na.computePublicKey(f).substring(2)), r = Qr.ProjectivePoint.fromHex(na.computePublicKey(e).substring(2));
                                return "0x" + n.add(r).toHex(!!t);
                            }
                        }
                        async function ra(f, e) {
                            const t = await e;
                            return null != t && "0x0000000000000000000000000000000000000000" !== t || (u("string" != typeof f, "unconfigured name", "UNCONFIGURED_NAME", {
                                value: f
                            }), l(!1, "invalid AddressLike value; did not resolve to a value address", "target", f)), Hf(t);
                        }
                        function aa(f, e) {
                            return "string" == typeof f ? f.match(/^0x[0-9a-f]{40}$/i) ? Hf(f) : (u(null != e, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", {
                                operation: "resolveName"
                            }), ra(f, e.resolveName(f))) : (t = f) && "function" == typeof t.getAddress ? ra(f, f.getAddress()) : f && "function" == typeof f.then ? ra(f, f) : void l(!1, "unsupported addressable value", "target", f);
                            "TURBOPACK unreachable";
                            var t;
                        }
                        function ia(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var sa = 0;
                        function oa(f) {
                            return "__private_" + sa++ + "_" + f;
                        }
                        const ba = new Uint8Array(32);
                        ba.fill(0);
                        const ca = BigInt(-1), da = BigInt(0), ua = BigInt(1), la = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), ha = K(ua, 32), pa = K(da, 32), ya = {
                            name: "string",
                            version: "string",
                            chainId: "uint256",
                            verifyingContract: "address",
                            salt: "bytes32"
                        }, ma = [
                            "name",
                            "version",
                            "chainId",
                            "verifyingContract",
                            "salt"
                        ];
                        function ga(f) {
                            return function(e) {
                                return l("string" == typeof e, "invalid domain value for ".concat(JSON.stringify(f)), "domain.".concat(f), e), e;
                            };
                        }
                        const wa = {
                            name: ga("name"),
                            version: ga("version"),
                            chainId: function(f) {
                                const e = B(f, "domain.chainId");
                                return l(e >= 0, "invalid chain ID", "domain.chainId", f), Number.isSafeInteger(e) ? Number(e) : function(f) {
                                    let e = x(T(f) ? f : z(f)).substring(2);
                                    for(; e.startsWith("0");)e = e.substring(1);
                                    return "" === e && (e = "0"), "0x" + e;
                                }(e);
                            },
                            verifyingContract: function(f) {
                                try {
                                    return Hf(f).toLowerCase();
                                } catch (f) {}
                                l(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", f);
                            },
                            salt: function(f) {
                                const e = w(f, "domain.salt");
                                return l(32 === e.length, 'invalid domain value "salt"', "domain.salt", f), x(e);
                            }
                        };
                        function va(f) {
                            {
                                const e = f.match(/^(u?)int(\d*)$/);
                                if (e) {
                                    const t = "" === e[1], n = parseInt(e[2] || "256");
                                    l(n % 8 == 0 && 0 !== n && n <= 256 && (null == e[2] || e[2] === String(n)), "invalid numeric width", "type", f);
                                    const r = L(la, t ? n - 1 : n), a = t ? (r + ua) * ca : da;
                                    return function(e) {
                                        const n = B(e, "value");
                                        return l(n >= a && n <= r, "value out-of-bounds for ".concat(f), "value", n), K(t ? U(n, 256) : n, 32);
                                    };
                                }
                            }
                            {
                                const e = f.match(/^bytes(\d+)$/);
                                if (e) {
                                    const t = parseInt(e[1]);
                                    return l(0 !== t && t <= 32 && e[1] === String(t), "invalid bytes width", "type", f), function(e) {
                                        return l(w(e).length === t, "invalid length for ".concat(f), "value", e), function(f) {
                                            const e = w(f), t = e.length % 32;
                                            return t ? I([
                                                e,
                                                ba.slice(t)
                                            ]) : x(e);
                                        }(e);
                                    };
                                }
                            }
                            switch(f){
                                case "address":
                                    return function(f) {
                                        return P(Hf(f), 32);
                                    };
                                case "bool":
                                    return function(f) {
                                        return f ? ha : pa;
                                    };
                                case "bytes":
                                    return function(f) {
                                        return Mf(f);
                                    };
                                case "string":
                                    return function(f) {
                                        return Et(f);
                                    };
                            }
                            return null;
                        }
                        function Ea(f, e) {
                            return "".concat(f, "(").concat(e.map((f)=>{
                                let { name: e, type: t } = f;
                                return t + " " + e;
                            }).join(","), ")");
                        }
                        var Ta = oa("types"), Aa = oa("fullTypes"), xa = oa("encoderCache"), Ia = oa("getEncoder");
                        class ka {
                            get types() {
                                return JSON.parse(ia(this, Ta)[Ta]);
                            }
                            constructor(f){
                                Object.defineProperty(this, Ia, {
                                    value: Oa
                                }), this.primaryType = void 0, Object.defineProperty(this, Ta, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Aa, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, xa, {
                                    writable: !0,
                                    value: void 0
                                }), ia(this, Ta)[Ta] = JSON.stringify(f), ia(this, Aa)[Aa] = new Map, ia(this, xa)[xa] = new Map;
                                const e = new Map, t = new Map, n = new Map;
                                Object.keys(f).forEach((f)=>{
                                    e.set(f, new Set), t.set(f, []), n.set(f, new Set);
                                });
                                for(const n in f){
                                    const r = new Set;
                                    for (const a of f[n]){
                                        l(!r.has(a.name), "duplicate variable name ".concat(JSON.stringify(a.name), " in ").concat(JSON.stringify(n)), "types", f), r.add(a.name);
                                        const i = a.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
                                        l(i !== n, "circular type reference to ".concat(JSON.stringify(i)), "types", f), va(i) || (l(t.has(i), "unknown type ".concat(JSON.stringify(i)), "types", f), t.get(i).push(n), e.get(n).add(i));
                                    }
                                }
                                const r = Array.from(t.keys()).filter((f)=>0 === t.get(f).length);
                                l(0 !== r.length, "missing primary type", "types", f), l(1 === r.length, "ambiguous primary types or unused types: ".concat(r.map((f)=>JSON.stringify(f)).join(", ")), "types", f), o(this, {
                                    primaryType: r[0]
                                }), function r(a, i) {
                                    l(!i.has(a), "circular type reference to ".concat(JSON.stringify(a)), "types", f), i.add(a);
                                    for (const f of e.get(a))if (t.has(f)) {
                                        r(f, i);
                                        for (const e of i)n.get(e).add(f);
                                    }
                                    i.delete(a);
                                }(this.primaryType, new Set);
                                for (const [e, t] of n){
                                    const n = Array.from(t);
                                    n.sort(), ia(this, Aa)[Aa].set(e, Ea(e, f[e]) + n.map((e)=>Ea(e, f[e])).join(""));
                                }
                            }
                            getEncoder(f) {
                                let e = ia(this, xa)[xa].get(f);
                                return e || (e = ia(this, Ia)[Ia](f), ia(this, xa)[xa].set(f, e)), e;
                            }
                            encodeType(f) {
                                const e = ia(this, Aa)[Aa].get(f);
                                return l(e, "unknown type: ".concat(JSON.stringify(f)), "name", f), e;
                            }
                            encodeData(f, e) {
                                return this.getEncoder(f)(e);
                            }
                            hashStruct(f, e) {
                                return Mf(this.encodeData(f, e));
                            }
                            encode(f) {
                                return this.encodeData(this.primaryType, f);
                            }
                            hash(f) {
                                return this.hashStruct(this.primaryType, f);
                            }
                            _visit(f, e, t) {
                                if (va(f)) return t(f, e);
                                const n = f.match(/^(.*)(\x5b(\d*)\x5d)$/);
                                if (n) return l(!n[3] || parseInt(n[3]) === e.length, "array length mismatch; expected length ".concat(parseInt(n[3])), "value", e), e.map((f)=>this._visit(n[1], f, t));
                                const r = this.types[f];
                                if (r) return r.reduce((f, n)=>{
                                    let { name: r, type: a } = n;
                                    return f[r] = this._visit(a, e[r], t), f;
                                }, {});
                                l(!1, "unknown type: ".concat(f), "type", f);
                            }
                            visit(f, e) {
                                return this._visit(this.primaryType, f, e);
                            }
                            static from(f) {
                                return new ka(f);
                            }
                            static getPrimaryType(f) {
                                return ka.from(f).primaryType;
                            }
                            static hashStruct(f, e, t) {
                                return ka.from(e).hashStruct(f, t);
                            }
                            static hashDomain(f) {
                                const e = [];
                                for(const t in f){
                                    if (null == f[t]) continue;
                                    const n = ya[t];
                                    l(n, "invalid typed-data domain key: ".concat(JSON.stringify(t)), "domain", f), e.push({
                                        name: t,
                                        type: n
                                    });
                                }
                                return e.sort((f, e)=>ma.indexOf(f.name) - ma.indexOf(e.name)), ka.hashStruct("EIP712Domain", {
                                    EIP712Domain: e
                                }, f);
                            }
                            static encode(f, e, t) {
                                return I([
                                    "0x1901",
                                    ka.hashDomain(f),
                                    ka.from(e).hash(t)
                                ]);
                            }
                            static hash(f, e, t) {
                                return Mf(ka.encode(f, e, t));
                            }
                            static async resolveNames(f, e, t, n) {
                                f = Object.assign({}, f);
                                for(const e in f)null == f[e] && delete f[e];
                                const r = {};
                                f.verifyingContract && !E(f.verifyingContract, 20) && (r[f.verifyingContract] = "0x");
                                const a = ka.from(e);
                                a.visit(t, (f, e)=>("address" !== f || E(e, 20) || (r[e] = "0x"), e));
                                for(const f in r)r[f] = await n(f);
                                return f.verifyingContract && r[f.verifyingContract] && (f.verifyingContract = r[f.verifyingContract]), {
                                    domain: f,
                                    value: t = a.visit(t, (f, e)=>"address" === f && r[e] ? r[e] : e)
                                };
                            }
                            static getPayload(f, e, t) {
                                ka.hashDomain(f);
                                const n = {}, r = [];
                                ma.forEach((e)=>{
                                    const t = f[e];
                                    null != t && (n[e] = wa[e](t), r.push({
                                        name: e,
                                        type: ya[e]
                                    }));
                                });
                                const a = ka.from(e), i = Object.assign({}, e);
                                return l(null == i.EIP712Domain, "types must not contain EIP712Domain type", "types.EIP712Domain", e), i.EIP712Domain = r, a.encode(t), {
                                    types: i,
                                    domain: n,
                                    primaryType: a.primaryType,
                                    message: a.visit(t, (f, e)=>{
                                        if (f.match(/^bytes(\d*)/)) return x(w(e));
                                        if (f.match(/^u?int/)) return B(e).toString();
                                        switch(f){
                                            case "address":
                                                return e.toLowerCase();
                                            case "bool":
                                                return !!e;
                                            case "string":
                                                return l("string" == typeof e, "invalid string", "value", e), e;
                                        }
                                        l(!1, "unsupported type", "type", f);
                                    })
                                };
                            }
                        }
                        function Oa(f) {
                            {
                                const e = va(f);
                                if (e) return e;
                            }
                            const e = f.match(/^(.*)(\x5b(\d*)\x5d)$/);
                            if (e) {
                                const f = e[1], t = this.getEncoder(f);
                                return (n)=>{
                                    l(!e[3] || parseInt(e[3]) === n.length, "array length mismatch; expected length ".concat(parseInt(e[3])), "value", n);
                                    let r = n.map(t);
                                    return ia(this, Aa)[Aa].has(f) && (r = r.map(Mf)), Mf(I(r));
                                };
                            }
                            const t = this.types[f];
                            if (t) {
                                const e = Et(ia(this, Aa)[Aa].get(f));
                                return (f)=>{
                                    const n = t.map((e)=>{
                                        let { name: t, type: n } = e;
                                        const r = this.getEncoder(n)(f[t]);
                                        return ia(this, Aa)[Aa].has(n) ? Mf(r) : r;
                                    });
                                    return n.unshift(e), I(n);
                                };
                            }
                            l(!1, "unknown type: ".concat(f), "type", f);
                        }
                        function _a(f) {
                            let e = f.toString(16);
                            for(; e.length < 2;)e = "0" + e;
                            return "0x" + e;
                        }
                        function Pa(f, e, t) {
                            let n = 0;
                            for(let r = 0; r < t; r++)n = 256 * n + f[e + r];
                            return n;
                        }
                        function Sa(f, e, t, n) {
                            const r = [];
                            for(; t < e + 1 + n;){
                                const a = Ra(f, t);
                                r.push(a.result), u((t += a.consumed) <= e + 1 + n, "child data too short", "BUFFER_OVERRUN", {
                                    buffer: f,
                                    length: n,
                                    offset: e
                                });
                            }
                            return {
                                consumed: 1 + n,
                                result: r
                            };
                        }
                        function Ra(f, e) {
                            u(0 !== f.length, "data too short", "BUFFER_OVERRUN", {
                                buffer: f,
                                length: 0,
                                offset: 1
                            });
                            const t = (e)=>{
                                u(e <= f.length, "data short segment too short", "BUFFER_OVERRUN", {
                                    buffer: f,
                                    length: f.length,
                                    offset: e
                                });
                            };
                            if (f[e] >= 248) {
                                const n = f[e] - 247;
                                t(e + 1 + n);
                                const r = Pa(f, e + 1, n);
                                return t(e + 1 + n + r), Sa(f, e, e + 1 + n, n + r);
                            }
                            if (f[e] >= 192) {
                                const n = f[e] - 192;
                                return t(e + 1 + n), Sa(f, e, e + 1, n);
                            }
                            if (f[e] >= 184) {
                                const n = f[e] - 183;
                                t(e + 1 + n);
                                const r = Pa(f, e + 1, n);
                                return t(e + 1 + n + r), {
                                    consumed: 1 + n + r,
                                    result: x(f.slice(e + 1 + n, e + 1 + n + r))
                                };
                            }
                            if (f[e] >= 128) {
                                const n = f[e] - 128;
                                return t(e + 1 + n), {
                                    consumed: 1 + n,
                                    result: x(f.slice(e + 1, e + 1 + n))
                                };
                            }
                            return {
                                consumed: 1,
                                result: _a(f[e])
                            };
                        }
                        function Na(f) {
                            const e = w(f, "data"), t = Ra(e, 0);
                            return l(t.consumed === e.length, "unexpected junk after rlp payload", "data", f), t.result;
                        }
                        function Ca(f) {
                            const e = [];
                            for(; f;)e.unshift(255 & f), f >>= 8;
                            return e;
                        }
                        function Ua(f) {
                            if (Array.isArray(f)) {
                                let e = [];
                                if (f.forEach(function(f) {
                                    e = e.concat(Ua(f));
                                }), e.length <= 55) return e.unshift(192 + e.length), e;
                                const t = Ca(e.length);
                                return t.unshift(247 + t.length), t.concat(e);
                            }
                            const e = Array.prototype.slice.call(w(f, "object"));
                            if (1 === e.length && e[0] <= 127) return e;
                            if (e.length <= 55) return e.unshift(128 + e.length), e;
                            const t = Ca(e.length);
                            return t.unshift(183 + t.length), t.concat(e);
                        }
                        const La = "0123456789abcdef";
                        function Ba(f) {
                            let e = "0x";
                            for (const t of Ua(f))e += La[t >> 4], e += La[15 & t];
                            return e;
                        }
                        function Da(f, e) {
                            return {
                                address: Hf(f),
                                storageKeys: e.map((f, e)=>(l(E(f, 32), "invalid slot", "storageKeys[".concat(e, "]"), f), f.toLowerCase()))
                            };
                        }
                        function Fa(f) {
                            if (Array.isArray(f)) return f.map((e, t)=>Array.isArray(e) ? (l(2 === e.length, "invalid slot set", "value[".concat(t, "]"), e), Da(e[0], e[1])) : (l(null != e && "object" == typeof e, "invalid address-slot set", "value", f), Da(e.address, e.storageKeys)));
                            l(null != f && "object" == typeof f, "invalid access list", "value", f);
                            const e = Object.keys(f).map((e)=>{
                                const t = f[e].reduce((f, e)=>(f[e] = !0, f), {});
                                return Da(e, Object.keys(t).sort());
                            });
                            return e.sort((f, e)=>f.address.localeCompare(e.address)), e;
                        }
                        function Ma(f) {
                            let e;
                            return e = "string" == typeof f ? na.computePublicKey(f, !1) : f.publicKey, Hf(Mf("0x" + e.substring(4)).substring(26));
                        }
                        function ja(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var Ka = 0;
                        function za(f) {
                            return "__private_" + Ka++ + "_" + f;
                        }
                        const Va = BigInt(0), Ga = BigInt(2), Ha = BigInt(27), Wa = BigInt(28), $a = BigInt(35), Ja = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                        function Ya(f) {
                            return "0x" === f ? null : Hf(f);
                        }
                        function qa(f, e) {
                            try {
                                return Fa(f);
                            } catch (t) {
                                l(!1, t.message, e, f);
                            }
                        }
                        function Za(f, e) {
                            return "0x" === f ? 0 : j(f, e);
                        }
                        function Xa(f, e) {
                            if ("0x" === f) return Va;
                            const t = B(f, e);
                            return l(t <= Ja, "value exceeds uint size", e, t), t;
                        }
                        function Qa(f, e) {
                            const t = B(f, "value"), n = z(t);
                            return l(n.length <= 32, "value too large", "tx.".concat(e), t), n;
                        }
                        function fi(f) {
                            return Fa(f).map((f)=>[
                                    f.address,
                                    f.storageKeys
                                ]);
                        }
                        function ei(f, e) {
                            const t = [
                                Qa(f.nonce || 0, "nonce"),
                                Qa(f.gasPrice || 0, "gasPrice"),
                                Qa(f.gasLimit || 0, "gasLimit"),
                                null != f.to ? Hf(f.to) : "0x",
                                Qa(f.value || 0, "value"),
                                f.data || "0x"
                            ];
                            let n = Va;
                            if (f.chainId != Va) n = B(f.chainId, "tx.chainId"), l(!e || null == e.networkV || e.legacyChainId === n, "tx.chainId/sig.v mismatch", "sig", e);
                            else if (f.signature) {
                                const e = f.signature.legacyChainId;
                                null != e && (n = e);
                            }
                            if (!e) return n !== Va && (t.push(z(n)), t.push("0x"), t.push("0x")), Ba(t);
                            let r = BigInt(27 + e.yParity);
                            return n !== Va ? r = Te.getChainIdV(n, e.v) : BigInt(e.v) !== r && l(!1, "tx.chainId/sig.v mismatch", "sig", e), t.push(z(r)), t.push(z(e.r)), t.push(z(e.s)), Ba(t);
                        }
                        function ti(f, e) {
                            let t;
                            try {
                                if (t = Za(e[0], "yParity"), 0 !== t && 1 !== t) throw new Error("bad yParity");
                            } catch (f) {
                                l(!1, "invalid yParity", "yParity", e[0]);
                            }
                            const n = P(e[1], 32), r = P(e[2], 32), a = Te.from({
                                r: n,
                                s: r,
                                yParity: t
                            });
                            f.signature = a;
                        }
                        function ni(f, e) {
                            const t = [
                                Qa(f.chainId || 0, "chainId"),
                                Qa(f.nonce || 0, "nonce"),
                                Qa(f.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
                                Qa(f.maxFeePerGas || 0, "maxFeePerGas"),
                                Qa(f.gasLimit || 0, "gasLimit"),
                                null != f.to ? Hf(f.to) : "0x",
                                Qa(f.value || 0, "value"),
                                f.data || "0x",
                                fi(f.accessList || [])
                            ];
                            return e && (t.push(Qa(e.yParity, "yParity")), t.push(z(e.r)), t.push(z(e.s))), I([
                                "0x02",
                                Ba(t)
                            ]);
                        }
                        function ri(f, e) {
                            const t = [
                                Qa(f.chainId || 0, "chainId"),
                                Qa(f.nonce || 0, "nonce"),
                                Qa(f.gasPrice || 0, "gasPrice"),
                                Qa(f.gasLimit || 0, "gasLimit"),
                                null != f.to ? Hf(f.to) : "0x",
                                Qa(f.value || 0, "value"),
                                f.data || "0x",
                                fi(f.accessList || [])
                            ];
                            return e && (t.push(Qa(e.yParity, "recoveryParam")), t.push(z(e.r)), t.push(z(e.s))), I([
                                "0x01",
                                Ba(t)
                            ]);
                        }
                        var ai = za("type"), ii = za("to"), si = za("data"), oi = za("nonce"), bi = za("gasLimit"), ci = za("gasPrice"), di = za("maxPriorityFeePerGas"), ui = za("maxFeePerGas"), li = za("value"), hi = za("chainId"), pi = za("sig"), yi = za("accessList");
                        class mi {
                            get type() {
                                return ja(this, ai)[ai];
                            }
                            set type(f) {
                                switch(f){
                                    case null:
                                        ja(this, ai)[ai] = null;
                                        break;
                                    case 0:
                                    case "legacy":
                                        ja(this, ai)[ai] = 0;
                                        break;
                                    case 1:
                                    case "berlin":
                                    case "eip-2930":
                                        ja(this, ai)[ai] = 1;
                                        break;
                                    case 2:
                                    case "london":
                                    case "eip-1559":
                                        ja(this, ai)[ai] = 2;
                                        break;
                                    default:
                                        l(!1, "unsupported transaction type", "type", f);
                                }
                            }
                            get typeName() {
                                switch(this.type){
                                    case 0:
                                        return "legacy";
                                    case 1:
                                        return "eip-2930";
                                    case 2:
                                        return "eip-1559";
                                }
                                return null;
                            }
                            get to() {
                                return ja(this, ii)[ii];
                            }
                            set to(f) {
                                ja(this, ii)[ii] = null == f ? null : Hf(f);
                            }
                            get nonce() {
                                return ja(this, oi)[oi];
                            }
                            set nonce(f) {
                                ja(this, oi)[oi] = j(f, "value");
                            }
                            get gasLimit() {
                                return ja(this, bi)[bi];
                            }
                            set gasLimit(f) {
                                ja(this, bi)[bi] = B(f);
                            }
                            get gasPrice() {
                                const f = ja(this, ci)[ci];
                                return null != f || 0 !== this.type && 1 !== this.type ? f : Va;
                            }
                            set gasPrice(f) {
                                ja(this, ci)[ci] = null == f ? null : B(f, "gasPrice");
                            }
                            get maxPriorityFeePerGas() {
                                const f = ja(this, di)[di];
                                return null == f ? 2 === this.type ? Va : null : f;
                            }
                            set maxPriorityFeePerGas(f) {
                                ja(this, di)[di] = null == f ? null : B(f, "maxPriorityFeePerGas");
                            }
                            get maxFeePerGas() {
                                const f = ja(this, ui)[ui];
                                return null == f ? 2 === this.type ? Va : null : f;
                            }
                            set maxFeePerGas(f) {
                                ja(this, ui)[ui] = null == f ? null : B(f, "maxFeePerGas");
                            }
                            get data() {
                                return ja(this, si)[si];
                            }
                            set data(f) {
                                ja(this, si)[si] = x(f);
                            }
                            get value() {
                                return ja(this, li)[li];
                            }
                            set value(f) {
                                ja(this, li)[li] = B(f, "value");
                            }
                            get chainId() {
                                return ja(this, hi)[hi];
                            }
                            set chainId(f) {
                                ja(this, hi)[hi] = B(f);
                            }
                            get signature() {
                                return ja(this, pi)[pi] || null;
                            }
                            set signature(f) {
                                ja(this, pi)[pi] = null == f ? null : Te.from(f);
                            }
                            get accessList() {
                                const f = ja(this, yi)[yi] || null;
                                return null == f ? 1 === this.type || 2 === this.type ? [] : null : f;
                            }
                            set accessList(f) {
                                ja(this, yi)[yi] = null == f ? null : Fa(f);
                            }
                            constructor(){
                                Object.defineProperty(this, ai, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, ii, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, si, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, oi, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, bi, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, ci, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, di, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, ui, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, li, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, hi, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, pi, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, yi, {
                                    writable: !0,
                                    value: void 0
                                }), ja(this, ai)[ai] = null, ja(this, ii)[ii] = null, ja(this, oi)[oi] = 0, ja(this, bi)[bi] = BigInt(0), ja(this, ci)[ci] = null, ja(this, di)[di] = null, ja(this, ui)[ui] = null, ja(this, si)[si] = "0x", ja(this, li)[li] = BigInt(0), ja(this, hi)[hi] = BigInt(0), ja(this, pi)[pi] = null, ja(this, yi)[yi] = null;
                            }
                            get hash() {
                                return null == this.signature ? null : Mf(this.serialized);
                            }
                            get unsignedHash() {
                                return Mf(this.unsignedSerialized);
                            }
                            get from() {
                                return null == this.signature ? null : (f = this.unsignedHash, e = this.signature, Ma(na.recoverPublicKey(f, e)));
                                "TURBOPACK unreachable";
                                var f, e;
                            }
                            get fromPublicKey() {
                                return null == this.signature ? null : na.recoverPublicKey(this.unsignedHash, this.signature);
                            }
                            isSigned() {
                                return null != this.signature;
                            }
                            get serialized() {
                                switch(u(null != this.signature, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", {
                                    operation: ".serialized"
                                }), this.inferType()){
                                    case 0:
                                        return ei(this, this.signature);
                                    case 1:
                                        return ri(this, this.signature);
                                    case 2:
                                        return ni(this, this.signature);
                                }
                                u(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                                    operation: ".serialized"
                                });
                            }
                            get unsignedSerialized() {
                                switch(this.inferType()){
                                    case 0:
                                        return ei(this);
                                    case 1:
                                        return ri(this);
                                    case 2:
                                        return ni(this);
                                }
                                u(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                                    operation: ".unsignedSerialized"
                                });
                            }
                            inferType() {
                                return this.inferTypes().pop();
                            }
                            inferTypes() {
                                const f = null != this.gasPrice, e = null != this.maxFeePerGas || null != this.maxPriorityFeePerGas, t = null != this.accessList;
                                null != this.maxFeePerGas && null != this.maxPriorityFeePerGas && u(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", {
                                    value: this
                                }), u(!e || 0 !== this.type && 1 !== this.type, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", {
                                    value: this
                                }), u(0 !== this.type || !t, "legacy transaction cannot have accessList", "BAD_DATA", {
                                    value: this
                                });
                                const n = [];
                                return null != this.type ? n.push(this.type) : e ? n.push(2) : f ? (n.push(1), t || n.push(0)) : t ? (n.push(1), n.push(2)) : (n.push(0), n.push(1), n.push(2)), n.sort(), n;
                            }
                            isLegacy() {
                                return 0 === this.type;
                            }
                            isBerlin() {
                                return 1 === this.type;
                            }
                            isLondon() {
                                return 2 === this.type;
                            }
                            clone() {
                                return mi.from(this);
                            }
                            toJSON() {
                                const f = (f)=>null == f ? null : f.toString();
                                return {
                                    type: this.type,
                                    to: this.to,
                                    data: this.data,
                                    nonce: this.nonce,
                                    gasLimit: f(this.gasLimit),
                                    gasPrice: f(this.gasPrice),
                                    maxPriorityFeePerGas: f(this.maxPriorityFeePerGas),
                                    maxFeePerGas: f(this.maxFeePerGas),
                                    value: f(this.value),
                                    chainId: f(this.chainId),
                                    sig: this.signature ? this.signature.toJSON() : null,
                                    accessList: this.accessList
                                };
                            }
                            static from(f) {
                                if (null == f) return new mi;
                                if ("string" == typeof f) {
                                    const e = w(f);
                                    if (e[0] >= 127) return mi.from(function(f) {
                                        const e = Na(f);
                                        l(Array.isArray(e) && (9 === e.length || 6 === e.length), "invalid field count for legacy transaction", "data", f);
                                        const t = {
                                            type: 0,
                                            nonce: Za(e[0], "nonce"),
                                            gasPrice: Xa(e[1], "gasPrice"),
                                            gasLimit: Xa(e[2], "gasLimit"),
                                            to: Ya(e[3]),
                                            value: Xa(e[4], "value"),
                                            data: x(e[5]),
                                            chainId: Va
                                        };
                                        if (6 === e.length) return t;
                                        const n = Xa(e[6], "v"), r = Xa(e[7], "r"), a = Xa(e[8], "s");
                                        if (r === Va && a === Va) t.chainId = n;
                                        else {
                                            let r = (n - $a) / Ga;
                                            r < Va && (r = Va), t.chainId = r, l(r !== Va || n === Ha || n === Wa, "non-canonical legacy v", "v", e[6]), t.signature = Te.from({
                                                r: P(e[7], 32),
                                                s: P(e[8], 32),
                                                v: n
                                            }), t.hash = Mf(f);
                                        }
                                        return t;
                                    }(e));
                                    switch(e[0]){
                                        case 1:
                                            return mi.from(function(f) {
                                                const e = Na(w(f).slice(1));
                                                l(Array.isArray(e) && (8 === e.length || 11 === e.length), "invalid field count for transaction type: 1", "data", x(f));
                                                const t = {
                                                    type: 1,
                                                    chainId: Xa(e[0], "chainId"),
                                                    nonce: Za(e[1], "nonce"),
                                                    gasPrice: Xa(e[2], "gasPrice"),
                                                    gasLimit: Xa(e[3], "gasLimit"),
                                                    to: Ya(e[4]),
                                                    value: Xa(e[5], "value"),
                                                    data: x(e[6]),
                                                    accessList: qa(e[7], "accessList")
                                                };
                                                return 8 === e.length || (t.hash = Mf(f), ti(t, e.slice(8))), t;
                                            }(e));
                                        case 2:
                                            return mi.from(function(f) {
                                                const e = Na(w(f).slice(1));
                                                l(Array.isArray(e) && (9 === e.length || 12 === e.length), "invalid field count for transaction type: 2", "data", x(f));
                                                const t = Xa(e[2], "maxPriorityFeePerGas"), n = Xa(e[3], "maxFeePerGas"), r = {
                                                    type: 2,
                                                    chainId: Xa(e[0], "chainId"),
                                                    nonce: Za(e[1], "nonce"),
                                                    maxPriorityFeePerGas: t,
                                                    maxFeePerGas: n,
                                                    gasPrice: null,
                                                    gasLimit: Xa(e[4], "gasLimit"),
                                                    to: Ya(e[5]),
                                                    value: Xa(e[6], "value"),
                                                    data: x(e[7]),
                                                    accessList: qa(e[8], "accessList")
                                                };
                                                return 9 === e.length || (r.hash = Mf(f), ti(r, e.slice(9))), r;
                                            }(e));
                                    }
                                    u(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                                        operation: "from"
                                    });
                                }
                                const e = new mi;
                                return null != f.type && (e.type = f.type), null != f.to && (e.to = f.to), null != f.nonce && (e.nonce = f.nonce), null != f.gasLimit && (e.gasLimit = f.gasLimit), null != f.gasPrice && (e.gasPrice = f.gasPrice), null != f.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = f.maxPriorityFeePerGas), null != f.maxFeePerGas && (e.maxFeePerGas = f.maxFeePerGas), null != f.data && (e.data = f.data), null != f.value && (e.value = f.value), null != f.chainId && (e.chainId = f.chainId), null != f.signature && (e.signature = Te.from(f.signature)), null != f.accessList && (e.accessList = f.accessList), null != f.hash && (l(e.isSigned(), "unsigned transaction cannot define hash", "tx", f), l(e.hash === f.hash, "hash mismatch", "tx", f)), null != f.from && (l(e.isSigned(), "unsigned transaction cannot define from", "tx", f), l(e.from.toLowerCase() === (f.from || "").toLowerCase(), "from mismatch", "tx", f)), e;
                            }
                        }
                        let gi, wi;
                        function vi(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        BigInt(0), gi = Symbol.iterator, wi = Symbol.iterator;
                        var Ei = 0;
                        function Ti(f, e) {
                            if (f.provider) return f.provider;
                            u(!1, "missing provider", "UNSUPPORTED_OPERATION", {
                                operation: e
                            });
                        }
                        async function Ai(f, e) {
                            let t = function(f) {
                                const e = {};
                                f.to && (e.to = f.to), f.from && (e.from = f.from), f.data && (e.data = x(f.data));
                                const t = "chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
                                for (const n of t)n in f && null != f[n] && (e[n] = B(f[n], "request.".concat(n)));
                                const n = "type,nonce".split(/,/);
                                for (const t of n)t in f && null != f[t] && (e[t] = j(f[t], "request.".concat(t)));
                                return f.accessList && (e.accessList = Fa(f.accessList)), "blockTag" in f && (e.blockTag = f.blockTag), "enableCcipRead" in f && (e.enableCcipRead = !!f.enableCcipRead), "customData" in f && (e.customData = f.customData), e;
                            }(e);
                            if (null != t.to && (t.to = aa(t.to, f)), null != t.from) {
                                const e = t.from;
                                t.from = Promise.all([
                                    f.getAddress(),
                                    aa(e, f)
                                ]).then((f)=>{
                                    let [e, t] = f;
                                    return l(e.toLowerCase() === t.toLowerCase(), "transaction from mismatch", "tx.from", t), e;
                                });
                            } else t.from = f.getAddress();
                            return await s(t);
                        }
                        class xi {
                            constructor(f){
                                this.provider = void 0, o(this, {
                                    provider: f || null
                                });
                            }
                            async getNonce(f) {
                                return Ti(this, "getTransactionCount").getTransactionCount(await this.getAddress(), f);
                            }
                            async populateCall(f) {
                                return await Ai(this, f);
                            }
                            async populateTransaction(f) {
                                const e = Ti(this, "populateTransaction"), t = await Ai(this, f);
                                null == t.nonce && (t.nonce = await this.getNonce("pending")), null == t.gasLimit && (t.gasLimit = await this.estimateGas(t));
                                const n = await this.provider.getNetwork();
                                null != t.chainId ? l(B(t.chainId) === n.chainId, "transaction chainId mismatch", "tx.chainId", f.chainId) : t.chainId = n.chainId;
                                const r = null != t.maxFeePerGas || null != t.maxPriorityFeePerGas;
                                if (null == t.gasPrice || 2 !== t.type && !r ? 0 !== t.type && 1 !== t.type || !r || l(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", f) : l(!1, "eip-1559 transaction do not support gasPrice", "tx", f), 2 !== t.type && null != t.type || null == t.maxFeePerGas || null == t.maxPriorityFeePerGas) if (0 === t.type || 1 === t.type) {
                                    const f = await e.getFeeData();
                                    u(null != f.gasPrice, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
                                        operation: "getGasPrice"
                                    }), null == t.gasPrice && (t.gasPrice = f.gasPrice);
                                } else {
                                    const f = await e.getFeeData();
                                    if (null == t.type) if (null != f.maxFeePerGas && null != f.maxPriorityFeePerGas) if (t.type = 2, null != t.gasPrice) {
                                        const f = t.gasPrice;
                                        delete t.gasPrice, t.maxFeePerGas = f, t.maxPriorityFeePerGas = f;
                                    } else null == t.maxFeePerGas && (t.maxFeePerGas = f.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = f.maxPriorityFeePerGas);
                                    else null != f.gasPrice ? (u(!r, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                                        operation: "populateTransaction"
                                    }), null == t.gasPrice && (t.gasPrice = f.gasPrice), t.type = 0) : u(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                                        operation: "signer.getFeeData"
                                    });
                                    else 2 === t.type && (null == t.maxFeePerGas && (t.maxFeePerGas = f.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = f.maxPriorityFeePerGas));
                                }
                                else t.type = 2;
                                return await s(t);
                            }
                            async estimateGas(f) {
                                return Ti(this, "estimateGas").estimateGas(await this.populateCall(f));
                            }
                            async call(f) {
                                return Ti(this, "call").call(await this.populateCall(f));
                            }
                            async resolveName(f) {
                                const e = Ti(this, "resolveName");
                                return await e.resolveName(f);
                            }
                            async sendTransaction(f) {
                                const e = Ti(this, "sendTransaction"), t = await this.populateTransaction(f);
                                delete t.from;
                                const n = mi.from(t);
                                return await e.broadcastTransaction(await this.signTransaction(n));
                            }
                        }
                        var Ii = "__private_" + Ei++ + "_throwUnsupported";
                        class ki extends xi {
                            constructor(f, e){
                                super(e), Object.defineProperty(this, Ii, {
                                    value: Oi
                                }), this.address = void 0, o(this, {
                                    address: f
                                });
                            }
                            async getAddress() {
                                return this.address;
                            }
                            connect(f) {
                                return new ki(this.address, f);
                            }
                            async signTransaction(f) {
                                vi(this, Ii)[Ii]("transactions", "signTransaction");
                            }
                            async signMessage(f) {
                                vi(this, Ii)[Ii]("messages", "signMessage");
                            }
                            async signTypedData(f, e, t) {
                                vi(this, Ii)[Ii]("typed-data", "signTypedData");
                            }
                        }
                        function Oi(f, e) {
                            u(!1, "VoidSigner cannot sign ".concat(f), "UNSUPPORTED_OPERATION", {
                                operation: e
                            });
                        }
                        function _i(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var Pi = 0, Si = "__private_" + Pi++ + "_signingKey";
                        class Ri extends xi {
                            constructor(f, e){
                                super(e), this.address = void 0, Object.defineProperty(this, Si, {
                                    writable: !0,
                                    value: void 0
                                }), l(f && "function" == typeof f.sign, "invalid private key", "privateKey", "[ REDACTED ]"), _i(this, Si)[Si] = f, o(this, {
                                    address: Ma(this.signingKey.publicKey)
                                });
                            }
                            get signingKey() {
                                return _i(this, Si)[Si];
                            }
                            get privateKey() {
                                return this.signingKey.privateKey;
                            }
                            async getAddress() {
                                return this.address;
                            }
                            connect(f) {
                                return new Ri(_i(this, Si)[Si], f);
                            }
                            async signTransaction(f) {
                                const { to: e, from: t } = await s({
                                    to: f.to ? aa(f.to, this.provider) : void 0,
                                    from: f.from ? aa(f.from, this.provider) : void 0
                                });
                                null != e && (f.to = e), null != t && (f.from = t), null != f.from && (l(Hf(f.from) === this.address, "transaction from address mismatch", "tx.from", f.from), delete f.from);
                                const n = mi.from(f);
                                return n.signature = this.signingKey.sign(n.unsignedHash), n.serialized;
                            }
                            async signMessage(f) {
                                return this.signMessageSync(f);
                            }
                            signMessageSync(f) {
                                return this.signingKey.sign(function(f) {
                                    return "string" == typeof f && (f = Jf(f)), Mf(I([
                                        Jf("Ethereum Signed Message:\n"),
                                        Jf(String(f.length)),
                                        f
                                    ]));
                                }(f)).serialized;
                            }
                            async signTypedData(f, e, t) {
                                const n = await ka.resolveNames(f, e, t, async (f)=>{
                                    u(null != this.provider, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
                                        operation: "resolveName",
                                        info: {
                                            name: f
                                        }
                                    });
                                    const e = await this.provider.resolveName(f);
                                    return u(null != e, "unconfigured ENS name", "UNCONFIGURED_NAME", {
                                        value: f
                                    }), e;
                                });
                                return this.signingKey.sign(ka.hash(n.domain, e, n.value)).serialized;
                            }
                        }
                        const Ni = function(f) {
                            return Qn("sha256").update(f).digest();
                        }, Ci = function(f) {
                            return Qn("sha512").update(f).digest();
                        };
                        let Ui = Ni, Li = Ci, Bi = !1, Di = !1;
                        function Fi(f) {
                            const e = w(f, "data");
                            return x(Ui(e));
                        }
                        function Mi(f) {
                            const e = w(f, "data");
                            return x(Li(e));
                        }
                        Fi._ = Ni, Fi.lock = function() {
                            Bi = !0;
                        }, Fi.register = function(f) {
                            if (Bi) throw new Error("sha256 is locked");
                            Ui = f;
                        }, Object.freeze(Fi), Mi._ = Ci, Mi.lock = function() {
                            Di = !0;
                        }, Mi.register = function(f) {
                            if (Di) throw new Error("sha512 is locked");
                            Li = f;
                        }, Object.freeze(Fi);
                        let ji = !1;
                        const Ki = function(f, e, t) {
                            return (function(f, e) {
                                const t = {
                                    sha256: Gn,
                                    sha512: qn
                                }[f];
                                return l(null != t, "invalid hmac algorithm", "algorithm", f), Ln.create(t, e);
                            })(f, e).update(t).digest();
                        };
                        let zi = Ki;
                        function Vi(f, e, t) {
                            const n = w(e, "key"), r = w(t, "data");
                            return x(zi(f, n, r));
                        }
                        Vi._ = Ki, Vi.lock = function() {
                            ji = !0;
                        }, Vi.register = function(f) {
                            if (ji) throw new Error("computeHmac is locked");
                            zi = f;
                        }, Object.freeze(Vi);
                        const Gi = new Uint8Array([
                            7,
                            4,
                            13,
                            1,
                            10,
                            6,
                            15,
                            3,
                            12,
                            0,
                            9,
                            5,
                            2,
                            14,
                            11,
                            8
                        ]), Hi = Uint8Array.from({
                            length: 16
                        }, (f, e)=>e);
                        let Wi = [
                            Hi
                        ], $i = [
                            Hi.map((f)=>(9 * f + 5) % 16)
                        ];
                        for(let f = 0; f < 4; f++)for (let e of [
                            Wi,
                            $i
                        ])e.push(e[f].map((f)=>Gi[f]));
                        const Ji = [
                            [
                                11,
                                14,
                                15,
                                12,
                                5,
                                8,
                                7,
                                9,
                                11,
                                13,
                                14,
                                15,
                                6,
                                7,
                                9,
                                8
                            ],
                            [
                                12,
                                13,
                                11,
                                15,
                                6,
                                9,
                                9,
                                7,
                                12,
                                15,
                                11,
                                13,
                                7,
                                8,
                                7,
                                7
                            ],
                            [
                                13,
                                15,
                                14,
                                11,
                                7,
                                7,
                                6,
                                8,
                                13,
                                14,
                                13,
                                12,
                                5,
                                5,
                                6,
                                9
                            ],
                            [
                                14,
                                11,
                                12,
                                14,
                                8,
                                6,
                                5,
                                5,
                                15,
                                12,
                                15,
                                14,
                                9,
                                9,
                                8,
                                6
                            ],
                            [
                                15,
                                12,
                                13,
                                13,
                                9,
                                5,
                                8,
                                6,
                                14,
                                11,
                                12,
                                11,
                                8,
                                6,
                                5,
                                5
                            ]
                        ].map((f)=>new Uint8Array(f)), Yi = Wi.map((f, e)=>f.map((f)=>Ji[e][f])), qi = $i.map((f, e)=>f.map((f)=>Ji[e][f])), Zi = new Uint32Array([
                            0,
                            1518500249,
                            1859775393,
                            2400959708,
                            2840853838
                        ]), Xi = new Uint32Array([
                            1352829926,
                            1548603684,
                            1836072691,
                            2053994217,
                            0
                        ]), Qi = (f, e)=>f << e | f >>> 32 - e;
                        function fs(f, e, t, n) {
                            return 0 === f ? e ^ t ^ n : 1 === f ? e & t | ~e & n : 2 === f ? (e | ~t) ^ n : 3 === f ? e & n | t & ~n : e ^ (t | ~n);
                        }
                        const es = new Uint32Array(16);
                        class ts extends Dn {
                            constructor(){
                                super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
                            }
                            get() {
                                const { h0: f, h1: e, h2: t, h3: n, h4: r } = this;
                                return [
                                    f,
                                    e,
                                    t,
                                    n,
                                    r
                                ];
                            }
                            set(f, e, t, n, r) {
                                this.h0 = 0 | f, this.h1 = 0 | e, this.h2 = 0 | t, this.h3 = 0 | n, this.h4 = 0 | r;
                            }
                            process(f, e) {
                                for(let t = 0; t < 16; t++, e += 4)es[t] = f.getUint32(e, !0);
                                let t = 0 | this.h0, n = t, r = 0 | this.h1, a = r, i = 0 | this.h2, s = i, o = 0 | this.h3, b = o, c = 0 | this.h4, d = c;
                                for(let f = 0; f < 5; f++){
                                    const e = 4 - f, u = Zi[f], l = Xi[f], h = Wi[f], p = $i[f], y = Yi[f], m = qi[f];
                                    for(let e = 0; e < 16; e++){
                                        const n = Qi(t + fs(f, r, i, o) + es[h[e]] + u, y[e]) + c | 0;
                                        t = c, c = o, o = 0 | Qi(i, 10), i = r, r = n;
                                    }
                                    for(let f = 0; f < 16; f++){
                                        const t = Qi(n + fs(e, a, s, b) + es[p[f]] + l, m[f]) + d | 0;
                                        n = d, d = b, b = 0 | Qi(s, 10), s = a, a = t;
                                    }
                                }
                                this.set(this.h1 + i + b | 0, this.h2 + o + d | 0, this.h3 + c + n | 0, this.h4 + t + a | 0, this.h0 + r + s | 0);
                            }
                            roundClean() {
                                es.fill(0);
                            }
                            destroy() {
                                this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
                            }
                        }
                        const ns = wf(()=>new ts);
                        let rs = !1;
                        const as = function(f) {
                            return ns(f);
                        };
                        let is = as;
                        function ss(f) {
                            const e = w(f, "data");
                            return x(is(e));
                        }
                        ss._ = as, ss.lock = function() {
                            rs = !0;
                        }, ss.register = function(f) {
                            if (rs) throw new TypeError("ripemd160 is locked");
                            is = f;
                        }, Object.freeze(ss);
                        const os = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
                        let bs = null;
                        function cs(f) {
                            if (null == bs) {
                                bs = {};
                                for(let f = 0; f < 58; f++)bs[os[f]] = BigInt(f);
                            }
                            const e = bs[f];
                            return l(null != e, "invalid base58 value", "letter", f), e;
                        }
                        const ds = BigInt(0), us = BigInt(58);
                        function ls(f) {
                            const e = w(f);
                            let t = M(e), n = "";
                            for(; t;)n = os[Number(t % us)] + n, t /= us;
                            for(let f = 0; f < e.length && !e[f]; f++)n = os[0] + n;
                            return n;
                        }
                        function hs(f) {
                            let e = ds;
                            for(let t = 0; t < f.length; t++)e *= us, e += cs(f[t]);
                            return e;
                        }
                        const ps = /^[a-z]*$/i;
                        function ys(f, e) {
                            let t = 97;
                            return f.reduce((f, n)=>(n === e ? t++ : n.match(ps) ? f.push(String.fromCharCode(t) + n) : (t = 97, f.push(n)), f), []);
                        }
                        class ms {
                            constructor(f){
                                this.locale = void 0, o(this, {
                                    locale: f
                                });
                            }
                            split(f) {
                                return f.toLowerCase().split(/\s+/g);
                            }
                            join(f) {
                                return f.join(" ");
                            }
                        }
                        function gs(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var ws = 0;
                        function vs(f) {
                            return "__private_" + ws++ + "_" + f;
                        }
                        var Es = vs("data"), Ts = vs("checksum"), As = vs("words"), xs = vs("loadWords");
                        class Is extends ms {
                            constructor(f, e, t){
                                super(f), Object.defineProperty(this, xs, {
                                    value: ks
                                }), Object.defineProperty(this, Es, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, Ts, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, As, {
                                    writable: !0,
                                    value: void 0
                                }), gs(this, Es)[Es] = e, gs(this, Ts)[Ts] = t, gs(this, As)[As] = null;
                            }
                            get _data() {
                                return gs(this, Es)[Es];
                            }
                            _decodeWords() {
                                return l("0" === (f = gs(this, Es)[Es])[0], "unsupported auwl data", "data", f), function(f, e) {
                                    for(let t = 28; t >= 0; t--)f = f.split(" !#$%&'()*+,-./<=>?@[]^_`{|}~"[t]).join(e.substring(2 * t, 2 * t + 2));
                                    const t = [], n = f.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (f, e, n, r)=>{
                                        if (n) for(let f = parseInt(n); f >= 0; f--)t.push(";");
                                        else t.push(e.toLowerCase());
                                        return "";
                                    });
                                    if (n) throw new Error("leftovers: ".concat(JSON.stringify(n)));
                                    return ys(ys(t, ";"), ":");
                                }(f.substring(59), f.substring(1, 59));
                                "TURBOPACK unreachable";
                                var f;
                            }
                            getWord(f) {
                                const e = gs(this, xs)[xs]();
                                return l(f >= 0 && f < e.length, "invalid word index: ".concat(f), "index", f), e[f];
                            }
                            getWordIndex(f) {
                                return gs(this, xs)[xs]().indexOf(f);
                            }
                        }
                        function ks() {
                            if (null == gs(this, As)[As]) {
                                const f = this._decodeWords();
                                if (Et(f.join("\n") + "\n") !== gs(this, Ts)[Ts]) throw new Error("BIP39 Wordlist for ".concat(this.locale, " FAILED"));
                                gs(this, As)[As] = f;
                            }
                            return gs(this, As)[As];
                        }
                        let Os = null;
                        class _s extends Is {
                            constructor(){
                                super("en", "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO", "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60");
                            }
                            static wordlist() {
                                return null == Os && (Os = new _s), Os;
                            }
                        }
                        let Ps = !1;
                        const Ss = function(f, e, t, n, r) {
                            return function(f, e, t, n, r) {
                                const a = {
                                    sha256: Gn,
                                    sha512: qn
                                }[r];
                                return l(null != a, "invalid pbkdf2 algorithm", "algorithm", r), Bn(a, f, e, {
                                    c: t,
                                    dkLen: n
                                });
                            }(f, e, t, n, r);
                        };
                        let Rs = Ss;
                        function Ns(f, e, t, n, r) {
                            const a = w(f, "password"), i = w(e, "salt");
                            return x(Rs(a, i, t, n, r));
                        }
                        function Cs(f) {
                            return (1 << f) - 1 << 8 - f & 255;
                        }
                        function Us(f, e) {
                            y("NFKD"), null == e && (e = _s.wordlist());
                            const t = e.split(f);
                            l(t.length % 3 == 0 && t.length >= 12 && t.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
                            const n = new Uint8Array(Math.ceil(11 * t.length / 8));
                            let r = 0;
                            for(let f = 0; f < t.length; f++){
                                let a = e.getWordIndex(t[f].normalize("NFKD"));
                                l(a >= 0, "invalid mnemonic word at index ".concat(f), "mnemonic", "[ REDACTED ]");
                                for(let f = 0; f < 11; f++)a & 1 << 10 - f && (n[r >> 3] |= 1 << 7 - r % 8), r++;
                            }
                            const a = 32 * t.length / 3, i = Cs(t.length / 3);
                            return l((w(Fi(n.slice(0, a / 8)))[0] & i) == (n[n.length - 1] & i), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]"), x(n.slice(0, a / 8));
                        }
                        function Ls(f, e) {
                            l(f.length % 4 == 0 && f.length >= 16 && f.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]"), null == e && (e = _s.wordlist());
                            const t = [
                                0
                            ];
                            let n = 11;
                            for(let e = 0; e < f.length; e++)n > 8 ? (t[t.length - 1] <<= 8, t[t.length - 1] |= f[e], n -= 8) : (t[t.length - 1] <<= n, t[t.length - 1] |= f[e] >> 8 - n, t.push(f[e] & (1 << 8 - n) - 1 & 255), n += 3);
                            const r = f.length / 4, a = parseInt(Fi(f).substring(2, 4), 16) & Cs(r);
                            return t[t.length - 1] <<= r, t[t.length - 1] |= a >> 8 - r, e.join(t.map((f)=>e.getWord(f)));
                        }
                        Ns._ = Ss, Ns.lock = function() {
                            Ps = !0;
                        }, Ns.register = function(f) {
                            if (Ps) throw new Error("pbkdf2 is locked");
                            Rs = f;
                        }, Object.freeze(Ns);
                        const Bs = {};
                        class Ds {
                            constructor(f, e, t, n, r){
                                this.phrase = void 0, this.password = void 0, this.wordlist = void 0, this.entropy = void 0, null == n && (n = ""), null == r && (r = _s.wordlist()), m(f, Bs, "Mnemonic"), o(this, {
                                    phrase: t,
                                    password: n,
                                    wordlist: r,
                                    entropy: e
                                });
                            }
                            computeSeed() {
                                const f = Jf("mnemonic" + this.password, "NFKD");
                                return Ns(Jf(this.phrase, "NFKD"), f, 2048, 64, "sha512");
                            }
                            static fromPhrase(f, e, t) {
                                const n = Us(f, t);
                                return f = Ls(w(n), t), new Ds(Bs, n, f, e, t);
                            }
                            static fromEntropy(f, e, t) {
                                const n = w(f, "entropy"), r = Ls(n, t);
                                return new Ds(Bs, x(n), r, e, t);
                            }
                            static entropyToPhrase(f, e) {
                                return Ls(w(f, "entropy"), e);
                            }
                            static phraseToEntropy(f, e) {
                                return Us(f, e);
                            }
                            static isValidMnemonic(f, e) {
                                try {
                                    return Us(f, e), !0;
                                } catch (f) {}
                                return !1;
                            }
                        }
                        var Fs, Ms, js, Ks = function(f, e, t, n) {
                            if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                            if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                            return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
                        }, zs = function(f, e, t, n, r) {
                            if ("m" === n) throw new TypeError("Private method is not writable");
                            if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                            if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                            return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
                        };
                        const Vs = {
                            16: 10,
                            24: 12,
                            32: 14
                        }, Gs = [
                            1,
                            2,
                            4,
                            8,
                            16,
                            32,
                            64,
                            128,
                            27,
                            54,
                            108,
                            216,
                            171,
                            77,
                            154,
                            47,
                            94,
                            188,
                            99,
                            198,
                            151,
                            53,
                            106,
                            212,
                            179,
                            125,
                            250,
                            239,
                            197,
                            145
                        ], Hs = [
                            99,
                            124,
                            119,
                            123,
                            242,
                            107,
                            111,
                            197,
                            48,
                            1,
                            103,
                            43,
                            254,
                            215,
                            171,
                            118,
                            202,
                            130,
                            201,
                            125,
                            250,
                            89,
                            71,
                            240,
                            173,
                            212,
                            162,
                            175,
                            156,
                            164,
                            114,
                            192,
                            183,
                            253,
                            147,
                            38,
                            54,
                            63,
                            247,
                            204,
                            52,
                            165,
                            229,
                            241,
                            113,
                            216,
                            49,
                            21,
                            4,
                            199,
                            35,
                            195,
                            24,
                            150,
                            5,
                            154,
                            7,
                            18,
                            128,
                            226,
                            235,
                            39,
                            178,
                            117,
                            9,
                            131,
                            44,
                            26,
                            27,
                            110,
                            90,
                            160,
                            82,
                            59,
                            214,
                            179,
                            41,
                            227,
                            47,
                            132,
                            83,
                            209,
                            0,
                            237,
                            32,
                            252,
                            177,
                            91,
                            106,
                            203,
                            190,
                            57,
                            74,
                            76,
                            88,
                            207,
                            208,
                            239,
                            170,
                            251,
                            67,
                            77,
                            51,
                            133,
                            69,
                            249,
                            2,
                            127,
                            80,
                            60,
                            159,
                            168,
                            81,
                            163,
                            64,
                            143,
                            146,
                            157,
                            56,
                            245,
                            188,
                            182,
                            218,
                            33,
                            16,
                            255,
                            243,
                            210,
                            205,
                            12,
                            19,
                            236,
                            95,
                            151,
                            68,
                            23,
                            196,
                            167,
                            126,
                            61,
                            100,
                            93,
                            25,
                            115,
                            96,
                            129,
                            79,
                            220,
                            34,
                            42,
                            144,
                            136,
                            70,
                            238,
                            184,
                            20,
                            222,
                            94,
                            11,
                            219,
                            224,
                            50,
                            58,
                            10,
                            73,
                            6,
                            36,
                            92,
                            194,
                            211,
                            172,
                            98,
                            145,
                            149,
                            228,
                            121,
                            231,
                            200,
                            55,
                            109,
                            141,
                            213,
                            78,
                            169,
                            108,
                            86,
                            244,
                            234,
                            101,
                            122,
                            174,
                            8,
                            186,
                            120,
                            37,
                            46,
                            28,
                            166,
                            180,
                            198,
                            232,
                            221,
                            116,
                            31,
                            75,
                            189,
                            139,
                            138,
                            112,
                            62,
                            181,
                            102,
                            72,
                            3,
                            246,
                            14,
                            97,
                            53,
                            87,
                            185,
                            134,
                            193,
                            29,
                            158,
                            225,
                            248,
                            152,
                            17,
                            105,
                            217,
                            142,
                            148,
                            155,
                            30,
                            135,
                            233,
                            206,
                            85,
                            40,
                            223,
                            140,
                            161,
                            137,
                            13,
                            191,
                            230,
                            66,
                            104,
                            65,
                            153,
                            45,
                            15,
                            176,
                            84,
                            187,
                            22
                        ], Ws = [
                            82,
                            9,
                            106,
                            213,
                            48,
                            54,
                            165,
                            56,
                            191,
                            64,
                            163,
                            158,
                            129,
                            243,
                            215,
                            251,
                            124,
                            227,
                            57,
                            130,
                            155,
                            47,
                            255,
                            135,
                            52,
                            142,
                            67,
                            68,
                            196,
                            222,
                            233,
                            203,
                            84,
                            123,
                            148,
                            50,
                            166,
                            194,
                            35,
                            61,
                            238,
                            76,
                            149,
                            11,
                            66,
                            250,
                            195,
                            78,
                            8,
                            46,
                            161,
                            102,
                            40,
                            217,
                            36,
                            178,
                            118,
                            91,
                            162,
                            73,
                            109,
                            139,
                            209,
                            37,
                            114,
                            248,
                            246,
                            100,
                            134,
                            104,
                            152,
                            22,
                            212,
                            164,
                            92,
                            204,
                            93,
                            101,
                            182,
                            146,
                            108,
                            112,
                            72,
                            80,
                            253,
                            237,
                            185,
                            218,
                            94,
                            21,
                            70,
                            87,
                            167,
                            141,
                            157,
                            132,
                            144,
                            216,
                            171,
                            0,
                            140,
                            188,
                            211,
                            10,
                            247,
                            228,
                            88,
                            5,
                            184,
                            179,
                            69,
                            6,
                            208,
                            44,
                            30,
                            143,
                            202,
                            63,
                            15,
                            2,
                            193,
                            175,
                            189,
                            3,
                            1,
                            19,
                            138,
                            107,
                            58,
                            145,
                            17,
                            65,
                            79,
                            103,
                            220,
                            234,
                            151,
                            242,
                            207,
                            206,
                            240,
                            180,
                            230,
                            115,
                            150,
                            172,
                            116,
                            34,
                            231,
                            173,
                            53,
                            133,
                            226,
                            249,
                            55,
                            232,
                            28,
                            117,
                            223,
                            110,
                            71,
                            241,
                            26,
                            113,
                            29,
                            41,
                            197,
                            137,
                            111,
                            183,
                            98,
                            14,
                            170,
                            24,
                            190,
                            27,
                            252,
                            86,
                            62,
                            75,
                            198,
                            210,
                            121,
                            32,
                            154,
                            219,
                            192,
                            254,
                            120,
                            205,
                            90,
                            244,
                            31,
                            221,
                            168,
                            51,
                            136,
                            7,
                            199,
                            49,
                            177,
                            18,
                            16,
                            89,
                            39,
                            128,
                            236,
                            95,
                            96,
                            81,
                            127,
                            169,
                            25,
                            181,
                            74,
                            13,
                            45,
                            229,
                            122,
                            159,
                            147,
                            201,
                            156,
                            239,
                            160,
                            224,
                            59,
                            77,
                            174,
                            42,
                            245,
                            176,
                            200,
                            235,
                            187,
                            60,
                            131,
                            83,
                            153,
                            97,
                            23,
                            43,
                            4,
                            126,
                            186,
                            119,
                            214,
                            38,
                            225,
                            105,
                            20,
                            99,
                            85,
                            33,
                            12,
                            125
                        ], $s = [
                            3328402341,
                            4168907908,
                            4000806809,
                            4135287693,
                            4294111757,
                            3597364157,
                            3731845041,
                            2445657428,
                            1613770832,
                            33620227,
                            3462883241,
                            1445669757,
                            3892248089,
                            3050821474,
                            1303096294,
                            3967186586,
                            2412431941,
                            528646813,
                            2311702848,
                            4202528135,
                            4026202645,
                            2992200171,
                            2387036105,
                            4226871307,
                            1101901292,
                            3017069671,
                            1604494077,
                            1169141738,
                            597466303,
                            1403299063,
                            3832705686,
                            2613100635,
                            1974974402,
                            3791519004,
                            1033081774,
                            1277568618,
                            1815492186,
                            2118074177,
                            4126668546,
                            2211236943,
                            1748251740,
                            1369810420,
                            3521504564,
                            4193382664,
                            3799085459,
                            2883115123,
                            1647391059,
                            706024767,
                            134480908,
                            2512897874,
                            1176707941,
                            2646852446,
                            806885416,
                            932615841,
                            168101135,
                            798661301,
                            235341577,
                            605164086,
                            461406363,
                            3756188221,
                            3454790438,
                            1311188841,
                            2142417613,
                            3933566367,
                            302582043,
                            495158174,
                            1479289972,
                            874125870,
                            907746093,
                            3698224818,
                            3025820398,
                            1537253627,
                            2756858614,
                            1983593293,
                            3084310113,
                            2108928974,
                            1378429307,
                            3722699582,
                            1580150641,
                            327451799,
                            2790478837,
                            3117535592,
                            0,
                            3253595436,
                            1075847264,
                            3825007647,
                            2041688520,
                            3059440621,
                            3563743934,
                            2378943302,
                            1740553945,
                            1916352843,
                            2487896798,
                            2555137236,
                            2958579944,
                            2244988746,
                            3151024235,
                            3320835882,
                            1336584933,
                            3992714006,
                            2252555205,
                            2588757463,
                            1714631509,
                            293963156,
                            2319795663,
                            3925473552,
                            67240454,
                            4269768577,
                            2689618160,
                            2017213508,
                            631218106,
                            1269344483,
                            2723238387,
                            1571005438,
                            2151694528,
                            93294474,
                            1066570413,
                            563977660,
                            1882732616,
                            4059428100,
                            1673313503,
                            2008463041,
                            2950355573,
                            1109467491,
                            537923632,
                            3858759450,
                            4260623118,
                            3218264685,
                            2177748300,
                            403442708,
                            638784309,
                            3287084079,
                            3193921505,
                            899127202,
                            2286175436,
                            773265209,
                            2479146071,
                            1437050866,
                            4236148354,
                            2050833735,
                            3362022572,
                            3126681063,
                            840505643,
                            3866325909,
                            3227541664,
                            427917720,
                            2655997905,
                            2749160575,
                            1143087718,
                            1412049534,
                            999329963,
                            193497219,
                            2353415882,
                            3354324521,
                            1807268051,
                            672404540,
                            2816401017,
                            3160301282,
                            369822493,
                            2916866934,
                            3688947771,
                            1681011286,
                            1949973070,
                            336202270,
                            2454276571,
                            201721354,
                            1210328172,
                            3093060836,
                            2680341085,
                            3184776046,
                            1135389935,
                            3294782118,
                            965841320,
                            831886756,
                            3554993207,
                            4068047243,
                            3588745010,
                            2345191491,
                            1849112409,
                            3664604599,
                            26054028,
                            2983581028,
                            2622377682,
                            1235855840,
                            3630984372,
                            2891339514,
                            4092916743,
                            3488279077,
                            3395642799,
                            4101667470,
                            1202630377,
                            268961816,
                            1874508501,
                            4034427016,
                            1243948399,
                            1546530418,
                            941366308,
                            1470539505,
                            1941222599,
                            2546386513,
                            3421038627,
                            2715671932,
                            3899946140,
                            1042226977,
                            2521517021,
                            1639824860,
                            227249030,
                            260737669,
                            3765465232,
                            2084453954,
                            1907733956,
                            3429263018,
                            2420656344,
                            100860677,
                            4160157185,
                            470683154,
                            3261161891,
                            1781871967,
                            2924959737,
                            1773779408,
                            394692241,
                            2579611992,
                            974986535,
                            664706745,
                            3655459128,
                            3958962195,
                            731420851,
                            571543859,
                            3530123707,
                            2849626480,
                            126783113,
                            865375399,
                            765172662,
                            1008606754,
                            361203602,
                            3387549984,
                            2278477385,
                            2857719295,
                            1344809080,
                            2782912378,
                            59542671,
                            1503764984,
                            160008576,
                            437062935,
                            1707065306,
                            3622233649,
                            2218934982,
                            3496503480,
                            2185314755,
                            697932208,
                            1512910199,
                            504303377,
                            2075177163,
                            2824099068,
                            1841019862,
                            739644986
                        ], Js = [
                            2781242211,
                            2230877308,
                            2582542199,
                            2381740923,
                            234877682,
                            3184946027,
                            2984144751,
                            1418839493,
                            1348481072,
                            50462977,
                            2848876391,
                            2102799147,
                            434634494,
                            1656084439,
                            3863849899,
                            2599188086,
                            1167051466,
                            2636087938,
                            1082771913,
                            2281340285,
                            368048890,
                            3954334041,
                            3381544775,
                            201060592,
                            3963727277,
                            1739838676,
                            4250903202,
                            3930435503,
                            3206782108,
                            4149453988,
                            2531553906,
                            1536934080,
                            3262494647,
                            484572669,
                            2923271059,
                            1783375398,
                            1517041206,
                            1098792767,
                            49674231,
                            1334037708,
                            1550332980,
                            4098991525,
                            886171109,
                            150598129,
                            2481090929,
                            1940642008,
                            1398944049,
                            1059722517,
                            201851908,
                            1385547719,
                            1699095331,
                            1587397571,
                            674240536,
                            2704774806,
                            252314885,
                            3039795866,
                            151914247,
                            908333586,
                            2602270848,
                            1038082786,
                            651029483,
                            1766729511,
                            3447698098,
                            2682942837,
                            454166793,
                            2652734339,
                            1951935532,
                            775166490,
                            758520603,
                            3000790638,
                            4004797018,
                            4217086112,
                            4137964114,
                            1299594043,
                            1639438038,
                            3464344499,
                            2068982057,
                            1054729187,
                            1901997871,
                            2534638724,
                            4121318227,
                            1757008337,
                            0,
                            750906861,
                            1614815264,
                            535035132,
                            3363418545,
                            3988151131,
                            3201591914,
                            1183697867,
                            3647454910,
                            1265776953,
                            3734260298,
                            3566750796,
                            3903871064,
                            1250283471,
                            1807470800,
                            717615087,
                            3847203498,
                            384695291,
                            3313910595,
                            3617213773,
                            1432761139,
                            2484176261,
                            3481945413,
                            283769337,
                            100925954,
                            2180939647,
                            4037038160,
                            1148730428,
                            3123027871,
                            3813386408,
                            4087501137,
                            4267549603,
                            3229630528,
                            2315620239,
                            2906624658,
                            3156319645,
                            1215313976,
                            82966005,
                            3747855548,
                            3245848246,
                            1974459098,
                            1665278241,
                            807407632,
                            451280895,
                            251524083,
                            1841287890,
                            1283575245,
                            337120268,
                            891687699,
                            801369324,
                            3787349855,
                            2721421207,
                            3431482436,
                            959321879,
                            1469301956,
                            4065699751,
                            2197585534,
                            1199193405,
                            2898814052,
                            3887750493,
                            724703513,
                            2514908019,
                            2696962144,
                            2551808385,
                            3516813135,
                            2141445340,
                            1715741218,
                            2119445034,
                            2872807568,
                            2198571144,
                            3398190662,
                            700968686,
                            3547052216,
                            1009259540,
                            2041044702,
                            3803995742,
                            487983883,
                            1991105499,
                            1004265696,
                            1449407026,
                            1316239930,
                            504629770,
                            3683797321,
                            168560134,
                            1816667172,
                            3837287516,
                            1570751170,
                            1857934291,
                            4014189740,
                            2797888098,
                            2822345105,
                            2754712981,
                            936633572,
                            2347923833,
                            852879335,
                            1133234376,
                            1500395319,
                            3084545389,
                            2348912013,
                            1689376213,
                            3533459022,
                            3762923945,
                            3034082412,
                            4205598294,
                            133428468,
                            634383082,
                            2949277029,
                            2398386810,
                            3913789102,
                            403703816,
                            3580869306,
                            2297460856,
                            1867130149,
                            1918643758,
                            607656988,
                            4049053350,
                            3346248884,
                            1368901318,
                            600565992,
                            2090982877,
                            2632479860,
                            557719327,
                            3717614411,
                            3697393085,
                            2249034635,
                            2232388234,
                            2430627952,
                            1115438654,
                            3295786421,
                            2865522278,
                            3633334344,
                            84280067,
                            33027830,
                            303828494,
                            2747425121,
                            1600795957,
                            4188952407,
                            3496589753,
                            2434238086,
                            1486471617,
                            658119965,
                            3106381470,
                            953803233,
                            334231800,
                            3005978776,
                            857870609,
                            3151128937,
                            1890179545,
                            2298973838,
                            2805175444,
                            3056442267,
                            574365214,
                            2450884487,
                            550103529,
                            1233637070,
                            4289353045,
                            2018519080,
                            2057691103,
                            2399374476,
                            4166623649,
                            2148108681,
                            387583245,
                            3664101311,
                            836232934,
                            3330556482,
                            3100665960,
                            3280093505,
                            2955516313,
                            2002398509,
                            287182607,
                            3413881008,
                            4238890068,
                            3597515707,
                            975967766
                        ], Ys = [
                            1671808611,
                            2089089148,
                            2006576759,
                            2072901243,
                            4061003762,
                            1807603307,
                            1873927791,
                            3310653893,
                            810573872,
                            16974337,
                            1739181671,
                            729634347,
                            4263110654,
                            3613570519,
                            2883997099,
                            1989864566,
                            3393556426,
                            2191335298,
                            3376449993,
                            2106063485,
                            4195741690,
                            1508618841,
                            1204391495,
                            4027317232,
                            2917941677,
                            3563566036,
                            2734514082,
                            2951366063,
                            2629772188,
                            2767672228,
                            1922491506,
                            3227229120,
                            3082974647,
                            4246528509,
                            2477669779,
                            644500518,
                            911895606,
                            1061256767,
                            4144166391,
                            3427763148,
                            878471220,
                            2784252325,
                            3845444069,
                            4043897329,
                            1905517169,
                            3631459288,
                            827548209,
                            356461077,
                            67897348,
                            3344078279,
                            593839651,
                            3277757891,
                            405286936,
                            2527147926,
                            84871685,
                            2595565466,
                            118033927,
                            305538066,
                            2157648768,
                            3795705826,
                            3945188843,
                            661212711,
                            2999812018,
                            1973414517,
                            152769033,
                            2208177539,
                            745822252,
                            439235610,
                            455947803,
                            1857215598,
                            1525593178,
                            2700827552,
                            1391895634,
                            994932283,
                            3596728278,
                            3016654259,
                            695947817,
                            3812548067,
                            795958831,
                            2224493444,
                            1408607827,
                            3513301457,
                            0,
                            3979133421,
                            543178784,
                            4229948412,
                            2982705585,
                            1542305371,
                            1790891114,
                            3410398667,
                            3201918910,
                            961245753,
                            1256100938,
                            1289001036,
                            1491644504,
                            3477767631,
                            3496721360,
                            4012557807,
                            2867154858,
                            4212583931,
                            1137018435,
                            1305975373,
                            861234739,
                            2241073541,
                            1171229253,
                            4178635257,
                            33948674,
                            2139225727,
                            1357946960,
                            1011120188,
                            2679776671,
                            2833468328,
                            1374921297,
                            2751356323,
                            1086357568,
                            2408187279,
                            2460827538,
                            2646352285,
                            944271416,
                            4110742005,
                            3168756668,
                            3066132406,
                            3665145818,
                            560153121,
                            271589392,
                            4279952895,
                            4077846003,
                            3530407890,
                            3444343245,
                            202643468,
                            322250259,
                            3962553324,
                            1608629855,
                            2543990167,
                            1154254916,
                            389623319,
                            3294073796,
                            2817676711,
                            2122513534,
                            1028094525,
                            1689045092,
                            1575467613,
                            422261273,
                            1939203699,
                            1621147744,
                            2174228865,
                            1339137615,
                            3699352540,
                            577127458,
                            712922154,
                            2427141008,
                            2290289544,
                            1187679302,
                            3995715566,
                            3100863416,
                            339486740,
                            3732514782,
                            1591917662,
                            186455563,
                            3681988059,
                            3762019296,
                            844522546,
                            978220090,
                            169743370,
                            1239126601,
                            101321734,
                            611076132,
                            1558493276,
                            3260915650,
                            3547250131,
                            2901361580,
                            1655096418,
                            2443721105,
                            2510565781,
                            3828863972,
                            2039214713,
                            3878868455,
                            3359869896,
                            928607799,
                            1840765549,
                            2374762893,
                            3580146133,
                            1322425422,
                            2850048425,
                            1823791212,
                            1459268694,
                            4094161908,
                            3928346602,
                            1706019429,
                            2056189050,
                            2934523822,
                            135794696,
                            3134549946,
                            2022240376,
                            628050469,
                            779246638,
                            472135708,
                            2800834470,
                            3032970164,
                            3327236038,
                            3894660072,
                            3715932637,
                            1956440180,
                            522272287,
                            1272813131,
                            3185336765,
                            2340818315,
                            2323976074,
                            1888542832,
                            1044544574,
                            3049550261,
                            1722469478,
                            1222152264,
                            50660867,
                            4127324150,
                            236067854,
                            1638122081,
                            895445557,
                            1475980887,
                            3117443513,
                            2257655686,
                            3243809217,
                            489110045,
                            2662934430,
                            3778599393,
                            4162055160,
                            2561878936,
                            288563729,
                            1773916777,
                            3648039385,
                            2391345038,
                            2493985684,
                            2612407707,
                            505560094,
                            2274497927,
                            3911240169,
                            3460925390,
                            1442818645,
                            678973480,
                            3749357023,
                            2358182796,
                            2717407649,
                            2306869641,
                            219617805,
                            3218761151,
                            3862026214,
                            1120306242,
                            1756942440,
                            1103331905,
                            2578459033,
                            762796589,
                            252780047,
                            2966125488,
                            1425844308,
                            3151392187,
                            372911126
                        ], qs = [
                            1667474886,
                            2088535288,
                            2004326894,
                            2071694838,
                            4075949567,
                            1802223062,
                            1869591006,
                            3318043793,
                            808472672,
                            16843522,
                            1734846926,
                            724270422,
                            4278065639,
                            3621216949,
                            2880169549,
                            1987484396,
                            3402253711,
                            2189597983,
                            3385409673,
                            2105378810,
                            4210693615,
                            1499065266,
                            1195886990,
                            4042263547,
                            2913856577,
                            3570689971,
                            2728590687,
                            2947541573,
                            2627518243,
                            2762274643,
                            1920112356,
                            3233831835,
                            3082273397,
                            4261223649,
                            2475929149,
                            640051788,
                            909531756,
                            1061110142,
                            4160160501,
                            3435941763,
                            875846760,
                            2779116625,
                            3857003729,
                            4059105529,
                            1903268834,
                            3638064043,
                            825316194,
                            353713962,
                            67374088,
                            3351728789,
                            589522246,
                            3284360861,
                            404236336,
                            2526454071,
                            84217610,
                            2593830191,
                            117901582,
                            303183396,
                            2155911963,
                            3806477791,
                            3958056653,
                            656894286,
                            2998062463,
                            1970642922,
                            151591698,
                            2206440989,
                            741110872,
                            437923380,
                            454765878,
                            1852748508,
                            1515908788,
                            2694904667,
                            1381168804,
                            993742198,
                            3604373943,
                            3014905469,
                            690584402,
                            3823320797,
                            791638366,
                            2223281939,
                            1398011302,
                            3520161977,
                            0,
                            3991743681,
                            538992704,
                            4244381667,
                            2981218425,
                            1532751286,
                            1785380564,
                            3419096717,
                            3200178535,
                            960056178,
                            1246420628,
                            1280103576,
                            1482221744,
                            3486468741,
                            3503319995,
                            4025428677,
                            2863326543,
                            4227536621,
                            1128514950,
                            1296947098,
                            859002214,
                            2240123921,
                            1162203018,
                            4193849577,
                            33687044,
                            2139062782,
                            1347481760,
                            1010582648,
                            2678045221,
                            2829640523,
                            1364325282,
                            2745433693,
                            1077985408,
                            2408548869,
                            2459086143,
                            2644360225,
                            943212656,
                            4126475505,
                            3166494563,
                            3065430391,
                            3671750063,
                            555836226,
                            269496352,
                            4294908645,
                            4092792573,
                            3537006015,
                            3452783745,
                            202118168,
                            320025894,
                            3974901699,
                            1600119230,
                            2543297077,
                            1145359496,
                            387397934,
                            3301201811,
                            2812801621,
                            2122220284,
                            1027426170,
                            1684319432,
                            1566435258,
                            421079858,
                            1936954854,
                            1616945344,
                            2172753945,
                            1330631070,
                            3705438115,
                            572679748,
                            707427924,
                            2425400123,
                            2290647819,
                            1179044492,
                            4008585671,
                            3099120491,
                            336870440,
                            3739122087,
                            1583276732,
                            185277718,
                            3688593069,
                            3772791771,
                            842159716,
                            976899700,
                            168435220,
                            1229577106,
                            101059084,
                            606366792,
                            1549591736,
                            3267517855,
                            3553849021,
                            2897014595,
                            1650632388,
                            2442242105,
                            2509612081,
                            3840161747,
                            2038008818,
                            3890688725,
                            3368567691,
                            926374254,
                            1835907034,
                            2374863873,
                            3587531953,
                            1313788572,
                            2846482505,
                            1819063512,
                            1448540844,
                            4109633523,
                            3941213647,
                            1701162954,
                            2054852340,
                            2930698567,
                            134748176,
                            3132806511,
                            2021165296,
                            623210314,
                            774795868,
                            471606328,
                            2795958615,
                            3031746419,
                            3334885783,
                            3907527627,
                            3722280097,
                            1953799400,
                            522133822,
                            1263263126,
                            3183336545,
                            2341176845,
                            2324333839,
                            1886425312,
                            1044267644,
                            3048588401,
                            1718004428,
                            1212733584,
                            50529542,
                            4143317495,
                            235803164,
                            1633788866,
                            892690282,
                            1465383342,
                            3115962473,
                            2256965911,
                            3250673817,
                            488449850,
                            2661202215,
                            3789633753,
                            4177007595,
                            2560144171,
                            286339874,
                            1768537042,
                            3654906025,
                            2391705863,
                            2492770099,
                            2610673197,
                            505291324,
                            2273808917,
                            3924369609,
                            3469625735,
                            1431699370,
                            673740880,
                            3755965093,
                            2358021891,
                            2711746649,
                            2307489801,
                            218961690,
                            3217021541,
                            3873845719,
                            1111672452,
                            1751693520,
                            1094828930,
                            2576986153,
                            757954394,
                            252645662,
                            2964376443,
                            1414855848,
                            3149649517,
                            370555436
                        ], Zs = [
                            1374988112,
                            2118214995,
                            437757123,
                            975658646,
                            1001089995,
                            530400753,
                            2902087851,
                            1273168787,
                            540080725,
                            2910219766,
                            2295101073,
                            4110568485,
                            1340463100,
                            3307916247,
                            641025152,
                            3043140495,
                            3736164937,
                            632953703,
                            1172967064,
                            1576976609,
                            3274667266,
                            2169303058,
                            2370213795,
                            1809054150,
                            59727847,
                            361929877,
                            3211623147,
                            2505202138,
                            3569255213,
                            1484005843,
                            1239443753,
                            2395588676,
                            1975683434,
                            4102977912,
                            2572697195,
                            666464733,
                            3202437046,
                            4035489047,
                            3374361702,
                            2110667444,
                            1675577880,
                            3843699074,
                            2538681184,
                            1649639237,
                            2976151520,
                            3144396420,
                            4269907996,
                            4178062228,
                            1883793496,
                            2403728665,
                            2497604743,
                            1383856311,
                            2876494627,
                            1917518562,
                            3810496343,
                            1716890410,
                            3001755655,
                            800440835,
                            2261089178,
                            3543599269,
                            807962610,
                            599762354,
                            33778362,
                            3977675356,
                            2328828971,
                            2809771154,
                            4077384432,
                            1315562145,
                            1708848333,
                            101039829,
                            3509871135,
                            3299278474,
                            875451293,
                            2733856160,
                            92987698,
                            2767645557,
                            193195065,
                            1080094634,
                            1584504582,
                            3178106961,
                            1042385657,
                            2531067453,
                            3711829422,
                            1306967366,
                            2438237621,
                            1908694277,
                            67556463,
                            1615861247,
                            429456164,
                            3602770327,
                            2302690252,
                            1742315127,
                            2968011453,
                            126454664,
                            3877198648,
                            2043211483,
                            2709260871,
                            2084704233,
                            4169408201,
                            0,
                            159417987,
                            841739592,
                            504459436,
                            1817866830,
                            4245618683,
                            260388950,
                            1034867998,
                            908933415,
                            168810852,
                            1750902305,
                            2606453969,
                            607530554,
                            202008497,
                            2472011535,
                            3035535058,
                            463180190,
                            2160117071,
                            1641816226,
                            1517767529,
                            470948374,
                            3801332234,
                            3231722213,
                            1008918595,
                            303765277,
                            235474187,
                            4069246893,
                            766945465,
                            337553864,
                            1475418501,
                            2943682380,
                            4003061179,
                            2743034109,
                            4144047775,
                            1551037884,
                            1147550661,
                            1543208500,
                            2336434550,
                            3408119516,
                            3069049960,
                            3102011747,
                            3610369226,
                            1113818384,
                            328671808,
                            2227573024,
                            2236228733,
                            3535486456,
                            2935566865,
                            3341394285,
                            496906059,
                            3702665459,
                            226906860,
                            2009195472,
                            733156972,
                            2842737049,
                            294930682,
                            1206477858,
                            2835123396,
                            2700099354,
                            1451044056,
                            573804783,
                            2269728455,
                            3644379585,
                            2362090238,
                            2564033334,
                            2801107407,
                            2776292904,
                            3669462566,
                            1068351396,
                            742039012,
                            1350078989,
                            1784663195,
                            1417561698,
                            4136440770,
                            2430122216,
                            775550814,
                            2193862645,
                            2673705150,
                            1775276924,
                            1876241833,
                            3475313331,
                            3366754619,
                            270040487,
                            3902563182,
                            3678124923,
                            3441850377,
                            1851332852,
                            3969562369,
                            2203032232,
                            3868552805,
                            2868897406,
                            566021896,
                            4011190502,
                            3135740889,
                            1248802510,
                            3936291284,
                            699432150,
                            832877231,
                            708780849,
                            3332740144,
                            899835584,
                            1951317047,
                            4236429990,
                            3767586992,
                            866637845,
                            4043610186,
                            1106041591,
                            2144161806,
                            395441711,
                            1984812685,
                            1139781709,
                            3433712980,
                            3835036895,
                            2664543715,
                            1282050075,
                            3240894392,
                            1181045119,
                            2640243204,
                            25965917,
                            4203181171,
                            4211818798,
                            3009879386,
                            2463879762,
                            3910161971,
                            1842759443,
                            2597806476,
                            933301370,
                            1509430414,
                            3943906441,
                            3467192302,
                            3076639029,
                            3776767469,
                            2051518780,
                            2631065433,
                            1441952575,
                            404016761,
                            1942435775,
                            1408749034,
                            1610459739,
                            3745345300,
                            2017778566,
                            3400528769,
                            3110650942,
                            941896748,
                            3265478751,
                            371049330,
                            3168937228,
                            675039627,
                            4279080257,
                            967311729,
                            135050206,
                            3635733660,
                            1683407248,
                            2076935265,
                            3576870512,
                            1215061108,
                            3501741890
                        ], Xs = [
                            1347548327,
                            1400783205,
                            3273267108,
                            2520393566,
                            3409685355,
                            4045380933,
                            2880240216,
                            2471224067,
                            1428173050,
                            4138563181,
                            2441661558,
                            636813900,
                            4233094615,
                            3620022987,
                            2149987652,
                            2411029155,
                            1239331162,
                            1730525723,
                            2554718734,
                            3781033664,
                            46346101,
                            310463728,
                            2743944855,
                            3328955385,
                            3875770207,
                            2501218972,
                            3955191162,
                            3667219033,
                            768917123,
                            3545789473,
                            692707433,
                            1150208456,
                            1786102409,
                            2029293177,
                            1805211710,
                            3710368113,
                            3065962831,
                            401639597,
                            1724457132,
                            3028143674,
                            409198410,
                            2196052529,
                            1620529459,
                            1164071807,
                            3769721975,
                            2226875310,
                            486441376,
                            2499348523,
                            1483753576,
                            428819965,
                            2274680428,
                            3075636216,
                            598438867,
                            3799141122,
                            1474502543,
                            711349675,
                            129166120,
                            53458370,
                            2592523643,
                            2782082824,
                            4063242375,
                            2988687269,
                            3120694122,
                            1559041666,
                            730517276,
                            2460449204,
                            4042459122,
                            2706270690,
                            3446004468,
                            3573941694,
                            533804130,
                            2328143614,
                            2637442643,
                            2695033685,
                            839224033,
                            1973745387,
                            957055980,
                            2856345839,
                            106852767,
                            1371368976,
                            4181598602,
                            1033297158,
                            2933734917,
                            1179510461,
                            3046200461,
                            91341917,
                            1862534868,
                            4284502037,
                            605657339,
                            2547432937,
                            3431546947,
                            2003294622,
                            3182487618,
                            2282195339,
                            954669403,
                            3682191598,
                            1201765386,
                            3917234703,
                            3388507166,
                            0,
                            2198438022,
                            1211247597,
                            2887651696,
                            1315723890,
                            4227665663,
                            1443857720,
                            507358933,
                            657861945,
                            1678381017,
                            560487590,
                            3516619604,
                            975451694,
                            2970356327,
                            261314535,
                            3535072918,
                            2652609425,
                            1333838021,
                            2724322336,
                            1767536459,
                            370938394,
                            182621114,
                            3854606378,
                            1128014560,
                            487725847,
                            185469197,
                            2918353863,
                            3106780840,
                            3356761769,
                            2237133081,
                            1286567175,
                            3152976349,
                            4255350624,
                            2683765030,
                            3160175349,
                            3309594171,
                            878443390,
                            1988838185,
                            3704300486,
                            1756818940,
                            1673061617,
                            3403100636,
                            272786309,
                            1075025698,
                            545572369,
                            2105887268,
                            4174560061,
                            296679730,
                            1841768865,
                            1260232239,
                            4091327024,
                            3960309330,
                            3497509347,
                            1814803222,
                            2578018489,
                            4195456072,
                            575138148,
                            3299409036,
                            446754879,
                            3629546796,
                            4011996048,
                            3347532110,
                            3252238545,
                            4270639778,
                            915985419,
                            3483825537,
                            681933534,
                            651868046,
                            2755636671,
                            3828103837,
                            223377554,
                            2607439820,
                            1649704518,
                            3270937875,
                            3901806776,
                            1580087799,
                            4118987695,
                            3198115200,
                            2087309459,
                            2842678573,
                            3016697106,
                            1003007129,
                            2802849917,
                            1860738147,
                            2077965243,
                            164439672,
                            4100872472,
                            32283319,
                            2827177882,
                            1709610350,
                            2125135846,
                            136428751,
                            3874428392,
                            3652904859,
                            3460984630,
                            3572145929,
                            3593056380,
                            2939266226,
                            824852259,
                            818324884,
                            3224740454,
                            930369212,
                            2801566410,
                            2967507152,
                            355706840,
                            1257309336,
                            4148292826,
                            243256656,
                            790073846,
                            2373340630,
                            1296297904,
                            1422699085,
                            3756299780,
                            3818836405,
                            457992840,
                            3099667487,
                            2135319889,
                            77422314,
                            1560382517,
                            1945798516,
                            788204353,
                            1521706781,
                            1385356242,
                            870912086,
                            325965383,
                            2358957921,
                            2050466060,
                            2388260884,
                            2313884476,
                            4006521127,
                            901210569,
                            3990953189,
                            1014646705,
                            1503449823,
                            1062597235,
                            2031621326,
                            3212035895,
                            3931371469,
                            1533017514,
                            350174575,
                            2256028891,
                            2177544179,
                            1052338372,
                            741876788,
                            1606591296,
                            1914052035,
                            213705253,
                            2334669897,
                            1107234197,
                            1899603969,
                            3725069491,
                            2631447780,
                            2422494913,
                            1635502980,
                            1893020342,
                            1950903388,
                            1120974935
                        ], Qs = [
                            2807058932,
                            1699970625,
                            2764249623,
                            1586903591,
                            1808481195,
                            1173430173,
                            1487645946,
                            59984867,
                            4199882800,
                            1844882806,
                            1989249228,
                            1277555970,
                            3623636965,
                            3419915562,
                            1149249077,
                            2744104290,
                            1514790577,
                            459744698,
                            244860394,
                            3235995134,
                            1963115311,
                            4027744588,
                            2544078150,
                            4190530515,
                            1608975247,
                            2627016082,
                            2062270317,
                            1507497298,
                            2200818878,
                            567498868,
                            1764313568,
                            3359936201,
                            2305455554,
                            2037970062,
                            1047239e3,
                            1910319033,
                            1337376481,
                            2904027272,
                            2892417312,
                            984907214,
                            1243112415,
                            830661914,
                            861968209,
                            2135253587,
                            2011214180,
                            2927934315,
                            2686254721,
                            731183368,
                            1750626376,
                            4246310725,
                            1820824798,
                            4172763771,
                            3542330227,
                            48394827,
                            2404901663,
                            2871682645,
                            671593195,
                            3254988725,
                            2073724613,
                            145085239,
                            2280796200,
                            2779915199,
                            1790575107,
                            2187128086,
                            472615631,
                            3029510009,
                            4075877127,
                            3802222185,
                            4107101658,
                            3201631749,
                            1646252340,
                            4270507174,
                            1402811438,
                            1436590835,
                            3778151818,
                            3950355702,
                            3963161475,
                            4020912224,
                            2667994737,
                            273792366,
                            2331590177,
                            104699613,
                            95345982,
                            3175501286,
                            2377486676,
                            1560637892,
                            3564045318,
                            369057872,
                            4213447064,
                            3919042237,
                            1137477952,
                            2658625497,
                            1119727848,
                            2340947849,
                            1530455833,
                            4007360968,
                            172466556,
                            266959938,
                            516552836,
                            0,
                            2256734592,
                            3980931627,
                            1890328081,
                            1917742170,
                            4294704398,
                            945164165,
                            3575528878,
                            958871085,
                            3647212047,
                            2787207260,
                            1423022939,
                            775562294,
                            1739656202,
                            3876557655,
                            2530391278,
                            2443058075,
                            3310321856,
                            547512796,
                            1265195639,
                            437656594,
                            3121275539,
                            719700128,
                            3762502690,
                            387781147,
                            218828297,
                            3350065803,
                            2830708150,
                            2848461854,
                            428169201,
                            122466165,
                            3720081049,
                            1627235199,
                            648017665,
                            4122762354,
                            1002783846,
                            2117360635,
                            695634755,
                            3336358691,
                            4234721005,
                            4049844452,
                            3704280881,
                            2232435299,
                            574624663,
                            287343814,
                            612205898,
                            1039717051,
                            840019705,
                            2708326185,
                            793451934,
                            821288114,
                            1391201670,
                            3822090177,
                            376187827,
                            3113855344,
                            1224348052,
                            1679968233,
                            2361698556,
                            1058709744,
                            752375421,
                            2431590963,
                            1321699145,
                            3519142200,
                            2734591178,
                            188127444,
                            2177869557,
                            3727205754,
                            2384911031,
                            3215212461,
                            2648976442,
                            2450346104,
                            3432737375,
                            1180849278,
                            331544205,
                            3102249176,
                            4150144569,
                            2952102595,
                            2159976285,
                            2474404304,
                            766078933,
                            313773861,
                            2570832044,
                            2108100632,
                            1668212892,
                            3145456443,
                            2013908262,
                            418672217,
                            3070356634,
                            2594734927,
                            1852171925,
                            3867060991,
                            3473416636,
                            3907448597,
                            2614737639,
                            919489135,
                            164948639,
                            2094410160,
                            2997825956,
                            590424639,
                            2486224549,
                            1723872674,
                            3157750862,
                            3399941250,
                            3501252752,
                            3625268135,
                            2555048196,
                            3673637356,
                            1343127501,
                            4130281361,
                            3599595085,
                            2957853679,
                            1297403050,
                            81781910,
                            3051593425,
                            2283490410,
                            532201772,
                            1367295589,
                            3926170974,
                            895287692,
                            1953757831,
                            1093597963,
                            492483431,
                            3528626907,
                            1446242576,
                            1192455638,
                            1636604631,
                            209336225,
                            344873464,
                            1015671571,
                            669961897,
                            3375740769,
                            3857572124,
                            2973530695,
                            3747192018,
                            1933530610,
                            3464042516,
                            935293895,
                            3454686199,
                            2858115069,
                            1863638845,
                            3683022916,
                            4085369519,
                            3292445032,
                            875313188,
                            1080017571,
                            3279033885,
                            621591778,
                            1233856572,
                            2504130317,
                            24197544,
                            3017672716,
                            3835484340,
                            3247465558,
                            2220981195,
                            3060847922,
                            1551124588,
                            1463996600
                        ], fo = [
                            4104605777,
                            1097159550,
                            396673818,
                            660510266,
                            2875968315,
                            2638606623,
                            4200115116,
                            3808662347,
                            821712160,
                            1986918061,
                            3430322568,
                            38544885,
                            3856137295,
                            718002117,
                            893681702,
                            1654886325,
                            2975484382,
                            3122358053,
                            3926825029,
                            4274053469,
                            796197571,
                            1290801793,
                            1184342925,
                            3556361835,
                            2405426947,
                            2459735317,
                            1836772287,
                            1381620373,
                            3196267988,
                            1948373848,
                            3764988233,
                            3385345166,
                            3263785589,
                            2390325492,
                            1480485785,
                            3111247143,
                            3780097726,
                            2293045232,
                            548169417,
                            3459953789,
                            3746175075,
                            439452389,
                            1362321559,
                            1400849762,
                            1685577905,
                            1806599355,
                            2174754046,
                            137073913,
                            1214797936,
                            1174215055,
                            3731654548,
                            2079897426,
                            1943217067,
                            1258480242,
                            529487843,
                            1437280870,
                            3945269170,
                            3049390895,
                            3313212038,
                            923313619,
                            679998e3,
                            3215307299,
                            57326082,
                            377642221,
                            3474729866,
                            2041877159,
                            133361907,
                            1776460110,
                            3673476453,
                            96392454,
                            878845905,
                            2801699524,
                            777231668,
                            4082475170,
                            2330014213,
                            4142626212,
                            2213296395,
                            1626319424,
                            1906247262,
                            1846563261,
                            562755902,
                            3708173718,
                            1040559837,
                            3871163981,
                            1418573201,
                            3294430577,
                            114585348,
                            1343618912,
                            2566595609,
                            3186202582,
                            1078185097,
                            3651041127,
                            3896688048,
                            2307622919,
                            425408743,
                            3371096953,
                            2081048481,
                            1108339068,
                            2216610296,
                            0,
                            2156299017,
                            736970802,
                            292596766,
                            1517440620,
                            251657213,
                            2235061775,
                            2933202493,
                            758720310,
                            265905162,
                            1554391400,
                            1532285339,
                            908999204,
                            174567692,
                            1474760595,
                            4002861748,
                            2610011675,
                            3234156416,
                            3693126241,
                            2001430874,
                            303699484,
                            2478443234,
                            2687165888,
                            585122620,
                            454499602,
                            151849742,
                            2345119218,
                            3064510765,
                            514443284,
                            4044981591,
                            1963412655,
                            2581445614,
                            2137062819,
                            19308535,
                            1928707164,
                            1715193156,
                            4219352155,
                            1126790795,
                            600235211,
                            3992742070,
                            3841024952,
                            836553431,
                            1669664834,
                            2535604243,
                            3323011204,
                            1243905413,
                            3141400786,
                            4180808110,
                            698445255,
                            2653899549,
                            2989552604,
                            2253581325,
                            3252932727,
                            3004591147,
                            1891211689,
                            2487810577,
                            3915653703,
                            4237083816,
                            4030667424,
                            2100090966,
                            865136418,
                            1229899655,
                            953270745,
                            3399679628,
                            3557504664,
                            4118925222,
                            2061379749,
                            3079546586,
                            2915017791,
                            983426092,
                            2022837584,
                            1607244650,
                            2118541908,
                            2366882550,
                            3635996816,
                            972512814,
                            3283088770,
                            1568718495,
                            3499326569,
                            3576539503,
                            621982671,
                            2895723464,
                            410887952,
                            2623762152,
                            1002142683,
                            645401037,
                            1494807662,
                            2595684844,
                            1335535747,
                            2507040230,
                            4293295786,
                            3167684641,
                            367585007,
                            3885750714,
                            1865862730,
                            2668221674,
                            2960971305,
                            2763173681,
                            1059270954,
                            2777952454,
                            2724642869,
                            1320957812,
                            2194319100,
                            2429595872,
                            2815956275,
                            77089521,
                            3973773121,
                            3444575871,
                            2448830231,
                            1305906550,
                            4021308739,
                            2857194700,
                            2516901860,
                            3518358430,
                            1787304780,
                            740276417,
                            1699839814,
                            1592394909,
                            2352307457,
                            2272556026,
                            188821243,
                            1729977011,
                            3687994002,
                            274084841,
                            3594982253,
                            3613494426,
                            2701949495,
                            4162096729,
                            322734571,
                            2837966542,
                            1640576439,
                            484830689,
                            1202797690,
                            3537852828,
                            4067639125,
                            349075736,
                            3342319475,
                            4157467219,
                            4255800159,
                            1030690015,
                            1155237496,
                            2951971274,
                            1757691577,
                            607398968,
                            2738905026,
                            499347990,
                            3794078908,
                            1011452712,
                            227885567,
                            2818666809,
                            213114376,
                            3034881240,
                            1455525988,
                            3414450555,
                            850817237,
                            1817998408,
                            3092726480
                        ], eo = [
                            0,
                            235474187,
                            470948374,
                            303765277,
                            941896748,
                            908933415,
                            607530554,
                            708780849,
                            1883793496,
                            2118214995,
                            1817866830,
                            1649639237,
                            1215061108,
                            1181045119,
                            1417561698,
                            1517767529,
                            3767586992,
                            4003061179,
                            4236429990,
                            4069246893,
                            3635733660,
                            3602770327,
                            3299278474,
                            3400528769,
                            2430122216,
                            2664543715,
                            2362090238,
                            2193862645,
                            2835123396,
                            2801107407,
                            3035535058,
                            3135740889,
                            3678124923,
                            3576870512,
                            3341394285,
                            3374361702,
                            3810496343,
                            3977675356,
                            4279080257,
                            4043610186,
                            2876494627,
                            2776292904,
                            3076639029,
                            3110650942,
                            2472011535,
                            2640243204,
                            2403728665,
                            2169303058,
                            1001089995,
                            899835584,
                            666464733,
                            699432150,
                            59727847,
                            226906860,
                            530400753,
                            294930682,
                            1273168787,
                            1172967064,
                            1475418501,
                            1509430414,
                            1942435775,
                            2110667444,
                            1876241833,
                            1641816226,
                            2910219766,
                            2743034109,
                            2976151520,
                            3211623147,
                            2505202138,
                            2606453969,
                            2302690252,
                            2269728455,
                            3711829422,
                            3543599269,
                            3240894392,
                            3475313331,
                            3843699074,
                            3943906441,
                            4178062228,
                            4144047775,
                            1306967366,
                            1139781709,
                            1374988112,
                            1610459739,
                            1975683434,
                            2076935265,
                            1775276924,
                            1742315127,
                            1034867998,
                            866637845,
                            566021896,
                            800440835,
                            92987698,
                            193195065,
                            429456164,
                            395441711,
                            1984812685,
                            2017778566,
                            1784663195,
                            1683407248,
                            1315562145,
                            1080094634,
                            1383856311,
                            1551037884,
                            101039829,
                            135050206,
                            437757123,
                            337553864,
                            1042385657,
                            807962610,
                            573804783,
                            742039012,
                            2531067453,
                            2564033334,
                            2328828971,
                            2227573024,
                            2935566865,
                            2700099354,
                            3001755655,
                            3168937228,
                            3868552805,
                            3902563182,
                            4203181171,
                            4102977912,
                            3736164937,
                            3501741890,
                            3265478751,
                            3433712980,
                            1106041591,
                            1340463100,
                            1576976609,
                            1408749034,
                            2043211483,
                            2009195472,
                            1708848333,
                            1809054150,
                            832877231,
                            1068351396,
                            766945465,
                            599762354,
                            159417987,
                            126454664,
                            361929877,
                            463180190,
                            2709260871,
                            2943682380,
                            3178106961,
                            3009879386,
                            2572697195,
                            2538681184,
                            2236228733,
                            2336434550,
                            3509871135,
                            3745345300,
                            3441850377,
                            3274667266,
                            3910161971,
                            3877198648,
                            4110568485,
                            4211818798,
                            2597806476,
                            2497604743,
                            2261089178,
                            2295101073,
                            2733856160,
                            2902087851,
                            3202437046,
                            2968011453,
                            3936291284,
                            3835036895,
                            4136440770,
                            4169408201,
                            3535486456,
                            3702665459,
                            3467192302,
                            3231722213,
                            2051518780,
                            1951317047,
                            1716890410,
                            1750902305,
                            1113818384,
                            1282050075,
                            1584504582,
                            1350078989,
                            168810852,
                            67556463,
                            371049330,
                            404016761,
                            841739592,
                            1008918595,
                            775550814,
                            540080725,
                            3969562369,
                            3801332234,
                            4035489047,
                            4269907996,
                            3569255213,
                            3669462566,
                            3366754619,
                            3332740144,
                            2631065433,
                            2463879762,
                            2160117071,
                            2395588676,
                            2767645557,
                            2868897406,
                            3102011747,
                            3069049960,
                            202008497,
                            33778362,
                            270040487,
                            504459436,
                            875451293,
                            975658646,
                            675039627,
                            641025152,
                            2084704233,
                            1917518562,
                            1615861247,
                            1851332852,
                            1147550661,
                            1248802510,
                            1484005843,
                            1451044056,
                            933301370,
                            967311729,
                            733156972,
                            632953703,
                            260388950,
                            25965917,
                            328671808,
                            496906059,
                            1206477858,
                            1239443753,
                            1543208500,
                            1441952575,
                            2144161806,
                            1908694277,
                            1675577880,
                            1842759443,
                            3610369226,
                            3644379585,
                            3408119516,
                            3307916247,
                            4011190502,
                            3776767469,
                            4077384432,
                            4245618683,
                            2809771154,
                            2842737049,
                            3144396420,
                            3043140495,
                            2673705150,
                            2438237621,
                            2203032232,
                            2370213795
                        ], to = [
                            0,
                            185469197,
                            370938394,
                            487725847,
                            741876788,
                            657861945,
                            975451694,
                            824852259,
                            1483753576,
                            1400783205,
                            1315723890,
                            1164071807,
                            1950903388,
                            2135319889,
                            1649704518,
                            1767536459,
                            2967507152,
                            3152976349,
                            2801566410,
                            2918353863,
                            2631447780,
                            2547432937,
                            2328143614,
                            2177544179,
                            3901806776,
                            3818836405,
                            4270639778,
                            4118987695,
                            3299409036,
                            3483825537,
                            3535072918,
                            3652904859,
                            2077965243,
                            1893020342,
                            1841768865,
                            1724457132,
                            1474502543,
                            1559041666,
                            1107234197,
                            1257309336,
                            598438867,
                            681933534,
                            901210569,
                            1052338372,
                            261314535,
                            77422314,
                            428819965,
                            310463728,
                            3409685355,
                            3224740454,
                            3710368113,
                            3593056380,
                            3875770207,
                            3960309330,
                            4045380933,
                            4195456072,
                            2471224067,
                            2554718734,
                            2237133081,
                            2388260884,
                            3212035895,
                            3028143674,
                            2842678573,
                            2724322336,
                            4138563181,
                            4255350624,
                            3769721975,
                            3955191162,
                            3667219033,
                            3516619604,
                            3431546947,
                            3347532110,
                            2933734917,
                            2782082824,
                            3099667487,
                            3016697106,
                            2196052529,
                            2313884476,
                            2499348523,
                            2683765030,
                            1179510461,
                            1296297904,
                            1347548327,
                            1533017514,
                            1786102409,
                            1635502980,
                            2087309459,
                            2003294622,
                            507358933,
                            355706840,
                            136428751,
                            53458370,
                            839224033,
                            957055980,
                            605657339,
                            790073846,
                            2373340630,
                            2256028891,
                            2607439820,
                            2422494913,
                            2706270690,
                            2856345839,
                            3075636216,
                            3160175349,
                            3573941694,
                            3725069491,
                            3273267108,
                            3356761769,
                            4181598602,
                            4063242375,
                            4011996048,
                            3828103837,
                            1033297158,
                            915985419,
                            730517276,
                            545572369,
                            296679730,
                            446754879,
                            129166120,
                            213705253,
                            1709610350,
                            1860738147,
                            1945798516,
                            2029293177,
                            1239331162,
                            1120974935,
                            1606591296,
                            1422699085,
                            4148292826,
                            4233094615,
                            3781033664,
                            3931371469,
                            3682191598,
                            3497509347,
                            3446004468,
                            3328955385,
                            2939266226,
                            2755636671,
                            3106780840,
                            2988687269,
                            2198438022,
                            2282195339,
                            2501218972,
                            2652609425,
                            1201765386,
                            1286567175,
                            1371368976,
                            1521706781,
                            1805211710,
                            1620529459,
                            2105887268,
                            1988838185,
                            533804130,
                            350174575,
                            164439672,
                            46346101,
                            870912086,
                            954669403,
                            636813900,
                            788204353,
                            2358957921,
                            2274680428,
                            2592523643,
                            2441661558,
                            2695033685,
                            2880240216,
                            3065962831,
                            3182487618,
                            3572145929,
                            3756299780,
                            3270937875,
                            3388507166,
                            4174560061,
                            4091327024,
                            4006521127,
                            3854606378,
                            1014646705,
                            930369212,
                            711349675,
                            560487590,
                            272786309,
                            457992840,
                            106852767,
                            223377554,
                            1678381017,
                            1862534868,
                            1914052035,
                            2031621326,
                            1211247597,
                            1128014560,
                            1580087799,
                            1428173050,
                            32283319,
                            182621114,
                            401639597,
                            486441376,
                            768917123,
                            651868046,
                            1003007129,
                            818324884,
                            1503449823,
                            1385356242,
                            1333838021,
                            1150208456,
                            1973745387,
                            2125135846,
                            1673061617,
                            1756818940,
                            2970356327,
                            3120694122,
                            2802849917,
                            2887651696,
                            2637442643,
                            2520393566,
                            2334669897,
                            2149987652,
                            3917234703,
                            3799141122,
                            4284502037,
                            4100872472,
                            3309594171,
                            3460984630,
                            3545789473,
                            3629546796,
                            2050466060,
                            1899603969,
                            1814803222,
                            1730525723,
                            1443857720,
                            1560382517,
                            1075025698,
                            1260232239,
                            575138148,
                            692707433,
                            878443390,
                            1062597235,
                            243256656,
                            91341917,
                            409198410,
                            325965383,
                            3403100636,
                            3252238545,
                            3704300486,
                            3620022987,
                            3874428392,
                            3990953189,
                            4042459122,
                            4227665663,
                            2460449204,
                            2578018489,
                            2226875310,
                            2411029155,
                            3198115200,
                            3046200461,
                            2827177882,
                            2743944855
                        ], no = [
                            0,
                            218828297,
                            437656594,
                            387781147,
                            875313188,
                            958871085,
                            775562294,
                            590424639,
                            1750626376,
                            1699970625,
                            1917742170,
                            2135253587,
                            1551124588,
                            1367295589,
                            1180849278,
                            1265195639,
                            3501252752,
                            3720081049,
                            3399941250,
                            3350065803,
                            3835484340,
                            3919042237,
                            4270507174,
                            4085369519,
                            3102249176,
                            3051593425,
                            2734591178,
                            2952102595,
                            2361698556,
                            2177869557,
                            2530391278,
                            2614737639,
                            3145456443,
                            3060847922,
                            2708326185,
                            2892417312,
                            2404901663,
                            2187128086,
                            2504130317,
                            2555048196,
                            3542330227,
                            3727205754,
                            3375740769,
                            3292445032,
                            3876557655,
                            3926170974,
                            4246310725,
                            4027744588,
                            1808481195,
                            1723872674,
                            1910319033,
                            2094410160,
                            1608975247,
                            1391201670,
                            1173430173,
                            1224348052,
                            59984867,
                            244860394,
                            428169201,
                            344873464,
                            935293895,
                            984907214,
                            766078933,
                            547512796,
                            1844882806,
                            1627235199,
                            2011214180,
                            2062270317,
                            1507497298,
                            1423022939,
                            1137477952,
                            1321699145,
                            95345982,
                            145085239,
                            532201772,
                            313773861,
                            830661914,
                            1015671571,
                            731183368,
                            648017665,
                            3175501286,
                            2957853679,
                            2807058932,
                            2858115069,
                            2305455554,
                            2220981195,
                            2474404304,
                            2658625497,
                            3575528878,
                            3625268135,
                            3473416636,
                            3254988725,
                            3778151818,
                            3963161475,
                            4213447064,
                            4130281361,
                            3599595085,
                            3683022916,
                            3432737375,
                            3247465558,
                            3802222185,
                            4020912224,
                            4172763771,
                            4122762354,
                            3201631749,
                            3017672716,
                            2764249623,
                            2848461854,
                            2331590177,
                            2280796200,
                            2431590963,
                            2648976442,
                            104699613,
                            188127444,
                            472615631,
                            287343814,
                            840019705,
                            1058709744,
                            671593195,
                            621591778,
                            1852171925,
                            1668212892,
                            1953757831,
                            2037970062,
                            1514790577,
                            1463996600,
                            1080017571,
                            1297403050,
                            3673637356,
                            3623636965,
                            3235995134,
                            3454686199,
                            4007360968,
                            3822090177,
                            4107101658,
                            4190530515,
                            2997825956,
                            3215212461,
                            2830708150,
                            2779915199,
                            2256734592,
                            2340947849,
                            2627016082,
                            2443058075,
                            172466556,
                            122466165,
                            273792366,
                            492483431,
                            1047239e3,
                            861968209,
                            612205898,
                            695634755,
                            1646252340,
                            1863638845,
                            2013908262,
                            1963115311,
                            1446242576,
                            1530455833,
                            1277555970,
                            1093597963,
                            1636604631,
                            1820824798,
                            2073724613,
                            1989249228,
                            1436590835,
                            1487645946,
                            1337376481,
                            1119727848,
                            164948639,
                            81781910,
                            331544205,
                            516552836,
                            1039717051,
                            821288114,
                            669961897,
                            719700128,
                            2973530695,
                            3157750862,
                            2871682645,
                            2787207260,
                            2232435299,
                            2283490410,
                            2667994737,
                            2450346104,
                            3647212047,
                            3564045318,
                            3279033885,
                            3464042516,
                            3980931627,
                            3762502690,
                            4150144569,
                            4199882800,
                            3070356634,
                            3121275539,
                            2904027272,
                            2686254721,
                            2200818878,
                            2384911031,
                            2570832044,
                            2486224549,
                            3747192018,
                            3528626907,
                            3310321856,
                            3359936201,
                            3950355702,
                            3867060991,
                            4049844452,
                            4234721005,
                            1739656202,
                            1790575107,
                            2108100632,
                            1890328081,
                            1402811438,
                            1586903591,
                            1233856572,
                            1149249077,
                            266959938,
                            48394827,
                            369057872,
                            418672217,
                            1002783846,
                            919489135,
                            567498868,
                            752375421,
                            209336225,
                            24197544,
                            376187827,
                            459744698,
                            945164165,
                            895287692,
                            574624663,
                            793451934,
                            1679968233,
                            1764313568,
                            2117360635,
                            1933530610,
                            1343127501,
                            1560637892,
                            1243112415,
                            1192455638,
                            3704280881,
                            3519142200,
                            3336358691,
                            3419915562,
                            3907448597,
                            3857572124,
                            4075877127,
                            4294704398,
                            3029510009,
                            3113855344,
                            2927934315,
                            2744104290,
                            2159976285,
                            2377486676,
                            2594734927,
                            2544078150
                        ], ro = [
                            0,
                            151849742,
                            303699484,
                            454499602,
                            607398968,
                            758720310,
                            908999204,
                            1059270954,
                            1214797936,
                            1097159550,
                            1517440620,
                            1400849762,
                            1817998408,
                            1699839814,
                            2118541908,
                            2001430874,
                            2429595872,
                            2581445614,
                            2194319100,
                            2345119218,
                            3034881240,
                            3186202582,
                            2801699524,
                            2951971274,
                            3635996816,
                            3518358430,
                            3399679628,
                            3283088770,
                            4237083816,
                            4118925222,
                            4002861748,
                            3885750714,
                            1002142683,
                            850817237,
                            698445255,
                            548169417,
                            529487843,
                            377642221,
                            227885567,
                            77089521,
                            1943217067,
                            2061379749,
                            1640576439,
                            1757691577,
                            1474760595,
                            1592394909,
                            1174215055,
                            1290801793,
                            2875968315,
                            2724642869,
                            3111247143,
                            2960971305,
                            2405426947,
                            2253581325,
                            2638606623,
                            2487810577,
                            3808662347,
                            3926825029,
                            4044981591,
                            4162096729,
                            3342319475,
                            3459953789,
                            3576539503,
                            3693126241,
                            1986918061,
                            2137062819,
                            1685577905,
                            1836772287,
                            1381620373,
                            1532285339,
                            1078185097,
                            1229899655,
                            1040559837,
                            923313619,
                            740276417,
                            621982671,
                            439452389,
                            322734571,
                            137073913,
                            19308535,
                            3871163981,
                            4021308739,
                            4104605777,
                            4255800159,
                            3263785589,
                            3414450555,
                            3499326569,
                            3651041127,
                            2933202493,
                            2815956275,
                            3167684641,
                            3049390895,
                            2330014213,
                            2213296395,
                            2566595609,
                            2448830231,
                            1305906550,
                            1155237496,
                            1607244650,
                            1455525988,
                            1776460110,
                            1626319424,
                            2079897426,
                            1928707164,
                            96392454,
                            213114376,
                            396673818,
                            514443284,
                            562755902,
                            679998e3,
                            865136418,
                            983426092,
                            3708173718,
                            3557504664,
                            3474729866,
                            3323011204,
                            4180808110,
                            4030667424,
                            3945269170,
                            3794078908,
                            2507040230,
                            2623762152,
                            2272556026,
                            2390325492,
                            2975484382,
                            3092726480,
                            2738905026,
                            2857194700,
                            3973773121,
                            3856137295,
                            4274053469,
                            4157467219,
                            3371096953,
                            3252932727,
                            3673476453,
                            3556361835,
                            2763173681,
                            2915017791,
                            3064510765,
                            3215307299,
                            2156299017,
                            2307622919,
                            2459735317,
                            2610011675,
                            2081048481,
                            1963412655,
                            1846563261,
                            1729977011,
                            1480485785,
                            1362321559,
                            1243905413,
                            1126790795,
                            878845905,
                            1030690015,
                            645401037,
                            796197571,
                            274084841,
                            425408743,
                            38544885,
                            188821243,
                            3613494426,
                            3731654548,
                            3313212038,
                            3430322568,
                            4082475170,
                            4200115116,
                            3780097726,
                            3896688048,
                            2668221674,
                            2516901860,
                            2366882550,
                            2216610296,
                            3141400786,
                            2989552604,
                            2837966542,
                            2687165888,
                            1202797690,
                            1320957812,
                            1437280870,
                            1554391400,
                            1669664834,
                            1787304780,
                            1906247262,
                            2022837584,
                            265905162,
                            114585348,
                            499347990,
                            349075736,
                            736970802,
                            585122620,
                            972512814,
                            821712160,
                            2595684844,
                            2478443234,
                            2293045232,
                            2174754046,
                            3196267988,
                            3079546586,
                            2895723464,
                            2777952454,
                            3537852828,
                            3687994002,
                            3234156416,
                            3385345166,
                            4142626212,
                            4293295786,
                            3841024952,
                            3992742070,
                            174567692,
                            57326082,
                            410887952,
                            292596766,
                            777231668,
                            660510266,
                            1011452712,
                            893681702,
                            1108339068,
                            1258480242,
                            1343618912,
                            1494807662,
                            1715193156,
                            1865862730,
                            1948373848,
                            2100090966,
                            2701949495,
                            2818666809,
                            3004591147,
                            3122358053,
                            2235061775,
                            2352307457,
                            2535604243,
                            2653899549,
                            3915653703,
                            3764988233,
                            4219352155,
                            4067639125,
                            3444575871,
                            3294430577,
                            3746175075,
                            3594982253,
                            836553431,
                            953270745,
                            600235211,
                            718002117,
                            367585007,
                            484830689,
                            133361907,
                            251657213,
                            2041877159,
                            1891211689,
                            1806599355,
                            1654886325,
                            1568718495,
                            1418573201,
                            1335535747,
                            1184342925
                        ];
                        function ao(f) {
                            const e = [];
                            for(let t = 0; t < f.length; t += 4)e.push(f[t] << 24 | f[t + 1] << 16 | f[t + 2] << 8 | f[t + 3]);
                            return e;
                        }
                        class io {
                            get key() {
                                return Ks(this, Fs, "f").slice();
                            }
                            constructor(f){
                                if (Fs.set(this, void 0), Ms.set(this, void 0), js.set(this, void 0), !(this instanceof io)) throw Error("AES must be instanitated with `new`");
                                zs(this, Fs, new Uint8Array(f), "f");
                                const e = Vs[this.key.length];
                                if (null == e) throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
                                zs(this, js, [], "f"), zs(this, Ms, [], "f");
                                for(let f = 0; f <= e; f++)Ks(this, js, "f").push([
                                    0,
                                    0,
                                    0,
                                    0
                                ]), Ks(this, Ms, "f").push([
                                    0,
                                    0,
                                    0,
                                    0
                                ]);
                                const t = 4 * (e + 1), n = this.key.length / 4, r = ao(this.key);
                                let a;
                                for(let f = 0; f < n; f++)a = f >> 2, Ks(this, js, "f")[a][f % 4] = r[f], Ks(this, Ms, "f")[e - a][f % 4] = r[f];
                                let i, s = 0, o = n;
                                for(; o < t;){
                                    if (i = r[n - 1], r[0] ^= Hs[i >> 16 & 255] << 24 ^ Hs[i >> 8 & 255] << 16 ^ Hs[255 & i] << 8 ^ Hs[i >> 24 & 255] ^ Gs[s] << 24, s += 1, 8 != n) for(let f = 1; f < n; f++)r[f] ^= r[f - 1];
                                    else {
                                        for(let f = 1; f < n / 2; f++)r[f] ^= r[f - 1];
                                        i = r[n / 2 - 1], r[n / 2] ^= Hs[255 & i] ^ Hs[i >> 8 & 255] << 8 ^ Hs[i >> 16 & 255] << 16 ^ Hs[i >> 24 & 255] << 24;
                                        for(let f = n / 2 + 1; f < n; f++)r[f] ^= r[f - 1];
                                    }
                                    let f, a, b = 0;
                                    for(; b < n && o < t;)f = o >> 2, a = o % 4, Ks(this, js, "f")[f][a] = r[b], Ks(this, Ms, "f")[e - f][a] = r[b++], o++;
                                }
                                for(let f = 1; f < e; f++)for(let e = 0; e < 4; e++)i = Ks(this, Ms, "f")[f][e], Ks(this, Ms, "f")[f][e] = eo[i >> 24 & 255] ^ to[i >> 16 & 255] ^ no[i >> 8 & 255] ^ ro[255 & i];
                            }
                            encrypt(f) {
                                if (16 != f.length) throw new TypeError("invalid plaintext size (must be 16 bytes)");
                                const e = Ks(this, js, "f").length - 1, t = [
                                    0,
                                    0,
                                    0,
                                    0
                                ];
                                let n = ao(f);
                                for(let f = 0; f < 4; f++)n[f] ^= Ks(this, js, "f")[0][f];
                                for(let f = 1; f < e; f++){
                                    for(let e = 0; e < 4; e++)t[e] = $s[n[e] >> 24 & 255] ^ Js[n[(e + 1) % 4] >> 16 & 255] ^ Ys[n[(e + 2) % 4] >> 8 & 255] ^ qs[255 & n[(e + 3) % 4]] ^ Ks(this, js, "f")[f][e];
                                    n = t.slice();
                                }
                                const r = new Uint8Array(16);
                                let a = 0;
                                for(let f = 0; f < 4; f++)a = Ks(this, js, "f")[e][f], r[4 * f] = 255 & (Hs[n[f] >> 24 & 255] ^ a >> 24), r[4 * f + 1] = 255 & (Hs[n[(f + 1) % 4] >> 16 & 255] ^ a >> 16), r[4 * f + 2] = 255 & (Hs[n[(f + 2) % 4] >> 8 & 255] ^ a >> 8), r[4 * f + 3] = 255 & (Hs[255 & n[(f + 3) % 4]] ^ a);
                                return r;
                            }
                            decrypt(f) {
                                if (16 != f.length) throw new TypeError("invalid ciphertext size (must be 16 bytes)");
                                const e = Ks(this, Ms, "f").length - 1, t = [
                                    0,
                                    0,
                                    0,
                                    0
                                ];
                                let n = ao(f);
                                for(let f = 0; f < 4; f++)n[f] ^= Ks(this, Ms, "f")[0][f];
                                for(let f = 1; f < e; f++){
                                    for(let e = 0; e < 4; e++)t[e] = Zs[n[e] >> 24 & 255] ^ Xs[n[(e + 3) % 4] >> 16 & 255] ^ Qs[n[(e + 2) % 4] >> 8 & 255] ^ fo[255 & n[(e + 1) % 4]] ^ Ks(this, Ms, "f")[f][e];
                                    n = t.slice();
                                }
                                const r = new Uint8Array(16);
                                let a = 0;
                                for(let f = 0; f < 4; f++)a = Ks(this, Ms, "f")[e][f], r[4 * f] = 255 & (Ws[n[f] >> 24 & 255] ^ a >> 24), r[4 * f + 1] = 255 & (Ws[n[(f + 3) % 4] >> 16 & 255] ^ a >> 16), r[4 * f + 2] = 255 & (Ws[n[(f + 2) % 4] >> 8 & 255] ^ a >> 8), r[4 * f + 3] = 255 & (Ws[255 & n[(f + 1) % 4]] ^ a);
                                return r;
                            }
                        }
                        Fs = new WeakMap, Ms = new WeakMap, js = new WeakMap;
                        class so {
                            constructor(f, e, t){
                                if (t && !(this instanceof t)) throw new Error("".concat(f, ' must be instantiated with "new"'));
                                Object.defineProperties(this, {
                                    aes: {
                                        enumerable: !0,
                                        value: new io(e)
                                    },
                                    name: {
                                        enumerable: !0,
                                        value: f
                                    }
                                });
                            }
                        }
                        var oo, bo, co = function(f, e, t, n, r) {
                            if ("m" === n) throw new TypeError("Private method is not writable");
                            if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                            if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                            return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
                        }, uo = function(f, e, t, n) {
                            if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                            if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                            return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
                        };
                        class lo extends so {
                            constructor(f, e){
                                if (super("ECC", f, lo), oo.set(this, void 0), bo.set(this, void 0), e) {
                                    if (e.length % 16) throw new TypeError("invalid iv size (must be 16 bytes)");
                                    co(this, oo, new Uint8Array(e), "f");
                                } else co(this, oo, new Uint8Array(16), "f");
                                co(this, bo, this.iv, "f");
                            }
                            get iv() {
                                return new Uint8Array(uo(this, oo, "f"));
                            }
                            encrypt(f) {
                                if (f.length % 16) throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
                                const e = new Uint8Array(f.length);
                                for(let t = 0; t < f.length; t += 16){
                                    for(let e = 0; e < 16; e++)uo(this, bo, "f")[e] ^= f[t + e];
                                    co(this, bo, this.aes.encrypt(uo(this, bo, "f")), "f"), e.set(uo(this, bo, "f"), t);
                                }
                                return e;
                            }
                            decrypt(f) {
                                if (f.length % 16) throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
                                const e = new Uint8Array(f.length);
                                for(let t = 0; t < f.length; t += 16){
                                    const n = this.aes.decrypt(f.subarray(t, t + 16));
                                    for(let r = 0; r < 16; r++)e[t + r] = n[r] ^ uo(this, bo, "f")[r], uo(this, bo, "f")[r] = f[t + r];
                                }
                                return e;
                            }
                        }
                        oo = new WeakMap, bo = new WeakMap, new WeakMap, new WeakMap, new WeakSet;
                        var ho, po, yo, mo = function(f, e, t, n, r) {
                            if ("m" === n) throw new TypeError("Private method is not writable");
                            if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                            if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                            return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
                        }, go = function(f, e, t, n) {
                            if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                            if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                            return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
                        };
                        class wo extends so {
                            constructor(f, e){
                                super("CTR", f, wo), ho.set(this, void 0), po.set(this, void 0), yo.set(this, void 0), mo(this, yo, new Uint8Array(16), "f"), go(this, yo, "f").fill(0), mo(this, ho, go(this, yo, "f"), "f"), mo(this, po, 16, "f"), null == e && (e = 1), "number" == typeof e ? this.setCounterValue(e) : this.setCounterBytes(e);
                            }
                            get counter() {
                                return new Uint8Array(go(this, yo, "f"));
                            }
                            setCounterValue(f) {
                                if (!Number.isInteger(f) || f < 0 || f > Number.MAX_SAFE_INTEGER) throw new TypeError("invalid counter initial integer value");
                                for(let e = 15; e >= 0; --e)go(this, yo, "f")[e] = f % 256, f = Math.floor(f / 256);
                            }
                            setCounterBytes(f) {
                                if (16 !== f.length) throw new TypeError("invalid counter initial Uint8Array value length");
                                go(this, yo, "f").set(f);
                            }
                            increment() {
                                for(let f = 15; f >= 0; f--){
                                    if (255 !== go(this, yo, "f")[f]) {
                                        go(this, yo, "f")[f]++;
                                        break;
                                    }
                                    go(this, yo, "f")[f] = 0;
                                }
                            }
                            encrypt(f) {
                                var e, t;
                                const n = new Uint8Array(f);
                                for(let f = 0; f < n.length; f++)16 === go(this, po, "f") && (mo(this, ho, this.aes.encrypt(go(this, yo, "f")), "f"), mo(this, po, 0, "f"), this.increment()), n[f] ^= go(this, ho, "f")[mo(this, po, (t = go(this, po, "f"), e = t++, t), "f"), e];
                                return n;
                            }
                            decrypt(f) {
                                return this.encrypt(f);
                            }
                        }
                        ho = new WeakMap, po = new WeakMap, yo = new WeakMap, new WeakMap, new WeakMap, new WeakMap;
                        const vo = (f, e)=>f << e | f >>> 32 - e;
                        function Eo(f, e, t, n, r, a) {
                            let i = f[e++] ^ t[n++], s = f[e++] ^ t[n++], o = f[e++] ^ t[n++], b = f[e++] ^ t[n++], c = f[e++] ^ t[n++], d = f[e++] ^ t[n++], u = f[e++] ^ t[n++], l = f[e++] ^ t[n++], h = f[e++] ^ t[n++], p = f[e++] ^ t[n++], y = f[e++] ^ t[n++], m = f[e++] ^ t[n++], g = f[e++] ^ t[n++], w = f[e++] ^ t[n++], v = f[e++] ^ t[n++], E = f[e++] ^ t[n++], T = i, A = s, x = o, I = b, k = c, O = d, _ = u, P = l, S = h, R = p, N = y, C = m, U = g, L = w, B = v, D = E;
                            for(let f = 0; f < 8; f += 2)k ^= vo(T + U | 0, 7), S ^= vo(k + T | 0, 9), U ^= vo(S + k | 0, 13), T ^= vo(U + S | 0, 18), R ^= vo(O + A | 0, 7), L ^= vo(R + O | 0, 9), A ^= vo(L + R | 0, 13), O ^= vo(A + L | 0, 18), B ^= vo(N + _ | 0, 7), x ^= vo(B + N | 0, 9), _ ^= vo(x + B | 0, 13), N ^= vo(_ + x | 0, 18), I ^= vo(D + C | 0, 7), P ^= vo(I + D | 0, 9), C ^= vo(P + I | 0, 13), D ^= vo(C + P | 0, 18), A ^= vo(T + I | 0, 7), x ^= vo(A + T | 0, 9), I ^= vo(x + A | 0, 13), T ^= vo(I + x | 0, 18), _ ^= vo(O + k | 0, 7), P ^= vo(_ + O | 0, 9), k ^= vo(P + _ | 0, 13), O ^= vo(k + P | 0, 18), C ^= vo(N + R | 0, 7), S ^= vo(C + N | 0, 9), R ^= vo(S + C | 0, 13), N ^= vo(R + S | 0, 18), U ^= vo(D + B | 0, 7), L ^= vo(U + D | 0, 9), B ^= vo(L + U | 0, 13), D ^= vo(B + L | 0, 18);
                            r[a++] = i + T | 0, r[a++] = s + A | 0, r[a++] = o + x | 0, r[a++] = b + I | 0, r[a++] = c + k | 0, r[a++] = d + O | 0, r[a++] = u + _ | 0, r[a++] = l + P | 0, r[a++] = h + S | 0, r[a++] = p + R | 0, r[a++] = y + N | 0, r[a++] = m + C | 0, r[a++] = g + U | 0, r[a++] = w + L | 0, r[a++] = v + B | 0, r[a++] = E + D | 0;
                        }
                        function To(f, e, t, n, r) {
                            let a = n + 0, i = n + 16 * r;
                            for(let n = 0; n < 16; n++)t[i + n] = f[e + 16 * (2 * r - 1) + n];
                            for(let n = 0; n < r; n++, a += 16, e += 16)Eo(t, i, f, e, t, a), n > 0 && (i += 16), Eo(t, a, f, e += 16, t, i);
                        }
                        function Ao(f, e, t) {
                            const n = gf({
                                dkLen: 32,
                                asyncTick: 10,
                                maxmem: 1073742848
                            }, t), { N: r, r: a, p: i, dkLen: s, asyncTick: o, maxmem: b, onProgress: c } = n;
                            if ($(r), $(a), $(i), $(s), $(o), $(b), void 0 !== c && "function" != typeof c) throw new Error("progressCb should be function");
                            const d = 128 * a, u = d / 4;
                            if (r <= 1 || r & r - 1 || r >= 2 ** (d / 8) || r > 2 ** 32) throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
                            if (i < 0 || i > 137438953440 / d) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
                            if (s < 0 || s > 137438953440) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
                            const l = d * (r + i);
                            if (l > b) throw new Error("Scrypt: parameters too large, ".concat(l, " (128 * r * (N + p)) > ").concat(b, " (maxmem)"));
                            const h = Bn(Gn, f, e, {
                                c: 1,
                                dkLen: d * i
                            }), p = cf(h), y = cf(new Uint8Array(d * r)), m = cf(new Uint8Array(d));
                            let g = ()=>{};
                            if (c) {
                                const f = 2 * r * i, e = Math.max(Math.floor(f / 1e4), 1);
                                let t = 0;
                                g = ()=>{
                                    t++, !c || t % e && t !== f || c(t / f);
                                };
                            }
                            return {
                                N: r,
                                r: a,
                                p: i,
                                dkLen: s,
                                blockSize32: u,
                                V: y,
                                B32: p,
                                B: h,
                                tmp: m,
                                blockMixCb: g,
                                asyncTick: o
                            };
                        }
                        function xo(f, e, t, n, r) {
                            const a = Bn(Gn, f, t, {
                                c: 1,
                                dkLen: e
                            });
                            return t.fill(0), n.fill(0), r.fill(0), a;
                        }
                        let Io = !1, ko = !1;
                        const Oo = async function(f, e, t, n, r, a, i) {
                            return await async function(f, e, t) {
                                const { N: n, r, p: a, dkLen: i, blockSize32: s, V: o, B32: b, B: c, tmp: d, blockMixCb: u, asyncTick: l } = Ao(f, e, t);
                                for(let f = 0; f < a; f++){
                                    const e = s * f;
                                    for(let f = 0; f < s; f++)o[f] = b[e + f];
                                    let t = 0;
                                    await hf(n - 1, l, ()=>{
                                        To(o, t, o, t += s, r), u();
                                    }), To(o, (n - 1) * s, b, e, r), u(), await hf(n, l, ()=>{
                                        const f = b[e + s - 16] % n;
                                        for(let t = 0; t < s; t++)d[t] = b[e + t] ^ o[f * s + t];
                                        To(d, 0, b, e, r), u();
                                    });
                                }
                                return xo(f, i, c, o, d);
                            }(f, e, {
                                N: t,
                                r: n,
                                p: r,
                                dkLen: a,
                                onProgress: i
                            });
                        }, _o = function(f, e, t, n, r, a) {
                            return function(f, e, t) {
                                const { N: n, r, p: a, dkLen: i, blockSize32: s, V: o, B32: b, B: c, tmp: d, blockMixCb: u } = Ao(f, e, t);
                                for(let f = 0; f < a; f++){
                                    const e = s * f;
                                    for(let f = 0; f < s; f++)o[f] = b[e + f];
                                    for(let f = 0, e = 0; f < n - 1; f++)To(o, e, o, e += s, r), u();
                                    To(o, (n - 1) * s, b, e, r), u();
                                    for(let f = 0; f < n; f++){
                                        const f = b[e + s - 16] % n;
                                        for(let t = 0; t < s; t++)d[t] = b[e + t] ^ o[f * s + t];
                                        To(d, 0, b, e, r), u();
                                    }
                                }
                                return xo(f, i, c, o, d);
                            }(f, e, {
                                N: t,
                                r: n,
                                p: r,
                                dkLen: a
                            });
                        };
                        let Po = Oo, So = _o;
                        async function Ro(f, e, t, n, r, a, i) {
                            const s = w(f, "passwd"), o = w(e, "salt");
                            return x(await Po(s, o, t, n, r, a, i));
                        }
                        function No(f, e, t, n, r, a) {
                            const i = w(f, "passwd"), s = w(e, "salt");
                            return x(So(i, s, t, n, r, a));
                        }
                        function Co(f) {
                            const e = w(f, "randomBytes");
                            e[6] = 15 & e[6] | 64, e[8] = 63 & e[8] | 128;
                            const t = x(e);
                            return [
                                t.substring(2, 10),
                                t.substring(10, 14),
                                t.substring(14, 18),
                                t.substring(18, 22),
                                t.substring(22, 34)
                            ].join("-");
                        }
                        function Uo(f) {
                            return "string" != typeof f || f.startsWith("0x") || (f = "0x" + f), v(f);
                        }
                        function Lo(f, e) {
                            for(f = String(f); f.length < e;)f = "0" + f;
                            return f;
                        }
                        function Bo(f) {
                            return "string" == typeof f ? Jf(f, "NFKC") : v(f);
                        }
                        function Do(f, e) {
                            const t = e.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
                            l(null != t, "invalid path", "path", e);
                            const n = t[1], r = t[3], a = "!" === t[4];
                            let i = f;
                            for (const f of n.toLowerCase().split(".")){
                                if (Array.isArray(i)) {
                                    if (!f.match(/^[0-9]+$/)) break;
                                    i = i[parseInt(f)];
                                } else if ("object" == typeof i) {
                                    let e = null;
                                    for(const t in i)if (t.toLowerCase() === f) {
                                        e = i[t];
                                        break;
                                    }
                                    i = e;
                                } else i = null;
                                if (null == i) break;
                            }
                            if (l(!a || null != i, "missing required value", "path", n), r && null != i) {
                                if ("int" === r) {
                                    if ("string" == typeof i && i.match(/^-?[0-9]+$/)) return parseInt(i);
                                    if (Number.isSafeInteger(i)) return i;
                                }
                                if ("number" === r && "string" == typeof i && i.match(/^-?[0-9.]*$/)) return parseFloat(i);
                                if ("data" === r && "string" == typeof i) return Uo(i);
                                if ("array" === r && Array.isArray(i)) return i;
                                if (r === typeof i) return i;
                                l(!1, "wrong type found for ".concat(r, " "), "path", n);
                            }
                            return i;
                        }
                        Ro._ = Oo, Ro.lock = function() {
                            ko = !0;
                        }, Ro.register = function(f) {
                            if (ko) throw new Error("scrypt is locked");
                            Po = f;
                        }, Object.freeze(Ro), No._ = _o, No.lock = function() {
                            Io = !0;
                        }, No.register = function(f) {
                            if (Io) throw new Error("scryptSync is locked");
                            So = f;
                        }, Object.freeze(No);
                        const Fo = "m/44'/60'/0'/0/0";
                        function Mo(f) {
                            try {
                                const e = JSON.parse(f);
                                if (3 === (null != e.version ? parseInt(e.version) : 0)) return !0;
                            } catch (f) {}
                            return !1;
                        }
                        function jo(f, e) {
                            const t = w(e), n = Do(f, "crypto.ciphertext:data!");
                            l(x(Mf(I([
                                t.slice(16, 32),
                                n
                            ]))).substring(2) === Do(f, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
                            const r = function(f, e, t) {
                                if ("aes-128-ctr" === Do(f, "crypto.cipher:string")) {
                                    const n = Do(f, "crypto.cipherparams.iv:data!");
                                    return x(new wo(e, n).decrypt(t));
                                }
                                u(!1, "unsupported cipher", "UNSUPPORTED_OPERATION", {
                                    operation: "decrypt"
                                });
                            }(f, t.slice(0, 16), n), a = Ma(r);
                            if (f.address) {
                                let e = f.address.toLowerCase();
                                e.startsWith("0x") || (e = "0x" + e), l(Hf(e) === a, "keystore address/privateKey mismatch", "address", f.address);
                            }
                            const i = {
                                address: a,
                                privateKey: r
                            };
                            if ("0.1" === Do(f, "x-ethers.version:string")) {
                                const e = t.slice(32, 64), n = Do(f, "x-ethers.mnemonicCiphertext:data!"), r = Do(f, "x-ethers.mnemonicCounter:data!"), a = new wo(e, r);
                                i.mnemonic = {
                                    path: Do(f, "x-ethers.path:string") || Fo,
                                    locale: Do(f, "x-ethers.locale:string") || "en",
                                    entropy: x(w(a.decrypt(n)))
                                };
                            }
                            return i;
                        }
                        function Ko(f) {
                            const e = Do(f, "crypto.kdf:string");
                            if (e && "string" == typeof e) {
                                if ("scrypt" === e.toLowerCase()) {
                                    const t = Do(f, "crypto.kdfparams.salt:data!"), n = Do(f, "crypto.kdfparams.n:int!"), r = Do(f, "crypto.kdfparams.r:int!"), a = Do(f, "crypto.kdfparams.p:int!");
                                    l(n > 0 && !(n & n - 1), "invalid kdf.N", "kdf.N", n), l(r > 0 && a > 0, "invalid kdf", "kdf", e);
                                    const i = Do(f, "crypto.kdfparams.dklen:int!");
                                    return l(32 === i, "invalid kdf.dklen", "kdf.dflen", i), {
                                        name: "scrypt",
                                        salt: t,
                                        N: n,
                                        r,
                                        p: a,
                                        dkLen: 64
                                    };
                                }
                                if ("pbkdf2" === e.toLowerCase()) {
                                    const e = Do(f, "crypto.kdfparams.salt:data!"), t = Do(f, "crypto.kdfparams.prf:string!"), n = t.split("-").pop();
                                    l("sha256" === n || "sha512" === n, "invalid kdf.pdf", "kdf.pdf", t);
                                    const r = Do(f, "crypto.kdfparams.c:int!"), a = Do(f, "crypto.kdfparams.dklen:int!");
                                    return l(32 === a, "invalid kdf.dklen", "kdf.dklen", a), {
                                        name: "pbkdf2",
                                        salt: e,
                                        count: r,
                                        dkLen: a,
                                        algorithm: n
                                    };
                                }
                            }
                            l(!1, "unsupported key-derivation function", "kdf", e);
                        }
                        function zo(f) {
                            return new Promise((e)=>{
                                setTimeout(()=>{
                                    e();
                                }, f);
                            });
                        }
                        function Vo(f) {
                            const e = null != f.salt ? w(f.salt, "options.salt") : nr(32);
                            let t = 1 << 17, n = 8, r = 1;
                            return f.scrypt && (f.scrypt.N && (t = f.scrypt.N), f.scrypt.r && (n = f.scrypt.r), f.scrypt.p && (r = f.scrypt.p)), l("number" == typeof t && t > 0 && Number.isSafeInteger(t) && (BigInt(t) & BigInt(t - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", t), l("number" == typeof n && n > 0 && Number.isSafeInteger(n), "invalid scrypt r parameter", "options.r", n), l("number" == typeof r && r > 0 && Number.isSafeInteger(r), "invalid scrypt p parameter", "options.p", r), {
                                name: "scrypt",
                                dkLen: 32,
                                salt: e,
                                N: t,
                                r: n,
                                p: r
                            };
                        }
                        function Go(f, e, t, n) {
                            const r = w(t.privateKey, "privateKey"), i = null != n.iv ? w(n.iv, "options.iv") : nr(16);
                            l(16 === i.length, "invalid options.iv length", "options.iv", n.iv);
                            const s = null != n.uuid ? w(n.uuid, "options.uuid") : nr(16);
                            l(16 === s.length, "invalid options.uuid length", "options.uuid", n.iv);
                            const o = f.slice(0, 16), b = f.slice(16, 32), c = w(new wo(o, i).encrypt(r)), d = Mf(I([
                                b,
                                c
                            ])), u = {
                                address: t.address.substring(2).toLowerCase(),
                                id: Co(s),
                                version: 3,
                                Crypto: {
                                    cipher: "aes-128-ctr",
                                    cipherparams: {
                                        iv: x(i).substring(2)
                                    },
                                    ciphertext: x(c).substring(2),
                                    kdf: "scrypt",
                                    kdfparams: {
                                        salt: x(e.salt).substring(2),
                                        n: e.N,
                                        dklen: 32,
                                        p: e.p,
                                        r: e.r
                                    },
                                    mac: d.substring(2)
                                }
                            };
                            if (t.mnemonic) {
                                const e = null != n.client ? n.client : "ethers/".concat(a), r = t.mnemonic.path || Fo, i = t.mnemonic.locale || "en", s = f.slice(32, 64), o = w(t.mnemonic.entropy, "account.mnemonic.entropy"), b = nr(16), c = w(new wo(s, b).encrypt(o)), d = new Date, l = "UTC--" + d.getUTCFullYear() + "-" + Lo(d.getUTCMonth() + 1, 2) + "-" + Lo(d.getUTCDate(), 2) + "T" + Lo(d.getUTCHours(), 2) + "-" + Lo(d.getUTCMinutes(), 2) + "-" + Lo(d.getUTCSeconds(), 2) + ".0Z--" + u.address;
                                u["x-ethers"] = {
                                    client: e,
                                    gethFilename: l,
                                    path: r,
                                    locale: i,
                                    mnemonicCounter: x(b).substring(2),
                                    mnemonicCiphertext: x(c).substring(2),
                                    version: "0.1"
                                };
                            }
                            return JSON.stringify(u);
                        }
                        function Ho(f, e, t) {
                            null == t && (t = {});
                            const n = Bo(e), r = Vo(t);
                            return Go(w(No(n, r.salt, r.N, r.r, r.p, 64)), r, f, t);
                        }
                        async function Wo(f, e, t) {
                            null == t && (t = {});
                            const n = Bo(e), r = Vo(t);
                            return Go(w(await Ro(n, r.salt, r.N, r.r, r.p, 64, t.progressCallback)), r, f, t);
                        }
                        var $o;
                        function Jo(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var Yo = 0;
                        function qo(f) {
                            return "__private_" + Yo++ + "_" + f;
                        }
                        const Zo = "m/44'/60'/0'/0/0", Xo = new Uint8Array([
                            66,
                            105,
                            116,
                            99,
                            111,
                            105,
                            110,
                            32,
                            115,
                            101,
                            101,
                            100
                        ]), Qo = 2147483648, fb = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
                        function eb(f, e) {
                            let t = "";
                            for(; f;)t = "0123456789abcdef"[f % 16] + t, f = Math.trunc(f / 16);
                            for(; t.length < 2 * e;)t = "0" + t;
                            return "0x" + t;
                        }
                        function tb(f) {
                            const e = w(f);
                            return ls(I([
                                e,
                                O(Fi(Fi(e)), 0, 4)
                            ]));
                        }
                        const nb = {};
                        function rb(f, e, t, n) {
                            const r = new Uint8Array(37);
                            f & Qo ? (u(null != n, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
                                operation: "deriveChild"
                            }), r.set(w(n), 1)) : r.set(w(t));
                            for(let e = 24; e >= 0; e -= 8)r[33 + (e >> 3)] = f >> 24 - e & 255;
                            const a = w(Vi("sha512", e, r));
                            return {
                                IL: a.slice(0, 32),
                                IR: a.slice(32)
                            };
                        }
                        function ab(f, e) {
                            const t = e.split("/");
                            l(t.length > 0 && ("m" === t[0] || f.depth > 0), "invalid path", "path", e), "m" === t[0] && t.shift();
                            let n = f;
                            for(let f = 0; f < t.length; f++){
                                const e = t[f];
                                if (e.match(/^[0-9]+'$/)) {
                                    const t = parseInt(e.substring(0, e.length - 1));
                                    l(t < Qo, "invalid path index", "path[".concat(f, "]"), e), n = n.deriveChild(Qo + t);
                                } else if (e.match(/^[0-9]+$/)) {
                                    const t = parseInt(e);
                                    l(t < Qo, "invalid path index", "path[".concat(f, "]"), e), n = n.deriveChild(t);
                                } else l(!1, "invalid path component", "path[".concat(f, "]"), e);
                            }
                            return n;
                        }
                        var ib, sb = qo("account"), ob = qo("fromSeed");
                        class bb extends Ri {
                            constructor(f, e, t, n, r, a, i, s, b){
                                super(e, b), Object.defineProperty(this, sb, {
                                    value: cb
                                }), this.publicKey = void 0, this.fingerprint = void 0, this.parentFingerprint = void 0, this.mnemonic = void 0, this.chainCode = void 0, this.path = void 0, this.index = void 0, this.depth = void 0, m(f, nb, "HDNodeWallet"), o(this, {
                                    publicKey: e.compressedPublicKey
                                }), o(this, {
                                    parentFingerprint: t,
                                    fingerprint: O(ss(Fi(this.publicKey)), 0, 4),
                                    chainCode: n,
                                    path: r,
                                    index: a,
                                    depth: i
                                }), o(this, {
                                    mnemonic: s
                                });
                            }
                            connect(f) {
                                return new bb(nb, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, f);
                            }
                            async encrypt(f, e) {
                                return await Wo(Jo(this, sb)[sb](), f, {
                                    progressCallback: e
                                });
                            }
                            encryptSync(f) {
                                return Ho(Jo(this, sb)[sb](), f);
                            }
                            get extendedKey() {
                                return u(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
                                    operation: "extendedKey"
                                }), tb(I([
                                    "0x0488ADE4",
                                    eb(this.depth, 1),
                                    this.parentFingerprint,
                                    eb(this.index, 4),
                                    this.chainCode,
                                    I([
                                        "0x00",
                                        this.privateKey
                                    ])
                                ]));
                            }
                            hasPath() {
                                return null != this.path;
                            }
                            neuter() {
                                return new db(nb, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
                            }
                            deriveChild(f) {
                                const e = j(f, "index");
                                l(e <= 4294967295, "invalid index", "index", e);
                                let t = this.path;
                                t && (t += "/" + (2147483647 & e), e & Qo && (t += "'"));
                                const { IR: n, IL: r } = rb(e, this.chainCode, this.publicKey, this.privateKey), a = new na(K((M(r) + BigInt(this.privateKey)) % fb, 32));
                                return new bb(nb, a, this.fingerprint, x(n), t, e, this.depth + 1, this.mnemonic, this.provider);
                            }
                            derivePath(f) {
                                return ab(this, f);
                            }
                            static fromExtendedKey(f) {
                                const e = z(hs(f));
                                l(82 === e.length || tb(e.slice(0, 78)) === f, "invalid extended key", "extendedKey", "[ REDACTED ]");
                                const t = e[4], n = x(e.slice(5, 9)), r = parseInt(x(e.slice(9, 13)).substring(2), 16), a = x(e.slice(13, 45)), i = e.slice(45, 78);
                                switch(x(e.slice(0, 4))){
                                    case "0x0488b21e":
                                    case "0x043587cf":
                                        {
                                            const f = x(i);
                                            return new db(nb, Ma(f), f, n, a, null, r, t, null);
                                        }
                                    case "0x0488ade4":
                                    case "0x04358394 ":
                                        if (0 !== i[0]) break;
                                        return new bb(nb, new na(i.slice(1)), n, a, null, r, t, null, null);
                                }
                                l(!1, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
                            }
                            static createRandom(f, e, t) {
                                null == f && (f = ""), null == e && (e = Zo), null == t && (t = _s.wordlist());
                                const n = Ds.fromEntropy(nr(16), f, t);
                                return Jo(bb, ob)[ob](n.computeSeed(), n).derivePath(e);
                            }
                            static fromMnemonic(f, e) {
                                return e || (e = Zo), Jo(bb, ob)[ob](f.computeSeed(), f).derivePath(e);
                            }
                            static fromPhrase(f, e, t, n) {
                                null == e && (e = ""), null == t && (t = Zo), null == n && (n = _s.wordlist());
                                const r = Ds.fromPhrase(f, e, n);
                                return Jo(bb, ob)[ob](r.computeSeed(), r).derivePath(t);
                            }
                            static fromSeed(f) {
                                return Jo(bb, ob)[ob](f, null);
                            }
                        }
                        function cb() {
                            const f = {
                                address: this.address,
                                privateKey: this.privateKey
                            }, e = this.mnemonic;
                            return this.path && e && "en" === e.wordlist.locale && "" === e.password && (f.mnemonic = {
                                path: this.path,
                                locale: "en",
                                entropy: e.entropy
                            }), f;
                        }
                        $o = bb, Object.defineProperty(bb, ob, {
                            value: function(f, e) {
                                l(T(f), "invalid seed", "seed", "[REDACTED]");
                                const t = w(f, "seed");
                                l(t.length >= 16 && t.length <= 64, "invalid seed", "seed", "[REDACTED]");
                                const n = w(Vi("sha512", Xo, t)), r = new na(x(n.slice(0, 32)));
                                return new $o(nb, r, "0x00000000", x(n.slice(32)), "m", 0, 0, e, null);
                            }
                        });
                        class db extends ki {
                            constructor(f, e, t, n, r, a, i, s, b){
                                super(e, b), this.publicKey = void 0, this.fingerprint = void 0, this.parentFingerprint = void 0, this.chainCode = void 0, this.path = void 0, this.index = void 0, this.depth = void 0, m(f, nb, "HDNodeVoidWallet"), o(this, {
                                    publicKey: t
                                }), o(this, {
                                    publicKey: t,
                                    fingerprint: O(ss(Fi(t)), 0, 4),
                                    parentFingerprint: n,
                                    chainCode: r,
                                    path: a,
                                    index: i,
                                    depth: s
                                });
                            }
                            connect(f) {
                                return new db(nb, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, f);
                            }
                            get extendedKey() {
                                return u(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
                                    operation: "extendedKey"
                                }), tb(I([
                                    "0x0488B21E",
                                    eb(this.depth, 1),
                                    this.parentFingerprint,
                                    eb(this.index, 4),
                                    this.chainCode,
                                    this.publicKey
                                ]));
                            }
                            hasPath() {
                                return null != this.path;
                            }
                            deriveChild(f) {
                                const e = j(f, "index");
                                l(e <= 4294967295, "invalid index", "index", e);
                                let t = this.path;
                                t && (t += "/" + (2147483647 & e), e & Qo && (t += "'"));
                                const { IR: n, IL: r } = rb(e, this.chainCode, this.publicKey, null), a = na.addPoints(r, this.publicKey, !0), i = Ma(a);
                                return new db(nb, i, a, this.fingerprint, x(n), t, e, this.depth + 1, this.provider);
                            }
                            derivePath(f) {
                                return ab(this, f);
                            }
                        }
                        function ub(f) {
                            try {
                                if (JSON.parse(f).encseed) return !0;
                            } catch (f) {}
                            return !1;
                        }
                        function lb(f, e) {
                            const t = JSON.parse(f), n = Bo(e), r = Hf(Do(t, "ethaddr:string!")), a = Uo(Do(t, "encseed:string!"));
                            l(a && a.length % 16 == 0, "invalid encseed", "json", f);
                            const i = w(Ns(n, n, 2e3, 32, "sha256")).slice(0, 16), s = a.slice(0, 16), o = a.slice(16), b = function(f) {
                                if (f.length < 16) throw new TypeError("PKCS#7 invalid length");
                                const e = f[f.length - 1];
                                if (e > 16) throw new TypeError("PKCS#7 padding byte out of range");
                                const t = f.length - e;
                                for(let n = 0; n < e; n++)if (f[t + n] !== e) throw new TypeError("PKCS#7 invalid padding byte");
                                return new Uint8Array(f.subarray(0, t));
                            }(w(new lo(i, s).decrypt(o)));
                            let c = "";
                            for(let f = 0; f < b.length; f++)c += String.fromCharCode(b[f]);
                            return {
                                address: r,
                                privateKey: Et(c)
                            };
                        }
                        function hb(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var pb = 0;
                        function yb(f) {
                            return new Promise((e)=>{
                                setTimeout(()=>{
                                    e();
                                }, f);
                            });
                        }
                        var mb = "__private_" + pb++ + "_fromAccount";
                        class gb extends Ri {
                            constructor(f, e){
                                "string" != typeof f || f.startsWith("0x") || (f = "0x" + f), super("string" == typeof f ? new na(f) : f, e);
                            }
                            connect(f) {
                                return new gb(this.signingKey, f);
                            }
                            async encrypt(f, e) {
                                const t = {
                                    address: this.address,
                                    privateKey: this.privateKey
                                };
                                return await Wo(t, f, {
                                    progressCallback: e
                                });
                            }
                            encryptSync(f) {
                                return Ho({
                                    address: this.address,
                                    privateKey: this.privateKey
                                }, f);
                            }
                            static async fromEncryptedJson(f, e, t) {
                                let n = null;
                                return Mo(f) ? n = await async function(f, e, t) {
                                    const n = JSON.parse(f), r = Bo(e), a = Ko(n);
                                    if ("pbkdf2" === a.name) {
                                        t && (t(0), await zo(0));
                                        const { salt: f, count: e, dkLen: i, algorithm: s } = a, o = Ns(r, f, e, i, s);
                                        return t && (t(1), await zo(0)), jo(n, o);
                                    }
                                    u("scrypt" === a.name, "cannot be reached", "UNKNOWN_ERROR", {
                                        params: a
                                    });
                                    const { salt: i, N: s, r: o, p: b, dkLen: c } = a;
                                    return jo(n, await Ro(r, i, s, o, b, c, t));
                                }(f, e, t) : ub(f) && (t && (t(0), await yb(0)), n = lb(f, e), t && (t(1), await yb(0))), hb(gb, mb)[mb](n);
                            }
                            static fromEncryptedJsonSync(f, e) {
                                let t = null;
                                return Mo(f) ? t = function(f, e) {
                                    const t = JSON.parse(f), n = Bo(e), r = Ko(t);
                                    if ("pbkdf2" === r.name) {
                                        const { salt: f, count: e, dkLen: a, algorithm: i } = r;
                                        return jo(t, Ns(n, f, e, a, i));
                                    }
                                    u("scrypt" === r.name, "cannot be reached", "UNKNOWN_ERROR", {
                                        params: r
                                    });
                                    const { salt: a, N: i, r: s, p: o, dkLen: b } = r;
                                    return jo(t, No(n, a, i, s, o, b));
                                }(f, e) : ub(f) ? t = lb(f, e) : l(!1, "invalid JSON wallet", "json", "[ REDACTED ]"), hb(gb, mb)[mb](t);
                            }
                            static createRandom(f) {
                                const e = bb.createRandom();
                                return f ? e.connect(f) : e;
                            }
                            static fromPhrase(f, e) {
                                const t = bb.fromPhrase(f);
                                return e ? t.connect(e) : t;
                            }
                        }
                        ib = gb, Object.defineProperty(gb, mb, {
                            value: function(f) {
                                if (l(f, "invalid JSON wallet", "json", "[ REDACTED ]"), "mnemonic" in f && f.mnemonic && "en" === f.mnemonic.locale) {
                                    const e = Ds.fromEntropy(f.mnemonic.entropy), t = bb.fromMnemonic(e, f.mnemonic.path);
                                    if (t.address === f.address && t.privateKey === f.privateKey) return t;
                                    console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
                                }
                                const e = new ib(f.privateKey);
                                return l(e.address === f.address, "address/privateKey mismatch", "json", "[ REDACTED ]"), e;
                            }
                        });
                        const wb = async (f, e)=>{
                            const t = new gb(f), n = w(fe([
                                "address"
                            ], [
                                e
                            ]));
                            return await t.signMessage(n);
                        }, vb = (f, e)=>{
                            const t = ls(e.linkKey), n = ls(e.transferId);
                            if (e.senderSig) {
                                const r = (e.senderSig.length - 2) / 2, a = ls(e.senderSig);
                                return "".concat(f, "/#/code?k=").concat(t, "&sg=").concat(a, "&i=").concat(n, "&c=").concat(e.chainId, "&v=3&sgl=").concat(r, "&src=p2p");
                            }
                            return "".concat(f, "/#/code?k=").concat(t, "&c=").concat(e.chainId, "&v=3&src=p2p");
                        }, Eb = (f)=>{
                            const e = f.indexOf("#"), t = f.substring(e + 1).split("?")[1], n = Sb(t), r = {
                                linkKey: n.k || "",
                                signature: n.sg,
                                transferId: n.i || "",
                                chainId: n.c,
                                version: n.v || "1",
                                signatureLength: n.sgl || "65"
                            }, a = K(hs(r.linkKey), 32);
                            return {
                                senderSig: function() {
                                    let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 65, e = arguments.length > 1 ? arguments[1] : void 0;
                                    if (e) return K(hs(e), f);
                                }(Number(r.signatureLength), r.signature),
                                linkKey: a,
                                transferId: r.transferId ? K(hs(r.transferId), 20) : new gb(a).address.toLowerCase(),
                                chainId: Number(r.chainId),
                                version: r.version
                            };
                        }, Tb = "0x0000000000000000000000000000000000000000", Ab = "0x2d5dfe0e4582c905233df527242616017f36e192", xb = "0x88d51990a3b962f975846f3688e36d2a1fc611f1", Ib = "0x648b9a6c54890a8fb17de128c6352f621154f358", kb = {
                            [ne.usdcBase]: re.receiveWithAuthorization,
                            [ne.usdcBaseGoerli]: re.receiveWithAuthorization,
                            [ne.usdcBridgedPolygon]: re.approveWithAuthorization,
                            [ne.usdcSepolia]: re.receiveWithAuthorization,
                            [ne.usdcPolygon]: re.receiveWithAuthorization,
                            [ne.usdcArbitrum]: re.receiveWithAuthorization,
                            [ne.usdcOptimism]: re.receiveWithAuthorization,
                            [ne.usdcAvalanche]: re.receiveWithAuthorization
                        }, Ob = (f, e)=>{
                            const t = e || "https://escrow-api.linkdrop.io/v3";
                            switch(Number(f)){
                                case te.polygon:
                                    return "".concat(t, "/polygon");
                                case te.base:
                                    return "".concat(t, "/base");
                                case te.sepolia:
                                    return "".concat(t, "/sepolia");
                                case te.baseGoerli:
                                    return "".concat(t, "/base-goerli");
                                case te.arbitrum:
                                    return "".concat(t, "/arbitrum");
                                case te.optimism:
                                    return "".concat(t, "/optimism");
                                case te.avalanche:
                                    return "".concat(t, "/avalanche");
                                case te.gnosis:
                                    return "".concat(t, "/gnosis");
                                default:
                                    return null;
                            }
                        }, _b = (f)=>Object.entries(f).reduce((f, e)=>{
                                let [t, n] = e;
                                return n ? "" === f ? "".concat(t, "=").concat(n) : "".concat(f, "&").concat(t, "=").concat(n) : f;
                            }, ""), Pb = (f)=>f.map((f)=>{
                                const e = r(r({}, f), {}, {
                                    txHash: f.tx_hash
                                });
                                return delete e.tx_hash, e;
                            }), Sb = function(f) {
                            const e = f.split("&"), t = {};
                            return e.forEach((f)=>{
                                const [e, n] = f.split("=");
                                t[e] = decodeURIComponent(n || "");
                            }), t;
                        }, Rb = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.polygon,
                            verifyingContract: ne.usdcPolygon
                        }, Nb = {
                            name: "USD Coin (PoS)",
                            version: "1",
                            verifyingContract: ne.usdcBridgedPolygon,
                            salt: "0x0000000000000000000000000000000000000000000000000000000000000089"
                        }, Cb = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.optimism,
                            verifyingContract: ne.usdcOptimism
                        }, Ub = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.avalanche,
                            verifyingContract: ne.usdcAvalanche
                        }, Lb = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.arbitrum,
                            verifyingContract: ne.usdcArbitrum
                        }, Bb = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.baseGoerli,
                            verifyingContract: ne.usdcBaseGoerli
                        }, Db = {
                            name: "USD Coin",
                            version: "2",
                            chainId: te.base,
                            verifyingContract: ne.usdcBase
                        }, Fb = {
                            name: "USDC",
                            version: "2",
                            chainId: te.sepolia,
                            verifyingContract: ne.usdcSepolia
                        };
                        class Mb extends Error {
                            constructor(f, e){
                                super("Conflict Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 409, this.error = e;
                            }
                        }
                        const jb = Mb;
                        class Kb extends Error {
                            constructor(f, e){
                                super("Forbidden Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 403, this.error = e;
                            }
                        }
                        const zb = Kb, Vb = async function(f) {
                            let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                            try {
                                const r = await fetch(f, e);
                                if (r.ok) return r.json();
                                const a = await r.json(), i = r.status, s = a.message || "Some error occured. Please check server response for more info", o = a.errors, b = o && o.length ? o[0] : (t = r.status, n = a, 403 === t ? n.message ? n.message : n.geographicContext ? "Service is not available in this region" : "Some error occured. Please check server response for more info" : n.message ? n.message : "Some error occured. Please check server response for more info");
                                switch(i){
                                    case 409:
                                        throw new jb(s, b);
                                    case 400:
                                        throw new G(s, b);
                                    case 403:
                                        throw new zb(s, b);
                                    default:
                                        throw new Error(s);
                                }
                            } catch (f) {
                                throw f;
                            }
                            var t, n;
                        }, Gb = (f)=>{
                            const e = {
                                "content-type": "application/json"
                            };
                            return f && (e.authorization = "Bearer ".concat(f)), e;
                        }, Hb = ()=>"Chain is not supported. Please use ".concat(Object.keys(te).filter((f)=>isNaN(Number(f))).join(", ")), Wb = (f, e)=>'Argument "'.concat(f, '" is not provided (argument="').concat(f, '", value="').concat(e, '")'), $b = (f, e)=>'Property "'.concat(f, '" is not provided (property="').concat(f, '", value="').concat(e, '")'), Jb = (f)=>"Amount should be greater than or equal to ".concat(f), Yb = (f)=>"Max amount ".concat(f), qb = (f, e)=>"Escrow contract is not available for token ".concat(f, " (chain id: ").concat(e, ")"), Zb = (f, e, t)=>'Variable "'.concat(f, '" is not valid. Expected value type: ').concat(e, ". Current value: ").concat(t), Xb = (f)=>{
                            if (f.includes("redeem")) {
                                const e = f.split("/");
                                return e[e.length - 1].split("?")[0];
                            }
                            {
                                const e = f.split("?")[1];
                                return Sb(e).k;
                            }
                        }, Qb = {
                            1: [
                                "0x0522dd6e9f2beca1cd15a5fd275dc279a1a08eac"
                            ],
                            2: [
                                "0xad27383460183fd7e21b71df3b4cac9480eb9a75",
                                "0x0B79cC1E78C47fF08cA6f355e8aCD32AEa5bFe58",
                                "0xc4eb6e5933bc5e32dfd5c80baf143212a95549b3"
                            ],
                            3: [
                                "0x0b962bbbf101941d0d0ec1041d01668dac36647a",
                                "0x2d5dfe0e4582c905233df527242616017f36e192",
                                "0x021ccef76804c43da62b01652d41bcf6f6394731"
                            ],
                            3.1: [
                                "0x88d51990a3b962f975846f3688e36d2a1fc611f1",
                                "0x648b9a6c54890a8fb17de128c6352f621154f358"
                            ]
                        }, fc = (f)=>{
                            const e = Object.keys(Qb).find((e)=>{
                                const t = Qb[e];
                                if (t && t.length > 0) return t.find((e)=>e.toLowerCase() === f.toLowerCase());
                            });
                            return e;
                        }, ec = (f, e, t, n, r, a, i, s)=>Vb("".concat(f, "/redeem"), {
                                headers: Gb(e),
                                method: "POST",
                                body: JSON.stringify({
                                    receiver: t,
                                    sender: i,
                                    escrow: s,
                                    transfer_id: n,
                                    receiver_sig: r,
                                    token: a
                                })
                            }), tc = (f, e, t, n, r, a, i, s, o, b, c, d, u, l)=>Vb("".concat(f, "/deposit"), {
                                headers: Gb(e),
                                method: "POST",
                                body: JSON.stringify({
                                    sender: r,
                                    escrow: a,
                                    transfer_id: i,
                                    token: t,
                                    token_type: n,
                                    expiration: s,
                                    tx_hash: o,
                                    fee_authorization: b,
                                    amount: c,
                                    fee_amount: d,
                                    total_amount: u,
                                    fee_token: l
                                })
                            }), nc = (f, e, t)=>Vb("".concat(f, "/payment-status/transfer/").concat(t), {
                                headers: Gb(e)
                            }), rc = (f, e, t, n, r, a, i, s, o)=>{
                            const b = _b({
                                amount: s,
                                token_address: t,
                                sender: n,
                                token_type: r,
                                transfer_id: a,
                                expiration: i,
                                token_id: o
                            });
                            return Vb("".concat(f, "/fee?").concat(b), {
                                headers: Gb(e)
                            });
                        };
                        function ac(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var ic = 0;
                        function sc(f) {
                            return "__private_" + ic++ + "_" + f;
                        }
                        class oc {
                            constructor(f, e, t){
                                this.fragment = void 0, this.name = void 0, this.signature = void 0, this.topic = void 0, this.args = void 0;
                                const n = f.name, r = f.format();
                                o(this, {
                                    fragment: f,
                                    name: n,
                                    signature: r,
                                    topic: e,
                                    args: t
                                });
                            }
                        }
                        class bc {
                            constructor(f, e, t, n){
                                this.fragment = void 0, this.name = void 0, this.args = void 0, this.signature = void 0, this.selector = void 0, this.value = void 0;
                                const r = f.name, a = f.format();
                                o(this, {
                                    fragment: f,
                                    name: r,
                                    args: t,
                                    signature: a,
                                    selector: e,
                                    value: n
                                });
                            }
                        }
                        class cc {
                            constructor(f, e, t){
                                this.fragment = void 0, this.name = void 0, this.args = void 0, this.signature = void 0, this.selector = void 0;
                                const n = f.name, r = f.format();
                                o(this, {
                                    fragment: f,
                                    name: n,
                                    args: t,
                                    signature: r,
                                    selector: e
                                });
                            }
                        }
                        class dc {
                            static isIndexed(f) {
                                return !(!f || !f._isIndexed);
                            }
                            constructor(f){
                                this.hash = void 0, this._isIndexed = void 0, o(this, {
                                    hash: f,
                                    _isIndexed: !0
                                });
                            }
                        }
                        const uc = {
                            0: "generic panic",
                            1: "assert(false)",
                            17: "arithmetic overflow",
                            18: "division or modulo by zero",
                            33: "enum overflow",
                            34: "invalid encoded storage byte array accessed",
                            49: "out-of-bounds array access; popping on an empty array",
                            50: "out-of-bounds access of an array or bytesN",
                            65: "out of memory",
                            81: "uninitialized function"
                        }, lc = {
                            "0x08c379a0": {
                                signature: "Error(string)",
                                name: "Error",
                                inputs: [
                                    "string"
                                ],
                                reason: (f)=>"reverted with reason string ".concat(JSON.stringify(f))
                            },
                            "0x4e487b71": {
                                signature: "Panic(uint256)",
                                name: "Panic",
                                inputs: [
                                    "uint256"
                                ],
                                reason: (f)=>{
                                    let e = "unknown panic code";
                                    return f >= 0 && f <= 255 && uc[f.toString()] && (e = uc[f.toString()]), "reverted with panic code 0x".concat(f.toString(16), " (").concat(e, ")");
                                }
                            }
                        };
                        var hc = sc("errors"), pc = sc("events"), yc = sc("functions"), mc = sc("abiCoder"), gc = sc("getFunction"), wc = sc("getEvent");
                        class vc {
                            constructor(f){
                                Object.defineProperty(this, wc, {
                                    value: Tc
                                }), Object.defineProperty(this, gc, {
                                    value: Ec
                                }), this.fragments = void 0, this.deploy = void 0, this.fallback = void 0, this.receive = void 0, Object.defineProperty(this, hc, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, pc, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, yc, {
                                    writable: !0,
                                    value: void 0
                                }), Object.defineProperty(this, mc, {
                                    writable: !0,
                                    value: void 0
                                });
                                let e = [];
                                e = "string" == typeof f ? JSON.parse(f) : f, ac(this, yc)[yc] = new Map, ac(this, hc)[hc] = new Map, ac(this, pc)[pc] = new Map;
                                const t = [];
                                for (const n of e)try {
                                    t.push(pn.from(n));
                                } catch (f) {
                                    console.log("EE", f);
                                }
                                o(this, {
                                    fragments: Object.freeze(t)
                                });
                                let n = null, r = !1;
                                ac(this, mc)[mc] = this.getAbiCoder(), this.fragments.forEach((f, e)=>{
                                    let t;
                                    switch(f.type){
                                        case "constructor":
                                            return this.deploy ? void console.log("duplicate definition - constructor") : void o(this, {
                                                deploy: f
                                            });
                                        case "fallback":
                                            return void (0 === f.inputs.length ? r = !0 : (l(!n || f.payable !== n.payable, "conflicting fallback fragments", "fragments[".concat(e, "]"), f), n = f, r = n.payable));
                                        case "function":
                                            t = ac(this, yc)[yc];
                                            break;
                                        case "event":
                                            t = ac(this, pc)[pc];
                                            break;
                                        case "error":
                                            t = ac(this, hc)[hc];
                                            break;
                                        default:
                                            return;
                                    }
                                    const a = f.format();
                                    t.has(a) || t.set(a, f);
                                }), this.deploy || o(this, {
                                    deploy: vn.from("constructor()")
                                }), o(this, {
                                    fallback: n,
                                    receive: r
                                });
                            }
                            format(f) {
                                const e = f ? "minimal" : "full", t = this.fragments.map((f)=>f.format(e));
                                return t;
                            }
                            formatJson() {
                                const f = this.fragments.map((f)=>f.format("json"));
                                return JSON.stringify(f.map((f)=>JSON.parse(f)));
                            }
                            getAbiCoder() {
                                return Nn.defaultAbiCoder();
                            }
                            getFunctionName(f) {
                                const e = ac(this, gc)[gc](f, null, !1);
                                return l(e, "no matching function", "key", f), e.name;
                            }
                            hasFunction(f) {
                                return !!ac(this, gc)[gc](f, null, !1);
                            }
                            getFunction(f, e) {
                                return ac(this, gc)[gc](f, e || null, !0);
                            }
                            forEachFunction(f) {
                                const e = Array.from(ac(this, yc)[yc].keys());
                                e.sort((f, e)=>f.localeCompare(e));
                                for(let t = 0; t < e.length; t++){
                                    const n = e[t];
                                    f(ac(this, yc)[yc].get(n), t);
                                }
                            }
                            getEventName(f) {
                                const e = ac(this, wc)[wc](f, null, !1);
                                return l(e, "no matching event", "key", f), e.name;
                            }
                            hasEvent(f) {
                                return !!ac(this, wc)[wc](f, null, !1);
                            }
                            getEvent(f, e) {
                                return ac(this, wc)[wc](f, e || null, !0);
                            }
                            forEachEvent(f) {
                                const e = Array.from(ac(this, pc)[pc].keys());
                                e.sort((f, e)=>f.localeCompare(e));
                                for(let t = 0; t < e.length; t++){
                                    const n = e[t];
                                    f(ac(this, pc)[pc].get(n), t);
                                }
                            }
                            getError(f, e) {
                                if (E(f)) {
                                    const e = f.toLowerCase();
                                    if (lc[e]) return gn.from(lc[e].signature);
                                    for (const f of ac(this, hc)[hc].values())if (e === f.selector) return f;
                                    return null;
                                }
                                if (-1 === f.indexOf("(")) {
                                    const e = [];
                                    for (const [t, n] of ac(this, hc)[hc])t.split("(")[0] === f && e.push(n);
                                    if (0 === e.length) return "Error" === f ? gn.from("error Error(string)") : "Panic" === f ? gn.from("error Panic(uint256)") : null;
                                    if (e.length > 1) {
                                        const t = e.map((f)=>JSON.stringify(f.format())).join(", ");
                                        l(!1, "ambiguous error description (i.e. ".concat(t, ")"), "name", f);
                                    }
                                    return e[0];
                                }
                                return "Error(string)" === (f = gn.from(f).format()) ? gn.from("error Error(string)") : "Panic(uint256)" === f ? gn.from("error Panic(uint256)") : ac(this, hc)[hc].get(f) || null;
                            }
                            forEachError(f) {
                                const e = Array.from(ac(this, hc)[hc].keys());
                                e.sort((f, e)=>f.localeCompare(e));
                                for(let t = 0; t < e.length; t++){
                                    const n = e[t];
                                    f(ac(this, hc)[hc].get(n), t);
                                }
                            }
                            _decodeParams(f, e) {
                                return ac(this, mc)[mc].decode(f, e);
                            }
                            _encodeParams(f, e) {
                                return ac(this, mc)[mc].encode(f, e);
                            }
                            encodeDeploy(f) {
                                return this._encodeParams(this.deploy.inputs, f || []);
                            }
                            decodeErrorResult(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getError(f);
                                    l(e, "unknown error", "fragment", f), f = e;
                                }
                                return l(O(e, 0, 4) === f.selector, "data signature does not match error ".concat(f.name, "."), "data", e), this._decodeParams(f.inputs, O(e, 4));
                            }
                            encodeErrorResult(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getError(f);
                                    l(e, "unknown error", "fragment", f), f = e;
                                }
                                return I([
                                    f.selector,
                                    this._encodeParams(f.inputs, e || [])
                                ]);
                            }
                            decodeFunctionData(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getFunction(f);
                                    l(e, "unknown function", "fragment", f), f = e;
                                }
                                return l(O(e, 0, 4) === f.selector, "data signature does not match function ".concat(f.name, "."), "data", e), this._decodeParams(f.inputs, O(e, 4));
                            }
                            encodeFunctionData(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getFunction(f);
                                    l(e, "unknown function", "fragment", f), f = e;
                                }
                                return I([
                                    f.selector,
                                    this._encodeParams(f.inputs, e || [])
                                ]);
                            }
                            decodeFunctionResult(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getFunction(f);
                                    l(e, "unknown function", "fragment", f), f = e;
                                }
                                let t = "invalid length for result data";
                                const n = v(e);
                                if (n.length % 32 == 0) try {
                                    return ac(this, mc)[mc].decode(f.outputs, n);
                                } catch (f) {
                                    t = "could not decode result data";
                                }
                                u(!1, t, "BAD_DATA", {
                                    value: x(n),
                                    info: {
                                        method: f.name,
                                        signature: f.format()
                                    }
                                });
                            }
                            makeError(f, e) {
                                const t = w(f, "data"), n = Nn.getBuiltinCallException("call", e, t);
                                if (n.message.startsWith("execution reverted (unknown custom error)")) {
                                    const e = x(t.slice(0, 4)), r = this.getError(e);
                                    if (r) try {
                                        const f = ac(this, mc)[mc].decode(r.inputs, t.slice(4));
                                        n.revert = {
                                            name: r.name,
                                            signature: r.format(),
                                            args: f
                                        }, n.reason = n.revert.signature, n.message = "execution reverted: ".concat(n.reason);
                                    } catch (f) {
                                        n.message = "execution reverted (coult not decode custom error)";
                                    }
                                }
                                const r = this.parseTransaction(e);
                                return r && (n.invocation = {
                                    method: r.name,
                                    signature: r.signature,
                                    args: r.args
                                }), n;
                            }
                            encodeFunctionResult(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getFunction(f);
                                    l(e, "unknown function", "fragment", f), f = e;
                                }
                                return x(ac(this, mc)[mc].encode(f.outputs, e || []));
                            }
                            encodeFilterTopics(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getEvent(f);
                                    l(e, "unknown event", "eventFragment", f), f = e;
                                }
                                u(e.length <= f.inputs.length, "too many arguments for ".concat(f.format()), "UNEXPECTED_ARGUMENT", {
                                    count: e.length,
                                    expectedCount: f.inputs.length
                                });
                                const t = [];
                                f.anonymous || t.push(f.topicHash);
                                const n = (f, e)=>"string" === f.type ? Et(e) : "bytes" === f.type ? Mf(x(e)) : ("bool" === f.type && "boolean" == typeof e ? e = e ? "0x01" : "0x00" : f.type.match(/^u?int/) ? e = K(e) : f.type.match(/^bytes/) ? e = S(e, 32) : "address" === f.type && ac(this, mc)[mc].encode([
                                        "address"
                                    ], [
                                        e
                                    ]), P(x(e), 32));
                                for(e.forEach((e, r)=>{
                                    const a = f.inputs[r];
                                    a.indexed ? null == e ? t.push(null) : "array" === a.baseType || "tuple" === a.baseType ? l(!1, "filtering with tuples or arrays not supported", "contract." + a.name, e) : Array.isArray(e) ? t.push(e.map((f)=>n(a, f))) : t.push(n(a, e)) : l(null == e, "cannot filter non-indexed parameters; must be null", "contract." + a.name, e);
                                }); t.length && null === t[t.length - 1];)t.pop();
                                return t;
                            }
                            encodeEventLog(f, e) {
                                if ("string" == typeof f) {
                                    const e = this.getEvent(f);
                                    l(e, "unknown event", "eventFragment", f), f = e;
                                }
                                const t = [], n = [], r = [];
                                return f.anonymous || t.push(f.topicHash), l(e.length === f.inputs.length, "event arguments/values mismatch", "values", e), f.inputs.forEach((f, a)=>{
                                    const i = e[a];
                                    if (f.indexed) if ("string" === f.type) t.push(Et(i));
                                    else if ("bytes" === f.type) t.push(Mf(i));
                                    else {
                                        if ("tuple" === f.baseType || "array" === f.baseType) throw new Error("not implemented");
                                        t.push(ac(this, mc)[mc].encode([
                                            f.type
                                        ], [
                                            i
                                        ]));
                                    }
                                    else n.push(f), r.push(i);
                                }), {
                                    data: ac(this, mc)[mc].encode(n, r),
                                    topics: t
                                };
                            }
                            decodeEventLog(f, e, t) {
                                if ("string" == typeof f) {
                                    const e = this.getEvent(f);
                                    l(e, "unknown event", "eventFragment", f), f = e;
                                }
                                if (null != t && !f.anonymous) {
                                    const e = f.topicHash;
                                    l(E(t[0], 32) && t[0].toLowerCase() === e, "fragment/topic mismatch", "topics[0]", t[0]), t = t.slice(1);
                                }
                                const n = [], r = [], a = [];
                                f.inputs.forEach((f, e)=>{
                                    f.indexed ? "string" === f.type || "bytes" === f.type || "tuple" === f.baseType || "array" === f.baseType ? (n.push(ln.from({
                                        type: "bytes32",
                                        name: f.name
                                    })), a.push(!0)) : (n.push(f), a.push(!1)) : (r.push(f), a.push(!1));
                                });
                                const i = null != t ? ac(this, mc)[mc].decode(n, I(t)) : null, s = ac(this, mc)[mc].decode(r, e, !0), o = [], b = [];
                                let c = 0, d = 0;
                                return f.inputs.forEach((f, e)=>{
                                    let t = null;
                                    if (f.indexed) if (null == i) t = new dc(null);
                                    else if (a[e]) t = new dc(i[d++]);
                                    else try {
                                        t = i[d++];
                                    } catch (f) {
                                        t = f;
                                    }
                                    else try {
                                        t = s[c++];
                                    } catch (f) {
                                        t = f;
                                    }
                                    o.push(t), b.push(f.name || null);
                                }), Ne.fromItems(o, b);
                            }
                            parseTransaction(f) {
                                const e = w(f.data, "tx.data"), t = B(null != f.value ? f.value : 0, "tx.value"), n = this.getFunction(x(e.slice(0, 4)));
                                if (!n) return null;
                                const r = ac(this, mc)[mc].decode(n.inputs, e.slice(4));
                                return new bc(n, n.selector, r, t);
                            }
                            parseCallResult(f) {
                                throw new Error("@TODO");
                            }
                            parseLog(f) {
                                const e = this.getEvent(f.topics[0]);
                                return !e || e.anonymous ? null : new oc(e, e.topicHash, this.decodeEventLog(e, f.data, f.topics));
                            }
                            parseError(f) {
                                const e = x(f), t = this.getError(O(e, 0, 4));
                                if (!t) return null;
                                const n = ac(this, mc)[mc].decode(t.inputs, O(e, 4));
                                return new cc(t, t.selector, n);
                            }
                            static from(f) {
                                return f instanceof vc ? f : "string" == typeof f ? new vc(JSON.parse(f)) : "function" == typeof f.format ? new vc(f.format("json")) : new vc(f);
                            }
                        }
                        function Ec(f, e, t) {
                            if (E(f)) {
                                const e = f.toLowerCase();
                                for (const f of ac(this, yc)[yc].values())if (e === f.selector) return f;
                                return null;
                            }
                            if (-1 === f.indexOf("(")) {
                                const n = [];
                                for (const [e, t] of ac(this, yc)[yc])e.split("(")[0] === f && n.push(t);
                                if (e) {
                                    const f = e.length > 0 ? e[e.length - 1] : null;
                                    let t = e.length, r = !0;
                                    nt.isTyped(f) && "overrides" === f.type && (r = !1, t--);
                                    for(let f = n.length - 1; f >= 0; f--){
                                        const e = n[f].inputs.length;
                                        e === t || r && e === t - 1 || n.splice(f, 1);
                                    }
                                    for(let f = n.length - 1; f >= 0; f--){
                                        const t = n[f].inputs;
                                        for(let r = 0; r < e.length; r++)if (nt.isTyped(e[r])) {
                                            if (r >= t.length) {
                                                if ("overrides" === e[r].type) continue;
                                                n.splice(f, 1);
                                                break;
                                            }
                                            if (e[r].type !== t[r].baseType) {
                                                n.splice(f, 1);
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (1 === n.length && e && e.length !== n[0].inputs.length) {
                                    const f = e[e.length - 1];
                                    (null == f || Array.isArray(f) || "object" != typeof f) && n.splice(0, 1);
                                }
                                if (0 === n.length) return null;
                                if (n.length > 1 && t) {
                                    const e = n.map((f)=>JSON.stringify(f.format())).join(", ");
                                    l(!1, "ambiguous function description (i.e. matches ".concat(e, ")"), "key", f);
                                }
                                return n[0];
                            }
                            return ac(this, yc)[yc].get(Tn.from(f).format()) || null;
                        }
                        function Tc(f, e, t) {
                            if (E(f)) {
                                const e = f.toLowerCase();
                                for (const f of ac(this, pc)[pc].values())if (e === f.topicHash) return f;
                                return null;
                            }
                            if (-1 === f.indexOf("(")) {
                                const n = [];
                                for (const [e, t] of ac(this, pc)[pc])e.split("(")[0] === f && n.push(t);
                                if (e) {
                                    for(let f = n.length - 1; f >= 0; f--)n[f].inputs.length < e.length && n.splice(f, 1);
                                    for(let f = n.length - 1; f >= 0; f--){
                                        const t = n[f].inputs;
                                        for(let r = 0; r < e.length; r++)if (nt.isTyped(e[r]) && e[r].type !== t[r].baseType) {
                                            n.splice(f, 1);
                                            break;
                                        }
                                    }
                                }
                                if (0 === n.length) return null;
                                if (n.length > 1 && t) {
                                    const e = n.map((f)=>JSON.stringify(f.format())).join(", ");
                                    l(!1, "ambiguous event description (i.e. matches ".concat(e, ")"), "key", f);
                                }
                                return n[0];
                            }
                            return ac(this, pc)[pc].get(wn.from(f).format()) || null;
                        }
                        function Ac(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var xc = 0, Ic = "__private_" + xc++ + "_apiKey";
                        const kc = class {
                            constructor(f){
                                let { sender: e, token: t, amount: n, feeAmount: r, totalAmount: a, expiration: i, chainId: s, apiUrl: o, baseUrl: b, apiKey: c, transferId: d, tokenType: u, escrowAddress: l, operations: h, linkKey: p, getRandomBytes: y, feeAuthorization: m, feeToken: g, claimUrl: w, tokenId: v, forRecipient: E, status: T, source: A, deployment: x } = f;
                                if (this.sender = void 0, this.token = void 0, this.expiration = void 0, this.chainId = void 0, Object.defineProperty(this, Ic, {
                                    writable: !0,
                                    value: void 0
                                }), this.apiUrl = void 0, this.baseUrl = void 0, this.escrowAddress = void 0, this.getRandomBytes = void 0, this.transferId = void 0, this.claimUrl = void 0, this.tokenType = void 0, this.operations = void 0, this.linkKey = void 0, this.deposited = !1, this.tokenId = void 0, this.feeAuthorization = void 0, this.amount = void 0, this.totalAmount = void 0, this.feeAmount = void 0, this.feeToken = void 0, this.source = void 0, this.forRecipient = void 0, this.deployment = void 0, this.status = void 0, this.getDepositParams = ()=>{
                                    let f;
                                    if (!this.escrowAddress) throw new Error($b("escrowAddress", String(this.escrowAddress)));
                                    return f = "ERC20" === this.tokenType ? new vc(H.abi).encodeFunctionData("deposit", [
                                        this.token,
                                        this.transferId,
                                        this.totalAmount,
                                        this.expiration,
                                        this.feeToken,
                                        this.feeAmount,
                                        this.feeAuthorization
                                    ]) : "NATIVE" === this.tokenType ? new vc(H.abi).encodeFunctionData("depositETH", [
                                        this.transferId,
                                        this.totalAmount,
                                        this.expiration,
                                        this.feeAmount,
                                        this.feeAuthorization
                                    ]) : "ERC721" === this.tokenType ? new vc(W.abi).encodeFunctionData("depositERC721", [
                                        this.token,
                                        this.transferId,
                                        this.tokenId,
                                        this.expiration,
                                        this.feeAmount,
                                        this.feeAuthorization
                                    ]) : new vc(W.abi).encodeFunctionData("depositERC1155", [
                                        this.token,
                                        this.transferId,
                                        this.tokenId,
                                        this.amount,
                                        this.expiration,
                                        this.feeAmount,
                                        this.feeAuthorization
                                    ]), {
                                        value: this._defineValue(this.token, this.feeToken, this.totalAmount, this.feeAmount),
                                        data: f,
                                        to: this.escrowAddress
                                    };
                                }, this.redeem = async (f)=>{
                                    if (!f) throw new G(Wb("dest", String(f)), "DESTINATION_ADDRESS_NOT_PROVIDED");
                                    if (!this.escrowAddress && "d" !== this.source) throw new Error(qb(this.token, this.chainId));
                                    if (!this.claimUrl) throw new Error("Tokens should be deposited before redeem");
                                    if ("d" === this.source) {
                                        const e = Et(Xb(this.claimUrl)), t = await wb(e, f), n = await ec(this.apiUrl, Ac(this, Ic)[Ic], f, this.transferId, t), { tx_hash: r } = n;
                                        return r;
                                    }
                                    const e = (t = this.claimUrl, n || (n = Eb(t)), {
                                        senderSig: n.senderSig,
                                        linkKey: n.linkKey
                                    });
                                    var t, n;
                                    if (!e) throw new Error("Link should have 'sg' (signature) or 's' (sender) param to be decoded");
                                    const { senderSig: r, linkKey: a } = e, i = await wb(a, f);
                                    if (r) {
                                        const e = await ((f, e, t, n, r, a, i, s, o)=>Vb("".concat(f, "/redeem-recovered"), {
                                                headers: Gb(e),
                                                method: "POST",
                                                body: JSON.stringify({
                                                    receiver: t,
                                                    sender: n,
                                                    escrow: r,
                                                    transfer_id: a,
                                                    receiver_sig: i,
                                                    sender_sig: s,
                                                    token: o
                                                })
                                            }))(this.apiUrl, Ac(this, Ic)[Ic], f, this.sender.toLowerCase(), this.escrowAddress, this.transferId, i, r, this.token), { tx_hash: t } = e;
                                        return t;
                                    }
                                    {
                                        const e = await ec(this.apiUrl, Ac(this, Ic)[Ic], f, this.transferId, i, this.token, this.sender.toLowerCase(), this.escrowAddress), { tx_hash: t } = e;
                                        return t;
                                    }
                                }, this.getStatus = async ()=>{
                                    if (!this.transferId) throw new Error($b("transferId", String(this.transferId)));
                                    const { claim_link: f } = await nc(this.apiUrl, Ac(this, Ic)[Ic], this.transferId), e = Pb(f.operations);
                                    return f.status !== this.status && (this.status = f.status, this.operations = e), {
                                        status: f.status,
                                        operations: e
                                    };
                                }, this._defineDomain = ()=>((f, e)=>f === te.polygon ? e === ne.usdcBridgedPolygon ? Nb : Rb : f === te.avalanche && e === ne.usdcAvalanche ? Ub : f === te.optimism && e === ne.usdcOptimism ? Cb : f === te.arbitrum && e === ne.usdcArbitrum ? Lb : f === te.baseGoerli && e === ne.usdcBaseGoerli ? Bb : f === te.sepolia && e === ne.usdcSepolia ? Fb : f === te.base && e === ne.usdcBase ? Db : null)(this.chainId, this.token), this._defineValue = (f, e, t, n)=>e === f && f !== Tb ? "0" : f === Tb ? t : n, this._depositERC20 = async (f)=>{
                                    let { sendTransaction: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                                        data: t,
                                        value: n,
                                        to: r
                                    });
                                    await tc(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount, this.feeToken);
                                    const i = {
                                        linkKey: this.linkKey,
                                        transferId: this.transferId,
                                        chainId: this.chainId,
                                        sender: this.sender.toLowerCase()
                                    }, s = vb(this.baseUrl, i);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = s, this.deposited = !0, {
                                        txHash: a,
                                        transferId: this.transferId,
                                        claimUrl: s
                                    };
                                }, this._depositNative = async (f)=>{
                                    let { sendTransaction: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                                        data: t,
                                        value: n,
                                        to: r
                                    });
                                    await tc(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount, this.feeToken);
                                    const i = {
                                        linkKey: this.linkKey,
                                        transferId: this.transferId,
                                        chainId: this.chainId,
                                        sender: this.sender.toLowerCase()
                                    }, s = vb(this.baseUrl, i);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = s, this.deposited = !0, {
                                        txHash: a,
                                        transferId: this.transferId,
                                        claimUrl: s
                                    };
                                }, this._depositERC1155 = async (f)=>{
                                    let { sendTransaction: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                                        data: t,
                                        value: n,
                                        to: r
                                    });
                                    await ((f, e, t, n, r, a, i, s, o, b, c, d, u, l, h)=>Vb("".concat(f, "/deposit-erc1155"), {
                                            headers: Gb(e),
                                            method: "POST",
                                            body: JSON.stringify({
                                                sender: r,
                                                escrow: a,
                                                transfer_id: i,
                                                token: t,
                                                token_type: n,
                                                expiration: s,
                                                tx_hash: o,
                                                fee_authorization: b,
                                                token_id: c,
                                                amount: d,
                                                fee_amount: u,
                                                total_amount: l,
                                                fee_token: h
                                            })
                                        }))(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.tokenId, this.amount, this.feeAmount, this.totalAmount, this.feeToken);
                                    const i = {
                                        linkKey: this.linkKey,
                                        transferId: this.transferId,
                                        chainId: this.chainId,
                                        sender: this.sender.toLowerCase()
                                    }, s = vb(this.baseUrl, i);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = s, this.deposited = !0, {
                                        txHash: a,
                                        transferId: this.transferId,
                                        claimUrl: s
                                    };
                                }, this._depositERC721 = async (f)=>{
                                    let { sendTransaction: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                                        data: t,
                                        value: n,
                                        to: r
                                    });
                                    await ((f, e, t, n, r, a, i, s, o, b, c, d, u, l)=>Vb("".concat(f, "/deposit-erc721"), {
                                            headers: Gb(e),
                                            method: "POST",
                                            body: JSON.stringify({
                                                sender: r,
                                                escrow: a,
                                                transfer_id: i,
                                                token: t,
                                                token_type: n,
                                                expiration: s,
                                                tx_hash: o,
                                                fee_authorization: b,
                                                token_id: c,
                                                fee_amount: d,
                                                total_amount: u,
                                                fee_token: l,
                                                amount: "1"
                                            })
                                        }))(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.tokenId, this.feeAmount, this.totalAmount, this.feeToken);
                                    const i = {
                                        linkKey: this.linkKey,
                                        transferId: this.transferId,
                                        chainId: this.chainId,
                                        sender: this.sender.toLowerCase()
                                    }, s = vb(this.baseUrl, i);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = s, this.deposited = !0, {
                                        txHash: a,
                                        transferId: this.transferId,
                                        claimUrl: s
                                    };
                                }, this.deposit = async (f)=>{
                                    let { sendTransaction: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    if (!this.linkKey) throw new Error("You cannot make a deposit again after retrieving the link");
                                    if (this.deposited) throw new Error("The deposit has already been made");
                                    if (!this.escrowAddress) throw new Error($b("escrowAddress", String(this.escrowAddress)));
                                    if (!this.expiration) throw new Error($b("expiration", String(this.expiration)));
                                    if (!this.amount) throw new Error($b("amount", String(this.amount)));
                                    if (!e) throw new G(Wb("sendTransaction", String(e)), "SEND_TRANSACTION_NOT_PROVIDED");
                                    return "NATIVE" === this.tokenType ? this._depositNative({
                                        sendTransaction: e
                                    }) : "ERC20" === this.tokenType ? this._depositERC20({
                                        sendTransaction: e
                                    }) : "ERC721" === this.tokenType ? this._depositERC721({
                                        sendTransaction: e
                                    }) : this._depositERC1155({
                                        sendTransaction: e
                                    });
                                }, this.isDepositWithAuthorizationAvailable = (f)=>{
                                    const e = kb[f.toLowerCase()];
                                    return Boolean(e);
                                }, this.depositWithAuthorization = async (f)=>{
                                    let { signTypedData: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    const t = kb[this.token];
                                    if (!t) throw new G((this.token, "Stable coin with address not supported for deployWithAuthorization method"), "TOKEN_NOT_SUPPORTED_FOR_DEPOSIT_WITH_AUTH");
                                    if (!this.linkKey) throw new Error("You cannot make a deposit again after retrieving the link");
                                    if (this.deposited) throw new Error("The deposit has already been made");
                                    if (!e) throw new G(Wb("signTypedData", String(e)), "SIGN_TYPED_DATA_NOT_PROVIDED");
                                    if ("NATIVE" === this.tokenType) throw new Error("You can use 'depositWithAuthorization' method only for ERC20 tokens. Use 'deposit' method instead");
                                    const n = this._defineDomain();
                                    if (!n) throw new Error(Hb());
                                    const [r, a] = (()=>{
                                        const f = Math.floor(Date.now() / 1e3);
                                        return [
                                            f - 3600,
                                            f + 86400
                                        ];
                                    })();
                                    if (!this.escrowAddress) throw new Error($b("escrowAddress", String(this.escrowAddress)));
                                    if (!this.expiration) throw new Error($b("expiration", String(this.expiration)));
                                    if (!this.amount) throw new Error($b("amount", String(this.amount)));
                                    const i = await async function(f, e, t, n, r, a, i, s, o, b, c, d) {
                                        return b === te.polygon ? c === ne.usdcBridgedPolygon ? async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                owner: e,
                                                spender: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ApproveWithAuthorization: [
                                                    {
                                                        name: "owner",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "spender",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.owner,
                                                c.spender,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : b === te.base || b === te.baseGoerli ? async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : b === te.avalanche ? async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : b === te.optimism ? async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : b === te.arbitrum ? async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o) : async function(f, e, t, n, r, a, i, s, o, b) {
                                            const c = {
                                                from: e,
                                                to: t,
                                                value: n,
                                                validAfter: r,
                                                validBefore: a,
                                                nonce: ee(e, i, n, s, o)
                                            }, d = await f(b, {
                                                ReceiveWithAuthorization: [
                                                    {
                                                        name: "from",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "to",
                                                        type: "address"
                                                    },
                                                    {
                                                        name: "value",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validAfter",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "validBefore",
                                                        type: "uint256"
                                                    },
                                                    {
                                                        name: "nonce",
                                                        type: "bytes32"
                                                    }
                                                ]
                                            }, c), u = Te.from(d);
                                            return Nn.defaultAbiCoder().encode([
                                                "address",
                                                "address",
                                                "uint256",
                                                "uint256",
                                                "uint256",
                                                "bytes32",
                                                "uint8",
                                                "bytes32",
                                                "bytes32"
                                            ], [
                                                c.from,
                                                c.to,
                                                c.value,
                                                c.validAfter,
                                                c.validBefore,
                                                c.nonce,
                                                u.v,
                                                u.r,
                                                u.s
                                            ]);
                                        }(f, e, t, n, r, a, i, s, d, o);
                                    }(e, this.sender.toLowerCase(), this.escrowAddress, this.totalAmount, r, a, this.transferId, String(this.expiration), n, this.chainId, this.token, this.feeAmount), s = await ((f, e, t, n, r, a, i, s, o, b, c, d, u, l)=>Vb("".concat(f, "/deposit-with-authorization"), {
                                            headers: Gb(e),
                                            method: "POST",
                                            body: JSON.stringify({
                                                sender: r,
                                                token: t,
                                                token_type: n,
                                                escrow: a,
                                                transfer_id: i,
                                                expiration: s,
                                                amount: d,
                                                authorization: o,
                                                authorization_selector: b,
                                                fee_amount: u,
                                                total_amount: l,
                                                fee_authorization: c
                                            })
                                        }))(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, i, t, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount), { tx_hash: o } = s, b = {
                                        linkKey: this.linkKey,
                                        transferId: this.transferId,
                                        chainId: this.chainId,
                                        sender: this.sender.toLowerCase()
                                    }, c = vb(this.baseUrl, b);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = c, this.deposited = !0, {
                                        txHash: o,
                                        claimUrl: this.claimUrl,
                                        transferId: this.transferId
                                    };
                                }, this._getCurrentFee = async (f)=>await rc(this.apiUrl, Ac(this, Ic)[Ic], this.token, this.sender.toLowerCase(), this.tokenType, this.transferId, this.expiration, f, this.tokenId), this.updateAmount = async (f)=>{
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    if ("ERC721" === this.tokenType) throw new G("Cannot update amount for ERC721 token", "CANNOT_UPDATE_AMOUNT_FOR_ERC721");
                                    const { fee_amount: e, total_amount: t, min_transfer_amount: n, max_transfer_amount: r, fee_authorization: a, fee_token: i } = await this._getCurrentFee(f);
                                    if (M(f) < M(n)) throw new G(Jb(n.toString()), "MIN_LIMIT_FAILED");
                                    if (M(f) > M(r)) throw new G(Yb(r.toString()), "MAX_LIMIT_FAILED");
                                    if (!this.linkKey) {
                                        if ("created" === (await this.getStatus()).status) return this.amount = f, this.feeAmount = e, this.totalAmount = t, this.feeAuthorization = a, this.feeToken = i.toLowerCase(), {
                                            amount: f,
                                            feeAmount: e,
                                            totalAmount: t,
                                            feeToken: i
                                        };
                                        throw new Error("Cannot update amount after deposit");
                                    }
                                    if (this.deposited) throw new Error("Cannot update amount after deposit");
                                    return this.amount = f, this.feeAmount = e, this.totalAmount = t, this.feeAuthorization = a, this.feeToken = i.toLowerCase(), {
                                        amount: f,
                                        feeAmount: e,
                                        totalAmount: t,
                                        feeToken: i
                                    };
                                }, this._getEscrowPaymentDomain = ()=>{
                                    if (!this.escrowAddress) throw new Error(qb(this.token, this.chainId));
                                    const f = fc(this.escrowAddress);
                                    if (!f) throw new Error("Version not found for the provided escrow contract address");
                                    return {
                                        name: "LinkdropEscrow",
                                        version: f,
                                        chainId: this.chainId,
                                        verifyingContract: this.escrowAddress
                                    };
                                }, this.generateClaimUrl = async (f)=>{
                                    let { signTypedData: e } = f;
                                    if (this.forRecipient) throw new Error("This link can only be redeemed");
                                    if (!this.getRandomBytes) throw new Error($b("getRandomBytes", String(this.getRandomBytes)));
                                    if (!e) throw new G(Wb("signTypedData", String(e)), "SIGN_TYPED_DATA_NOT_PROVIDED");
                                    if (!this.transferId) throw new Error($b("transferId", String(this.transferId)));
                                    const t = this._getEscrowPaymentDomain(), n = await (async (f, e, t, n)=>{
                                        nr.register(e);
                                        const r = gb.createRandom(), a = {
                                            linkKeyId: r.address,
                                            transferId: t
                                        }, i = await f(n, {
                                            Transfer: [
                                                {
                                                    name: "linkKeyId",
                                                    type: "address"
                                                },
                                                {
                                                    name: "transferId",
                                                    type: "address"
                                                }
                                            ]
                                        }, a);
                                        return {
                                            linkKey: r.privateKey,
                                            linkKeyId: r.address,
                                            senderSig: i
                                        };
                                    })(e, this.getRandomBytes, this.transferId, t), { linkKey: r, senderSig: a } = n, i = {
                                        linkKey: r,
                                        senderSig: a,
                                        transferId: this.transferId,
                                        chainId: this.chainId
                                    }, s = vb(this.baseUrl, i);
                                    if ("TURBOPACK compile-time falsy", 0) {
                                        "TURBOPACK unreachable";
                                    }
                                    return this.claimUrl = s, {
                                        claimUrl: this.claimUrl,
                                        transferId: this.transferId
                                    };
                                }, this.getRandomBytes = y, !e) throw new G(Wb("sender", String(e)), "SENDER_NOT_PROVIDED");
                                if (this.deployment = x, this.forRecipient = Boolean(E), "ERC721" === u || "ERC1155" === u) {
                                    if (!v) throw new G(Wb("tokenId", String(v)), "TOKEN_ID_NOT_PROVIDED");
                                    this.tokenId = v;
                                }
                                if (T && (this.status = T), this.source = A || "p2p", this.sender = e.toLowerCase(), this.feeAmount = r, this.totalAmount = a, m && (this.feeAuthorization = m), g && (this.feeToken = g.toLowerCase()), "ERC721" !== u && !n) throw new G(Wb("amount", String(n)), "AMOUNT_NOT_PROVIDED");
                                if (this.amount = n, this.operations = h || [], this.expiration = i, !s) throw new G(Wb("chainId", String(s)), "CHAIN_ID_NOT_PROVIDED");
                                if (this.chainId = s, this.apiUrl = o, Ac(this, Ic)[Ic] = c, !u) throw new G(Wb("tokenType", String(u)), "TOKEN_TYPE_NOT_PROVIDED");
                                if (this.tokenType = u, "NATIVE" === u) this.token = Tb;
                                else {
                                    if (!t) throw new G(Wb("token", String(t)), "TOKEN_NOT_PROVIDED");
                                    this.token = t.toLowerCase();
                                }
                                if (this.escrowAddress = (null == l ? void 0 : l.toLowerCase()) || ((f, e, t)=>f && e ? "CBW" === t ? Ab || null : "ERC1155" === e || "ERC721" === e ? Ib : xb : null)(this.chainId, this.tokenType, this.deployment), !this.escrowAddress && "d" !== this.source) throw new Error(qb(this.token, this.chainId));
                                if ("d" !== this.source && !((f, e, t)=>!(!f || !e) && ("CBW" === t ? f === Ab : "ERC1155" === e || "ERC721" === e ? f === Ib : f === xb))(this.escrowAddress, this.tokenType, this.deployment)) throw new Error("Escrow contract address is not correct. Please check chainId and token address");
                                if (!d) throw new G(Wb("transferId", String(d)), "TRANSFER_ID_NOT_PROVIDED");
                                this.transferId = d.toLowerCase(), p && (this.linkKey = p), w && (this.claimUrl = w), this.baseUrl = b || "http://localhost:3000";
                            }
                        };
                        function Oc(f, e) {
                            if (!Object.prototype.hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                            return f;
                        }
                        var _c = 0, Pc = "__private_" + _c++ + "_apiKey";
                        const Sc = class {
                            constructor(f){
                                let { apiKey: e, baseUrl: t, apiUrl: n, deployment: a, getRandomBytes: i } = f;
                                if (Object.defineProperty(this, Pc, {
                                    writable: !0,
                                    value: void 0
                                }), this.baseUrl = void 0, this.apiUrl = void 0, this.deployment = "LD", this.getRandomBytes = void 0, this.getVersionFromClaimUrl = (f)=>((f)=>{
                                        const e = f.indexOf("#"), t = f.substring(e + 1).split("?")[1], n = Sb(t).v;
                                        if (!n) throw new Error('Version parameter "v" not found in URL');
                                        return n;
                                    })(f), this.createClaimLink = async (f)=>{
                                    let { token: e, expiration: t, chainId: n, amount: r, from: a, tokenType: i, tokenId: s } = f;
                                    if (!n) throw new G(Wb("chainId", String(n)), "CHAIN_ID_NOT_PROVIDED");
                                    const o = Ob(n, this.apiUrl);
                                    if (!o) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                    if (!a) throw new G(Wb("from", String(a)), "FROM_NOT_PROVIDED");
                                    if ("ERC721" !== i && !r) throw new G(Wb("amount", String(r)), "AMOUNT_NOT_PROVIDED");
                                    if (!e && "NATIVE" !== i) throw new G(Wb("token", String(e)), "TOKEN_NOT_PROVIDED");
                                    return this._initializeClaimLink({
                                        token: e || Tb,
                                        expiration: t || Math.floor(Date.now() / 1e3 + 2592e3),
                                        chainId: n,
                                        amount: r || "1",
                                        sender: a.toLowerCase(),
                                        apiUrl: o,
                                        apiKey: Oc(this, Pc)[Pc],
                                        tokenType: i,
                                        baseUrl: this.baseUrl,
                                        tokenId: s,
                                        source: "p2p",
                                        deployment: this.deployment
                                    });
                                }, this.getSenderHistory = async (f)=>{
                                    let { onlyActive: e, chainId: t, sender: n, limit: a, offset: i, token: s } = f;
                                    const o = Ob(t, this.apiUrl);
                                    if (!o) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                    const { claim_links: b, result_set: c } = await ((f, e, t, n, r, a, i)=>{
                                        const s = _b({
                                            only_active: n,
                                            offset: r,
                                            limit: a,
                                            token_address: i
                                        });
                                        return Vb("".concat(f, "/payment-status/sender/").concat(t, "/get-sender-history?").concat(s), {
                                            headers: Gb(e)
                                        });
                                    })(o, Oc(this, Pc)[Pc], n, e, i, a, s);
                                    return {
                                        claimLinks: b.map((f)=>{
                                            const e = r(r({}, f), {}, {
                                                transferId: f.transfer_id,
                                                tokenType: f.token_type,
                                                chainId: f.chain_id,
                                                totalAmount: f.total_amount,
                                                operations: Pb(f.operations),
                                                tokenId: f.token_id,
                                                feeToken: f.fee_token,
                                                feeAmount: f.fee_amount,
                                                createdAt: f.created_at,
                                                updatedAt: f.updated_at
                                            });
                                            return delete e.transfer_id, delete e.created_at, delete e.updated_at, delete e.total_amount, delete e.chain_id, delete e.token_type, delete e.token_id, delete e.fee_token, delete e.fee_amount, e;
                                        }),
                                        resultSet: c
                                    };
                                }, this.getVersionFromEscrowContract = (f)=>{
                                    const e = fc(f);
                                    if (!e) throw new Error("Version not found for the provided escrow contract address");
                                    return e;
                                }, this.getLinkSourceFromClaimUrl = (f)=>((f)=>{
                                        const e = f.split("?")[1];
                                        return Sb(e).src || "p2p";
                                    })(f), this.getLimits = async (f)=>{
                                    let { token: e, chainId: t, tokenType: n } = f;
                                    const r = Ob(t, this.apiUrl);
                                    if (!r) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                    if ("ERC721" === n || "ERC1155" === n) throw new G("Cannot fetch limits for ERC1155 or ERC721 tokens", "LIMITS_NOT_AVAILABLE_FOR_ERC721_AND_ERC1155");
                                    let a = e;
                                    if (a !== Tb && !a) throw new G(Wb("token", String(e)), "TOKEN_NOT_PROVIDED");
                                    const i = await ((f, e, t, n)=>{
                                        const r = _b({
                                            token_address: t,
                                            token_type: n
                                        });
                                        return Vb("".concat(f, "/limits?").concat(r), {
                                            headers: Gb(e)
                                        });
                                    })(r, Oc(this, Pc)[Pc], a, n);
                                    return {
                                        minTransferAmount: i.min_transfer_amount,
                                        maxTransferAmount: i.max_transfer_amount,
                                        minTransferAmountUSD: i.min_transfer_amount_usd,
                                        maxTransferAmountUSD: i.max_transfer_amount_usd
                                    };
                                }, this._initializeClaimLink = async (f)=>{
                                    let e, t = f.transferId, n = f.feeAmount, a = f.totalAmount, i = f.feeAuthorization, s = f.feeToken;
                                    if (t || (e = await (async (f)=>(nr.register(f), gb.createRandom()))(this.getRandomBytes), t = e.address), !n || !a) {
                                        const e = await this._getCurrentFee(f.apiUrl, f.token, f.tokenType, f.sender, t, f.expiration, "ERC721" === f.tokenType ? "1" : f.amount, f.tokenId);
                                        if (n = e.fee_amount, a = e.total_amount, i = e.fee_authorization, s = e.fee_token, "NATIVE" === f.tokenType || "ERC20" === f.tokenType) {
                                            if (M(f.amount) < M(e.min_transfer_amount)) throw new G(Jb(e.min_transfer_amount.toString()), "MIN_LIMIT_FAILED");
                                            if (M(f.amount) > M(e.max_transfer_amount)) throw new G(Yb(e.max_transfer_amount.toString()), "MAX_LIMIT_FAILED");
                                        }
                                    }
                                    if (!t) throw new Error(Zb("transferId", "string", t));
                                    if (!s) throw new Error(Zb("feeToken", "string", s));
                                    if (!a) throw new Error(Zb("totalAmount", "string", a));
                                    if (!n) throw new Error(Zb("feeAmount", "string", n));
                                    return new kc(r(r({}, f), {}, {
                                        transferId: t,
                                        getRandomBytes: this.getRandomBytes,
                                        linkKey: e ? e.privateKey : null,
                                        feeAmount: n,
                                        feeToken: s,
                                        feeAuthorization: i,
                                        totalAmount: a,
                                        source: f.source
                                    }));
                                }, this._getCurrentFee = async (f, e, t, n, r, a, i, s)=>await rc(f, Oc(this, Pc)[Pc], e, n.toLowerCase(), t, r, a, i, s), this.getClaimLink = async (f)=>{
                                    const e = this.getLinkSourceFromClaimUrl(f);
                                    if ("d" === e) {
                                        const t = Xb(f), n = ((f)=>{
                                            const e = f.split("?")[1], t = Sb(e).c;
                                            return t ? Number(t) : te.polygon;
                                        })(f), r = Et(t), a = new gb(r).address, i = "https://escrow-api.linkdrop.io/dashboard", { claim_link: s } = await nc(i, Oc(this, Pc)[Pc], a), { token: o, expiration: b, amount: c, token_type: d, operations: u, sender: l, fee_token: h, fee_amount: p, total_amount: y, escrow: m, token_id: g, status: w } = s;
                                        if (!Ob(n, this.apiUrl)) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                        const v = {
                                            token: o,
                                            expiration: b,
                                            chainId: n,
                                            feeAmount: p,
                                            feeToken: h,
                                            totalAmount: y,
                                            amount: c,
                                            sender: l,
                                            apiUrl: i,
                                            apiKey: Oc(this, Pc)[Pc],
                                            transferId: a.toLowerCase(),
                                            claimUrl: f,
                                            tokenId: g,
                                            operations: Pb(u),
                                            tokenType: d,
                                            baseUrl: this.baseUrl,
                                            escrowAddress: m,
                                            forRecipient: !0,
                                            status: w,
                                            source: e,
                                            deployment: this.deployment
                                        };
                                        return this._initializeClaimLink(v);
                                    }
                                    const { transferId: t, chainId: n } = Eb(f), r = Ob(n, this.apiUrl);
                                    if (!r) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                    const { claim_link: a } = await nc(r, Oc(this, Pc)[Pc], t), { token: i, expiration: s, amount: o, token_type: b, operations: c, sender: d, fee_token: u, fee_amount: l, total_amount: h, escrow: p, token_id: y, status: m } = a, g = {
                                        token: i,
                                        expiration: s,
                                        chainId: n,
                                        feeAmount: l,
                                        feeToken: u,
                                        totalAmount: h,
                                        amount: o,
                                        sender: d,
                                        apiUrl: r,
                                        apiKey: Oc(this, Pc)[Pc],
                                        transferId: t.toLowerCase(),
                                        claimUrl: f,
                                        tokenId: y,
                                        operations: Pb(c),
                                        tokenType: b,
                                        baseUrl: this.baseUrl,
                                        escrowAddress: p,
                                        forRecipient: !0,
                                        status: m,
                                        source: e,
                                        deployment: this.deployment
                                    };
                                    return this._initializeClaimLink(g);
                                }, this.retrieveClaimLink = async (f)=>{
                                    let { chainId: e, txHash: t, transferId: n, customApiHost: r } = f;
                                    const a = r || Ob(e, this.apiUrl);
                                    if (!a) throw new G(Hb(), "CHAIN_NOT_SUPPORTED");
                                    if (n) {
                                        const { claim_link: f } = await nc(a, Oc(this, Pc)[Pc], n), { token: t, expiration: i, amount: s, token_type: o, operations: b, fee_token: c, fee_amount: d, total_amount: u, sender: l, status: h, token_id: p } = f, y = {
                                            token: t,
                                            expiration: i,
                                            chainId: e,
                                            amount: s,
                                            sender: l.toLowerCase(),
                                            apiUrl: a,
                                            apiKey: Oc(this, Pc)[Pc],
                                            tokenType: o,
                                            transferId: n.toLowerCase(),
                                            baseUrl: this.baseUrl,
                                            operations: Pb(b),
                                            feeAmount: d,
                                            feeToken: c,
                                            totalAmount: u,
                                            status: h,
                                            tokenId: p,
                                            source: r ? "d" : "p2p",
                                            deployment: this.deployment
                                        };
                                        return this._initializeClaimLink(y);
                                    }
                                    if (t) {
                                        const { claim_link: f } = await ((f, e, t)=>Vb("".concat(f, "/payment-status/transaction/").concat(t), {
                                                headers: Gb(e)
                                            }))(a, Oc(this, Pc)[Pc], t), { token: n, expiration: r, amount: i, sender: s, transfer_id: o, token_type: b, operations: c, fee_token: d, fee_amount: u, total_amount: l, version: h, status: p, token_id: y } = f, m = {
                                            token: n,
                                            expiration: r,
                                            chainId: e,
                                            amount: i,
                                            sender: s.toLowerCase(),
                                            apiUrl: a,
                                            apiKey: Oc(this, Pc)[Pc],
                                            transferId: o.toLowerCase(),
                                            tokenType: b,
                                            operations: Pb(c),
                                            baseUrl: this.baseUrl,
                                            feeAmount: u,
                                            feeToken: d,
                                            tokenId: y,
                                            totalAmount: l,
                                            status: p,
                                            source: "p2p",
                                            deployment: this.deployment
                                        };
                                        return this._initializeClaimLink(m);
                                    }
                                    throw new G("At least one of the following arguments should be provided: ".concat([
                                        "txHash",
                                        "transferId"
                                    ].join(", ")));
                                }, Oc(this, Pc)[Pc] = e || null, a) {
                                    if ("CBW" !== a && "LD" !== a) throw new G("Deployment is not valid. Use LD instead or remove it", "INVALID_DEPLOYMENT_PROPERTY");
                                    this.deployment = a;
                                }
                                if (n && (this.apiUrl = n), !t) throw new G(Wb("baseUrl", String(t)), "BASE_URL_NOT_PROVIDED");
                                if (this.baseUrl = t, !i) throw new G(Wb("getRandomBytes", String(i)), "GET_RANDOM_BYTES_NOT_PROVIDED");
                                this.getRandomBytes = i;
                            }
                        };
                        return e;
                    })(), f.exports = i();
            },
            228: (f, e, t)=>{
                !function(f) {
                    "use strict";
                    var e = function(f) {
                        var e, t = new Float64Array(16);
                        if (f) for(e = 0; e < f.length; e++)t[e] = f[e];
                        return t;
                    }, n = function() {
                        throw new Error("no PRNG");
                    }, r = new Uint8Array(16), a = new Uint8Array(32);
                    a[0] = 9;
                    var i = e(), s = e([
                        1
                    ]), o = e([
                        56129,
                        1
                    ]), b = e([
                        30883,
                        4953,
                        19914,
                        30187,
                        55467,
                        16705,
                        2637,
                        112,
                        59544,
                        30585,
                        16505,
                        36039,
                        65139,
                        11119,
                        27886,
                        20995
                    ]), c = e([
                        61785,
                        9906,
                        39828,
                        60374,
                        45398,
                        33411,
                        5274,
                        224,
                        53552,
                        61171,
                        33010,
                        6542,
                        64743,
                        22239,
                        55772,
                        9222
                    ]), d = e([
                        54554,
                        36645,
                        11616,
                        51542,
                        42930,
                        38181,
                        51040,
                        26924,
                        56412,
                        64982,
                        57905,
                        49316,
                        21502,
                        52590,
                        14035,
                        8553
                    ]), u = e([
                        26200,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214,
                        26214
                    ]), l = e([
                        41136,
                        18958,
                        6951,
                        50414,
                        58488,
                        44335,
                        6150,
                        12099,
                        55207,
                        15867,
                        153,
                        11085,
                        57099,
                        20417,
                        9344,
                        11139
                    ]);
                    function h(f, e, t, n) {
                        f[e] = t >> 24 & 255, f[e + 1] = t >> 16 & 255, f[e + 2] = t >> 8 & 255, f[e + 3] = 255 & t, f[e + 4] = n >> 24 & 255, f[e + 5] = n >> 16 & 255, f[e + 6] = n >> 8 & 255, f[e + 7] = 255 & n;
                    }
                    function p(f, e, t, n, r) {
                        var a, i = 0;
                        for(a = 0; a < r; a++)i |= f[e + a] ^ t[n + a];
                        return (1 & i - 1 >>> 8) - 1;
                    }
                    function y(f, e, t, n) {
                        return p(f, e, t, n, 16);
                    }
                    function m(f, e, t, n) {
                        return p(f, e, t, n, 32);
                    }
                    function g(f, e, t, n) {
                        !function(f, e, t, n) {
                            for(var r, a = 255 & n[0] | (255 & n[1]) << 8 | (255 & n[2]) << 16 | (255 & n[3]) << 24, i = 255 & t[0] | (255 & t[1]) << 8 | (255 & t[2]) << 16 | (255 & t[3]) << 24, s = 255 & t[4] | (255 & t[5]) << 8 | (255 & t[6]) << 16 | (255 & t[7]) << 24, o = 255 & t[8] | (255 & t[9]) << 8 | (255 & t[10]) << 16 | (255 & t[11]) << 24, b = 255 & t[12] | (255 & t[13]) << 8 | (255 & t[14]) << 16 | (255 & t[15]) << 24, c = 255 & n[4] | (255 & n[5]) << 8 | (255 & n[6]) << 16 | (255 & n[7]) << 24, d = 255 & e[0] | (255 & e[1]) << 8 | (255 & e[2]) << 16 | (255 & e[3]) << 24, u = 255 & e[4] | (255 & e[5]) << 8 | (255 & e[6]) << 16 | (255 & e[7]) << 24, l = 255 & e[8] | (255 & e[9]) << 8 | (255 & e[10]) << 16 | (255 & e[11]) << 24, h = 255 & e[12] | (255 & e[13]) << 8 | (255 & e[14]) << 16 | (255 & e[15]) << 24, p = 255 & n[8] | (255 & n[9]) << 8 | (255 & n[10]) << 16 | (255 & n[11]) << 24, y = 255 & t[16] | (255 & t[17]) << 8 | (255 & t[18]) << 16 | (255 & t[19]) << 24, m = 255 & t[20] | (255 & t[21]) << 8 | (255 & t[22]) << 16 | (255 & t[23]) << 24, g = 255 & t[24] | (255 & t[25]) << 8 | (255 & t[26]) << 16 | (255 & t[27]) << 24, w = 255 & t[28] | (255 & t[29]) << 8 | (255 & t[30]) << 16 | (255 & t[31]) << 24, v = 255 & n[12] | (255 & n[13]) << 8 | (255 & n[14]) << 16 | (255 & n[15]) << 24, E = a, T = i, A = s, x = o, I = b, k = c, O = d, _ = u, P = l, S = h, R = p, N = y, C = m, U = g, L = w, B = v, D = 0; D < 20; D += 2)E ^= (r = (C ^= (r = (P ^= (r = (I ^= (r = E + C | 0) << 7 | r >>> 25) + E | 0) << 9 | r >>> 23) + I | 0) << 13 | r >>> 19) + P | 0) << 18 | r >>> 14, k ^= (r = (T ^= (r = (U ^= (r = (S ^= (r = k + T | 0) << 7 | r >>> 25) + k | 0) << 9 | r >>> 23) + S | 0) << 13 | r >>> 19) + U | 0) << 18 | r >>> 14, R ^= (r = (O ^= (r = (A ^= (r = (L ^= (r = R + O | 0) << 7 | r >>> 25) + R | 0) << 9 | r >>> 23) + L | 0) << 13 | r >>> 19) + A | 0) << 18 | r >>> 14, B ^= (r = (N ^= (r = (_ ^= (r = (x ^= (r = B + N | 0) << 7 | r >>> 25) + B | 0) << 9 | r >>> 23) + x | 0) << 13 | r >>> 19) + _ | 0) << 18 | r >>> 14, E ^= (r = (x ^= (r = (A ^= (r = (T ^= (r = E + x | 0) << 7 | r >>> 25) + E | 0) << 9 | r >>> 23) + T | 0) << 13 | r >>> 19) + A | 0) << 18 | r >>> 14, k ^= (r = (I ^= (r = (_ ^= (r = (O ^= (r = k + I | 0) << 7 | r >>> 25) + k | 0) << 9 | r >>> 23) + O | 0) << 13 | r >>> 19) + _ | 0) << 18 | r >>> 14, R ^= (r = (S ^= (r = (P ^= (r = (N ^= (r = R + S | 0) << 7 | r >>> 25) + R | 0) << 9 | r >>> 23) + N | 0) << 13 | r >>> 19) + P | 0) << 18 | r >>> 14, B ^= (r = (L ^= (r = (U ^= (r = (C ^= (r = B + L | 0) << 7 | r >>> 25) + B | 0) << 9 | r >>> 23) + C | 0) << 13 | r >>> 19) + U | 0) << 18 | r >>> 14;
                            E = E + a | 0, T = T + i | 0, A = A + s | 0, x = x + o | 0, I = I + b | 0, k = k + c | 0, O = O + d | 0, _ = _ + u | 0, P = P + l | 0, S = S + h | 0, R = R + p | 0, N = N + y | 0, C = C + m | 0, U = U + g | 0, L = L + w | 0, B = B + v | 0, f[0] = E >>> 0 & 255, f[1] = E >>> 8 & 255, f[2] = E >>> 16 & 255, f[3] = E >>> 24 & 255, f[4] = T >>> 0 & 255, f[5] = T >>> 8 & 255, f[6] = T >>> 16 & 255, f[7] = T >>> 24 & 255, f[8] = A >>> 0 & 255, f[9] = A >>> 8 & 255, f[10] = A >>> 16 & 255, f[11] = A >>> 24 & 255, f[12] = x >>> 0 & 255, f[13] = x >>> 8 & 255, f[14] = x >>> 16 & 255, f[15] = x >>> 24 & 255, f[16] = I >>> 0 & 255, f[17] = I >>> 8 & 255, f[18] = I >>> 16 & 255, f[19] = I >>> 24 & 255, f[20] = k >>> 0 & 255, f[21] = k >>> 8 & 255, f[22] = k >>> 16 & 255, f[23] = k >>> 24 & 255, f[24] = O >>> 0 & 255, f[25] = O >>> 8 & 255, f[26] = O >>> 16 & 255, f[27] = O >>> 24 & 255, f[28] = _ >>> 0 & 255, f[29] = _ >>> 8 & 255, f[30] = _ >>> 16 & 255, f[31] = _ >>> 24 & 255, f[32] = P >>> 0 & 255, f[33] = P >>> 8 & 255, f[34] = P >>> 16 & 255, f[35] = P >>> 24 & 255, f[36] = S >>> 0 & 255, f[37] = S >>> 8 & 255, f[38] = S >>> 16 & 255, f[39] = S >>> 24 & 255, f[40] = R >>> 0 & 255, f[41] = R >>> 8 & 255, f[42] = R >>> 16 & 255, f[43] = R >>> 24 & 255, f[44] = N >>> 0 & 255, f[45] = N >>> 8 & 255, f[46] = N >>> 16 & 255, f[47] = N >>> 24 & 255, f[48] = C >>> 0 & 255, f[49] = C >>> 8 & 255, f[50] = C >>> 16 & 255, f[51] = C >>> 24 & 255, f[52] = U >>> 0 & 255, f[53] = U >>> 8 & 255, f[54] = U >>> 16 & 255, f[55] = U >>> 24 & 255, f[56] = L >>> 0 & 255, f[57] = L >>> 8 & 255, f[58] = L >>> 16 & 255, f[59] = L >>> 24 & 255, f[60] = B >>> 0 & 255, f[61] = B >>> 8 & 255, f[62] = B >>> 16 & 255, f[63] = B >>> 24 & 255;
                        }(f, e, t, n);
                    }
                    function w(f, e, t, n) {
                        !function(f, e, t, n) {
                            for(var r, a = 255 & n[0] | (255 & n[1]) << 8 | (255 & n[2]) << 16 | (255 & n[3]) << 24, i = 255 & t[0] | (255 & t[1]) << 8 | (255 & t[2]) << 16 | (255 & t[3]) << 24, s = 255 & t[4] | (255 & t[5]) << 8 | (255 & t[6]) << 16 | (255 & t[7]) << 24, o = 255 & t[8] | (255 & t[9]) << 8 | (255 & t[10]) << 16 | (255 & t[11]) << 24, b = 255 & t[12] | (255 & t[13]) << 8 | (255 & t[14]) << 16 | (255 & t[15]) << 24, c = 255 & n[4] | (255 & n[5]) << 8 | (255 & n[6]) << 16 | (255 & n[7]) << 24, d = 255 & e[0] | (255 & e[1]) << 8 | (255 & e[2]) << 16 | (255 & e[3]) << 24, u = 255 & e[4] | (255 & e[5]) << 8 | (255 & e[6]) << 16 | (255 & e[7]) << 24, l = 255 & e[8] | (255 & e[9]) << 8 | (255 & e[10]) << 16 | (255 & e[11]) << 24, h = 255 & e[12] | (255 & e[13]) << 8 | (255 & e[14]) << 16 | (255 & e[15]) << 24, p = 255 & n[8] | (255 & n[9]) << 8 | (255 & n[10]) << 16 | (255 & n[11]) << 24, y = 255 & t[16] | (255 & t[17]) << 8 | (255 & t[18]) << 16 | (255 & t[19]) << 24, m = 255 & t[20] | (255 & t[21]) << 8 | (255 & t[22]) << 16 | (255 & t[23]) << 24, g = 255 & t[24] | (255 & t[25]) << 8 | (255 & t[26]) << 16 | (255 & t[27]) << 24, w = 255 & t[28] | (255 & t[29]) << 8 | (255 & t[30]) << 16 | (255 & t[31]) << 24, v = 255 & n[12] | (255 & n[13]) << 8 | (255 & n[14]) << 16 | (255 & n[15]) << 24, E = 0; E < 20; E += 2)a ^= (r = (m ^= (r = (l ^= (r = (b ^= (r = a + m | 0) << 7 | r >>> 25) + a | 0) << 9 | r >>> 23) + b | 0) << 13 | r >>> 19) + l | 0) << 18 | r >>> 14, c ^= (r = (i ^= (r = (g ^= (r = (h ^= (r = c + i | 0) << 7 | r >>> 25) + c | 0) << 9 | r >>> 23) + h | 0) << 13 | r >>> 19) + g | 0) << 18 | r >>> 14, p ^= (r = (d ^= (r = (s ^= (r = (w ^= (r = p + d | 0) << 7 | r >>> 25) + p | 0) << 9 | r >>> 23) + w | 0) << 13 | r >>> 19) + s | 0) << 18 | r >>> 14, v ^= (r = (y ^= (r = (u ^= (r = (o ^= (r = v + y | 0) << 7 | r >>> 25) + v | 0) << 9 | r >>> 23) + o | 0) << 13 | r >>> 19) + u | 0) << 18 | r >>> 14, a ^= (r = (o ^= (r = (s ^= (r = (i ^= (r = a + o | 0) << 7 | r >>> 25) + a | 0) << 9 | r >>> 23) + i | 0) << 13 | r >>> 19) + s | 0) << 18 | r >>> 14, c ^= (r = (b ^= (r = (u ^= (r = (d ^= (r = c + b | 0) << 7 | r >>> 25) + c | 0) << 9 | r >>> 23) + d | 0) << 13 | r >>> 19) + u | 0) << 18 | r >>> 14, p ^= (r = (h ^= (r = (l ^= (r = (y ^= (r = p + h | 0) << 7 | r >>> 25) + p | 0) << 9 | r >>> 23) + y | 0) << 13 | r >>> 19) + l | 0) << 18 | r >>> 14, v ^= (r = (w ^= (r = (g ^= (r = (m ^= (r = v + w | 0) << 7 | r >>> 25) + v | 0) << 9 | r >>> 23) + m | 0) << 13 | r >>> 19) + g | 0) << 18 | r >>> 14;
                            f[0] = a >>> 0 & 255, f[1] = a >>> 8 & 255, f[2] = a >>> 16 & 255, f[3] = a >>> 24 & 255, f[4] = c >>> 0 & 255, f[5] = c >>> 8 & 255, f[6] = c >>> 16 & 255, f[7] = c >>> 24 & 255, f[8] = p >>> 0 & 255, f[9] = p >>> 8 & 255, f[10] = p >>> 16 & 255, f[11] = p >>> 24 & 255, f[12] = v >>> 0 & 255, f[13] = v >>> 8 & 255, f[14] = v >>> 16 & 255, f[15] = v >>> 24 & 255, f[16] = d >>> 0 & 255, f[17] = d >>> 8 & 255, f[18] = d >>> 16 & 255, f[19] = d >>> 24 & 255, f[20] = u >>> 0 & 255, f[21] = u >>> 8 & 255, f[22] = u >>> 16 & 255, f[23] = u >>> 24 & 255, f[24] = l >>> 0 & 255, f[25] = l >>> 8 & 255, f[26] = l >>> 16 & 255, f[27] = l >>> 24 & 255, f[28] = h >>> 0 & 255, f[29] = h >>> 8 & 255, f[30] = h >>> 16 & 255, f[31] = h >>> 24 & 255;
                        }(f, e, t, n);
                    }
                    var v = new Uint8Array([
                        101,
                        120,
                        112,
                        97,
                        110,
                        100,
                        32,
                        51,
                        50,
                        45,
                        98,
                        121,
                        116,
                        101,
                        32,
                        107
                    ]);
                    function E(f, e, t, n, r, a, i) {
                        var s, o, b = new Uint8Array(16), c = new Uint8Array(64);
                        for(o = 0; o < 16; o++)b[o] = 0;
                        for(o = 0; o < 8; o++)b[o] = a[o];
                        for(; r >= 64;){
                            for(g(c, b, i, v), o = 0; o < 64; o++)f[e + o] = t[n + o] ^ c[o];
                            for(s = 1, o = 8; o < 16; o++)s = s + (255 & b[o]) | 0, b[o] = 255 & s, s >>>= 8;
                            r -= 64, e += 64, n += 64;
                        }
                        if (r > 0) for(g(c, b, i, v), o = 0; o < r; o++)f[e + o] = t[n + o] ^ c[o];
                        return 0;
                    }
                    function T(f, e, t, n, r) {
                        var a, i, s = new Uint8Array(16), o = new Uint8Array(64);
                        for(i = 0; i < 16; i++)s[i] = 0;
                        for(i = 0; i < 8; i++)s[i] = n[i];
                        for(; t >= 64;){
                            for(g(o, s, r, v), i = 0; i < 64; i++)f[e + i] = o[i];
                            for(a = 1, i = 8; i < 16; i++)a = a + (255 & s[i]) | 0, s[i] = 255 & a, a >>>= 8;
                            t -= 64, e += 64;
                        }
                        if (t > 0) for(g(o, s, r, v), i = 0; i < t; i++)f[e + i] = o[i];
                        return 0;
                    }
                    function A(f, e, t, n, r) {
                        var a = new Uint8Array(32);
                        w(a, n, r, v);
                        for(var i = new Uint8Array(8), s = 0; s < 8; s++)i[s] = n[s + 16];
                        return T(f, e, t, i, a);
                    }
                    function x(f, e, t, n, r, a, i) {
                        var s = new Uint8Array(32);
                        w(s, a, i, v);
                        for(var o = new Uint8Array(8), b = 0; b < 8; b++)o[b] = a[b + 16];
                        return E(f, e, t, n, r, o, s);
                    }
                    var I = function(f) {
                        var e, t, n, r, a, i, s, o;
                        this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.leftover = 0, this.fin = 0, e = 255 & f[0] | (255 & f[1]) << 8, this.r[0] = 8191 & e, t = 255 & f[2] | (255 & f[3]) << 8, this.r[1] = 8191 & (e >>> 13 | t << 3), n = 255 & f[4] | (255 & f[5]) << 8, this.r[2] = 7939 & (t >>> 10 | n << 6), r = 255 & f[6] | (255 & f[7]) << 8, this.r[3] = 8191 & (n >>> 7 | r << 9), a = 255 & f[8] | (255 & f[9]) << 8, this.r[4] = 255 & (r >>> 4 | a << 12), this.r[5] = a >>> 1 & 8190, i = 255 & f[10] | (255 & f[11]) << 8, this.r[6] = 8191 & (a >>> 14 | i << 2), s = 255 & f[12] | (255 & f[13]) << 8, this.r[7] = 8065 & (i >>> 11 | s << 5), o = 255 & f[14] | (255 & f[15]) << 8, this.r[8] = 8191 & (s >>> 8 | o << 8), this.r[9] = o >>> 5 & 127, this.pad[0] = 255 & f[16] | (255 & f[17]) << 8, this.pad[1] = 255 & f[18] | (255 & f[19]) << 8, this.pad[2] = 255 & f[20] | (255 & f[21]) << 8, this.pad[3] = 255 & f[22] | (255 & f[23]) << 8, this.pad[4] = 255 & f[24] | (255 & f[25]) << 8, this.pad[5] = 255 & f[26] | (255 & f[27]) << 8, this.pad[6] = 255 & f[28] | (255 & f[29]) << 8, this.pad[7] = 255 & f[30] | (255 & f[31]) << 8;
                    };
                    function k(f, e, t, n, r, a) {
                        var i = new I(a);
                        return i.update(t, n, r), i.finish(f, e), 0;
                    }
                    function O(f, e, t, n, r, a) {
                        var i = new Uint8Array(16);
                        return k(i, 0, t, n, r, a), y(f, e, i, 0);
                    }
                    function _(f, e, t, n, r) {
                        var a;
                        if (t < 32) return -1;
                        for(x(f, 0, e, 0, t, n, r), k(f, 16, f, 32, t - 32, f), a = 0; a < 16; a++)f[a] = 0;
                        return 0;
                    }
                    function P(f, e, t, n, r) {
                        var a, i = new Uint8Array(32);
                        if (t < 32) return -1;
                        if (A(i, 0, 32, n, r), 0 !== O(e, 16, e, 32, t - 32, i)) return -1;
                        for(x(f, 0, e, 0, t, n, r), a = 0; a < 32; a++)f[a] = 0;
                        return 0;
                    }
                    function S(f, e) {
                        var t;
                        for(t = 0; t < 16; t++)f[t] = 0 | e[t];
                    }
                    function R(f) {
                        var e, t, n = 1;
                        for(e = 0; e < 16; e++)t = f[e] + n + 65535, n = Math.floor(t / 65536), f[e] = t - 65536 * n;
                        f[0] += n - 1 + 37 * (n - 1);
                    }
                    function N(f, e, t) {
                        for(var n, r = ~(t - 1), a = 0; a < 16; a++)n = r & (f[a] ^ e[a]), f[a] ^= n, e[a] ^= n;
                    }
                    function C(f, t) {
                        var n, r, a, i = e(), s = e();
                        for(n = 0; n < 16; n++)s[n] = t[n];
                        for(R(s), R(s), R(s), r = 0; r < 2; r++){
                            for(i[0] = s[0] - 65517, n = 1; n < 15; n++)i[n] = s[n] - 65535 - (i[n - 1] >> 16 & 1), i[n - 1] &= 65535;
                            i[15] = s[15] - 32767 - (i[14] >> 16 & 1), a = i[15] >> 16 & 1, i[14] &= 65535, N(s, i, 1 - a);
                        }
                        for(n = 0; n < 16; n++)f[2 * n] = 255 & s[n], f[2 * n + 1] = s[n] >> 8;
                    }
                    function U(f, e) {
                        var t = new Uint8Array(32), n = new Uint8Array(32);
                        return C(t, f), C(n, e), m(t, 0, n, 0);
                    }
                    function L(f) {
                        var e = new Uint8Array(32);
                        return C(e, f), 1 & e[0];
                    }
                    function B(f, e) {
                        var t;
                        for(t = 0; t < 16; t++)f[t] = e[2 * t] + (e[2 * t + 1] << 8);
                        f[15] &= 32767;
                    }
                    function D(f, e, t) {
                        for(var n = 0; n < 16; n++)f[n] = e[n] + t[n];
                    }
                    function F(f, e, t) {
                        for(var n = 0; n < 16; n++)f[n] = e[n] - t[n];
                    }
                    function M(f, e, t) {
                        var n, r, a = 0, i = 0, s = 0, o = 0, b = 0, c = 0, d = 0, u = 0, l = 0, h = 0, p = 0, y = 0, m = 0, g = 0, w = 0, v = 0, E = 0, T = 0, A = 0, x = 0, I = 0, k = 0, O = 0, _ = 0, P = 0, S = 0, R = 0, N = 0, C = 0, U = 0, L = 0, B = t[0], D = t[1], F = t[2], M = t[3], j = t[4], K = t[5], z = t[6], V = t[7], G = t[8], H = t[9], W = t[10], $ = t[11], J = t[12], Y = t[13], q = t[14], Z = t[15];
                        a += (n = e[0]) * B, i += n * D, s += n * F, o += n * M, b += n * j, c += n * K, d += n * z, u += n * V, l += n * G, h += n * H, p += n * W, y += n * $, m += n * J, g += n * Y, w += n * q, v += n * Z, i += (n = e[1]) * B, s += n * D, o += n * F, b += n * M, c += n * j, d += n * K, u += n * z, l += n * V, h += n * G, p += n * H, y += n * W, m += n * $, g += n * J, w += n * Y, v += n * q, E += n * Z, s += (n = e[2]) * B, o += n * D, b += n * F, c += n * M, d += n * j, u += n * K, l += n * z, h += n * V, p += n * G, y += n * H, m += n * W, g += n * $, w += n * J, v += n * Y, E += n * q, T += n * Z, o += (n = e[3]) * B, b += n * D, c += n * F, d += n * M, u += n * j, l += n * K, h += n * z, p += n * V, y += n * G, m += n * H, g += n * W, w += n * $, v += n * J, E += n * Y, T += n * q, A += n * Z, b += (n = e[4]) * B, c += n * D, d += n * F, u += n * M, l += n * j, h += n * K, p += n * z, y += n * V, m += n * G, g += n * H, w += n * W, v += n * $, E += n * J, T += n * Y, A += n * q, x += n * Z, c += (n = e[5]) * B, d += n * D, u += n * F, l += n * M, h += n * j, p += n * K, y += n * z, m += n * V, g += n * G, w += n * H, v += n * W, E += n * $, T += n * J, A += n * Y, x += n * q, I += n * Z, d += (n = e[6]) * B, u += n * D, l += n * F, h += n * M, p += n * j, y += n * K, m += n * z, g += n * V, w += n * G, v += n * H, E += n * W, T += n * $, A += n * J, x += n * Y, I += n * q, k += n * Z, u += (n = e[7]) * B, l += n * D, h += n * F, p += n * M, y += n * j, m += n * K, g += n * z, w += n * V, v += n * G, E += n * H, T += n * W, A += n * $, x += n * J, I += n * Y, k += n * q, O += n * Z, l += (n = e[8]) * B, h += n * D, p += n * F, y += n * M, m += n * j, g += n * K, w += n * z, v += n * V, E += n * G, T += n * H, A += n * W, x += n * $, I += n * J, k += n * Y, O += n * q, _ += n * Z, h += (n = e[9]) * B, p += n * D, y += n * F, m += n * M, g += n * j, w += n * K, v += n * z, E += n * V, T += n * G, A += n * H, x += n * W, I += n * $, k += n * J, O += n * Y, _ += n * q, P += n * Z, p += (n = e[10]) * B, y += n * D, m += n * F, g += n * M, w += n * j, v += n * K, E += n * z, T += n * V, A += n * G, x += n * H, I += n * W, k += n * $, O += n * J, _ += n * Y, P += n * q, S += n * Z, y += (n = e[11]) * B, m += n * D, g += n * F, w += n * M, v += n * j, E += n * K, T += n * z, A += n * V, x += n * G, I += n * H, k += n * W, O += n * $, _ += n * J, P += n * Y, S += n * q, R += n * Z, m += (n = e[12]) * B, g += n * D, w += n * F, v += n * M, E += n * j, T += n * K, A += n * z, x += n * V, I += n * G, k += n * H, O += n * W, _ += n * $, P += n * J, S += n * Y, R += n * q, N += n * Z, g += (n = e[13]) * B, w += n * D, v += n * F, E += n * M, T += n * j, A += n * K, x += n * z, I += n * V, k += n * G, O += n * H, _ += n * W, P += n * $, S += n * J, R += n * Y, N += n * q, C += n * Z, w += (n = e[14]) * B, v += n * D, E += n * F, T += n * M, A += n * j, x += n * K, I += n * z, k += n * V, O += n * G, _ += n * H, P += n * W, S += n * $, R += n * J, N += n * Y, C += n * q, U += n * Z, v += (n = e[15]) * B, i += 38 * (T += n * F), s += 38 * (A += n * M), o += 38 * (x += n * j), b += 38 * (I += n * K), c += 38 * (k += n * z), d += 38 * (O += n * V), u += 38 * (_ += n * G), l += 38 * (P += n * H), h += 38 * (S += n * W), p += 38 * (R += n * $), y += 38 * (N += n * J), m += 38 * (C += n * Y), g += 38 * (U += n * q), w += 38 * (L += n * Z), a = (n = (a += 38 * (E += n * D)) + (r = 1) + 65535) - 65536 * (r = Math.floor(n / 65536)), i = (n = i + r + 65535) - 65536 * (r = Math.floor(n / 65536)), s = (n = s + r + 65535) - 65536 * (r = Math.floor(n / 65536)), o = (n = o + r + 65535) - 65536 * (r = Math.floor(n / 65536)), b = (n = b + r + 65535) - 65536 * (r = Math.floor(n / 65536)), c = (n = c + r + 65535) - 65536 * (r = Math.floor(n / 65536)), d = (n = d + r + 65535) - 65536 * (r = Math.floor(n / 65536)), u = (n = u + r + 65535) - 65536 * (r = Math.floor(n / 65536)), l = (n = l + r + 65535) - 65536 * (r = Math.floor(n / 65536)), h = (n = h + r + 65535) - 65536 * (r = Math.floor(n / 65536)), p = (n = p + r + 65535) - 65536 * (r = Math.floor(n / 65536)), y = (n = y + r + 65535) - 65536 * (r = Math.floor(n / 65536)), m = (n = m + r + 65535) - 65536 * (r = Math.floor(n / 65536)), g = (n = g + r + 65535) - 65536 * (r = Math.floor(n / 65536)), w = (n = w + r + 65535) - 65536 * (r = Math.floor(n / 65536)), v = (n = v + r + 65535) - 65536 * (r = Math.floor(n / 65536)), a = (n = (a += r - 1 + 37 * (r - 1)) + (r = 1) + 65535) - 65536 * (r = Math.floor(n / 65536)), i = (n = i + r + 65535) - 65536 * (r = Math.floor(n / 65536)), s = (n = s + r + 65535) - 65536 * (r = Math.floor(n / 65536)), o = (n = o + r + 65535) - 65536 * (r = Math.floor(n / 65536)), b = (n = b + r + 65535) - 65536 * (r = Math.floor(n / 65536)), c = (n = c + r + 65535) - 65536 * (r = Math.floor(n / 65536)), d = (n = d + r + 65535) - 65536 * (r = Math.floor(n / 65536)), u = (n = u + r + 65535) - 65536 * (r = Math.floor(n / 65536)), l = (n = l + r + 65535) - 65536 * (r = Math.floor(n / 65536)), h = (n = h + r + 65535) - 65536 * (r = Math.floor(n / 65536)), p = (n = p + r + 65535) - 65536 * (r = Math.floor(n / 65536)), y = (n = y + r + 65535) - 65536 * (r = Math.floor(n / 65536)), m = (n = m + r + 65535) - 65536 * (r = Math.floor(n / 65536)), g = (n = g + r + 65535) - 65536 * (r = Math.floor(n / 65536)), w = (n = w + r + 65535) - 65536 * (r = Math.floor(n / 65536)), v = (n = v + r + 65535) - 65536 * (r = Math.floor(n / 65536)), a += r - 1 + 37 * (r - 1), f[0] = a, f[1] = i, f[2] = s, f[3] = o, f[4] = b, f[5] = c, f[6] = d, f[7] = u, f[8] = l, f[9] = h, f[10] = p, f[11] = y, f[12] = m, f[13] = g, f[14] = w, f[15] = v;
                    }
                    function j(f, e) {
                        M(f, e, e);
                    }
                    function K(f, t) {
                        var n, r = e();
                        for(n = 0; n < 16; n++)r[n] = t[n];
                        for(n = 253; n >= 0; n--)j(r, r), 2 !== n && 4 !== n && M(r, r, t);
                        for(n = 0; n < 16; n++)f[n] = r[n];
                    }
                    function z(f, t) {
                        var n, r = e();
                        for(n = 0; n < 16; n++)r[n] = t[n];
                        for(n = 250; n >= 0; n--)j(r, r), 1 !== n && M(r, r, t);
                        for(n = 0; n < 16; n++)f[n] = r[n];
                    }
                    function V(f, t, n) {
                        var r, a, i = new Uint8Array(32), s = new Float64Array(80), b = e(), c = e(), d = e(), u = e(), l = e(), h = e();
                        for(a = 0; a < 31; a++)i[a] = t[a];
                        for(i[31] = 127 & t[31] | 64, i[0] &= 248, B(s, n), a = 0; a < 16; a++)c[a] = s[a], u[a] = b[a] = d[a] = 0;
                        for(b[0] = u[0] = 1, a = 254; a >= 0; --a)N(b, c, r = i[a >>> 3] >>> (7 & a) & 1), N(d, u, r), D(l, b, d), F(b, b, d), D(d, c, u), F(c, c, u), j(u, l), j(h, b), M(b, d, b), M(d, c, l), D(l, b, d), F(b, b, d), j(c, b), F(d, u, h), M(b, d, o), D(b, b, u), M(d, d, b), M(b, u, h), M(u, c, s), j(c, l), N(b, c, r), N(d, u, r);
                        for(a = 0; a < 16; a++)s[a + 16] = b[a], s[a + 32] = d[a], s[a + 48] = c[a], s[a + 64] = u[a];
                        var p = s.subarray(32), y = s.subarray(16);
                        return K(p, p), M(y, y, p), C(f, y), 0;
                    }
                    function G(f, e) {
                        return V(f, e, a);
                    }
                    function H(f, e) {
                        return n(e, 32), G(f, e);
                    }
                    function W(f, e, t) {
                        var n = new Uint8Array(32);
                        return V(n, t, e), w(f, r, n, v);
                    }
                    I.prototype.blocks = function(f, e, t) {
                        for(var n, r, a, i, s, o, b, c, d, u, l, h, p, y, m, g, w, v, E, T = this.fin ? 0 : 2048, A = this.h[0], x = this.h[1], I = this.h[2], k = this.h[3], O = this.h[4], _ = this.h[5], P = this.h[6], S = this.h[7], R = this.h[8], N = this.h[9], C = this.r[0], U = this.r[1], L = this.r[2], B = this.r[3], D = this.r[4], F = this.r[5], M = this.r[6], j = this.r[7], K = this.r[8], z = this.r[9]; t >= 16;)u = d = 0, u += (A += 8191 & (n = 255 & f[e + 0] | (255 & f[e + 1]) << 8)) * C, u += (x += 8191 & (n >>> 13 | (r = 255 & f[e + 2] | (255 & f[e + 3]) << 8) << 3)) * (5 * z), u += (I += 8191 & (r >>> 10 | (a = 255 & f[e + 4] | (255 & f[e + 5]) << 8) << 6)) * (5 * K), u += (k += 8191 & (a >>> 7 | (i = 255 & f[e + 6] | (255 & f[e + 7]) << 8) << 9)) * (5 * j), d = (u += (O += 8191 & (i >>> 4 | (s = 255 & f[e + 8] | (255 & f[e + 9]) << 8) << 12)) * (5 * M)) >>> 13, u &= 8191, u += (_ += s >>> 1 & 8191) * (5 * F), u += (P += 8191 & (s >>> 14 | (o = 255 & f[e + 10] | (255 & f[e + 11]) << 8) << 2)) * (5 * D), u += (S += 8191 & (o >>> 11 | (b = 255 & f[e + 12] | (255 & f[e + 13]) << 8) << 5)) * (5 * B), u += (R += 8191 & (b >>> 8 | (c = 255 & f[e + 14] | (255 & f[e + 15]) << 8) << 8)) * (5 * L), l = d += (u += (N += c >>> 5 | T) * (5 * U)) >>> 13, l += A * U, l += x * C, l += I * (5 * z), l += k * (5 * K), d = (l += O * (5 * j)) >>> 13, l &= 8191, l += _ * (5 * M), l += P * (5 * F), l += S * (5 * D), l += R * (5 * B), d += (l += N * (5 * L)) >>> 13, l &= 8191, h = d, h += A * L, h += x * U, h += I * C, h += k * (5 * z), d = (h += O * (5 * K)) >>> 13, h &= 8191, h += _ * (5 * j), h += P * (5 * M), h += S * (5 * F), h += R * (5 * D), p = d += (h += N * (5 * B)) >>> 13, p += A * B, p += x * L, p += I * U, p += k * C, d = (p += O * (5 * z)) >>> 13, p &= 8191, p += _ * (5 * K), p += P * (5 * j), p += S * (5 * M), p += R * (5 * F), y = d += (p += N * (5 * D)) >>> 13, y += A * D, y += x * B, y += I * L, y += k * U, d = (y += O * C) >>> 13, y &= 8191, y += _ * (5 * z), y += P * (5 * K), y += S * (5 * j), y += R * (5 * M), m = d += (y += N * (5 * F)) >>> 13, m += A * F, m += x * D, m += I * B, m += k * L, d = (m += O * U) >>> 13, m &= 8191, m += _ * C, m += P * (5 * z), m += S * (5 * K), m += R * (5 * j), g = d += (m += N * (5 * M)) >>> 13, g += A * M, g += x * F, g += I * D, g += k * B, d = (g += O * L) >>> 13, g &= 8191, g += _ * U, g += P * C, g += S * (5 * z), g += R * (5 * K), w = d += (g += N * (5 * j)) >>> 13, w += A * j, w += x * M, w += I * F, w += k * D, d = (w += O * B) >>> 13, w &= 8191, w += _ * L, w += P * U, w += S * C, w += R * (5 * z), v = d += (w += N * (5 * K)) >>> 13, v += A * K, v += x * j, v += I * M, v += k * F, d = (v += O * D) >>> 13, v &= 8191, v += _ * B, v += P * L, v += S * U, v += R * C, E = d += (v += N * (5 * z)) >>> 13, E += A * z, E += x * K, E += I * j, E += k * M, d = (E += O * F) >>> 13, E &= 8191, E += _ * D, E += P * B, E += S * L, E += R * U, A = u = 8191 & (d = (d = ((d += (E += N * C) >>> 13) << 2) + d | 0) + (u &= 8191) | 0), x = l += d >>>= 13, I = h &= 8191, k = p &= 8191, O = y &= 8191, _ = m &= 8191, P = g &= 8191, S = w &= 8191, R = v &= 8191, N = E &= 8191, e += 16, t -= 16;
                        this.h[0] = A, this.h[1] = x, this.h[2] = I, this.h[3] = k, this.h[4] = O, this.h[5] = _, this.h[6] = P, this.h[7] = S, this.h[8] = R, this.h[9] = N;
                    }, I.prototype.finish = function(f, e) {
                        var t, n, r, a, i = new Uint16Array(10);
                        if (this.leftover) {
                            for(a = this.leftover, this.buffer[a++] = 1; a < 16; a++)this.buffer[a] = 0;
                            this.fin = 1, this.blocks(this.buffer, 0, 16);
                        }
                        for(t = this.h[1] >>> 13, this.h[1] &= 8191, a = 2; a < 10; a++)this.h[a] += t, t = this.h[a] >>> 13, this.h[a] &= 8191;
                        for(this.h[0] += 5 * t, t = this.h[0] >>> 13, this.h[0] &= 8191, this.h[1] += t, t = this.h[1] >>> 13, this.h[1] &= 8191, this.h[2] += t, i[0] = this.h[0] + 5, t = i[0] >>> 13, i[0] &= 8191, a = 1; a < 10; a++)i[a] = this.h[a] + t, t = i[a] >>> 13, i[a] &= 8191;
                        for(i[9] -= 8192, n = (1 ^ t) - 1, a = 0; a < 10; a++)i[a] &= n;
                        for(n = ~n, a = 0; a < 10; a++)this.h[a] = this.h[a] & n | i[a];
                        for(this.h[0] = 65535 & (this.h[0] | this.h[1] << 13), this.h[1] = 65535 & (this.h[1] >>> 3 | this.h[2] << 10), this.h[2] = 65535 & (this.h[2] >>> 6 | this.h[3] << 7), this.h[3] = 65535 & (this.h[3] >>> 9 | this.h[4] << 4), this.h[4] = 65535 & (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14), this.h[5] = 65535 & (this.h[6] >>> 2 | this.h[7] << 11), this.h[6] = 65535 & (this.h[7] >>> 5 | this.h[8] << 8), this.h[7] = 65535 & (this.h[8] >>> 8 | this.h[9] << 5), r = this.h[0] + this.pad[0], this.h[0] = 65535 & r, a = 1; a < 8; a++)r = (this.h[a] + this.pad[a] | 0) + (r >>> 16) | 0, this.h[a] = 65535 & r;
                        f[e + 0] = this.h[0] >>> 0 & 255, f[e + 1] = this.h[0] >>> 8 & 255, f[e + 2] = this.h[1] >>> 0 & 255, f[e + 3] = this.h[1] >>> 8 & 255, f[e + 4] = this.h[2] >>> 0 & 255, f[e + 5] = this.h[2] >>> 8 & 255, f[e + 6] = this.h[3] >>> 0 & 255, f[e + 7] = this.h[3] >>> 8 & 255, f[e + 8] = this.h[4] >>> 0 & 255, f[e + 9] = this.h[4] >>> 8 & 255, f[e + 10] = this.h[5] >>> 0 & 255, f[e + 11] = this.h[5] >>> 8 & 255, f[e + 12] = this.h[6] >>> 0 & 255, f[e + 13] = this.h[6] >>> 8 & 255, f[e + 14] = this.h[7] >>> 0 & 255, f[e + 15] = this.h[7] >>> 8 & 255;
                    }, I.prototype.update = function(f, e, t) {
                        var n, r;
                        if (this.leftover) {
                            for((r = 16 - this.leftover) > t && (r = t), n = 0; n < r; n++)this.buffer[this.leftover + n] = f[e + n];
                            if (t -= r, e += r, this.leftover += r, this.leftover < 16) return;
                            this.blocks(this.buffer, 0, 16), this.leftover = 0;
                        }
                        if (t >= 16 && (r = t - t % 16, this.blocks(f, e, r), e += r, t -= r), t) {
                            for(n = 0; n < t; n++)this.buffer[this.leftover + n] = f[e + n];
                            this.leftover += t;
                        }
                    };
                    var $ = _, J = P, Y = [
                        1116352408,
                        3609767458,
                        1899447441,
                        602891725,
                        3049323471,
                        3964484399,
                        3921009573,
                        2173295548,
                        961987163,
                        4081628472,
                        1508970993,
                        3053834265,
                        2453635748,
                        2937671579,
                        2870763221,
                        3664609560,
                        3624381080,
                        2734883394,
                        310598401,
                        1164996542,
                        607225278,
                        1323610764,
                        1426881987,
                        3590304994,
                        1925078388,
                        4068182383,
                        2162078206,
                        991336113,
                        2614888103,
                        633803317,
                        3248222580,
                        3479774868,
                        3835390401,
                        2666613458,
                        4022224774,
                        944711139,
                        264347078,
                        2341262773,
                        604807628,
                        2007800933,
                        770255983,
                        1495990901,
                        1249150122,
                        1856431235,
                        1555081692,
                        3175218132,
                        1996064986,
                        2198950837,
                        2554220882,
                        3999719339,
                        2821834349,
                        766784016,
                        2952996808,
                        2566594879,
                        3210313671,
                        3203337956,
                        3336571891,
                        1034457026,
                        3584528711,
                        2466948901,
                        113926993,
                        3758326383,
                        338241895,
                        168717936,
                        666307205,
                        1188179964,
                        773529912,
                        1546045734,
                        1294757372,
                        1522805485,
                        1396182291,
                        2643833823,
                        1695183700,
                        2343527390,
                        1986661051,
                        1014477480,
                        2177026350,
                        1206759142,
                        2456956037,
                        344077627,
                        2730485921,
                        1290863460,
                        2820302411,
                        3158454273,
                        3259730800,
                        3505952657,
                        3345764771,
                        106217008,
                        3516065817,
                        3606008344,
                        3600352804,
                        1432725776,
                        4094571909,
                        1467031594,
                        275423344,
                        851169720,
                        430227734,
                        3100823752,
                        506948616,
                        1363258195,
                        659060556,
                        3750685593,
                        883997877,
                        3785050280,
                        958139571,
                        3318307427,
                        1322822218,
                        3812723403,
                        1537002063,
                        2003034995,
                        1747873779,
                        3602036899,
                        1955562222,
                        1575990012,
                        2024104815,
                        1125592928,
                        2227730452,
                        2716904306,
                        2361852424,
                        442776044,
                        2428436474,
                        593698344,
                        2756734187,
                        3733110249,
                        3204031479,
                        2999351573,
                        3329325298,
                        3815920427,
                        3391569614,
                        3928383900,
                        3515267271,
                        566280711,
                        3940187606,
                        3454069534,
                        4118630271,
                        4000239992,
                        116418474,
                        1914138554,
                        174292421,
                        2731055270,
                        289380356,
                        3203993006,
                        460393269,
                        320620315,
                        685471733,
                        587496836,
                        852142971,
                        1086792851,
                        1017036298,
                        365543100,
                        1126000580,
                        2618297676,
                        1288033470,
                        3409855158,
                        1501505948,
                        4234509866,
                        1607167915,
                        987167468,
                        1816402316,
                        1246189591
                    ];
                    function q(f, e, t, n) {
                        for(var r, a, i, s, o, b, c, d, u, l, h, p, y, m, g, w, v, E, T, A, x, I, k, O, _, P, S = new Int32Array(16), R = new Int32Array(16), N = f[0], C = f[1], U = f[2], L = f[3], B = f[4], D = f[5], F = f[6], M = f[7], j = e[0], K = e[1], z = e[2], V = e[3], G = e[4], H = e[5], W = e[6], $ = e[7], J = 0; n >= 128;){
                            for(T = 0; T < 16; T++)A = 8 * T + J, S[T] = t[A + 0] << 24 | t[A + 1] << 16 | t[A + 2] << 8 | t[A + 3], R[T] = t[A + 4] << 24 | t[A + 5] << 16 | t[A + 6] << 8 | t[A + 7];
                            for(T = 0; T < 80; T++)if (r = N, a = C, i = U, s = L, o = B, b = D, c = F, u = j, l = K, h = z, p = V, y = G, m = H, g = W, k = 65535 & (I = $), O = I >>> 16, _ = 65535 & (x = M), P = x >>> 16, k += 65535 & (I = (G >>> 14 | B << 18) ^ (G >>> 18 | B << 14) ^ (B >>> 9 | G << 23)), O += I >>> 16, _ += 65535 & (x = (B >>> 14 | G << 18) ^ (B >>> 18 | G << 14) ^ (G >>> 9 | B << 23)), P += x >>> 16, k += 65535 & (I = G & H ^ ~G & W), O += I >>> 16, _ += 65535 & (x = B & D ^ ~B & F), P += x >>> 16, k += 65535 & (I = Y[2 * T + 1]), O += I >>> 16, _ += 65535 & (x = Y[2 * T]), P += x >>> 16, x = S[T % 16], O += (I = R[T % 16]) >>> 16, _ += 65535 & x, P += x >>> 16, _ += (O += (k += 65535 & I) >>> 16) >>> 16, k = 65535 & (I = E = 65535 & k | O << 16), O = I >>> 16, _ = 65535 & (x = v = 65535 & _ | (P += _ >>> 16) << 16), P = x >>> 16, k += 65535 & (I = (j >>> 28 | N << 4) ^ (N >>> 2 | j << 30) ^ (N >>> 7 | j << 25)), O += I >>> 16, _ += 65535 & (x = (N >>> 28 | j << 4) ^ (j >>> 2 | N << 30) ^ (j >>> 7 | N << 25)), P += x >>> 16, O += (I = j & K ^ j & z ^ K & z) >>> 16, _ += 65535 & (x = N & C ^ N & U ^ C & U), P += x >>> 16, d = 65535 & (_ += (O += (k += 65535 & I) >>> 16) >>> 16) | (P += _ >>> 16) << 16, w = 65535 & k | O << 16, k = 65535 & (I = p), O = I >>> 16, _ = 65535 & (x = s), P = x >>> 16, O += (I = E) >>> 16, _ += 65535 & (x = v), P += x >>> 16, C = r, U = a, L = i, B = s = 65535 & (_ += (O += (k += 65535 & I) >>> 16) >>> 16) | (P += _ >>> 16) << 16, D = o, F = b, M = c, N = d, K = u, z = l, V = h, G = p = 65535 & k | O << 16, H = y, W = m, $ = g, j = w, T % 16 == 15) for(A = 0; A < 16; A++)x = S[A], k = 65535 & (I = R[A]), O = I >>> 16, _ = 65535 & x, P = x >>> 16, x = S[(A + 9) % 16], k += 65535 & (I = R[(A + 9) % 16]), O += I >>> 16, _ += 65535 & x, P += x >>> 16, v = S[(A + 1) % 16], k += 65535 & (I = ((E = R[(A + 1) % 16]) >>> 1 | v << 31) ^ (E >>> 8 | v << 24) ^ (E >>> 7 | v << 25)), O += I >>> 16, _ += 65535 & (x = (v >>> 1 | E << 31) ^ (v >>> 8 | E << 24) ^ v >>> 7), P += x >>> 16, v = S[(A + 14) % 16], O += (I = ((E = R[(A + 14) % 16]) >>> 19 | v << 13) ^ (v >>> 29 | E << 3) ^ (E >>> 6 | v << 26)) >>> 16, _ += 65535 & (x = (v >>> 19 | E << 13) ^ (E >>> 29 | v << 3) ^ v >>> 6), P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, S[A] = 65535 & _ | P << 16, R[A] = 65535 & k | O << 16;
                            k = 65535 & (I = j), O = I >>> 16, _ = 65535 & (x = N), P = x >>> 16, x = f[0], O += (I = e[0]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[0] = N = 65535 & _ | P << 16, e[0] = j = 65535 & k | O << 16, k = 65535 & (I = K), O = I >>> 16, _ = 65535 & (x = C), P = x >>> 16, x = f[1], O += (I = e[1]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[1] = C = 65535 & _ | P << 16, e[1] = K = 65535 & k | O << 16, k = 65535 & (I = z), O = I >>> 16, _ = 65535 & (x = U), P = x >>> 16, x = f[2], O += (I = e[2]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[2] = U = 65535 & _ | P << 16, e[2] = z = 65535 & k | O << 16, k = 65535 & (I = V), O = I >>> 16, _ = 65535 & (x = L), P = x >>> 16, x = f[3], O += (I = e[3]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[3] = L = 65535 & _ | P << 16, e[3] = V = 65535 & k | O << 16, k = 65535 & (I = G), O = I >>> 16, _ = 65535 & (x = B), P = x >>> 16, x = f[4], O += (I = e[4]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[4] = B = 65535 & _ | P << 16, e[4] = G = 65535 & k | O << 16, k = 65535 & (I = H), O = I >>> 16, _ = 65535 & (x = D), P = x >>> 16, x = f[5], O += (I = e[5]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[5] = D = 65535 & _ | P << 16, e[5] = H = 65535 & k | O << 16, k = 65535 & (I = W), O = I >>> 16, _ = 65535 & (x = F), P = x >>> 16, x = f[6], O += (I = e[6]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[6] = F = 65535 & _ | P << 16, e[6] = W = 65535 & k | O << 16, k = 65535 & (I = $), O = I >>> 16, _ = 65535 & (x = M), P = x >>> 16, x = f[7], O += (I = e[7]) >>> 16, _ += 65535 & x, P += x >>> 16, P += (_ += (O += (k += 65535 & I) >>> 16) >>> 16) >>> 16, f[7] = M = 65535 & _ | P << 16, e[7] = $ = 65535 & k | O << 16, J += 128, n -= 128;
                        }
                        return n;
                    }
                    function Z(f, e, t) {
                        var n, r = new Int32Array(8), a = new Int32Array(8), i = new Uint8Array(256), s = t;
                        for(r[0] = 1779033703, r[1] = 3144134277, r[2] = 1013904242, r[3] = 2773480762, r[4] = 1359893119, r[5] = 2600822924, r[6] = 528734635, r[7] = 1541459225, a[0] = 4089235720, a[1] = 2227873595, a[2] = 4271175723, a[3] = 1595750129, a[4] = 2917565137, a[5] = 725511199, a[6] = 4215389547, a[7] = 327033209, q(r, a, e, t), t %= 128, n = 0; n < t; n++)i[n] = e[s - t + n];
                        for(i[t] = 128, i[(t = 256 - 128 * (t < 112 ? 1 : 0)) - 9] = 0, h(i, t - 8, s / 536870912 | 0, s << 3), q(r, a, i, t), n = 0; n < 8; n++)h(f, 8 * n, r[n], a[n]);
                        return 0;
                    }
                    function X(f, t) {
                        var n = e(), r = e(), a = e(), i = e(), s = e(), o = e(), b = e(), d = e(), u = e();
                        F(n, f[1], f[0]), F(u, t[1], t[0]), M(n, n, u), D(r, f[0], f[1]), D(u, t[0], t[1]), M(r, r, u), M(a, f[3], t[3]), M(a, a, c), M(i, f[2], t[2]), D(i, i, i), F(s, r, n), F(o, i, a), D(b, i, a), D(d, r, n), M(f[0], s, o), M(f[1], d, b), M(f[2], b, o), M(f[3], s, d);
                    }
                    function Q(f, e, t) {
                        var n;
                        for(n = 0; n < 4; n++)N(f[n], e[n], t);
                    }
                    function ff(f, t) {
                        var n = e(), r = e(), a = e();
                        K(a, t[2]), M(n, t[0], a), M(r, t[1], a), C(f, r), f[31] ^= L(n) << 7;
                    }
                    function ef(f, e, t) {
                        var n, r;
                        for(S(f[0], i), S(f[1], s), S(f[2], s), S(f[3], i), r = 255; r >= 0; --r)Q(f, e, n = t[r / 8 | 0] >> (7 & r) & 1), X(e, f), X(f, f), Q(f, e, n);
                    }
                    function tf(f, t) {
                        var n = [
                            e(),
                            e(),
                            e(),
                            e()
                        ];
                        S(n[0], d), S(n[1], u), S(n[2], s), M(n[3], d, u), ef(f, n, t);
                    }
                    function nf(f, t, r) {
                        var a, i = new Uint8Array(64), s = [
                            e(),
                            e(),
                            e(),
                            e()
                        ];
                        for(r || n(t, 32), Z(i, t, 32), i[0] &= 248, i[31] &= 127, i[31] |= 64, tf(s, i), ff(f, s), a = 0; a < 32; a++)t[a + 32] = f[a];
                        return 0;
                    }
                    var rf = new Float64Array([
                        237,
                        211,
                        245,
                        92,
                        26,
                        99,
                        18,
                        88,
                        214,
                        156,
                        247,
                        162,
                        222,
                        249,
                        222,
                        20,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        16
                    ]);
                    function af(f, e) {
                        var t, n, r, a;
                        for(n = 63; n >= 32; --n){
                            for(t = 0, r = n - 32, a = n - 12; r < a; ++r)e[r] += t - 16 * e[n] * rf[r - (n - 32)], t = Math.floor((e[r] + 128) / 256), e[r] -= 256 * t;
                            e[r] += t, e[n] = 0;
                        }
                        for(t = 0, r = 0; r < 32; r++)e[r] += t - (e[31] >> 4) * rf[r], t = e[r] >> 8, e[r] &= 255;
                        for(r = 0; r < 32; r++)e[r] -= t * rf[r];
                        for(n = 0; n < 32; n++)e[n + 1] += e[n] >> 8, f[n] = 255 & e[n];
                    }
                    function sf(f) {
                        var e, t = new Float64Array(64);
                        for(e = 0; e < 64; e++)t[e] = f[e];
                        for(e = 0; e < 64; e++)f[e] = 0;
                        af(f, t);
                    }
                    function of(f, t, n, r) {
                        var a, i, s = new Uint8Array(64), o = new Uint8Array(64), b = new Uint8Array(64), c = new Float64Array(64), d = [
                            e(),
                            e(),
                            e(),
                            e()
                        ];
                        Z(s, r, 32), s[0] &= 248, s[31] &= 127, s[31] |= 64;
                        var u = n + 64;
                        for(a = 0; a < n; a++)f[64 + a] = t[a];
                        for(a = 0; a < 32; a++)f[32 + a] = s[32 + a];
                        for(Z(b, f.subarray(32), n + 32), sf(b), tf(d, b), ff(f, d), a = 32; a < 64; a++)f[a] = r[a];
                        for(Z(o, f, n + 64), sf(o), a = 0; a < 64; a++)c[a] = 0;
                        for(a = 0; a < 32; a++)c[a] = b[a];
                        for(a = 0; a < 32; a++)for(i = 0; i < 32; i++)c[a + i] += o[a] * s[i];
                        return af(f.subarray(32), c), u;
                    }
                    function bf(f, t, n, r) {
                        var a, o = new Uint8Array(32), c = new Uint8Array(64), d = [
                            e(),
                            e(),
                            e(),
                            e()
                        ], u = [
                            e(),
                            e(),
                            e(),
                            e()
                        ];
                        if (n < 64) return -1;
                        if (function(f, t) {
                            var n = e(), r = e(), a = e(), o = e(), c = e(), d = e(), u = e();
                            return S(f[2], s), B(f[1], t), j(a, f[1]), M(o, a, b), F(a, a, f[2]), D(o, f[2], o), j(c, o), j(d, c), M(u, d, c), M(n, u, a), M(n, n, o), z(n, n), M(n, n, a), M(n, n, o), M(n, n, o), M(f[0], n, o), j(r, f[0]), M(r, r, o), U(r, a) && M(f[0], f[0], l), j(r, f[0]), M(r, r, o), U(r, a) ? -1 : (L(f[0]) === t[31] >> 7 && F(f[0], i, f[0]), M(f[3], f[0], f[1]), 0);
                        }(u, r)) return -1;
                        for(a = 0; a < n; a++)f[a] = t[a];
                        for(a = 0; a < 32; a++)f[a + 32] = r[a];
                        if (Z(c, f, n), sf(c), ef(d, u, c), tf(u, t.subarray(32)), X(d, u), ff(o, d), n -= 64, m(t, 0, o, 0)) {
                            for(a = 0; a < n; a++)f[a] = 0;
                            return -1;
                        }
                        for(a = 0; a < n; a++)f[a] = t[a + 64];
                        return n;
                    }
                    var cf, df = 64, uf = 32, lf = 64;
                    function hf(f, e) {
                        if (32 !== f.length) throw new Error("bad key size");
                        if (24 !== e.length) throw new Error("bad nonce size");
                    }
                    function pf() {
                        for(var f = 0; f < arguments.length; f++)if (!(arguments[f] instanceof Uint8Array)) throw new TypeError("unexpected type, use Uint8Array");
                    }
                    function yf(f) {
                        for(var e = 0; e < f.length; e++)f[e] = 0;
                    }
                    f.lowlevel = {
                        crypto_core_hsalsa20: w,
                        crypto_stream_xor: x,
                        crypto_stream: A,
                        crypto_stream_salsa20_xor: E,
                        crypto_stream_salsa20: T,
                        crypto_onetimeauth: k,
                        crypto_onetimeauth_verify: O,
                        crypto_verify_16: y,
                        crypto_verify_32: m,
                        crypto_secretbox: _,
                        crypto_secretbox_open: P,
                        crypto_scalarmult: V,
                        crypto_scalarmult_base: G,
                        crypto_box_beforenm: W,
                        crypto_box_afternm: $,
                        crypto_box: function(f, e, t, n, r, a) {
                            var i = new Uint8Array(32);
                            return W(i, r, a), $(f, e, t, n, i);
                        },
                        crypto_box_open: function(f, e, t, n, r, a) {
                            var i = new Uint8Array(32);
                            return W(i, r, a), J(f, e, t, n, i);
                        },
                        crypto_box_keypair: H,
                        crypto_hash: Z,
                        crypto_sign: of,
                        crypto_sign_keypair: nf,
                        crypto_sign_open: bf,
                        crypto_secretbox_KEYBYTES: 32,
                        crypto_secretbox_NONCEBYTES: 24,
                        crypto_secretbox_ZEROBYTES: 32,
                        crypto_secretbox_BOXZEROBYTES: 16,
                        crypto_scalarmult_BYTES: 32,
                        crypto_scalarmult_SCALARBYTES: 32,
                        crypto_box_PUBLICKEYBYTES: 32,
                        crypto_box_SECRETKEYBYTES: 32,
                        crypto_box_BEFORENMBYTES: 32,
                        crypto_box_NONCEBYTES: 24,
                        crypto_box_ZEROBYTES: 32,
                        crypto_box_BOXZEROBYTES: 16,
                        crypto_sign_BYTES: df,
                        crypto_sign_PUBLICKEYBYTES: uf,
                        crypto_sign_SECRETKEYBYTES: lf,
                        crypto_sign_SEEDBYTES: 32,
                        crypto_hash_BYTES: 64,
                        gf: e,
                        D: b,
                        L: rf,
                        pack25519: C,
                        unpack25519: B,
                        M,
                        A: D,
                        S: j,
                        Z: F,
                        pow2523: z,
                        add: X,
                        set25519: S,
                        modL: af,
                        scalarmult: ef,
                        scalarbase: tf
                    }, f.randomBytes = function(f) {
                        var e = new Uint8Array(f);
                        return n(e, f), e;
                    }, f.secretbox = function(f, e, t) {
                        pf(f, e, t), hf(t, e);
                        for(var n = new Uint8Array(32 + f.length), r = new Uint8Array(n.length), a = 0; a < f.length; a++)n[a + 32] = f[a];
                        return _(r, n, n.length, e, t), r.subarray(16);
                    }, f.secretbox.open = function(f, e, t) {
                        pf(f, e, t), hf(t, e);
                        for(var n = new Uint8Array(16 + f.length), r = new Uint8Array(n.length), a = 0; a < f.length; a++)n[a + 16] = f[a];
                        return n.length < 32 || 0 !== P(r, n, n.length, e, t) ? null : r.subarray(32);
                    }, f.secretbox.keyLength = 32, f.secretbox.nonceLength = 24, f.secretbox.overheadLength = 16, f.scalarMult = function(f, e) {
                        if (pf(f, e), 32 !== f.length) throw new Error("bad n size");
                        if (32 !== e.length) throw new Error("bad p size");
                        var t = new Uint8Array(32);
                        return V(t, f, e), t;
                    }, f.scalarMult.base = function(f) {
                        if (pf(f), 32 !== f.length) throw new Error("bad n size");
                        var e = new Uint8Array(32);
                        return G(e, f), e;
                    }, f.scalarMult.scalarLength = 32, f.scalarMult.groupElementLength = 32, f.box = function(e, t, n, r) {
                        var a = f.box.before(n, r);
                        return f.secretbox(e, t, a);
                    }, f.box.before = function(f, e) {
                        pf(f, e), function(f, e) {
                            if (32 !== f.length) throw new Error("bad public key size");
                            if (32 !== e.length) throw new Error("bad secret key size");
                        }(f, e);
                        var t = new Uint8Array(32);
                        return W(t, f, e), t;
                    }, f.box.after = f.secretbox, f.box.open = function(e, t, n, r) {
                        var a = f.box.before(n, r);
                        return f.secretbox.open(e, t, a);
                    }, f.box.open.after = f.secretbox.open, f.box.keyPair = function() {
                        var f = new Uint8Array(32), e = new Uint8Array(32);
                        return H(f, e), {
                            publicKey: f,
                            secretKey: e
                        };
                    }, f.box.keyPair.fromSecretKey = function(f) {
                        if (pf(f), 32 !== f.length) throw new Error("bad secret key size");
                        var e = new Uint8Array(32);
                        return G(e, f), {
                            publicKey: e,
                            secretKey: new Uint8Array(f)
                        };
                    }, f.box.publicKeyLength = 32, f.box.secretKeyLength = 32, f.box.sharedKeyLength = 32, f.box.nonceLength = 24, f.box.overheadLength = f.secretbox.overheadLength, f.sign = function(f, e) {
                        if (pf(f, e), e.length !== lf) throw new Error("bad secret key size");
                        var t = new Uint8Array(df + f.length);
                        return of(t, f, f.length, e), t;
                    }, f.sign.open = function(f, e) {
                        if (pf(f, e), e.length !== uf) throw new Error("bad public key size");
                        var t = new Uint8Array(f.length), n = bf(t, f, f.length, e);
                        if (n < 0) return null;
                        for(var r = new Uint8Array(n), a = 0; a < r.length; a++)r[a] = t[a];
                        return r;
                    }, f.sign.detached = function(e, t) {
                        for(var n = f.sign(e, t), r = new Uint8Array(df), a = 0; a < r.length; a++)r[a] = n[a];
                        return r;
                    }, f.sign.detached.verify = function(f, e, t) {
                        if (pf(f, e, t), e.length !== df) throw new Error("bad signature size");
                        if (t.length !== uf) throw new Error("bad public key size");
                        var n, r = new Uint8Array(df + f.length), a = new Uint8Array(df + f.length);
                        for(n = 0; n < df; n++)r[n] = e[n];
                        for(n = 0; n < f.length; n++)r[n + df] = f[n];
                        return bf(a, r, r.length, t) >= 0;
                    }, f.sign.keyPair = function() {
                        var f = new Uint8Array(uf), e = new Uint8Array(lf);
                        return nf(f, e), {
                            publicKey: f,
                            secretKey: e
                        };
                    }, f.sign.keyPair.fromSecretKey = function(f) {
                        if (pf(f), f.length !== lf) throw new Error("bad secret key size");
                        for(var e = new Uint8Array(uf), t = 0; t < e.length; t++)e[t] = f[32 + t];
                        return {
                            publicKey: e,
                            secretKey: new Uint8Array(f)
                        };
                    }, f.sign.keyPair.fromSeed = function(f) {
                        if (pf(f), 32 !== f.length) throw new Error("bad seed size");
                        for(var e = new Uint8Array(uf), t = new Uint8Array(lf), n = 0; n < 32; n++)t[n] = f[n];
                        return nf(e, t, !0), {
                            publicKey: e,
                            secretKey: t
                        };
                    }, f.sign.publicKeyLength = uf, f.sign.secretKeyLength = lf, f.sign.seedLength = 32, f.sign.signatureLength = df, f.hash = function(f) {
                        pf(f);
                        var e = new Uint8Array(64);
                        return Z(e, f, f.length), e;
                    }, f.hash.hashLength = 64, f.verify = function(f, e) {
                        return pf(f, e), 0 !== f.length && 0 !== e.length && f.length === e.length && 0 === p(f, 0, e, 0, f.length);
                    }, f.setPRNG = function(f) {
                        n = f;
                    }, (cf = "undefined" != typeof self ? self.crypto || self.msCrypto : null) && cf.getRandomValues ? f.setPRNG(function(f, e) {
                        var t, n = new Uint8Array(e);
                        for(t = 0; t < e; t += 65536)cf.getRandomValues(n.subarray(t, t + Math.min(e - t, 65536)));
                        for(t = 0; t < e; t++)f[t] = n[t];
                        yf(n);
                    }) : (cf = t(281)) && cf.randomBytes && f.setPRNG(function(f, e) {
                        var t, n = cf.randomBytes(e);
                        for(t = 0; t < e; t++)f[t] = n[t];
                        yf(n);
                    });
                }(f.exports ? f.exports : self.nacl = self.nacl || {});
            },
            281: ()=>{}
        }, e = {};
        function t(n) {
            var r = e[n];
            if (void 0 !== r) return r.exports;
            var a = e[n] = {
                exports: {}
            };
            return f[n].call(a.exports, a, a.exports, t), a.exports;
        }
        t.n = (f)=>{
            var e = f && f.__esModule ? ()=>f.default : ()=>f;
            return t.d(e, {
                a: e
            }), e;
        }, t.d = (f, e)=>{
            for(var n in e)t.o(e, n) && !t.o(f, n) && Object.defineProperty(f, n, {
                enumerable: !0,
                get: e[n]
            });
        }, t.g = function() {
            if ("object" == typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (f) {
                if ("TURBOPACK compile-time falsy", 0) {
                    "TURBOPACK unreachable";
                }
            }
        }(), t.o = (f, e)=>Object.prototype.hasOwnProperty.call(f, e), t.r = (f)=>{
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(f, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(f, "__esModule", {
                value: !0
            });
        };
        var n = {};
        return (()=>{
            "use strict";
            t.r(n), t.d(n, {
                ClaimLink: ()=>Id,
                ClaimLinkV3_11: ()=>kd.ClaimLink,
                ConflictError: ()=>X,
                ForbiddenError: ()=>ff,
                LinkdropP2PV3_11: ()=>kd.LinkdropP2P,
                LinkdropSDK: ()=>Ud,
                NotFoundError: ()=>tf,
                ValidationError: ()=>q
            });
            var f = {};
            t.r(f), t.d(f, {
                OG: ()=>Cr,
                My: ()=>xr,
                Ph: ()=>Or,
                lX: ()=>_r,
                Id: ()=>Nr,
                fg: ()=>Br,
                qj: ()=>Rr,
                aT: ()=>kr,
                lq: ()=>Pr,
                z: ()=>Sr,
                Q5: ()=>Fr
            });
            var e = t(228), r = t.n(e);
            const a = "6.13.4";
            function i(f, e, t) {
                const n = e.split("|").map((f)=>f.trim());
                for(let t = 0; t < n.length; t++)switch(e){
                    case "any":
                        return;
                    case "bigint":
                    case "boolean":
                    case "number":
                    case "string":
                        if (typeof f === e) return;
                }
                const r = new Error("invalid value for type ".concat(e));
                throw r.code = "INVALID_ARGUMENT", r.argument = "value.".concat(t), r.value = f, r;
            }
            async function s(f) {
                const e = Object.keys(f);
                return (await Promise.all(e.map((e)=>Promise.resolve(f[e])))).reduce((f, t, n)=>(f[e[n]] = t, f), {});
            }
            function o(f, e, t) {
                for(let n in e){
                    let r = e[n];
                    const a = t ? t[n] : null;
                    a && i(r, a, n), Object.defineProperty(f, n, {
                        enumerable: !0,
                        value: r,
                        writable: !1
                    });
                }
            }
            function b(f) {
                if (null == f) return "null";
                if (Array.isArray(f)) return "[ " + f.map(b).join(", ") + " ]";
                if (f instanceof Uint8Array) {
                    const e = "0123456789abcdef";
                    let t = "0x";
                    for(let n = 0; n < f.length; n++)t += e[f[n] >> 4], t += e[15 & f[n]];
                    return t;
                }
                if ("object" == typeof f && "function" == typeof f.toJSON) return b(f.toJSON());
                switch(typeof f){
                    case "boolean":
                    case "symbol":
                    case "number":
                        return f.toString();
                    case "bigint":
                        return BigInt(f).toString();
                    case "string":
                        return JSON.stringify(f);
                    case "object":
                        {
                            const e = Object.keys(f);
                            return e.sort(), "{ " + e.map((e)=>"".concat(b(e), ": ").concat(b(f[e]))).join(", ") + " }";
                        }
                }
                return "[ COULD NOT SERIALIZE ]";
            }
            function c(f, e) {
                return f && f.code === e;
            }
            function d(f, e, t) {
                let n, r = f;
                {
                    const n = [];
                    if (t) {
                        if ("message" in t || "code" in t || "name" in t) throw new Error("value will overwrite populated values: ".concat(b(t)));
                        for(const f in t){
                            if ("shortMessage" === f) continue;
                            const e = t[f];
                            n.push(f + "=" + b(e));
                        }
                    }
                    n.push("code=".concat(e)), n.push("version=".concat(a)), n.length && (f += " (" + n.join(", ") + ")");
                }
                switch(e){
                    case "INVALID_ARGUMENT":
                        n = new TypeError(f);
                        break;
                    case "NUMERIC_FAULT":
                    case "BUFFER_OVERRUN":
                        n = new RangeError(f);
                        break;
                    default:
                        n = new Error(f);
                }
                return o(n, {
                    code: e
                }), t && Object.assign(n, t), null == n.shortMessage && o(n, {
                    shortMessage: r
                }), n;
            }
            function u(f, e, t, n) {
                if (!f) throw d(e, t, n);
            }
            function l(f, e, t, n) {
                u(f, e, "INVALID_ARGUMENT", {
                    argument: t,
                    value: n
                });
            }
            function h(f, e, t) {
                null == t && (t = ""), t && (t = ": " + t), u(f >= e, "missing arguemnt" + t, "MISSING_ARGUMENT", {
                    count: f,
                    expectedCount: e
                }), u(f <= e, "too many arguments" + t, "UNEXPECTED_ARGUMENT", {
                    count: f,
                    expectedCount: e
                });
            }
            const p = [
                "NFD",
                "NFC",
                "NFKD",
                "NFKC"
            ].reduce((f, e)=>{
                try {
                    if ("test" !== "test".normalize(e)) throw new Error("bad");
                    if ("NFD" === e) {
                        if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken");
                    }
                    f.push(e);
                } catch (f) {}
                return f;
            }, []);
            function y(f) {
                u(p.indexOf(f) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
                    operation: "String.prototype.normalize",
                    info: {
                        form: f
                    }
                });
            }
            function m(f, e, t) {
                if (null == t && (t = ""), f !== e) {
                    let f = t, e = "new";
                    t && (f += ".", e += " " + t), u(!1, "private constructor; use ".concat(f, "from* methods"), "UNSUPPORTED_OPERATION", {
                        operation: e
                    });
                }
            }
            function g(f, e, t) {
                if (f instanceof Uint8Array) return t ? new Uint8Array(f) : f;
                if ("string" == typeof f && f.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
                    const e = new Uint8Array((f.length - 2) / 2);
                    let t = 2;
                    for(let n = 0; n < e.length; n++)e[n] = parseInt(f.substring(t, t + 2), 16), t += 2;
                    return e;
                }
                l(!1, "invalid BytesLike value", e || "value", f);
            }
            function w(f, e) {
                return g(f, e, !1);
            }
            function v(f, e) {
                return g(f, e, !0);
            }
            function E(f, e) {
                return !("string" != typeof f || !f.match(/^0x[0-9A-Fa-f]*$/) || "number" == typeof e && f.length !== 2 + 2 * e || !0 === e && f.length % 2 != 0);
            }
            function T(f) {
                return E(f, !0) || f instanceof Uint8Array;
            }
            const A = "0123456789abcdef";
            function x(f) {
                const e = w(f);
                let t = "0x";
                for(let f = 0; f < e.length; f++){
                    const n = e[f];
                    t += A[(240 & n) >> 4] + A[15 & n];
                }
                return t;
            }
            function I(f) {
                return "0x" + f.map((f)=>x(f).substring(2)).join("");
            }
            function k(f) {
                return E(f, !0) ? (f.length - 2) / 2 : w(f).length;
            }
            function O(f, e, t) {
                const n = w(f);
                return null != t && t > n.length && u(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
                    buffer: n,
                    length: n.length,
                    offset: t
                }), x(n.slice(null == e ? 0 : e, null == t ? n.length : t));
            }
            function _(f, e, t) {
                const n = w(f);
                u(e >= n.length, "padding exceeds data length", "BUFFER_OVERRUN", {
                    buffer: new Uint8Array(n),
                    length: e,
                    offset: e + 1
                });
                const r = new Uint8Array(e);
                return r.fill(0), t ? r.set(n, e - n.length) : r.set(n, 0), x(r);
            }
            function P(f, e) {
                return _(f, e, !0);
            }
            function S(f, e) {
                return _(f, e, !1);
            }
            function R(f, e, t, n, r) {
                if ("BAD_PREFIX" === f || "UNEXPECTED_CONTINUE" === f) {
                    let f = 0;
                    for(let n = e + 1; n < t.length && t[n] >> 6 == 2; n++)f++;
                    return f;
                }
                return "OVERRUN" === f ? t.length - e - 1 : 0;
            }
            const N = Object.freeze({
                error: function(f, e, t, n, r) {
                    l(!1, "invalid codepoint at offset ".concat(e, "; ").concat(f), "bytes", t);
                },
                ignore: R,
                replace: function(f, e, t, n, r) {
                    return "OVERLONG" === f ? (l("number" == typeof r, "invalid bad code point for replacement", "badCodepoint", r), n.push(r), 0) : (n.push(65533), R(f, e, t));
                }
            });
            function C(f, e) {
                l("string" == typeof f, "invalid string value", "str", f), null != e && (y(e), f = f.normalize(e));
                let t = [];
                for(let e = 0; e < f.length; e++){
                    const n = f.charCodeAt(e);
                    if (n < 128) t.push(n);
                    else if (n < 2048) t.push(n >> 6 | 192), t.push(63 & n | 128);
                    else if (55296 == (64512 & n)) {
                        e++;
                        const r = f.charCodeAt(e);
                        l(e < f.length && 56320 == (64512 & r), "invalid surrogate pair", "str", f);
                        const a = 65536 + ((1023 & n) << 10) + (1023 & r);
                        t.push(a >> 18 | 240), t.push(a >> 12 & 63 | 128), t.push(a >> 6 & 63 | 128), t.push(63 & a | 128);
                    } else t.push(n >> 12 | 224), t.push(n >> 6 & 63 | 128), t.push(63 & n | 128);
                }
                return new Uint8Array(t);
            }
            function U(f, e) {
                return (function(f, e) {
                    null == e && (e = N.error);
                    const t = w(f, "bytes"), n = [];
                    let r = 0;
                    for(; r < t.length;){
                        const f = t[r++];
                        if (!(f >> 7)) {
                            n.push(f);
                            continue;
                        }
                        let a = null, i = null;
                        if (192 == (224 & f)) a = 1, i = 127;
                        else if (224 == (240 & f)) a = 2, i = 2047;
                        else {
                            if (240 != (248 & f)) {
                                r += e(128 == (192 & f) ? "UNEXPECTED_CONTINUE" : "BAD_PREFIX", r - 1, t, n);
                                continue;
                            }
                            a = 3, i = 65535;
                        }
                        if (r - 1 + a >= t.length) {
                            r += e("OVERRUN", r - 1, t, n);
                            continue;
                        }
                        let s = f & (1 << 8 - a - 1) - 1;
                        for(let f = 0; f < a; f++){
                            let f = t[r];
                            if (128 != (192 & f)) {
                                r += e("MISSING_CONTINUE", r, t, n), s = null;
                                break;
                            }
                            s = s << 6 | 63 & f, r++;
                        }
                        null !== s && (s > 1114111 ? r += e("OUT_OF_RANGE", r - 1 - a, t, n, s) : s >= 55296 && s <= 57343 ? r += e("UTF16_SURROGATE", r - 1 - a, t, n, s) : s <= i ? r += e("OVERLONG", r - 1 - a, t, n, s) : n.push(s));
                    }
                    return n;
                })(f, e).map((f)=>f <= 65535 ? String.fromCharCode(f) : (f -= 65536, String.fromCharCode(55296 + (f >> 10 & 1023), 56320 + (1023 & f)))).join("");
            }
            function L(f) {
                const e = f.length, t = new Uint8Array(e / 2);
                for(let n = 0; n < e; n += 2)t[n / 2] = parseInt(f.substring(n, n + 2), 16);
                return t;
            }
            function B(f) {
                const e = L(f.symKey);
                if (32 !== e.length) throw new Error("Key must be 32 bytes (in hex).");
                const t = L(f.encoded);
                if (0 !== t.slice(0, 1)[0]) throw new Error("Invalid type byte, expected TYPE_0.");
                const n = t.slice(1, 25);
                if (24 !== n.length) throw new Error("Invalid IV length.");
                const a = t.slice(25), i = r().secretbox.open(a, n, e);
                if (!i) throw new Error("Failed to decrypt");
                return U(i);
            }
            const D = BigInt(0), F = BigInt(1), M = 9007199254740991;
            function j(f, e) {
                let t = z(f, "value");
                const n = BigInt(W(e, "width")), r = F << n - F;
                return t < D ? (t = -t, u(t <= r, "too low", "NUMERIC_FAULT", {
                    operation: "toTwos",
                    fault: "overflow",
                    value: f
                }), (~t & (F << n) - F) + F) : (u(t < r, "too high", "NUMERIC_FAULT", {
                    operation: "toTwos",
                    fault: "overflow",
                    value: f
                }), t);
            }
            function K(f, e) {
                const t = V(f, "value"), n = BigInt(W(e, "bits"));
                return t & (F << n) - F;
            }
            function z(f, e) {
                switch(typeof f){
                    case "bigint":
                        return f;
                    case "number":
                        return l(Number.isInteger(f), "underflow", e || "value", f), l(f >= -M && f <= M, "overflow", e || "value", f), BigInt(f);
                    case "string":
                        try {
                            if ("" === f) throw new Error("empty string");
                            return "-" === f[0] && "-" !== f[1] ? -BigInt(f.substring(1)) : BigInt(f);
                        } catch (t) {
                            l(!1, "invalid BigNumberish string: ".concat(t.message), e || "value", f);
                        }
                }
                l(!1, "invalid BigNumberish value", e || "value", f);
            }
            function V(f, e) {
                const t = z(f, e);
                return u(t >= D, "unsigned value cannot be negative", "NUMERIC_FAULT", {
                    fault: "overflow",
                    operation: "getUint",
                    value: f
                }), t;
            }
            const G = "0123456789abcdef";
            function H(f) {
                if (f instanceof Uint8Array) {
                    let e = "0x0";
                    for (const t of f)e += G[t >> 4], e += G[15 & t];
                    return BigInt(e);
                }
                return z(f);
            }
            function W(f, e) {
                switch(typeof f){
                    case "bigint":
                        return l(f >= -M && f <= M, "overflow", e || "value", f), Number(f);
                    case "number":
                        return l(Number.isInteger(f), "underflow", e || "value", f), l(f >= -M && f <= M, "overflow", e || "value", f), f;
                    case "string":
                        try {
                            if ("" === f) throw new Error("empty string");
                            return W(BigInt(f), e);
                        } catch (t) {
                            l(!1, "invalid numeric string: ".concat(t.message), e || "value", f);
                        }
                }
                l(!1, "invalid numeric value", e || "value", f);
            }
            function $(f, e) {
                let t = V(f, "value").toString(16);
                if (null == e) t.length % 2 && (t = "0" + t);
                else {
                    const n = W(e, "width");
                    for(u(2 * n >= t.length, "value exceeds width (".concat(n, " bytes)"), "NUMERIC_FAULT", {
                        operation: "toBeHex",
                        fault: "overflow",
                        value: f
                    }); t.length < 2 * n;)t = "0" + t;
                }
                return "0x" + t;
            }
            function J(f) {
                const e = V(f, "value");
                if (e === D) return new Uint8Array([]);
                let t = e.toString(16);
                t.length % 2 && (t = "0" + t);
                const n = new Uint8Array(t.length / 2);
                for(let f = 0; f < n.length; f++){
                    const e = 2 * f;
                    n[f] = parseInt(t.substring(e, e + 2), 16);
                }
                return n;
            }
            class Y extends Error {
                constructor(f, e){
                    super("Validation Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 400, this.error = e;
                }
            }
            const q = Y;
            class Z extends Error {
                constructor(f, e){
                    super("Conflict Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 409, this.error = e;
                }
            }
            const X = Z;
            class Q extends Error {
                constructor(f, e){
                    super("Forbidden Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 403, this.error = e;
                }
            }
            const ff = Q;
            class ef extends Error {
                constructor(f, e){
                    super("Not Found Error: ".concat(f)), this.code = void 0, this.error = void 0, this.code = 404, this.error = e;
                }
            }
            const tf = ef, nf = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"LinkdropEscrow","sourceName":"contracts/LinkdropEscrow.sol","abi":[{"inputs":[{"internalType":"address","name":"relayer_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Cancel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint120","name":"expiration","type":"uint120"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"address","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint128","name":"fee","type":"uint128"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"bytes","name":"senderMessage","type":"bytes"}],"name":"SenderMessage","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"claimFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"depositFee","type":"uint128"}],"name":"UpdateFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"UpdateRelayer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeReceiver","type":"address"},{"indexed":false,"internalType":"address","name":"token_","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawFees","type":"event"},{"inputs":[],"name":"EIP712_DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_TRANSFER_TYPE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"accruedFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"},{"internalType":"bytes","name":"senderMessage_","type":"bytes"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"},{"internalType":"bytes","name":"senderMessage_","type":"bytes"}],"name":"depositETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"bytes4","name":"authSelector_","type":"bytes4"},{"internalType":"uint128","name":"fee_","type":"uint128"},{"internalType":"bytes","name":"receiveAuthorization_","type":"bytes"},{"internalType":"bytes","name":"senderMessage_","type":"bytes"}],"name":"depositWithAuthorization","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint8","name":"tokenType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domain","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"getDeposit","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint8","name":"tokenType","type":"uint8"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"redeemRecovered","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"relayers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer_","type":"address"},{"internalType":"bool","name":"active_","type":"bool"}],"name":"setRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"verifyFeeAuthorization","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"withdrawAccruedFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"bytecode":"","deployedBytecode":"0x6080604052600436106101405760003560e01c806386fc05ba116100b6578063dc0c81b51161006f578063dc0c81b514610435578063df4c838a14610460578063ecd8dc3a14610489578063ee2578ab146104b2578063f08204ad146104f2578063f2fde38b1461051b57610140565b806386fc05ba146103175780638da5cb5b1461035857806397663e1914610383578063c2fb26a61461039f578063c7977be7146103cd578063d6e69a00146103f857610140565b806354fd4d501161010857806354fd4d501461023c57806357815a681461026757806365abb5e114610290578063715018a6146102ac57806371d68372146102c3578063824c1db5146102ee57610140565b8063012d8c6a1461014557806306fdde031461016e57806307311283146101995780633e05dc4c146101d65780635300f841146101ff575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190613b95565b610544565b005b34801561017a57600080fd5b506101836106d5565b6040516101909190613d07565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190613d29565b61070e565b6040516101cd9190613d6f565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f89190613d8a565b610726565b005b34801561020b57600080fd5b5061022660048036038101906102219190613d29565b6107d5565b6040516102339190613e2d565b60405180910390f35b34801561024857600080fd5b506102516107f5565b60405161025e9190613d07565b60405180910390f35b34801561027357600080fd5b5061028e60048036038101906102899190613e48565b61082e565b005b6102aa60048036038101906102a59190613e9b565b610c5a565b005b3480156102b857600080fd5b506102c1610dbe565b005b3480156102cf57600080fd5b506102d8610dd2565b6040516102e59190613fab565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190613fc6565b610df6565b005b34801561032357600080fd5b5061033e60048036038101906103399190613e48565b6111a5565b60405161034f95949392919061404f565b60405180910390f35b34801561036457600080fd5b5061036d611357565b60405161037a91906140a2565b60405180910390f35b61039d600480360381019061039891906140bd565b611381565b005b3480156103ab57600080fd5b506103b461165d565b6040516103c4949392919061418c565b60405180910390f35b3480156103d957600080fd5b506103e26117ab565b6040516103ef9190613fab565b60405180910390f35b34801561040457600080fd5b5061041f600480360381019061041a919061420b565b6117cf565b60405161042c9190613e2d565b60405180910390f35b34801561044157600080fd5b5061044a6118c2565b6040516104579190613fab565b60405180910390f35b34801561046c57600080fd5b50610487600480360381019061048291906142f6565b6118e6565b005b34801561049557600080fd5b506104b060048036038101906104ab91906143f1565b6119ea565b005b3480156104be57600080fd5b506104d960048036038101906104d49190613e48565b611a86565b6040516104e99493929190614431565b60405180910390f35b3480156104fe57600080fd5b5061051960048036038101906105149190613d29565b611b14565b005b34801561052757600080fd5b50610542600480360381019061053d9190613d29565b611c2d565b005b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c7906144e8565b60405180910390fd5b63e1560fd360e01b867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610629575063ef55bec660e01b867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061065957506388b7ab6360e01b867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90614554565b60405180910390fd5b6000806106aa8b8b8a89898e8d611cb0565b915091506106bc828c8c848d8c611eeb565b6106c8828b86866121ac565b5050505050505050505050565b6040518060400160405280600e81526020017f4c696e6b64726f70457363726f7700000000000000000000000000000000000081525081565b60076020528060005260406000206000915090505481565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906144e8565b60405180910390fd5b60006107bf868484612226565b90506107cd858583896122b2565b505050505050565b60086020528060005260406000206000915054906101000a900460ff1681565b6040518060400160405280600381526020017f332e32000000000000000000000000000000000000000000000000000000000081525081565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b1906144e8565b60405180910390fd5b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa1906145e6565b60405180910390fd5b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff02191690555050610be686888484876fffffffffffffffffffffffffffffffff166126c1565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5938a86ca33c66cb817f2fdc8d5cd4073bfe03e3f6c846c3c91e7d3f6beaae9f87858588604051610c499493929190614606565b60405180910390a350505050505050565b610c62612971565b6000610c77338c8c60008d8d8d8d8d8d6117cf565b905080610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb0906146bd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1603610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f9061474f565b60405180910390fd5b610d468b33308c6fffffffffffffffffffffffffffffffff166129c0565b610d52338b85856121ac565b8a73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610d9957610d93338c8c8c8c8b611eeb565b50610daa565b610da8338c8c8c8c8c8c612b18565b505b610db2612de6565b50505050505050505050565b610dc6612df0565b610dd06000612e6e565b565b7fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e681565b610dfe612971565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe5906147e1565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061112a86338484876fffffffffffffffffffffffffffffffff166126c1565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab3691e99d7a7c44b5bbf42b6113806f3fa641468fdf21dd778892ea680d04868785858860405161118d9493929190614606565b60405180910390a3505050506111a1612de6565b5050565b600080600080600080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090508881606001518260000151836020015184604001519550955095509550955050939792965093509350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611389612971565b60006113a03360008b60008c8c60008d8d8d6117cf565b9050806113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d99061484d565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161461150f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611506906148df565b60405180910390fd5b42876effffffffffffffffffffffffffffff1611611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990614971565b60405180910390fd5b876fffffffffffffffffffffffffffffffff1634146115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad90614a03565b60405180910390fd5b856fffffffffffffffffffffffffffffffff16886fffffffffffffffffffffffffffffffff161161161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161390614a95565b60405180910390fd5b85886116289190614ae4565b975061163e3360008b60008c8c6000808e612f34565b61164a338a85856121ac565b50611653612de6565b5050505050505050565b600080600001805461166e90614b57565b80601f016020809104026020016040519081016040528092919081815260200182805461169a90614b57565b80156116e75780601f106116bc576101008083540402835291602001916116e7565b820191906000526020600020905b8154815290600101906020018083116116ca57829003601f168201915b5050505050908060010180546116fc90614b57565b80601f016020809104026020016040519081016040528092919081815260200182805461172890614b57565b80156117755780601f1061174a57610100808354040283529160200191611775565b820191906000526020600020905b81548152906001019060200180831161175857829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60008061180f8c8c8c8c8c8c8c8c6040516020016117f4989796959493929190614c5d565b604051602081830303815290604052805190602001206131c2565b905060006118618286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506131f2565b9050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16925050509a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611972576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611969906144e8565b60405180910390fd5b600061197f898686612226565b905060006119908983898787613219565b9050806119d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c990614d61565b60405180910390fd5b6119de8989898d6122b2565b50505050505050505050565b6119f2612df0565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f34e1cf41794bd5b78c6251cacf103835b835d3ad103d8471ae5f3df532ff31128282604051611a7a929190614d81565b60405180910390a15050565b600660205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a90046effffffffffffffffffffffffffffff169080600101601f9054906101000a900460ff16905084565b611b1c612df0565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611bdf57600190505b611bed8333836000866126c1565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e4338484604051611c2093929190614daa565b60405180910390a1505050565b611c35612df0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90614e53565b60405180910390fd5b611cad81612e6e565b50565b600080600080600080898960009060c092611ccd93929190614e7d565b810190611cda9190614f22565b809650819750829850839a50849950859b505050505050503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5790615021565b60405180910390fd5b80868d878b8b604051602001611d7a959493929190615041565b6040516020818303038152906040528051906020012014611dd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc7906150ec565b60405180910390fd5b60008d73ffffffffffffffffffffffffffffffffffffffff168c8c8c604051602001611dfe9392919061516c565b604051602081830303815290604052604051611e1a91906151d2565b6000604051808303816000865af19150503d8060008114611e57576040519150601f19603f3d011682016040523d82523d6000602084013e611e5c565b606091505b5050905080611ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9790615235565b60405180910390fd5b63e1560fd360e01b8c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603611eda57611ed98e8830896129c0565b5b505050505097509795505050505050565b6000600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614612018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200f906148df565b60405180910390fd5b42826effffffffffffffffffffffffffffff161161206b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206290614971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906152c7565b60405180910390fd5b806fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1611612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213790614a95565b60405180910390fd5b60003414612183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217a90615359565b60405180910390fd5b808361218f9190614ae4565b92506121a48686866000878760018c89612f34565b505050505050565b6000828290501115612220578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd05e6d7e20ccf354b32c5e96d31aabb54e901e6c8c66dbd7b4601f0326a07c7384846040516122179291906153b7565b60405180910390a35b50505050565b6000806122588560405160200161223d91906153db565b604051602081830303815290604052805190602001206131c2565b90506122a88185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506131f2565b9150509392505050565b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff16116124a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249990615468565b60405180910390fd5b83604001516effffffffffffffffffffffffffffff1642106124f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f0906154fa565b60405180910390fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061263587868484876fffffffffffffffffffffffffffffffff166126c1565b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167ff81d021f277085e9e959eecea61062bd1eff62d82edad55732d811abb5e54969898686896040516126af9493929190614606565b60405180910390a45050505050505050565b60048360ff1610612707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe9061558c565b60405180910390fd5b60008360ff160361279057600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612781576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127789061561e565b60405180910390fd5b61278b8482613283565b61296a565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036127ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f6906156b0565b60405180910390fd5b60018360ff160361281a57612815858583613383565b61296a565b60028360ff1603612899578473ffffffffffffffffffffffffffffffffffffffff166342842e0e3086856040518463ffffffff1660e01b815260040161286293929190614daa565b600060405180830381600087803b15801561287c57600080fd5b505af1158015612890573d6000803e3d6000fd5b5050505061296a565b60038360ff1603612969578473ffffffffffffffffffffffffffffffffffffffff1663f242432a30868585600067ffffffffffffffff8111156128df576128de6156d0565b5b6040519080825280601f01601f1916602001820160405280156129115781602001600182028036833780820191505090505b506040518663ffffffff1660e01b8152600401612932959493929190615738565b600060405180830381600087803b15801561294c57600080fd5b505af1158015612960573d6000803e3d6000fd5b5050505061296a565b5b5050505050565b6002600554036129b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ad906157de565b60405180910390fd5b6002600581905550565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016129f793929190614daa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612a6191906151d2565b6000604051808303816000865af19150503d8060008114612a9e576040519150601f19603f3d011682016040523d82523d6000602084013e612aa3565b606091505b5091509150818015612ad15750600081511480612ad0575080806020019051810190612acf9190615813565b5b5b612b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b079061588c565b60405180910390fd5b505050505050565b6000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614612c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3c906148df565b60405180910390fd5b42836effffffffffffffffffffffffffffff1611612c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8f90614971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfe90615944565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603612d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6d906152c7565b60405180910390fd5b806fffffffffffffffffffffffffffffffff163414612dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc1906159b0565b60405180910390fd5b612ddd8787876000888860018989612f34565b50505050505050565b6001600581905550565b612df86134d8565b73ffffffffffffffffffffffffffffffffffffffff16612e16611357565b73ffffffffffffffffffffffffffffffffffffffff1614612e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6390615a1c565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060800160405280878152602001866fffffffffffffffffffffffffffffffff168152602001856effffffffffffffffffffffffffffff1681526020018460ff16815250600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550606082015181600101601f6101000a81548160ff021916908360ff160217905550905050806fffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461313f9190615a3c565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f1d48f3ec0544fd684c5a9331f70963c5401a4fb089b9475628f52911dce6936e8987878b8b89896040516131af9796959493929190615a70565b60405180910390a3505050505050505050565b6000816040516020016131d59190615b57565b604051602081830303815290604052805190602001209050919050565b600080600061320185856134e0565b9150915061320e81613531565b819250505092915050565b6000806132268686613697565b9050613277878286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613739565b91505095945050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156132b8576132b76156d0565b5b6040519080825280601f01601f1916602001820160405280156132ea5781602001600182028036833780820191505090505b506040516132f891906151d2565b60006040518083038185875af1925050503d8060008114613335576040519150601f19603f3d011682016040523d82523d6000602084013e61333a565b606091505b505090508061337e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337590615bc9565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016133b8929190615be9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161342291906151d2565b6000604051808303816000865af19150503d806000811461345f576040519150601f19603f3d011682016040523d82523d6000602084013e613464565b606091505b509150915081801561349257506000815114806134915750808060200190518101906134909190615813565b5b5b6134d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134c890615c5e565b60405180910390fd5b5050505050565b600033905090565b60008060418351036135215760008060006020860151925060408601519150606086015160001a9050613515878285856138ff565b9450945050505061352a565b60006002915091505b9250929050565b6000600481111561354557613544615c7e565b5b81600481111561355857613557615c7e565b5b0315613694576001600481111561357257613571615c7e565b5b81600481111561358557613584615c7e565b5b036135c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135bc90615cf9565b60405180910390fd5b600260048111156135d9576135d8615c7e565b5b8160048111156135ec576135eb615c7e565b5b0361362c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161362390615d65565b60405180910390fd5b600360048111156136405761363f615c7e565b5b81600481111561365357613652615c7e565b5b03613693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368a90615df7565b60405180910390fd5b5b50565b6000807fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e684846040516020016136cf93929190615e17565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000008160405160200161371a929190615e9a565b6040516020818303038152906040528051906020012091505092915050565b600080600061374885856134e0565b91509150600060048111156137605761375f615c7e565b5b81600481111561377357613772615c7e565b5b1480156137ab57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156137bb576001925050506138f8565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016137f0929190615ed1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161385a91906151d2565b600060405180830381855afa9150503d8060008114613895576040519150601f19603f3d011682016040523d82523d6000602084013e61389a565b606091505b50915091508180156138ad575060208151145b80156138f15750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906138ef9190615f16565b145b9450505050505b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561393a5760006003915091506139d8565b60006001878787876040516000815260200160405260405161395f9493929190615f43565b6020604051602081039080840390855afa158015613981573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036139cf576000600192509250506139d8565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a16826139eb565b9050919050565b613a2681613a0b565b8114613a3157600080fd5b50565b600081359050613a4381613a1d565b92915050565b60006effffffffffffffffffffffffffffff82169050919050565b613a6d81613a49565b8114613a7857600080fd5b50565b600081359050613a8a81613a64565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613ac581613a90565b8114613ad057600080fd5b50565b600081359050613ae281613abc565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b613b0d81613ae8565b8114613b1857600080fd5b50565b600081359050613b2a81613b04565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613b5557613b54613b30565b5b8235905067ffffffffffffffff811115613b7257613b71613b35565b5b602083019150836001820283011115613b8e57613b8d613b3a565b5b9250929050565b600080600080600080600080600060e08a8c031215613bb757613bb66139e1565b5b6000613bc58c828d01613a34565b9950506020613bd68c828d01613a34565b9850506040613be78c828d01613a7b565b9750506060613bf88c828d01613ad3565b9650506080613c098c828d01613b1b565b95505060a08a013567ffffffffffffffff811115613c2a57613c296139e6565b5b613c368c828d01613b3f565b945094505060c08a013567ffffffffffffffff811115613c5957613c586139e6565b5b613c658c828d01613b3f565b92509250509295985092959850929598565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cb1578082015181840152602081019050613c96565b60008484015250505050565b6000601f19601f8301169050919050565b6000613cd982613c77565b613ce38185613c82565b9350613cf3818560208601613c93565b613cfc81613cbd565b840191505092915050565b60006020820190508181036000830152613d218184613cce565b905092915050565b600060208284031215613d3f57613d3e6139e1565b5b6000613d4d84828501613a34565b91505092915050565b6000819050919050565b613d6981613d56565b82525050565b6000602082019050613d846000830184613d60565b92915050565b600080600080600060808688031215613da657613da56139e1565b5b6000613db488828901613a34565b9550506020613dc588828901613a34565b9450506040613dd688828901613a34565b935050606086013567ffffffffffffffff811115613df757613df66139e6565b5b613e0388828901613b3f565b92509250509295509295909350565b60008115159050919050565b613e2781613e12565b82525050565b6000602082019050613e426000830184613e1e565b92915050565b600080600060608486031215613e6157613e606139e1565b5b6000613e6f86828701613a34565b9350506020613e8086828701613a34565b9250506040613e9186828701613a34565b9150509250925092565b6000806000806000806000806000806101008b8d031215613ebf57613ebe6139e1565b5b6000613ecd8d828e01613a34565b9a50506020613ede8d828e01613a34565b9950506040613eef8d828e01613b1b565b9850506060613f008d828e01613a7b565b9750506080613f118d828e01613a34565b96505060a0613f228d828e01613b1b565b95505060c08b013567ffffffffffffffff811115613f4357613f426139e6565b5b613f4f8d828e01613b3f565b945094505060e08b013567ffffffffffffffff811115613f7257613f716139e6565b5b613f7e8d828e01613b3f565b92509250509295989b9194979a5092959850565b6000819050919050565b613fa581613f92565b82525050565b6000602082019050613fc06000830184613f9c565b92915050565b60008060408385031215613fdd57613fdc6139e1565b5b6000613feb85828601613a34565b9250506020613ffc85828601613a34565b9150509250929050565b61400f81613a0b565b82525050565b600060ff82169050919050565b61402b81614015565b82525050565b61403a81613ae8565b82525050565b61404981613a49565b82525050565b600060a0820190506140646000830188614006565b6140716020830187614022565b61407e6040830186613d60565b61408b6060830185614031565b6140986080830184614040565b9695505050505050565b60006020820190506140b76000830184614006565b92915050565b60008060008060008060008060c0898b0312156140dd576140dc6139e1565b5b60006140eb8b828c01613a34565b98505060206140fc8b828c01613b1b565b975050604061410d8b828c01613a7b565b965050606061411e8b828c01613b1b565b955050608089013567ffffffffffffffff81111561413f5761413e6139e6565b5b61414b8b828c01613b3f565b945094505060a089013567ffffffffffffffff81111561416e5761416d6139e6565b5b61417a8b828c01613b3f565b92509250509295985092959890939650565b600060808201905081810360008301526141a68187613cce565b905081810360208301526141ba8186613cce565b90506141c96040830185613d60565b6141d66060830184614006565b95945050505050565b6141e881613d56565b81146141f357600080fd5b50565b600081359050614205816141df565b92915050565b6000806000806000806000806000806101208b8d03121561422f5761422e6139e1565b5b600061423d8d828e01613a34565b9a5050602061424e8d828e01613a34565b995050604061425f8d828e01613a34565b98505060606142708d828e016141f6565b97505060806142818d828e01613b1b565b96505060a06142928d828e01613a7b565b95505060c06142a38d828e01613a34565b94505060e06142b48d828e01613b1b565b9350506101008b013567ffffffffffffffff8111156142d6576142d56139e6565b5b6142e28d828e01613b3f565b92509250509295989b9194979a5092959850565b60008060008060008060008060c0898b031215614316576143156139e1565b5b60006143248b828c01613a34565b98505060206143358b828c01613a34565b97505060406143468b828c01613a34565b96505060606143578b828c01613a34565b955050608089013567ffffffffffffffff811115614378576143776139e6565b5b6143848b828c01613b3f565b945094505060a089013567ffffffffffffffff8111156143a7576143a66139e6565b5b6143b38b828c01613b3f565b92509250509295985092959890939650565b6143ce81613e12565b81146143d957600080fd5b50565b6000813590506143eb816143c5565b92915050565b60008060408385031215614408576144076139e1565b5b600061441685828601613a34565b9250506020614427858286016143dc565b9150509250929050565b60006080820190506144466000830187613d60565b6144536020830186614031565b6144606040830185614040565b61446d6060830184614022565b95945050505050565b7f4c696e6b64726f70457363726f773a206d73672e73656e646572206973206e6f60008201527f742072656c617965722e00000000000000000000000000000000000000000000602082015250565b60006144d2602a83613c82565b91506144dd82614476565b604082019050919050565b60006020820190508181036000830152614501816144c5565b9050919050565b7f4c696e6b64726f70457363726f773a20696e76616c69642073656c6563746f72600082015250565b600061453e602083613c82565b915061454982614508565b602082019050919050565b6000602082019050818103600083015261456d81614531565b9050919050565b7f4c696e6b64726f70457363726f773a20696e76616c6964207472616e7366657260008201527f2049440000000000000000000000000000000000000000000000000000000000602082015250565b60006145d0602383613c82565b91506145db82614574565b604082019050919050565b600060208201905081810360008301526145ff816145c3565b9050919050565b600060808201905061461b6000830187614006565b6146286020830186614022565b6146356040830185613d60565b6146426060830184614031565b95945050505050565b7f4c696e6b64726f70457363726f773a2046656573206e6f7420617574686f726960008201527f7a65642e00000000000000000000000000000000000000000000000000000000602082015250565b60006146a7602483613c82565b91506146b28261464b565b604082019050919050565b600060208201905081810360008301526146d68161469a565b9050919050565b7f4c696e6b64726f70457363726f773a2063616e2774206265206164647265737360008201527f283029206173206120746f6b656e2e0000000000000000000000000000000000602082015250565b6000614739602f83613c82565b9150614744826146dd565b604082019050919050565b600060208201905081810360008301526147688161472c565b9050919050565b7f4c696e6b64726f70457363726f773a204465706f736974206e6f7420666f756e60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006147cb602183613c82565b91506147d68261476f565b604082019050919050565b600060208201905081810360008301526147fa816147be565b9050919050565b7f46656573206e6f7420617574686f72697a65642e000000000000000000000000600082015250565b6000614837601483613c82565b915061484282614801565b602082019050919050565b600060208201905081810360008301526148668161482a565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572496420697320696e60008201527f207573652e000000000000000000000000000000000000000000000000000000602082015250565b60006148c9602583613c82565b91506148d48261486d565b604082019050919050565b600060208201905081810360008301526148f8816148bc565b9050919050565b7f4c696e6b64726f70457363726f773a206465706f736974696e6720776974682060008201527f696e76616c69642065787069726174696f6e2e00000000000000000000000000602082015250565b600061495b603383613c82565b9150614966826148ff565b604082019050919050565b6000602082019050818103600083015261498a8161494e565b9050919050565b7f4c696e6b64726f70457363726f773a20616d6f756e74206e6f7420636f76657260008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b60006149ed602383613c82565b91506149f882614991565b604082019050919050565b60006020820190508181036000830152614a1c816149e0565b9050919050565b7f4c696e6b64726f70457363726f773a20616d6f756e7420646f6573206e6f742060008201527f636f766572206665652e00000000000000000000000000000000000000000000602082015250565b6000614a7f602a83613c82565b9150614a8a82614a23565b604082019050919050565b60006020820190508181036000830152614aae81614a72565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614aef82613ae8565b9150614afa83613ae8565b925082820390506fffffffffffffffffffffffffffffffff811115614b2257614b21614ab5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b6f57607f821691505b602082108103614b8257614b81614b28565b5b50919050565b60008160601b9050919050565b6000614ba082614b88565b9050919050565b6000614bb282614b95565b9050919050565b614bca614bc582613a0b565b614ba7565b82525050565b6000819050919050565b614beb614be682613d56565b614bd0565b82525050565b60008160801b9050919050565b6000614c0982614bf1565b9050919050565b614c21614c1c82613ae8565b614bfe565b82525050565b60008160881b9050919050565b6000614c3f82614c27565b9050919050565b614c57614c5282613a49565b614c34565b82525050565b6000614c69828b614bb9565b601482019150614c79828a614bb9565b601482019150614c898289614bb9565b601482019150614c998288614bda565b602082019150614ca98287614c10565b601082019150614cb98286614c46565b600f82019150614cc98285614bb9565b601482019150614cd98284614c10565b6010820191508190509998505050505050505050565b7f4c696e6b64726f70457363726f773a20696e76616c69642073656e646572207360008201527f69676e6174757265000000000000000000000000000000000000000000000000602082015250565b6000614d4b602883613c82565b9150614d5682614cef565b604082019050919050565b60006020820190508181036000830152614d7a81614d3e565b9050919050565b6000604082019050614d966000830185614006565b614da36020830184613e1e565b9392505050565b6000606082019050614dbf6000830186614006565b614dcc6020830185614006565b614dd96040830184613d60565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614e3d602683613c82565b9150614e4882614de1565b604082019050919050565b60006020820190508181036000830152614e6c81614e30565b9050919050565b600080fd5b600080fd5b60008085851115614e9157614e90614e73565b5b83861115614ea257614ea1614e78565b5b6001850283019150848603905094509492505050565b6000614ec3826139eb565b9050919050565b614ed381614eb8565b8114614ede57600080fd5b50565b600081359050614ef081614eca565b92915050565b614eff81613f92565b8114614f0a57600080fd5b50565b600081359050614f1c81614ef6565b92915050565b60008060008060008060c08789031215614f3f57614f3e6139e1565b5b6000614f4d89828a01614ee1565b9650506020614f5e89828a01614ee1565b9550506040614f6f89828a016141f6565b9450506060614f8089828a016141f6565b9350506080614f9189828a016141f6565b92505060a0614fa289828a01614f0d565b9150509295509295509295565b7f4c696e6b64726f70457363726f773a20496e76616c696420726563697069656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061500b602183613c82565b915061501682614faf565b604082019050919050565b6000602082019050818103600083015261503a81614ffe565b9050919050565b600061504d8288614bb9565b60148201915061505d8287614bb9565b60148201915061506d8286614bda565b60208201915061507d8285614c46565b600f8201915061508d8284614c10565b6010820191508190509695505050505050565b7f4c696e6b64726f70457363726f773a20496e76616c6964206e6f6e6365000000600082015250565b60006150d6601d83613c82565b91506150e1826150a0565b602082019050919050565b60006020820190508181036000830152615105816150c9565b9050919050565b6000819050919050565b61512761512282613a90565b61510c565b82525050565b600081905092915050565b82818337600083830152505050565b6000615153838561512d565b9350615160838584615138565b82840190509392505050565b60006151788286615116565b600482019150615189828486615147565b9150819050949350505050565b600081519050919050565b60006151ac82615196565b6151b6818561512d565b93506151c6818560208601613c93565b80840191505092915050565b60006151de82846151a1565b915081905092915050565b7f4c696e6b64726f70457363726f773a20617070726f7665206661696c65640000600082015250565b600061521f601e83613c82565b915061522a826151e9565b602082019050919050565b6000602082019050818103600083015261524e81615212565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2073686f756c64206e6f7460008201527f2062652061646472657373283029000000000000000000000000000000000000602082015250565b60006152b1602e83613c82565b91506152bc82615255565b604082019050919050565b600060208201905081810360008301526152e0816152a4565b9050919050565b7f4c696e6b64726f70457363726f773a20666565732073686f756c64206265207060008201527f61696420696e20746f6b656e206e6f7420657468657200000000000000000000602082015250565b6000615343603683613c82565b915061534e826152e7565b604082019050919050565b6000602082019050818103600083015261537281615336565b9050919050565b600082825260208201905092915050565b60006153968385615379565b93506153a3838584615138565b6153ac83613cbd565b840190509392505050565b600060208201905081810360008301526153d281848661538a565b90509392505050565b60006153e78284614bb9565b60148201915081905092915050565b7f4c696e6b64726f70457363726f773a20696e76616c69642072656465656d207060008201527f6172616d73000000000000000000000000000000000000000000000000000000602082015250565b6000615452602583613c82565b915061545d826153f6565b604082019050919050565b6000602082019050818103600083015261548181615445565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572206578706972656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006154e4602183613c82565b91506154ef82615488565b604082019050919050565b60006020820190508181036000830152615513816154d7565b9050919050565b7f4c696e6b64726f70457363726f773a20756e6b6e6f776e20746f6b656e20747960008201527f7065000000000000000000000000000000000000000000000000000000000000602082015250565b6000615576602283613c82565b91506155818261551a565b604082019050919050565b600060208201905081810360008301526155a581615569565b9050919050565b7f4c696e6b64726f70457363726f773a20616464726573732073686f756c64206260008201527f65203020666f7220455448207472616e73666572730000000000000000000000602082015250565b6000615608603583613c82565b9150615613826155ac565b604082019050919050565b60006020820190508181036000830152615637816155fb565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2061646472657373206e6f60008201527f742070726f766964656420746f206d616b65207472616e736665720000000000602082015250565b600061569a603b83613c82565b91506156a58261563e565b604082019050919050565b600060208201905081810360008301526156c98161568d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061570a82615196565b6157148185615379565b9350615724818560208601613c93565b61572d81613cbd565b840191505092915050565b600060a08201905061574d6000830188614006565b61575a6020830187614006565b6157676040830186613d60565b6157746060830185613d60565b818103608083015261578681846156ff565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006157c8601f83613c82565b91506157d382615792565b602082019050919050565b600060208201905081810360008301526157f7816157bb565b9050919050565b60008151905061580d816143c5565b92915050565b600060208284031215615829576158286139e1565b5b6000615837848285016157fe565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000615876600383613c82565b915061588182615840565b602082019050919050565b600060208201905081810360008301526158a581615869565b9050919050565b7f4c696e6b64726f70457363726f773a206665657320666f72204552433230207460008201527f6f6b656e732063616e206265207061696420696e206e617469766520746f6b6560208201527f6e73206f6e6c792e000000000000000000000000000000000000000000000000604082015250565b600061592e604883613c82565b9150615939826158ac565b606082019050919050565b6000602082019050818103600083015261595d81615921565b9050919050565b7f4c696e6b64726f70457363726f773a20666565206e6f7420636f76657265642e600082015250565b600061599a602083613c82565b91506159a582615964565b602082019050919050565b600060208201905081810360008301526159c98161598d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615a06602083613c82565b9150615a11826159d0565b602082019050919050565b60006020820190508181036000830152615a35816159f9565b9050919050565b6000615a4782613d56565b9150615a5283613d56565b9250828201905080821115615a6a57615a69614ab5565b5b92915050565b600060e082019050615a85600083018a614006565b615a926020830189614040565b615a9f6040830188614022565b615aac6060830187613d60565b615ab96080830186614031565b615ac660a0830185614006565b615ad360c0830184614031565b98975050505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000615b20601c83615adf565b9150615b2b82615aea565b601c82019050919050565b6000819050919050565b615b51615b4c82613f92565b615b36565b82525050565b6000615b6282615b13565b9150615b6e8284615b40565b60208201915081905092915050565b7f5354450000000000000000000000000000000000000000000000000000000000600082015250565b6000615bb3600383613c82565b9150615bbe82615b7d565b602082019050919050565b60006020820190508181036000830152615be281615ba6565b9050919050565b6000604082019050615bfe6000830185614006565b615c0b6020830184613d60565b9392505050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000615c48600283613c82565b9150615c5382615c12565b602082019050919050565b60006020820190508181036000830152615c7781615c3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615ce3601883613c82565b9150615cee82615cad565b602082019050919050565b60006020820190508181036000830152615d1281615cd6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000615d4f601f83613c82565b9150615d5a82615d19565b602082019050919050565b60006020820190508181036000830152615d7e81615d42565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000615de1602283613c82565b9150615dec82615d85565b604082019050919050565b60006020820190508181036000830152615e1081615dd4565b9050919050565b6000606082019050615e2c6000830186613f9c565b615e396020830185614006565b615e466040830184614006565b949350505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000615e84600283615adf565b9150615e8f82615e4e565b600282019050919050565b6000615ea582615e77565b9150615eb18285615b40565b602082019150615ec18284615b40565b6020820191508190509392505050565b6000604082019050615ee66000830185613f9c565b8181036020830152615ef881846156ff565b90509392505050565b600081519050615f1081614ef6565b92915050565b600060208284031215615f2c57615f2b6139e1565b5b6000615f3a84828501615f01565b91505092915050565b6000608082019050615f586000830187613f9c565b615f656020830186614022565b615f726040830185613f9c565b615f7f6060830184613f9c565b9594505050505056fea2646970667358221220cc1388a0b21accee903d2f5701e15a9f63270d672318c6ec1f422804fbc8d58b64736f6c63430008110033","linkReferences":{},"deployedLinkReferences":{}}'), rf = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"LinkdropEscrowNFT","sourceName":"contracts/LinkdropEscrowNFT.sol","abi":[{"inputs":[{"internalType":"address","name":"relayer_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Cancel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint120","name":"expiration","type":"uint120"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"address","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint128","name":"fee","type":"uint128"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"uint8","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"transferId","type":"address"},{"indexed":false,"internalType":"bytes","name":"senderMessage","type":"bytes"}],"name":"SenderMessage","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"claimFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"depositFee","type":"uint128"}],"name":"UpdateFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"UpdateRelayer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeReceiver","type":"address"},{"indexed":false,"internalType":"address","name":"token_","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawFees","type":"event"},{"inputs":[],"name":"EIP712_DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_TRANSFER_TYPE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"accruedFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"decodeOnERC721ReceivedData","outputs":[{"internalType":"address","name":"transferId","type":"address"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint128","name":"feeAmount","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"},{"internalType":"bytes","name":"senderMessage_","type":"bytes"}],"name":"depositERC1155","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"},{"internalType":"bytes","name":"senderMessage_","type":"bytes"}],"name":"depositERC721","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"},{"internalType":"uint8","name":"tokenType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domain","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"getDeposit","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint8","name":"tokenType","type":"uint8"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint120","name":"expiration","type":"uint120"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator_","type":"address"},{"internalType":"address","name":"from_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint256","name":"amount_","type":"uint256"},{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator_","type":"address"},{"internalType":"address","name":"from_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"bytes","name":"data_","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"bytes","name":"receiverSig_","type":"bytes"},{"internalType":"bytes","name":"senderSig_","type":"bytes"}],"name":"redeemRecovered","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"relayers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer_","type":"address"},{"internalType":"bool","name":"active_","type":"bool"}],"name":"setRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"transferId_","type":"address"},{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"uint128","name":"amount_","type":"uint128"},{"internalType":"uint120","name":"expiration_","type":"uint120"},{"internalType":"address","name":"feeToken_","type":"address"},{"internalType":"uint128","name":"feeAmount_","type":"uint128"},{"internalType":"bytes","name":"feeAuthorization_","type":"bytes"}],"name":"verifyFeeAuthorization","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"}],"name":"withdrawAccruedFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"bytecode":"","deployedBytecode":"0x6080604052600436106101665760003560e01c80638da5cb5b116100d1578063dc0c81b51161008a578063ee2578ab11610064578063ee2578ab1461052d578063f08204ad1461056d578063f23a6e6114610596578063f2fde38b146105d357610166565b8063dc0c81b5146104b0578063df4c838a146104db578063ecd8dc3a1461050457610166565b80638da5cb5b146103925780639b1d847b146103bd578063c2fb26a6146103fe578063c7977be71461042c578063ce8b56ac14610457578063d6e69a001461047357610166565b806354fd4d501161012357806354fd4d501461029257806357815a68146102bd578063715018a6146102e657806371d68372146102fd578063824c1db51461032857806386fc05ba1461035157610166565b806306fdde031461016b5780630731128314610196578063150b7a02146101d357806320ed0f36146102105780633e05dc4c1461022c5780635300f84114610255575b600080fd5b34801561017757600080fd5b506101806105fc565b60405161018d9190613611565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b8919061369b565b610635565b6040516101ca91906136e1565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f5919061378d565b61064d565b6040516102079190613850565b60405180910390f35b61022a600480360381019061022591906138fa565b610723565b005b34801561023857600080fd5b50610253600480360381019061024e91906139dc565b6107c9565b005b34801561026157600080fd5b5061027c6004803603810190610277919061369b565b610878565b6040516102899190613a7f565b60405180910390f35b34801561029e57600080fd5b506102a7610898565b6040516102b49190613611565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df9190613a9a565b6108d1565b005b3480156102f257600080fd5b506102fb610cfd565b005b34801561030957600080fd5b50610312610d11565b60405161031f9190613b06565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190613b21565b610d35565b005b34801561035d57600080fd5b5061037860048036038101906103739190613a9a565b6110e4565b604051610389959493929190613baa565b60405180910390f35b34801561039e57600080fd5b506103a7611296565b6040516103b49190613bfd565b60405180910390f35b3480156103c957600080fd5b506103e460048036038101906103df9190613c18565b6112c0565b6040516103f5959493929190613cb2565b60405180910390f35b34801561040a57600080fd5b50610413611321565b6040516104239493929190613d00565b60405180910390f35b34801561043857600080fd5b5061044161146f565b60405161044e9190613b06565b60405180910390f35b610471600480360381019061046c9190613d53565b611493565b005b34801561047f57600080fd5b5061049a60048036038101906104959190613e4a565b61159e565b6040516104a79190613a7f565b60405180910390f35b3480156104bc57600080fd5b506104c5611691565b6040516104d29190613b06565b60405180910390f35b3480156104e757600080fd5b5061050260048036038101906104fd9190613f35565b6116b5565b005b34801561051057600080fd5b5061052b60048036038101906105269190614030565b6117b9565b005b34801561053957600080fd5b50610554600480360381019061054f9190613a9a565b611855565b6040516105649493929190614070565b60405180910390f35b34801561057957600080fd5b50610594600480360381019061058f919061369b565b6118e3565b005b3480156105a257600080fd5b506105bd60048036038101906105b891906140b5565b6119fc565b6040516105ca9190613850565b60405180910390f35b3480156105df57600080fd5b506105fa60048036038101906105f5919061369b565b611b27565b005b6040518060400160405280601181526020017f4c696e6b64726f70457363726f774e465400000000000000000000000000000081525081565b60076020528060005260406000206000915090505481565b60008573ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036106915763150b7a0260e01b905061071a565b600060749050808484905010156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061419b565b60405180910390fd5b60008060003660006106ef89896112c0565b945094509450945094506107098b33878d88888888611baa565b63150b7a0260e01b96505050505050505b95945050505050565b61072b611e64565b61073b338a8a8a8a8a8a8a611baa565b8873ffffffffffffffffffffffffffffffffffffffff166342842e0e33308a6040518463ffffffff1660e01b8152600401610778939291906141bb565b600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050506107b633898484611eb3565b6107be611f2d565b505050505050505050565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90614264565b60405180910390fd5b6000610862868484611f37565b905061087085858389611fc3565b505050505050565b60086020528060005260406000206000915054906101000a900460ff1681565b6040518060400160405280600381526020017f332e32000000000000000000000000000000000000000000000000000000000081525081565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490614264565b60405180910390fd5b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b44906142f6565b60405180910390fd5b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff02191690555050610c8986888484876fffffffffffffffffffffffffffffffff166123d2565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f5938a86ca33c66cb817f2fdc8d5cd4073bfe03e3f6c846c3c91e7d3f6beaae9f87858588604051610cec9493929190614316565b60405180910390a350505050505050565b610d05612682565b610d0f6000612700565b565b7fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e681565b610d3d611e64565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff1611610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906143cd565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061106986338484876fffffffffffffffffffffffffffffffff166123d2565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab3691e99d7a7c44b5bbf42b6113806f3fa641468fdf21dd778892ea680d0486878585886040516110cc9493929190614316565b60405180910390a3505050506110e0611f2d565b5050565b600080600080600080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090508881606001518260000151836020015184604001519550955095509550955050939792965093509350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600036600086868101906112d7919061442b565b80955081965082975050505086866060898990506112f591906144ad565b90601f8a8a905061130691906144ad565b92611313939291906144eb565b915091509295509295909350565b600080600001805461133290614555565b80601f016020809104026020016040519081016040528092919081815260200182805461135e90614555565b80156113ab5780601f10611380576101008083540402835291602001916113ab565b820191906000526020600020905b81548152906001019060200180831161138e57829003601f168201915b5050505050908060010180546113c090614555565b80601f01602080910402602001604051908101604052809291908181526020018280546113ec90614555565b80156114395780601f1061140e57610100808354040283529160200191611439565b820191906000526020600020905b81548152906001019060200180831161141c57829003601f168201915b5050505050908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61149b611e64565b6114ac338b8b8b8b8b8b8b8b6127c6565b8973ffffffffffffffffffffffffffffffffffffffff1663f242432a33308b8b6fffffffffffffffffffffffffffffffff16600067ffffffffffffffff8111156114f9576114f8614586565b5b6040519080825280601f01601f19166020018201604052801561152b5781602001600182028036833780820191505090505b506040518663ffffffff1660e01b815260040161154c9594939291906145f9565b600060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b5050505061158a338a8484611eb3565b611592611f2d565b50505050505050505050565b6000806115de8c8c8c8c8c8c8c8c6040516020016115c3989796959493929190614728565b60405160208183030381529060405280519060200120612ad4565b905060006116308286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612b04565b9050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16925050509a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890614264565b60405180910390fd5b600061174e898686611f37565b9050600061175f8983898787612b2b565b9050806117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117989061482c565b60405180910390fd5b6117ad8989898d611fc3565b50505050505050505050565b6117c1612682565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f34e1cf41794bd5b78c6251cacf103835b835d3ad103d8471ae5f3df532ff3112828260405161184992919061484c565b60405180910390a15050565b600660205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a90046effffffffffffffffffffffffffffff169080600101601f9054906101000a900460ff16905084565b6118eb612682565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146119ae57600190505b6119bc8333836000866123d2565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e43384846040516119ef939291906141bb565b60405180910390a1505050565b60006fffffffffffffffffffffffffffffffff841115611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a48906148e7565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611a935763f23a6e6160e01b9050611b1d565b60006074905080848490501015611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad69061419b565b60405180910390fd5b6000806000366000611af189896112c0565b94509450945094509450611b0c8c33878e8e898989896127c6565b63f23a6e6160e01b96505050505050505b9695505050505050565b611b2f612682565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9590614979565b60405180910390fd5b611ba781612700565b50565b6000611bc08989898960018a60008b8b8b61159e565b905080611c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf990614a0b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6890614a9d565b60405180910390fd5b6000600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614611d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9590614b2f565b60405180910390fd5b42856effffffffffffffffffffffffffffff1611611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890614bc1565b60405180910390fd5b836fffffffffffffffffffffffffffffffff163414611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90614c2d565b60405180910390fd5b611e598989898960018a600260008c612b95565b505050505050505050565b600260055403611ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea090614c99565b60405180910390fd5b6002600581905550565b6000828290501115611f27578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd05e6d7e20ccf354b32c5e96d31aabb54e901e6c8c66dbd7b4601f0326a07c738484604051611f1e929190614cb9565b60405180910390a35b50505050565b6001600581905550565b600080611f6985604051602001611f4e9190614cdd565b60405160208183030381529060405280519060200120612ad4565b9050611fb98185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612b04565b9150509392505050565b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200160018201601f9054906101000a900460ff1660ff1660ff168152505090506000816020015190506000826060015190506000836000015190506000836fffffffffffffffffffffffffffffffff16116121b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121aa90614d6a565b60405180910390fd5b83604001516effffffffffffffffffffffffffffff16421061220a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220190614dfc565b60405180910390fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906effffffffffffffffffffffffffffff021916905560018201601f6101000a81549060ff0219169055505061234687868484876fffffffffffffffffffffffffffffffff166123d2565b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167ff81d021f277085e9e959eecea61062bd1eff62d82edad55732d811abb5e54969898686896040516123c09493929190614316565b60405180910390a45050505050505050565b60048360ff1610612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f90614e8e565b60405180910390fd5b60008360ff16036124a157600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248990614f20565b60405180910390fd5b61249c8482612e23565b61267b565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250790614fb2565b60405180910390fd5b60018360ff160361252b57612526858583612f23565b61267b565b60028360ff16036125aa578473ffffffffffffffffffffffffffffffffffffffff166342842e0e3086856040518463ffffffff1660e01b8152600401612573939291906141bb565b600060405180830381600087803b15801561258d57600080fd5b505af11580156125a1573d6000803e3d6000fd5b5050505061267b565b60038360ff160361267a578473ffffffffffffffffffffffffffffffffffffffff1663f242432a30868585600067ffffffffffffffff8111156125f0576125ef614586565b5b6040519080825280601f01601f1916602001820160405280156126225781602001600182028036833780820191505090505b506040518663ffffffff1660e01b81526004016126439594939291906145f9565b600060405180830381600087803b15801561265d57600080fd5b505af1158015612671573d6000803e3d6000fd5b5050505061267b565b5b5050505050565b61268a613078565b73ffffffffffffffffffffffffffffffffffffffff166126a8611296565b73ffffffffffffffffffffffffffffffffffffffff16146126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f59061501e565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006127db8a8a8a8a8a8a60008b8b8b61159e565b90506000866fffffffffffffffffffffffffffffffff1603612832576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128299061508a565b60405180910390fd5b80612872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286990614a0b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036128e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d890614a9d565b60405180910390fd5b6000600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614612a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0590614b2f565b60405180910390fd5b42856effffffffffffffffffffffffffffff1611612a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5890614bc1565b60405180910390fd5b836fffffffffffffffffffffffffffffffff163414612ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aac90614c2d565b60405180910390fd5b612ac88a8a8a8a8a8a600360008c612b95565b50505050505050505050565b600081604051602001612ae79190615122565b604051602081830303815290604052805190602001209050919050565b6000806000612b138585613080565b91509150612b20816130d1565b819250505092915050565b600080612b388686613237565b9050612b89878286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506132d9565b91505095945050505050565b6040518060800160405280878152602001866fffffffffffffffffffffffffffffffff168152602001856effffffffffffffffffffffffffffff1681526020018460ff16815250600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550606082015181600101601f6101000a81548160ff021916908360ff160217905550905050806fffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612da09190615148565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f1d48f3ec0544fd684c5a9331f70963c5401a4fb089b9475628f52911dce6936e8987878b8b8989604051612e10979695949392919061517c565b60405180910390a3505050505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612e5857612e57614586565b5b6040519080825280601f01601f191660200182016040528015612e8a5781602001600182028036833780820191505090505b50604051612e989190615227565b60006040518083038185875af1925050503d8060008114612ed5576040519150601f19603f3d011682016040523d82523d6000602084013e612eda565b606091505b5050905080612f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f159061528a565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401612f589291906152aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612fc29190615227565b6000604051808303816000865af19150503d8060008114612fff576040519150601f19603f3d011682016040523d82523d6000602084013e613004565b606091505b5091509150818015613032575060008151148061303157508080602001905181019061303091906152e8565b5b5b613071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161306890615361565b60405180910390fd5b5050505050565b600033905090565b60008060418351036130c15760008060006020860151925060408601519150606086015160001a90506130b58782858561349f565b945094505050506130ca565b60006002915091505b9250929050565b600060048111156130e5576130e4615381565b5b8160048111156130f8576130f7615381565b5b0315613234576001600481111561311257613111615381565b5b81600481111561312557613124615381565b5b03613165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315c906153fc565b60405180910390fd5b6002600481111561317957613178615381565b5b81600481111561318c5761318b615381565b5b036131cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c390615468565b60405180910390fd5b600360048111156131e0576131df615381565b5b8160048111156131f3576131f2615381565b5b03613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a906154fa565b60405180910390fd5b5b50565b6000807fda3241d4d2732e32f76e33e29a986bf90890ff6cb9b8506b1059fc1f197a34e6848460405160200161326f9392919061551a565b6040516020818303038152906040528051906020012090507f0000000000000000000000000000000000000000000000000000000000000000816040516020016132ba92919061559d565b6040516020818303038152906040528051906020012091505092915050565b60008060006132e88585613080565b9150915060006004811115613300576132ff615381565b5b81600481111561331357613312615381565b5b14801561334b57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561335b57600192505050613498565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016133909291906155d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516133fa9190615227565b600060405180830381855afa9150503d8060008114613435576040519150601f19603f3d011682016040523d82523d6000602084013e61343a565b606091505b509150915081801561344d575060208151145b80156134915750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061348f9190615630565b145b9450505050505b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156134da576000600391509150613578565b6000600187878787604051600081526020016040526040516134ff949392919061565d565b6020604051602081039080840390855afa158015613521573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361356f57600060019250925050613578565b80600092509250505b94509492505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156135bb5780820151818401526020810190506135a0565b60008484015250505050565b6000601f19601f8301169050919050565b60006135e382613581565b6135ed818561358c565b93506135fd81856020860161359d565b613606816135c7565b840191505092915050565b6000602082019050818103600083015261362b81846135d8565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136688261363d565b9050919050565b6136788161365d565b811461368357600080fd5b50565b6000813590506136958161366f565b92915050565b6000602082840312156136b1576136b0613633565b5b60006136bf84828501613686565b91505092915050565b6000819050919050565b6136db816136c8565b82525050565b60006020820190506136f660008301846136d2565b92915050565b613705816136c8565b811461371057600080fd5b50565b600081359050613722816136fc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261374d5761374c613728565b5b8235905067ffffffffffffffff81111561376a5761376961372d565b5b60208301915083600182028301111561378657613785613732565b5b9250929050565b6000806000806000608086880312156137a9576137a8613633565b5b60006137b788828901613686565b95505060206137c888828901613686565b94505060406137d988828901613713565b935050606086013567ffffffffffffffff8111156137fa576137f9613638565b5b61380688828901613737565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61384a81613815565b82525050565b60006020820190506138656000830184613841565b92915050565b60006effffffffffffffffffffffffffffff82169050919050565b61388f8161386b565b811461389a57600080fd5b50565b6000813590506138ac81613886565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6138d7816138b2565b81146138e257600080fd5b50565b6000813590506138f4816138ce565b92915050565b600080600080600080600080600060e08a8c03121561391c5761391b613633565b5b600061392a8c828d01613686565b995050602061393b8c828d01613686565b985050604061394c8c828d01613713565b975050606061395d8c828d0161389d565b965050608061396e8c828d016138e5565b95505060a08a013567ffffffffffffffff81111561398f5761398e613638565b5b61399b8c828d01613737565b945094505060c08a013567ffffffffffffffff8111156139be576139bd613638565b5b6139ca8c828d01613737565b92509250509295985092959850929598565b6000806000806000608086880312156139f8576139f7613633565b5b6000613a0688828901613686565b9550506020613a1788828901613686565b9450506040613a2888828901613686565b935050606086013567ffffffffffffffff811115613a4957613a48613638565b5b613a5588828901613737565b92509250509295509295909350565b60008115159050919050565b613a7981613a64565b82525050565b6000602082019050613a946000830184613a70565b92915050565b600080600060608486031215613ab357613ab2613633565b5b6000613ac186828701613686565b9350506020613ad286828701613686565b9250506040613ae386828701613686565b9150509250925092565b6000819050919050565b613b0081613aed565b82525050565b6000602082019050613b1b6000830184613af7565b92915050565b60008060408385031215613b3857613b37613633565b5b6000613b4685828601613686565b9250506020613b5785828601613686565b9150509250929050565b613b6a8161365d565b82525050565b600060ff82169050919050565b613b8681613b70565b82525050565b613b95816138b2565b82525050565b613ba48161386b565b82525050565b600060a082019050613bbf6000830188613b61565b613bcc6020830187613b7d565b613bd960408301866136d2565b613be66060830185613b8c565b613bf36080830184613b9b565b9695505050505050565b6000602082019050613c126000830184613b61565b92915050565b60008060208385031215613c2f57613c2e613633565b5b600083013567ffffffffffffffff811115613c4d57613c4c613638565b5b613c5985828601613737565b92509250509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000613c918385613c65565b9350613c9e838584613c76565b613ca7836135c7565b840190509392505050565b6000608082019050613cc76000830188613b61565b613cd46020830187613b9b565b613ce16040830186613b8c565b8181036060830152613cf4818486613c85565b90509695505050505050565b60006080820190508181036000830152613d1a81876135d8565b90508181036020830152613d2e81866135d8565b9050613d3d60408301856136d2565b613d4a6060830184613b61565b95945050505050565b6000806000806000806000806000806101008b8d031215613d7757613d76613633565b5b6000613d858d828e01613686565b9a50506020613d968d828e01613686565b9950506040613da78d828e01613713565b9850506060613db88d828e016138e5565b9750506080613dc98d828e0161389d565b96505060a0613dda8d828e016138e5565b95505060c08b013567ffffffffffffffff811115613dfb57613dfa613638565b5b613e078d828e01613737565b945094505060e08b013567ffffffffffffffff811115613e2a57613e29613638565b5b613e368d828e01613737565b92509250509295989b9194979a5092959850565b6000806000806000806000806000806101208b8d031215613e6e57613e6d613633565b5b6000613e7c8d828e01613686565b9a50506020613e8d8d828e01613686565b9950506040613e9e8d828e01613686565b9850506060613eaf8d828e01613713565b9750506080613ec08d828e016138e5565b96505060a0613ed18d828e0161389d565b95505060c0613ee28d828e01613686565b94505060e0613ef38d828e016138e5565b9350506101008b013567ffffffffffffffff811115613f1557613f14613638565b5b613f218d828e01613737565b92509250509295989b9194979a5092959850565b60008060008060008060008060c0898b031215613f5557613f54613633565b5b6000613f638b828c01613686565b9850506020613f748b828c01613686565b9750506040613f858b828c01613686565b9650506060613f968b828c01613686565b955050608089013567ffffffffffffffff811115613fb757613fb6613638565b5b613fc38b828c01613737565b945094505060a089013567ffffffffffffffff811115613fe657613fe5613638565b5b613ff28b828c01613737565b92509250509295985092959890939650565b61400d81613a64565b811461401857600080fd5b50565b60008135905061402a81614004565b92915050565b6000806040838503121561404757614046613633565b5b600061405585828601613686565b92505060206140668582860161401b565b9150509250929050565b600060808201905061408560008301876136d2565b6140926020830186613b8c565b61409f6040830185613b9b565b6140ac6060830184613b7d565b95945050505050565b60008060008060008060a087890312156140d2576140d1613633565b5b60006140e089828a01613686565b96505060206140f189828a01613686565b955050604061410289828a01613713565b945050606061411389828a01613713565b935050608087013567ffffffffffffffff81111561413457614133613638565b5b61414089828a01613737565b92509250509295509295509295565b7f44617461206c656e67746820697320696e73756666696369656e740000000000600082015250565b6000614185601b8361358c565b91506141908261414f565b602082019050919050565b600060208201905081810360008301526141b481614178565b9050919050565b60006060820190506141d06000830186613b61565b6141dd6020830185613b61565b6141ea60408301846136d2565b949350505050565b7f4c696e6b64726f70457363726f773a206d73672e73656e646572206973206e6f60008201527f742072656c617965722e00000000000000000000000000000000000000000000602082015250565b600061424e602a8361358c565b9150614259826141f2565b604082019050919050565b6000602082019050818103600083015261427d81614241565b9050919050565b7f4c696e6b64726f70457363726f773a20696e76616c6964207472616e7366657260008201527f2049440000000000000000000000000000000000000000000000000000000000602082015250565b60006142e060238361358c565b91506142eb82614284565b604082019050919050565b6000602082019050818103600083015261430f816142d3565b9050919050565b600060808201905061432b6000830187613b61565b6143386020830186613b7d565b61434560408301856136d2565b6143526060830184613b8c565b95945050505050565b7f4c696e6b64726f70457363726f773a204465706f736974206e6f7420666f756e60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006143b760218361358c565b91506143c28261435b565b604082019050919050565b600060208201905081810360008301526143e6816143aa565b9050919050565b60006143f88261363d565b9050919050565b614408816143ed565b811461441357600080fd5b50565b600081359050614425816143ff565b92915050565b60008060006060848603121561444457614443613633565b5b600061445286828701614416565b93505060206144638682870161389d565b9250506040614474868287016138e5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144b8826136c8565b91506144c3836136c8565b92508282039050818111156144db576144da61447e565b5b92915050565b600080fd5b600080fd5b600080858511156144ff576144fe6144e1565b5b838611156145105761450f6144e6565b5b6001850283019150848603905094509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061456d57607f821691505b6020821081036145805761457f614526565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b60006145cb826145b5565b6145d58185613c65565b93506145e581856020860161359d565b6145ee816135c7565b840191505092915050565b600060a08201905061460e6000830188613b61565b61461b6020830187613b61565b61462860408301866136d2565b61463560608301856136d2565b818103608083015261464781846145c0565b90509695505050505050565b60008160601b9050919050565b600061466b82614653565b9050919050565b600061467d82614660565b9050919050565b6146956146908261365d565b614672565b82525050565b6000819050919050565b6146b66146b1826136c8565b61469b565b82525050565b60008160801b9050919050565b60006146d4826146bc565b9050919050565b6146ec6146e7826138b2565b6146c9565b82525050565b60008160881b9050919050565b600061470a826146f2565b9050919050565b61472261471d8261386b565b6146ff565b82525050565b6000614734828b614684565b601482019150614744828a614684565b6014820191506147548289614684565b60148201915061476482886146a5565b60208201915061477482876146db565b6010820191506147848286614711565b600f820191506147948285614684565b6014820191506147a482846146db565b6010820191508190509998505050505050505050565b7f4c696e6b64726f70457363726f773a20696e76616c69642073656e646572207360008201527f69676e6174757265000000000000000000000000000000000000000000000000602082015250565b600061481660288361358c565b9150614821826147ba565b604082019050919050565b6000602082019050818103600083015261484581614809565b9050919050565b60006040820190506148616000830185613b61565b61486e6020830184613a70565b9392505050565b7f616d6f756e742065786365656473206d6178696d756d20616c6c6f776564207660008201527f616c756520666f722075696e7431323800000000000000000000000000000000602082015250565b60006148d160308361358c565b91506148dc82614875565b604082019050919050565b60006020820190508181036000830152614900816148c4565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061496360268361358c565b915061496e82614907565b604082019050919050565b6000602082019050818103600083015261499281614956565b9050919050565b7f4c696e6b64726f70457363726f773a2046656573206e6f7420617574686f726960008201527f7a65642e00000000000000000000000000000000000000000000000000000000602082015250565b60006149f560248361358c565b9150614a0082614999565b604082019050919050565b60006020820190508181036000830152614a24816149e8565b9050919050565b7f4c696e6b64726f70457363726f773a2063616e2774206265206164647265737360008201527f283029206173206120746f6b656e2e0000000000000000000000000000000000602082015250565b6000614a87602f8361358c565b9150614a9282614a2b565b604082019050919050565b60006020820190508181036000830152614ab681614a7a565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572496420697320696e60008201527f207573652e000000000000000000000000000000000000000000000000000000602082015250565b6000614b1960258361358c565b9150614b2482614abd565b604082019050919050565b60006020820190508181036000830152614b4881614b0c565b9050919050565b7f4c696e6b64726f70457363726f773a206465706f736974696e6720776974682060008201527f696e76616c69642065787069726174696f6e2e00000000000000000000000000602082015250565b6000614bab60338361358c565b9150614bb682614b4f565b604082019050919050565b60006020820190508181036000830152614bda81614b9e565b9050919050565b7f4c696e6b64726f70457363726f773a20666565206e6f7420636f76657265642e600082015250565b6000614c1760208361358c565b9150614c2282614be1565b602082019050919050565b60006020820190508181036000830152614c4681614c0a565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614c83601f8361358c565b9150614c8e82614c4d565b602082019050919050565b60006020820190508181036000830152614cb281614c76565b9050919050565b60006020820190508181036000830152614cd4818486613c85565b90509392505050565b6000614ce98284614684565b60148201915081905092915050565b7f4c696e6b64726f70457363726f773a20696e76616c69642072656465656d207060008201527f6172616d73000000000000000000000000000000000000000000000000000000602082015250565b6000614d5460258361358c565b9150614d5f82614cf8565b604082019050919050565b60006020820190508181036000830152614d8381614d47565b9050919050565b7f4c696e6b64726f70457363726f773a207472616e73666572206578706972656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614de660218361358c565b9150614df182614d8a565b604082019050919050565b60006020820190508181036000830152614e1581614dd9565b9050919050565b7f4c696e6b64726f70457363726f773a20756e6b6e6f776e20746f6b656e20747960008201527f7065000000000000000000000000000000000000000000000000000000000000602082015250565b6000614e7860228361358c565b9150614e8382614e1c565b604082019050919050565b60006020820190508181036000830152614ea781614e6b565b9050919050565b7f4c696e6b64726f70457363726f773a20616464726573732073686f756c64206260008201527f65203020666f7220455448207472616e73666572730000000000000000000000602082015250565b6000614f0a60358361358c565b9150614f1582614eae565b604082019050919050565b60006020820190508181036000830152614f3981614efd565b9050919050565b7f4c696e6b64726f70457363726f773a20746f6b656e2061646472657373206e6f60008201527f742070726f766964656420746f206d616b65207472616e736665720000000000602082015250565b6000614f9c603b8361358c565b9150614fa782614f40565b604082019050919050565b60006020820190508181036000830152614fcb81614f8f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061500860208361358c565b915061501382614fd2565b602082019050919050565b6000602082019050818103600083015261503781614ffb565b9050919050565b7f416d6f756e74206973206e6f742070726f766964656400000000000000000000600082015250565b600061507460168361358c565b915061507f8261503e565b602082019050919050565b600060208201905081810360008301526150a381615067565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006150eb601c836150aa565b91506150f6826150b5565b601c82019050919050565b6000819050919050565b61511c61511782613aed565b615101565b82525050565b600061512d826150de565b9150615139828461510b565b60208201915081905092915050565b6000615153826136c8565b915061515e836136c8565b92508282019050808211156151765761517561447e565b5b92915050565b600060e082019050615191600083018a613b61565b61519e6020830189613b9b565b6151ab6040830188613b7d565b6151b860608301876136d2565b6151c56080830186613b8c565b6151d260a0830185613b61565b6151df60c0830184613b8c565b98975050505050505050565b600081905092915050565b6000615201826145b5565b61520b81856151eb565b935061521b81856020860161359d565b80840191505092915050565b600061523382846151f6565b915081905092915050565b7f5354450000000000000000000000000000000000000000000000000000000000600082015250565b600061527460038361358c565b915061527f8261523e565b602082019050919050565b600060208201905081810360008301526152a381615267565b9050919050565b60006040820190506152bf6000830185613b61565b6152cc60208301846136d2565b9392505050565b6000815190506152e281614004565b92915050565b6000602082840312156152fe576152fd613633565b5b600061530c848285016152d3565b91505092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b600061534b60028361358c565b915061535682615315565b602082019050919050565b6000602082019050818103600083015261537a8161533e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006153e660188361358c565b91506153f1826153b0565b602082019050919050565b60006020820190508181036000830152615415816153d9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000615452601f8361358c565b915061545d8261541c565b602082019050919050565b6000602082019050818103600083015261548181615445565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006154e460228361358c565b91506154ef82615488565b604082019050919050565b60006020820190508181036000830152615513816154d7565b9050919050565b600060608201905061552f6000830186613af7565b61553c6020830185613b61565b6155496040830184613b61565b949350505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006155876002836150aa565b915061559282615551565b600282019050919050565b60006155a88261557a565b91506155b4828561510b565b6020820191506155c4828461510b565b6020820191508190509392505050565b60006040820190506155e96000830185613af7565b81810360208301526155fb81846145c0565b90509392505050565b61560d81613aed565b811461561857600080fd5b50565b60008151905061562a81615604565b92915050565b60006020828403121561564657615645613633565b5b60006156548482850161561b565b91505092915050565b60006080820190506156726000830187613af7565b61567f6020830186613b7d565b61568c6040830185613af7565b6156996060830184613af7565b9594505050505056fea2646970667358221220c16ef504a1eb743ff5e6c4c275e48d49195feefe930847e2328b40865286844464736f6c63430008110033","linkReferences":{},"deployedLinkReferences":{}}');
            function af(f) {
                if (!Number.isSafeInteger(f) || f < 0) throw new Error("Wrong positive integer: ".concat(f));
            }
            function sf(f) {
                if (!(f instanceof Uint8Array)) throw new Error("Expected Uint8Array");
                for(var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)t[n - 1] = arguments[n];
                if (t.length > 0 && !t.includes(f.length)) throw new Error("Expected Uint8Array of length ".concat(t, ", not of length=").concat(f.length));
            }
            function of(f) {
                if ("function" != typeof f || "function" != typeof f.create) throw new Error("Hash should be wrapped by utils.wrapConstructor");
                af(f.outputLen), af(f.blockLen);
            }
            function bf(f) {
                let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                if (f.destroyed) throw new Error("Hash instance has been destroyed");
                if (e && f.finished) throw new Error("Hash#digest() has already been called");
            }
            function cf(f, e) {
                sf(f);
                const t = e.outputLen;
                if (f.length < t) throw new Error("digestInto() expects output buffer of length at least ".concat(t));
            }
            const df = BigInt(2 ** 32 - 1), uf = BigInt(32);
            function lf(f) {
                return arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? {
                    h: Number(f & df),
                    l: Number(f >> uf & df)
                } : {
                    h: 0 | Number(f >> uf & df),
                    l: 0 | Number(f & df)
                };
            }
            function hf(f) {
                let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], t = new Uint32Array(f.length), n = new Uint32Array(f.length);
                for(let r = 0; r < f.length; r++){
                    const { h: a, l: i } = lf(f[r], e);
                    [t[r], n[r]] = [
                        a,
                        i
                    ];
                }
                return [
                    t,
                    n
                ];
            }
            const pf = (f, e, t)=>f << t | e >>> 32 - t, yf = (f, e, t)=>e << t | f >>> 32 - t, mf = (f, e, t)=>e << t - 32 | f >>> 64 - t, gf = (f, e, t)=>f << t - 32 | e >>> 64 - t, wf = {
                fromBig: lf,
                split: hf,
                toBig: (f, e)=>BigInt(f >>> 0) << uf | BigInt(e >>> 0),
                shrSH: (f, e, t)=>f >>> t,
                shrSL: (f, e, t)=>f << 32 - t | e >>> t,
                rotrSH: (f, e, t)=>f >>> t | e << 32 - t,
                rotrSL: (f, e, t)=>f << 32 - t | e >>> t,
                rotrBH: (f, e, t)=>f << 64 - t | e >>> t - 32,
                rotrBL: (f, e, t)=>f >>> t - 32 | e << 64 - t,
                rotr32H: (f, e)=>e,
                rotr32L: (f, e)=>f,
                rotlSH: pf,
                rotlSL: yf,
                rotlBH: mf,
                rotlBL: gf,
                add: function(f, e, t, n) {
                    const r = (e >>> 0) + (n >>> 0);
                    return {
                        h: f + t + (r / 2 ** 32 | 0) | 0,
                        l: 0 | r
                    };
                },
                add3L: (f, e, t)=>(f >>> 0) + (e >>> 0) + (t >>> 0),
                add3H: (f, e, t, n)=>e + t + n + (f / 2 ** 32 | 0) | 0,
                add4L: (f, e, t, n)=>(f >>> 0) + (e >>> 0) + (t >>> 0) + (n >>> 0),
                add4H: (f, e, t, n, r)=>e + t + n + r + (f / 2 ** 32 | 0) | 0,
                add5H: (f, e, t, n, r, a)=>e + t + n + r + a + (f / 2 ** 32 | 0) | 0,
                add5L: (f, e, t, n, r)=>(f >>> 0) + (e >>> 0) + (t >>> 0) + (n >>> 0) + (r >>> 0)
            }, vf = "object" == typeof globalThis && "crypto" in globalThis ? globalThis.crypto : void 0, Ef = (f)=>f instanceof Uint8Array, Tf = (f)=>new Uint32Array(f.buffer, f.byteOffset, Math.floor(f.byteLength / 4)), Af = (f)=>new DataView(f.buffer, f.byteOffset, f.byteLength), xf = (f, e)=>f << 32 - e | f >>> e;
            if (68 !== new Uint8Array(new Uint32Array([
                287454020
            ]).buffer)[0]) throw new Error("Non little-endian hardware is not supported");
            const If = async ()=>{};
            async function kf(f, e, t) {
                let n = Date.now();
                for(let r = 0; r < f; r++){
                    t(r);
                    const f = Date.now() - n;
                    f >= 0 && f < e || (await If(), n += f);
                }
            }
            function Of(f) {
                if ("string" == typeof f && (f = function(f) {
                    if ("string" != typeof f) throw new Error("utf8ToBytes expected string, got ".concat(typeof f));
                    return new Uint8Array((new TextEncoder).encode(f));
                }(f)), !Ef(f)) throw new Error("expected Uint8Array, got ".concat(typeof f));
                return f;
            }
            class _f {
                clone() {
                    return this._cloneInto();
                }
            }
            const Pf = {}.toString;
            function Sf(f, e) {
                if (void 0 !== e && "[object Object]" !== Pf.call(e)) throw new Error("Options should be object or undefined");
                return Object.assign(f, e);
            }
            function Rf(f) {
                const e = (e)=>f().update(Of(e)).digest(), t = f();
                return e.outputLen = t.outputLen, e.blockLen = t.blockLen, e.create = ()=>f(), e;
            }
            function Nf() {
                let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 32;
                if (vf && "function" == typeof vf.getRandomValues) return vf.getRandomValues(new Uint8Array(f));
                throw new Error("crypto.getRandomValues must be defined");
            }
            const [Cf, Uf, Lf] = [
                [],
                [],
                []
            ], Bf = BigInt(0), Df = BigInt(1), Ff = BigInt(2), Mf = BigInt(7), jf = BigInt(256), Kf = BigInt(113);
            for(let f = 0, e = Df, t = 1, n = 0; f < 24; f++){
                [t, n] = [
                    n,
                    (2 * t + 3 * n) % 5
                ], Cf.push(2 * (5 * n + t)), Uf.push((f + 1) * (f + 2) / 2 % 64);
                let r = Bf;
                for(let f = 0; f < 7; f++)e = (e << Df ^ (e >> Mf) * Kf) % jf, e & Ff && (r ^= Df << (Df << BigInt(f)) - Df);
                Lf.push(r);
            }
            const [zf, Vf] = hf(Lf, !0), Gf = (f, e, t)=>t > 32 ? mf(f, e, t) : pf(f, e, t), Hf = (f, e, t)=>t > 32 ? gf(f, e, t) : yf(f, e, t);
            class Wf extends _f {
                constructor(f, e, t){
                    let n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 24;
                    if (super(), this.blockLen = f, this.suffix = e, this.outputLen = t, this.enableXOF = n, this.rounds = r, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, af(t), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
                    this.state = new Uint8Array(200), this.state32 = Tf(this.state);
                }
                keccak() {
                    !function(f) {
                        let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 24;
                        const t = new Uint32Array(10);
                        for(let n = 24 - e; n < 24; n++){
                            for(let e = 0; e < 10; e++)t[e] = f[e] ^ f[e + 10] ^ f[e + 20] ^ f[e + 30] ^ f[e + 40];
                            for(let e = 0; e < 10; e += 2){
                                const n = (e + 8) % 10, r = (e + 2) % 10, a = t[r], i = t[r + 1], s = Gf(a, i, 1) ^ t[n], o = Hf(a, i, 1) ^ t[n + 1];
                                for(let t = 0; t < 50; t += 10)f[e + t] ^= s, f[e + t + 1] ^= o;
                            }
                            let e = f[2], r = f[3];
                            for(let t = 0; t < 24; t++){
                                const n = Uf[t], a = Gf(e, r, n), i = Hf(e, r, n), s = Cf[t];
                                e = f[s], r = f[s + 1], f[s] = a, f[s + 1] = i;
                            }
                            for(let e = 0; e < 50; e += 10){
                                for(let n = 0; n < 10; n++)t[n] = f[e + n];
                                for(let n = 0; n < 10; n++)f[e + n] ^= ~t[(n + 2) % 10] & t[(n + 4) % 10];
                            }
                            f[0] ^= zf[n], f[1] ^= Vf[n];
                        }
                        t.fill(0);
                    }(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
                }
                update(f) {
                    bf(this);
                    const { blockLen: e, state: t } = this, n = (f = Of(f)).length;
                    for(let r = 0; r < n;){
                        const a = Math.min(e - this.pos, n - r);
                        for(let e = 0; e < a; e++)t[this.pos++] ^= f[r++];
                        this.pos === e && this.keccak();
                    }
                    return this;
                }
                finish() {
                    if (this.finished) return;
                    this.finished = !0;
                    const { state: f, suffix: e, pos: t, blockLen: n } = this;
                    f[t] ^= e, 128 & e && t === n - 1 && this.keccak(), f[n - 1] ^= 128, this.keccak();
                }
                writeInto(f) {
                    bf(this, !1), sf(f), this.finish();
                    const e = this.state, { blockLen: t } = this;
                    for(let n = 0, r = f.length; n < r;){
                        this.posOut >= t && this.keccak();
                        const a = Math.min(t - this.posOut, r - n);
                        f.set(e.subarray(this.posOut, this.posOut + a), n), this.posOut += a, n += a;
                    }
                    return f;
                }
                xofInto(f) {
                    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
                    return this.writeInto(f);
                }
                xof(f) {
                    return af(f), this.xofInto(new Uint8Array(f));
                }
                digestInto(f) {
                    if (cf(f, this), this.finished) throw new Error("digest() was already called");
                    return this.writeInto(f), this.destroy(), f;
                }
                digest() {
                    return this.digestInto(new Uint8Array(this.outputLen));
                }
                destroy() {
                    this.destroyed = !0, this.state.fill(0);
                }
                _cloneInto(f) {
                    const { blockLen: e, suffix: t, outputLen: n, rounds: r, enableXOF: a } = this;
                    return f || (f = new Wf(e, t, n, a, r)), f.state32.set(this.state32), f.pos = this.pos, f.posOut = this.posOut, f.finished = this.finished, f.rounds = r, f.suffix = t, f.outputLen = n, f.enableXOF = a, f.destroyed = this.destroyed, f;
                }
            }
            const $f = ((f, e, t)=>Rf(()=>new Wf(e, f, t)))(1, 136, 32);
            let Jf = !1;
            const Yf = function(f) {
                return $f(f);
            };
            let qf = Yf;
            function Zf(f) {
                const e = w(f, "data");
                return x(qf(e));
            }
            Zf._ = Yf, Zf.lock = function() {
                Jf = !0;
            }, Zf.register = function(f) {
                if (Jf) throw new TypeError("keccak256 is locked");
                qf = f;
            }, Object.freeze(Zf);
            const Xf = BigInt(0), Qf = BigInt(36);
            function fe(f) {
                const e = (f = f.toLowerCase()).substring(2).split(""), t = new Uint8Array(40);
                for(let f = 0; f < 40; f++)t[f] = e[f].charCodeAt(0);
                const n = w(Zf(t));
                for(let f = 0; f < 40; f += 2)n[f >> 1] >> 4 >= 8 && (e[f] = e[f].toUpperCase()), (15 & n[f >> 1]) >= 8 && (e[f + 1] = e[f + 1].toUpperCase());
                return "0x" + e.join("");
            }
            const ee = {};
            for(let f = 0; f < 10; f++)ee[String(f)] = String(f);
            for(let f = 0; f < 26; f++)ee[String.fromCharCode(65 + f)] = String(10 + f);
            const te = function() {
                const f = {};
                for(let e = 0; e < 36; e++)f["0123456789abcdefghijklmnopqrstuvwxyz"[e]] = BigInt(e);
                return f;
            }();
            function ne(f) {
                if (l("string" == typeof f, "invalid address", "address", f), f.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
                    f.startsWith("0x") || (f = "0x" + f);
                    const e = fe(f);
                    return l(!f.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || e === f, "bad address checksum", "address", f), e;
                }
                if (f.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                    l(f.substring(2, 4) === function(f) {
                        let e = (f = (f = f.toUpperCase()).substring(4) + f.substring(0, 2) + "00").split("").map((f)=>ee[f]).join("");
                        for(; e.length >= 15;){
                            let f = e.substring(0, 15);
                            e = parseInt(f, 10) % 97 + e.substring(f.length);
                        }
                        let t = String(98 - parseInt(e, 10) % 97);
                        for(; t.length < 2;)t = "0" + t;
                        return t;
                    }(f), "bad icap checksum", "address", f);
                    let e = (function(f) {
                        f = f.toLowerCase();
                        let e = Xf;
                        for(let t = 0; t < f.length; t++)e = e * Qf + te[f[t]];
                        return e;
                    })(f.substring(4)).toString(16);
                    for(; e.length < 40;)e = "0" + e;
                    return fe("0x" + e);
                }
                l(!1, "invalid address", "address", f);
            }
            const re = new RegExp("^bytes([0-9]+)$"), ae = new RegExp("^(u?int)([0-9]*)$"), ie = new RegExp("^(.*)\\[([0-9]*)\\]$");
            function se(f, e, t) {
                switch(f){
                    case "address":
                        return w(t ? P(e, 32) : ne(e));
                    case "string":
                        return C(e);
                    case "bytes":
                        return w(e);
                    case "bool":
                        return e = e ? "0x01" : "0x00", w(t ? P(e, 32) : e);
                }
                let n = f.match(ae);
                if (n) {
                    let r = "int" === n[1], a = parseInt(n[2] || "256");
                    return l((!n[2] || n[2] === String(a)) && a % 8 == 0 && 0 !== a && a <= 256, "invalid number type", "type", f), t && (a = 256), r && (e = j(e, a)), w(P(J(e), a / 8));
                }
                if (n = f.match(re), n) {
                    const r = parseInt(n[1]);
                    return l(String(r) === n[1] && 0 !== r && r <= 32, "invalid bytes type", "type", f), l(k(e) === r, "invalid value for ".concat(f), "value", e), t ? w(S(e, 32)) : e;
                }
                if (n = f.match(ie), n && Array.isArray(e)) {
                    const t = n[1];
                    l(parseInt(n[2] || String(e.length)) === e.length, "invalid array length for ".concat(f), "value", e);
                    const r = [];
                    return e.forEach(function(f) {
                        r.push(se(t, f, !0));
                    }), w(I(r));
                }
                l(!1, "invalid type", "type", f);
            }
            function oe(f, e) {
                l(f.length === e.length, "wrong number of values; expected ${ types.length }", "values", e);
                const t = [];
                return f.forEach(function(f, n) {
                    t.push(se(f, e[n]));
                }), x(I(t));
            }
            function be(f, e) {
                return Zf(oe(f, e));
            }
            const ce = (f, e, t, n, r)=>be([
                    "address",
                    "address",
                    "uint256",
                    "uint120",
                    "uint128"
                ], [
                    f,
                    e,
                    t,
                    n,
                    r
                ]);
            let de = function(f) {
                return f[f.polygon = 137] = "polygon", f[f.base = 8453] = "base", f[f.avalanche = 43114] = "avalanche", f[f.optimism = 10] = "optimism", f[f.arbitrum = 42161] = "arbitrum", f;
            }({}), ue = function(f) {
                return f.usdcBridgedPolygon = "0x2791bca1f2de4661ed88a30c99a7a9449aa84174", f.usdcPolygon = "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359", f.usdcBase = "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913", f.eurcBase = "0x60a3e35cc302bfa44cb288bc5a4f316fdb1adb42", f.usdcArbitrum = "0xaf88d065e77c8cc2239327c5edb3a432268e5831", f.usdcOptimism = "0x0b2c639c533813f4aa9d7837caf62653d097ff85", f.usdcAvalanche = "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e", f.cbBTC = "0xcbb7c0000ab88b473b1f5afd9ef808440eed33bf", f;
            }({}), le = function(f) {
                return f.approveWithAuthorization = "0xe1560fd3", f.receiveWithAuthorizationEOA = "0xef55bec6", f.receiveWithAuthorization = "0x88b7ab63", f;
            }({});
            const he = "0x0000000000000000000000000000000000000000000000000000000000000000";
            function pe(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var ye = 0;
            function me(f) {
                return "__private_" + ye++ + "_" + f;
            }
            const ge = BigInt(0), we = BigInt(1), ve = BigInt(2), Ee = BigInt(27), Te = BigInt(28), Ae = BigInt(35), xe = {};
            function Ie(f) {
                return P(J(f), 32);
            }
            var ke = me("r"), Oe = me("s"), _e = me("v"), Pe = me("networkV");
            class Se {
                get r() {
                    return pe(this, ke)[ke];
                }
                set r(f) {
                    l(32 === k(f), "invalid r", "value", f), pe(this, ke)[ke] = x(f);
                }
                get s() {
                    return pe(this, Oe)[Oe];
                }
                set s(f) {
                    l(32 === k(f), "invalid s", "value", f);
                    const e = x(f);
                    l(parseInt(e.substring(0, 3)) < 8, "non-canonical s", "value", e), pe(this, Oe)[Oe] = e;
                }
                get v() {
                    return pe(this, _e)[_e];
                }
                set v(f) {
                    const e = W(f, "value");
                    l(27 === e || 28 === e, "invalid v", "v", f), pe(this, _e)[_e] = e;
                }
                get networkV() {
                    return pe(this, Pe)[Pe];
                }
                get legacyChainId() {
                    const f = this.networkV;
                    return null == f ? null : Se.getChainId(f);
                }
                get yParity() {
                    return 27 === this.v ? 0 : 1;
                }
                get yParityAndS() {
                    const f = w(this.s);
                    return this.yParity && (f[0] |= 128), x(f);
                }
                get compactSerialized() {
                    return I([
                        this.r,
                        this.yParityAndS
                    ]);
                }
                get serialized() {
                    return I([
                        this.r,
                        this.s,
                        this.yParity ? "0x1c" : "0x1b"
                    ]);
                }
                constructor(f, e, t, n){
                    Object.defineProperty(this, ke, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Oe, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, _e, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Pe, {
                        writable: !0,
                        value: void 0
                    }), m(f, xe, "Signature"), pe(this, ke)[ke] = e, pe(this, Oe)[Oe] = t, pe(this, _e)[_e] = n, pe(this, Pe)[Pe] = null;
                }
                [Symbol.for("nodejs.util.inspect.custom")]() {
                    return 'Signature { r: "'.concat(this.r, '", s: "').concat(this.s, '", yParity: ').concat(this.yParity, ", networkV: ").concat(this.networkV, " }");
                }
                clone() {
                    const f = new Se(xe, this.r, this.s, this.v);
                    return this.networkV && (pe(f, Pe)[Pe] = this.networkV), f;
                }
                toJSON() {
                    const f = this.networkV;
                    return {
                        _type: "signature",
                        networkV: null != f ? f.toString() : null,
                        r: this.r,
                        s: this.s,
                        v: this.v
                    };
                }
                static getChainId(f) {
                    const e = z(f, "v");
                    return e == Ee || e == Te ? ge : (l(e >= Ae, "invalid EIP-155 v", "v", f), (e - Ae) / ve);
                }
                static getChainIdV(f, e) {
                    return z(f) * ve + BigInt(35 + e - 27);
                }
                static getNormalizedV(f) {
                    const e = z(f);
                    return e === ge || e === Ee ? 27 : e === we || e === Te ? 28 : (l(e >= Ae, "invalid v", "v", f), e & we ? 27 : 28);
                }
                static from(f) {
                    function e(e, t) {
                        l(e, t, "signature", f);
                    }
                    if (null == f) return new Se(xe, he, he, 27);
                    if ("string" == typeof f) {
                        const t = w(f, "signature");
                        if (64 === t.length) {
                            const f = x(t.slice(0, 32)), e = t.slice(32, 64), n = 128 & e[0] ? 28 : 27;
                            return e[0] &= 127, new Se(xe, f, x(e), n);
                        }
                        if (65 === t.length) {
                            const f = x(t.slice(0, 32)), n = t.slice(32, 64);
                            e(!(128 & n[0]), "non-canonical s");
                            const r = Se.getNormalizedV(t[64]);
                            return new Se(xe, f, x(n), r);
                        }
                        e(!1, "invalid raw signature length");
                    }
                    if (f instanceof Se) return f.clone();
                    const t = f.r;
                    e(null != t, "missing r");
                    const n = Ie(t), r = function(f, t) {
                        if (null != f) return Ie(f);
                        if (null != t) {
                            e(E(t, 32), "invalid yParityAndS");
                            const f = w(t);
                            return f[0] &= 127, x(f);
                        }
                        e(!1, "missing s");
                    }(f.s, f.yParityAndS);
                    e(!(128 & w(r)[0]), "non-canonical s");
                    const { networkV: a, v: i } = function(f, t, n) {
                        if (null != f) {
                            const e = z(f);
                            return {
                                networkV: e >= Ae ? e : void 0,
                                v: Se.getNormalizedV(e)
                            };
                        }
                        if (null != t) return e(E(t, 32), "invalid yParityAndS"), {
                            v: 128 & w(t)[0] ? 28 : 27
                        };
                        if (null != n) {
                            switch(W(n, "sig.yParity")){
                                case 0:
                                    return {
                                        v: 27
                                    };
                                case 1:
                                    return {
                                        v: 28
                                    };
                            }
                            e(!1, "invalid yParity");
                        }
                        e(!1, "missing v");
                    }(f.v, f.yParityAndS, f.yParity), s = new Se(xe, n, r, i);
                    return a && (pe(s, Pe)[Pe] = a), e(null == f.yParity || W(f.yParity, "sig.yParity") === s.yParity, "yParity mismatch"), e(null == f.yParityAndS || f.yParityAndS === s.yParityAndS, "yParityAndS mismatch"), s;
                }
            }
            function Re(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Ne = 0;
            function Ce(f) {
                return "__private_" + Ne++ + "_" + f;
            }
            const Ue = 32, Le = new Uint8Array(Ue), Be = [
                "then"
            ], De = {}, Fe = new WeakMap;
            function Me(f) {
                return Fe.get(f);
            }
            function je(f, e) {
                Fe.set(f, e);
            }
            function Ke(f, e) {
                const t = new Error("deferred error during ABI decoding triggered accessing ".concat(f));
                throw t.error = e, t;
            }
            function ze(f, e, t) {
                return f.indexOf(null) >= 0 ? e.map((f, e)=>f instanceof Ge ? ze(Me(f), f, t) : f) : f.reduce((f, n, r)=>{
                    let a = e.getValue(n);
                    return n in f || (t && a instanceof Ge && (a = ze(Me(a), a, t)), f[n] = a), f;
                }, {});
            }
            var Ve = Ce("names");
            class Ge extends Array {
                constructor(){
                    for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                    const n = e[0];
                    let r = e[1], a = (e[2] || []).slice(), i = !0;
                    n !== De && (r = e, a = [], i = !1), super(r.length), Object.defineProperty(this, Ve, {
                        writable: !0,
                        value: void 0
                    }), r.forEach((f, e)=>{
                        this[e] = f;
                    });
                    const s = a.reduce((f, e)=>("string" == typeof e && f.set(e, (f.get(e) || 0) + 1), f), new Map);
                    if (je(this, Object.freeze(r.map((f, e)=>{
                        const t = a[e];
                        return null != t && 1 === s.get(t) ? t : null;
                    }))), Re(this, Ve)[Ve] = [], null == Re(this, Ve)[Ve] && Re(this, Ve)[Ve], !i) return;
                    Object.freeze(this);
                    const o = new Proxy(this, {
                        get: (f, e, t)=>{
                            if ("string" == typeof e) {
                                if (e.match(/^[0-9]+$/)) {
                                    const t = W(e, "%index");
                                    if (t < 0 || t >= this.length) throw new RangeError("out of result range");
                                    const n = f[t];
                                    return n instanceof Error && Ke("index ".concat(t), n), n;
                                }
                                if (Be.indexOf(e) >= 0) return Reflect.get(f, e, t);
                                const n = f[e];
                                if (n instanceof Function) return function() {
                                    for(var e = arguments.length, r = new Array(e), a = 0; a < e; a++)r[a] = arguments[a];
                                    return n.apply(this === t ? f : this, r);
                                };
                                if (!(e in f)) return f.getValue.apply(this === t ? f : this, [
                                    e
                                ]);
                            }
                            return Reflect.get(f, e, t);
                        }
                    });
                    return je(o, Me(this)), o;
                }
                toArray(f) {
                    const e = [];
                    return this.forEach((t, n)=>{
                        t instanceof Error && Ke("index ".concat(n), t), f && t instanceof Ge && (t = t.toArray(f)), e.push(t);
                    }), e;
                }
                toObject(f) {
                    const e = Me(this);
                    return e.reduce((t, n, r)=>(u(null != n, "value at index ".concat(r, " unnamed"), "UNSUPPORTED_OPERATION", {
                            operation: "toObject()"
                        }), ze(e, this, f)), {});
                }
                slice(f, e) {
                    null == f && (f = 0), f < 0 && (f += this.length) < 0 && (f = 0), null == e && (e = this.length), e < 0 && (e += this.length) < 0 && (e = 0), e > this.length && (e = this.length);
                    const t = Me(this), n = [], r = [];
                    for(let a = f; a < e; a++)n.push(this[a]), r.push(t[a]);
                    return new Ge(De, n, r);
                }
                filter(f, e) {
                    const t = Me(this), n = [], r = [];
                    for(let a = 0; a < this.length; a++){
                        const i = this[a];
                        i instanceof Error && Ke("index ".concat(a), i), f.call(e, i, a, this) && (n.push(i), r.push(t[a]));
                    }
                    return new Ge(De, n, r);
                }
                map(f, e) {
                    const t = [];
                    for(let n = 0; n < this.length; n++){
                        const r = this[n];
                        r instanceof Error && Ke("index ".concat(n), r), t.push(f.call(e, r, n, this));
                    }
                    return t;
                }
                getValue(f) {
                    const e = Me(this).indexOf(f);
                    if (-1 === e) return;
                    const t = this[e];
                    return t instanceof Error && Ke("property ".concat(JSON.stringify(f)), t.error), t;
                }
                static fromItems(f, e) {
                    return new Ge(De, f, e);
                }
            }
            function He(f) {
                let e = J(f);
                return u(e.length <= Ue, "value out-of-bounds", "BUFFER_OVERRUN", {
                    buffer: e,
                    length: Ue,
                    offset: e.length
                }), e.length !== Ue && (e = v(I([
                    Le.slice(e.length % Ue),
                    e
                ]))), e;
            }
            class We {
                constructor(f, e, t, n){
                    this.name = void 0, this.type = void 0, this.localName = void 0, this.dynamic = void 0, o(this, {
                        name: f,
                        type: e,
                        localName: t,
                        dynamic: n
                    }, {
                        name: "string",
                        type: "string",
                        localName: "string",
                        dynamic: "boolean"
                    });
                }
                _throwError(f, e) {
                    l(!1, f, this.localName, e);
                }
            }
            var $e = Ce("data"), Je = Ce("dataLength"), Ye = Ce("writeData");
            class qe {
                constructor(){
                    Object.defineProperty(this, Ye, {
                        value: Ze
                    }), Object.defineProperty(this, $e, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Je, {
                        writable: !0,
                        value: void 0
                    }), Re(this, $e)[$e] = [], Re(this, Je)[Je] = 0;
                }
                get data() {
                    return I(Re(this, $e)[$e]);
                }
                get length() {
                    return Re(this, Je)[Je];
                }
                appendWriter(f) {
                    return Re(this, Ye)[Ye](v(f.data));
                }
                writeBytes(f) {
                    let e = v(f);
                    const t = e.length % Ue;
                    return t && (e = v(I([
                        e,
                        Le.slice(t)
                    ]))), Re(this, Ye)[Ye](e);
                }
                writeValue(f) {
                    return Re(this, Ye)[Ye](He(f));
                }
                writeUpdatableValue() {
                    const f = Re(this, $e)[$e].length;
                    return Re(this, $e)[$e].push(Le), Re(this, Je)[Je] += Ue, (e)=>{
                        Re(this, $e)[$e][f] = He(e);
                    };
                }
            }
            function Ze(f) {
                return Re(this, $e)[$e].push(f), Re(this, Je)[Je] += f.length, f.length;
            }
            var Xe = Ce("data"), Qe = Ce("offset"), ft = Ce("bytesRead"), et = Ce("parent"), tt = Ce("maxInflation"), nt = Ce("incrementBytesRead"), rt = Ce("peekBytes");
            class at {
                constructor(f, e, t){
                    Object.defineProperty(this, rt, {
                        value: st
                    }), Object.defineProperty(this, nt, {
                        value: it
                    }), this.allowLoose = void 0, Object.defineProperty(this, Xe, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Qe, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ft, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, et, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, tt, {
                        writable: !0,
                        value: void 0
                    }), o(this, {
                        allowLoose: !!e
                    }), Re(this, Xe)[Xe] = v(f), Re(this, ft)[ft] = 0, Re(this, et)[et] = null, Re(this, tt)[tt] = null != t ? t : 1024, Re(this, Qe)[Qe] = 0;
                }
                get data() {
                    return x(Re(this, Xe)[Xe]);
                }
                get dataLength() {
                    return Re(this, Xe)[Xe].length;
                }
                get consumed() {
                    return Re(this, Qe)[Qe];
                }
                get bytes() {
                    return new Uint8Array(Re(this, Xe)[Xe]);
                }
                subReader(f) {
                    const e = new at(Re(this, Xe)[Xe].slice(Re(this, Qe)[Qe] + f), this.allowLoose, Re(this, tt)[tt]);
                    return Re(e, et)[et] = this, e;
                }
                readBytes(f, e) {
                    let t = Re(this, rt)[rt](0, f, !!e);
                    return Re(this, nt)[nt](f), Re(this, Qe)[Qe] += t.length, t.slice(0, f);
                }
                readValue() {
                    return H(this.readBytes(Ue));
                }
                readIndex() {
                    return W(H(this.readBytes(Ue)));
                }
            }
            function it(f) {
                if (Re(this, et)[et]) return Re(Re(this, et)[et], nt)[nt](f);
                Re(this, ft)[ft] += f, u(Re(this, tt)[tt] < 1 || Re(this, ft)[ft] <= Re(this, tt)[tt] * this.dataLength, "compressed ABI data exceeds inflation ratio of ".concat(Re(this, tt)[tt], " ( see: https://github.com/ethers-io/ethers.js/issues/4537 )"), "BUFFER_OVERRUN", {
                    buffer: v(Re(this, Xe)[Xe]),
                    offset: Re(this, Qe)[Qe],
                    length: f,
                    info: {
                        bytesRead: Re(this, ft)[ft],
                        dataLength: this.dataLength
                    }
                });
            }
            function st(f, e, t) {
                let n = Math.ceil(e / Ue) * Ue;
                return Re(this, Qe)[Qe] + n > Re(this, Xe)[Xe].length && (this.allowLoose && t && Re(this, Qe)[Qe] + e <= Re(this, Xe)[Xe].length ? n = e : u(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
                    buffer: v(Re(this, Xe)[Xe]),
                    length: Re(this, Xe)[Xe].length,
                    offset: Re(this, Qe)[Qe] + n
                })), Re(this, Xe)[Xe].slice(Re(this, Qe)[Qe], Re(this, Qe)[Qe] + n);
            }
            function ot(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var bt = 0;
            function ct(f) {
                return "__private_" + bt++ + "_" + f;
            }
            const dt = {};
            function ut(f, e) {
                let t = !1;
                return e < 0 && (t = !0, e *= -1), new yt(dt, "".concat(t ? "" : "u", "int").concat(e), f, {
                    signed: t,
                    width: e
                });
            }
            function lt(f, e) {
                return new yt(dt, "bytes".concat(e || ""), f, {
                    size: e
                });
            }
            const ht = Symbol.for("_ethers_typed");
            var pt = ct("options");
            class yt {
                constructor(f, e, t, n){
                    this.type = void 0, this.value = void 0, Object.defineProperty(this, pt, {
                        writable: !0,
                        value: void 0
                    }), this._typedSymbol = void 0, null == n && (n = null), m(dt, f, "Typed"), o(this, {
                        _typedSymbol: ht,
                        type: e,
                        value: t
                    }), ot(this, pt)[pt] = n, this.format();
                }
                format() {
                    if ("array" === this.type) throw new Error("");
                    if ("dynamicArray" === this.type) throw new Error("");
                    return "tuple" === this.type ? "tuple(".concat(this.value.map((f)=>f.format()).join(","), ")") : this.type;
                }
                defaultValue() {
                    return 0;
                }
                minValue() {
                    return 0;
                }
                maxValue() {
                    return 0;
                }
                isBigInt() {
                    return !!this.type.match(/^u?int[0-9]+$/);
                }
                isData() {
                    return this.type.startsWith("bytes");
                }
                isString() {
                    return "string" === this.type;
                }
                get tupleName() {
                    if ("tuple" !== this.type) throw TypeError("not a tuple");
                    return ot(this, pt)[pt];
                }
                get arrayLength() {
                    if ("array" !== this.type) throw TypeError("not an array");
                    return !0 === ot(this, pt)[pt] ? -1 : !1 === ot(this, pt)[pt] ? this.value.length : null;
                }
                static from(f, e) {
                    return new yt(dt, f, e);
                }
                static uint8(f) {
                    return ut(f, 8);
                }
                static uint16(f) {
                    return ut(f, 16);
                }
                static uint24(f) {
                    return ut(f, 24);
                }
                static uint32(f) {
                    return ut(f, 32);
                }
                static uint40(f) {
                    return ut(f, 40);
                }
                static uint48(f) {
                    return ut(f, 48);
                }
                static uint56(f) {
                    return ut(f, 56);
                }
                static uint64(f) {
                    return ut(f, 64);
                }
                static uint72(f) {
                    return ut(f, 72);
                }
                static uint80(f) {
                    return ut(f, 80);
                }
                static uint88(f) {
                    return ut(f, 88);
                }
                static uint96(f) {
                    return ut(f, 96);
                }
                static uint104(f) {
                    return ut(f, 104);
                }
                static uint112(f) {
                    return ut(f, 112);
                }
                static uint120(f) {
                    return ut(f, 120);
                }
                static uint128(f) {
                    return ut(f, 128);
                }
                static uint136(f) {
                    return ut(f, 136);
                }
                static uint144(f) {
                    return ut(f, 144);
                }
                static uint152(f) {
                    return ut(f, 152);
                }
                static uint160(f) {
                    return ut(f, 160);
                }
                static uint168(f) {
                    return ut(f, 168);
                }
                static uint176(f) {
                    return ut(f, 176);
                }
                static uint184(f) {
                    return ut(f, 184);
                }
                static uint192(f) {
                    return ut(f, 192);
                }
                static uint200(f) {
                    return ut(f, 200);
                }
                static uint208(f) {
                    return ut(f, 208);
                }
                static uint216(f) {
                    return ut(f, 216);
                }
                static uint224(f) {
                    return ut(f, 224);
                }
                static uint232(f) {
                    return ut(f, 232);
                }
                static uint240(f) {
                    return ut(f, 240);
                }
                static uint248(f) {
                    return ut(f, 248);
                }
                static uint256(f) {
                    return ut(f, 256);
                }
                static uint(f) {
                    return ut(f, 256);
                }
                static int8(f) {
                    return ut(f, -8);
                }
                static int16(f) {
                    return ut(f, -16);
                }
                static int24(f) {
                    return ut(f, -24);
                }
                static int32(f) {
                    return ut(f, -32);
                }
                static int40(f) {
                    return ut(f, -40);
                }
                static int48(f) {
                    return ut(f, -48);
                }
                static int56(f) {
                    return ut(f, -56);
                }
                static int64(f) {
                    return ut(f, -64);
                }
                static int72(f) {
                    return ut(f, -72);
                }
                static int80(f) {
                    return ut(f, -80);
                }
                static int88(f) {
                    return ut(f, -88);
                }
                static int96(f) {
                    return ut(f, -96);
                }
                static int104(f) {
                    return ut(f, -104);
                }
                static int112(f) {
                    return ut(f, -112);
                }
                static int120(f) {
                    return ut(f, -120);
                }
                static int128(f) {
                    return ut(f, -128);
                }
                static int136(f) {
                    return ut(f, -136);
                }
                static int144(f) {
                    return ut(f, -144);
                }
                static int152(f) {
                    return ut(f, -152);
                }
                static int160(f) {
                    return ut(f, -160);
                }
                static int168(f) {
                    return ut(f, -168);
                }
                static int176(f) {
                    return ut(f, -176);
                }
                static int184(f) {
                    return ut(f, -184);
                }
                static int192(f) {
                    return ut(f, -192);
                }
                static int200(f) {
                    return ut(f, -200);
                }
                static int208(f) {
                    return ut(f, -208);
                }
                static int216(f) {
                    return ut(f, -216);
                }
                static int224(f) {
                    return ut(f, -224);
                }
                static int232(f) {
                    return ut(f, -232);
                }
                static int240(f) {
                    return ut(f, -240);
                }
                static int248(f) {
                    return ut(f, -248);
                }
                static int256(f) {
                    return ut(f, -256);
                }
                static int(f) {
                    return ut(f, -256);
                }
                static bytes1(f) {
                    return lt(f, 1);
                }
                static bytes2(f) {
                    return lt(f, 2);
                }
                static bytes3(f) {
                    return lt(f, 3);
                }
                static bytes4(f) {
                    return lt(f, 4);
                }
                static bytes5(f) {
                    return lt(f, 5);
                }
                static bytes6(f) {
                    return lt(f, 6);
                }
                static bytes7(f) {
                    return lt(f, 7);
                }
                static bytes8(f) {
                    return lt(f, 8);
                }
                static bytes9(f) {
                    return lt(f, 9);
                }
                static bytes10(f) {
                    return lt(f, 10);
                }
                static bytes11(f) {
                    return lt(f, 11);
                }
                static bytes12(f) {
                    return lt(f, 12);
                }
                static bytes13(f) {
                    return lt(f, 13);
                }
                static bytes14(f) {
                    return lt(f, 14);
                }
                static bytes15(f) {
                    return lt(f, 15);
                }
                static bytes16(f) {
                    return lt(f, 16);
                }
                static bytes17(f) {
                    return lt(f, 17);
                }
                static bytes18(f) {
                    return lt(f, 18);
                }
                static bytes19(f) {
                    return lt(f, 19);
                }
                static bytes20(f) {
                    return lt(f, 20);
                }
                static bytes21(f) {
                    return lt(f, 21);
                }
                static bytes22(f) {
                    return lt(f, 22);
                }
                static bytes23(f) {
                    return lt(f, 23);
                }
                static bytes24(f) {
                    return lt(f, 24);
                }
                static bytes25(f) {
                    return lt(f, 25);
                }
                static bytes26(f) {
                    return lt(f, 26);
                }
                static bytes27(f) {
                    return lt(f, 27);
                }
                static bytes28(f) {
                    return lt(f, 28);
                }
                static bytes29(f) {
                    return lt(f, 29);
                }
                static bytes30(f) {
                    return lt(f, 30);
                }
                static bytes31(f) {
                    return lt(f, 31);
                }
                static bytes32(f) {
                    return lt(f, 32);
                }
                static address(f) {
                    return new yt(dt, "address", f);
                }
                static bool(f) {
                    return new yt(dt, "bool", !!f);
                }
                static bytes(f) {
                    return new yt(dt, "bytes", f);
                }
                static string(f) {
                    return new yt(dt, "string", f);
                }
                static array(f, e) {
                    throw new Error("not implemented yet");
                }
                static tuple(f, e) {
                    throw new Error("not implemented yet");
                }
                static overrides(f) {
                    return new yt(dt, "overrides", Object.assign({}, f));
                }
                static isTyped(f) {
                    return f && "object" == typeof f && "_typedSymbol" in f && f._typedSymbol === ht;
                }
                static dereference(f, e) {
                    if (yt.isTyped(f)) {
                        if (f.type !== e) throw new Error("invalid type: expecetd ".concat(e, ", got ").concat(f.type));
                        return f.value;
                    }
                    return f;
                }
            }
            class mt extends We {
                constructor(f){
                    super("address", "address", f, !1);
                }
                defaultValue() {
                    return "0x0000000000000000000000000000000000000000";
                }
                encode(f, e) {
                    let t = yt.dereference(e, "string");
                    try {
                        t = ne(t);
                    } catch (f) {
                        return this._throwError(f.message, e);
                    }
                    return f.writeValue(t);
                }
                decode(f) {
                    return ne($(f.readValue(), 20));
                }
            }
            class gt extends We {
                constructor(f){
                    super(f.name, f.type, "_", f.dynamic), this.coder = void 0, this.coder = f;
                }
                defaultValue() {
                    return this.coder.defaultValue();
                }
                encode(f, e) {
                    return this.coder.encode(f, e);
                }
                decode(f) {
                    return this.coder.decode(f);
                }
            }
            function wt(f, e, t) {
                let n = [];
                if (Array.isArray(t)) n = t;
                else if (t && "object" == typeof t) {
                    let f = {};
                    n = e.map((e)=>{
                        const n = e.localName;
                        return u(n, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", {
                            argument: "values",
                            info: {
                                coder: e
                            },
                            value: t
                        }), u(!f[n], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", {
                            argument: "values",
                            info: {
                                coder: e
                            },
                            value: t
                        }), f[n] = !0, t[n];
                    });
                } else l(!1, "invalid tuple value", "tuple", t);
                l(e.length === n.length, "types/value length mismatch", "tuple", t);
                let r = new qe, a = new qe, i = [];
                e.forEach((f, e)=>{
                    let t = n[e];
                    if (f.dynamic) {
                        let e = a.length;
                        f.encode(a, t);
                        let n = r.writeUpdatableValue();
                        i.push((f)=>{
                            n(f + e);
                        });
                    } else f.encode(r, t);
                }), i.forEach((f)=>{
                    f(r.length);
                });
                let s = f.appendWriter(r);
                return s += f.appendWriter(a), s;
            }
            function vt(f, e) {
                let t = [], n = [], r = f.subReader(0);
                return e.forEach((e)=>{
                    let a = null;
                    if (e.dynamic) {
                        let t = f.readIndex(), n = r.subReader(t);
                        try {
                            a = e.decode(n);
                        } catch (f) {
                            if (c(f, "BUFFER_OVERRUN")) throw f;
                            a = f, a.baseType = e.name, a.name = e.localName, a.type = e.type;
                        }
                    } else try {
                        a = e.decode(f);
                    } catch (f) {
                        if (c(f, "BUFFER_OVERRUN")) throw f;
                        a = f, a.baseType = e.name, a.name = e.localName, a.type = e.type;
                    }
                    if (null == a) throw new Error("investigate");
                    t.push(a), n.push(e.localName || null);
                }), Ge.fromItems(t, n);
            }
            class Et extends We {
                constructor(f, e, t){
                    super("array", f.type + "[" + (e >= 0 ? e : "") + "]", t, -1 === e || f.dynamic), this.coder = void 0, this.length = void 0, o(this, {
                        coder: f,
                        length: e
                    });
                }
                defaultValue() {
                    const f = this.coder.defaultValue(), e = [];
                    for(let t = 0; t < this.length; t++)e.push(f);
                    return e;
                }
                encode(f, e) {
                    const t = yt.dereference(e, "array");
                    Array.isArray(t) || this._throwError("expected array value", t);
                    let n = this.length;
                    -1 === n && (n = t.length, f.writeValue(t.length)), h(t.length, n, "coder array" + (this.localName ? " " + this.localName : ""));
                    let r = [];
                    for(let f = 0; f < t.length; f++)r.push(this.coder);
                    return wt(f, r, t);
                }
                decode(f) {
                    let e = this.length;
                    -1 === e && (e = f.readIndex(), u(e * Ue <= f.dataLength, "insufficient data length", "BUFFER_OVERRUN", {
                        buffer: f.bytes,
                        offset: e * Ue,
                        length: f.dataLength
                    }));
                    let t = [];
                    for(let f = 0; f < e; f++)t.push(new gt(this.coder));
                    return vt(f, t);
                }
            }
            class Tt extends We {
                constructor(f){
                    super("bool", "bool", f, !1);
                }
                defaultValue() {
                    return !1;
                }
                encode(f, e) {
                    const t = yt.dereference(e, "bool");
                    return f.writeValue(t ? 1 : 0);
                }
                decode(f) {
                    return !!f.readValue();
                }
            }
            class At extends We {
                constructor(f, e){
                    super(f, f, e, !0);
                }
                defaultValue() {
                    return "0x";
                }
                encode(f, e) {
                    e = v(e);
                    let t = f.writeValue(e.length);
                    return t += f.writeBytes(e), t;
                }
                decode(f) {
                    return f.readBytes(f.readIndex(), !0);
                }
            }
            class xt extends At {
                constructor(f){
                    super("bytes", f);
                }
                decode(f) {
                    return x(super.decode(f));
                }
            }
            class It extends We {
                constructor(f, e){
                    let t = "bytes" + String(f);
                    super(t, t, e, !1), this.size = void 0, o(this, {
                        size: f
                    }, {
                        size: "number"
                    });
                }
                defaultValue() {
                    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
                }
                encode(f, e) {
                    let t = v(yt.dereference(e, this.type));
                    return t.length !== this.size && this._throwError("incorrect data length", e), f.writeBytes(t);
                }
                decode(f) {
                    return x(f.readBytes(this.size));
                }
            }
            const kt = new Uint8Array([]);
            class Ot extends We {
                constructor(f){
                    super("null", "", f, !1);
                }
                defaultValue() {
                    return null;
                }
                encode(f, e) {
                    return null != e && this._throwError("not null", e), f.writeBytes(kt);
                }
                decode(f) {
                    return f.readBytes(0), null;
                }
            }
            const _t = BigInt(0), Pt = BigInt(1), St = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
            class Rt extends We {
                constructor(f, e, t){
                    const n = (e ? "int" : "uint") + 8 * f;
                    super(n, n, t, !1), this.size = void 0, this.signed = void 0, o(this, {
                        size: f,
                        signed: e
                    }, {
                        size: "number",
                        signed: "boolean"
                    });
                }
                defaultValue() {
                    return 0;
                }
                encode(f, e) {
                    let t = z(yt.dereference(e, this.type)), n = K(St, 256);
                    if (this.signed) {
                        let f = K(n, 8 * this.size - 1);
                        (t > f || t < -(f + Pt)) && this._throwError("value out-of-bounds", e), t = j(t, 256);
                    } else (t < _t || t > K(n, 8 * this.size)) && this._throwError("value out-of-bounds", e);
                    return f.writeValue(t);
                }
                decode(f) {
                    let e = K(f.readValue(), 8 * this.size);
                    return this.signed && (e = function(f, e) {
                        const t = V(f, "value"), n = BigInt(W(e, "width"));
                        return u(t >> n === D, "overflow", "NUMERIC_FAULT", {
                            operation: "fromTwos",
                            fault: "overflow",
                            value: f
                        }), t >> n - F ? -((~t & (F << n) - F) + F) : t;
                    }(e, 8 * this.size)), e;
                }
            }
            class Nt extends At {
                constructor(f){
                    super("string", f);
                }
                defaultValue() {
                    return "";
                }
                encode(f, e) {
                    return super.encode(f, C(yt.dereference(e, "string")));
                }
                decode(f) {
                    return U(super.decode(f));
                }
            }
            class Ct extends We {
                constructor(f, e){
                    let t = !1;
                    const n = [];
                    f.forEach((f)=>{
                        f.dynamic && (t = !0), n.push(f.type);
                    }), super("tuple", "tuple(" + n.join(",") + ")", e, t), this.coders = void 0, o(this, {
                        coders: Object.freeze(f.slice())
                    });
                }
                defaultValue() {
                    const f = [];
                    this.coders.forEach((e)=>{
                        f.push(e.defaultValue());
                    });
                    const e = this.coders.reduce((f, e)=>{
                        const t = e.localName;
                        return t && (f[t] || (f[t] = 0), f[t]++), f;
                    }, {});
                    return this.coders.forEach((t, n)=>{
                        let r = t.localName;
                        r && 1 === e[r] && ("length" === r && (r = "_length"), null == f[r] && (f[r] = f[n]));
                    }), Object.freeze(f);
                }
                encode(f, e) {
                    const t = yt.dereference(e, "tuple");
                    return wt(f, this.coders, t);
                }
                decode(f) {
                    return vt(f, this.coders);
                }
            }
            function Ut(f) {
                return Zf(C(f));
            }
            var Lt;
            function Bt(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Dt = 0;
            function Ft(f) {
                return "__private_" + Dt++ + "_" + f;
            }
            function Mt(f) {
                const e = new Set;
                return f.forEach((f)=>e.add(f)), Object.freeze(e);
            }
            const jt = Mt("external public payable override".split(" ")), Kt = "constant external internal payable private public pure view override", zt = Mt(Kt.split(" ")), Vt = "constructor error event fallback function receive struct", Gt = Mt(Vt.split(" ")), Ht = "calldata memory storage payable indexed", Wt = Mt(Ht.split(" ")), $t = Mt([
                Vt,
                Ht,
                "tuple returns",
                Kt
            ].join(" ").split(" ")), Jt = {
                "(": "OPEN_PAREN",
                ")": "CLOSE_PAREN",
                "[": "OPEN_BRACKET",
                "]": "CLOSE_BRACKET",
                ",": "COMMA",
                "@": "AT"
            }, Yt = new RegExp("^(\\s*)"), qt = new RegExp("^([0-9]+)"), Zt = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), Xt = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), Qt = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
            var fn = Ft("offset"), en = Ft("tokens"), tn = Ft("subTokenString");
            class nn {
                get offset() {
                    return Bt(this, fn)[fn];
                }
                get length() {
                    return Bt(this, en)[en].length - Bt(this, fn)[fn];
                }
                constructor(f){
                    Object.defineProperty(this, tn, {
                        value: rn
                    }), Object.defineProperty(this, fn, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, en, {
                        writable: !0,
                        value: void 0
                    }), Bt(this, fn)[fn] = 0, Bt(this, en)[en] = f.slice();
                }
                clone() {
                    return new nn(Bt(this, en)[en]);
                }
                reset() {
                    Bt(this, fn)[fn] = 0;
                }
                popKeyword(f) {
                    const e = this.peek();
                    if ("KEYWORD" !== e.type || !f.has(e.text)) throw new Error("expected keyword ".concat(e.text));
                    return this.pop().text;
                }
                popType(f) {
                    if (this.peek().type !== f) {
                        const e = this.peek();
                        throw new Error("expected ".concat(f, "; got ").concat(e.type, " ").concat(JSON.stringify(e.text)));
                    }
                    return this.pop().text;
                }
                popParen() {
                    const f = this.peek();
                    if ("OPEN_PAREN" !== f.type) throw new Error("bad start");
                    const e = Bt(this, tn)[tn](Bt(this, fn)[fn] + 1, f.match + 1);
                    return Bt(this, fn)[fn] = f.match + 1, e;
                }
                popParams() {
                    const f = this.peek();
                    if ("OPEN_PAREN" !== f.type) throw new Error("bad start");
                    const e = [];
                    for(; Bt(this, fn)[fn] < f.match - 1;){
                        const f = this.peek().linkNext;
                        e.push(Bt(this, tn)[tn](Bt(this, fn)[fn] + 1, f)), Bt(this, fn)[fn] = f;
                    }
                    return Bt(this, fn)[fn] = f.match + 1, e;
                }
                peek() {
                    if (Bt(this, fn)[fn] >= Bt(this, en)[en].length) throw new Error("out-of-bounds");
                    return Bt(this, en)[en][Bt(this, fn)[fn]];
                }
                peekKeyword(f) {
                    const e = this.peekType("KEYWORD");
                    return null != e && f.has(e) ? e : null;
                }
                peekType(f) {
                    if (0 === this.length) return null;
                    const e = this.peek();
                    return e.type === f ? e.text : null;
                }
                pop() {
                    const f = this.peek();
                    return Bt(this, fn)[fn]++, f;
                }
                toString() {
                    const f = [];
                    for(let e = Bt(this, fn)[fn]; e < Bt(this, en)[en].length; e++){
                        const t = Bt(this, en)[en][e];
                        f.push("".concat(t.type, ":").concat(t.text));
                    }
                    return "<TokenString ".concat(f.join(" "), ">");
                }
            }
            function rn() {
                let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return new Lt(Bt(this, en)[en].slice(f, e).map((e)=>Object.freeze(Object.assign({}, e, {
                        match: e.match - f,
                        linkBack: e.linkBack - f,
                        linkNext: e.linkNext - f
                    }))));
            }
            function an(f) {
                const e = [], t = (e)=>{
                    const t = a < f.length ? JSON.stringify(f[a]) : "$EOI";
                    throw new Error("invalid token ".concat(t, " at ").concat(a, ": ").concat(e));
                };
                let n = [], r = [], a = 0;
                for(; a < f.length;){
                    let i = f.substring(a), s = i.match(Yt);
                    s && (a += s[1].length, i = f.substring(a));
                    const o = {
                        depth: n.length,
                        linkBack: -1,
                        linkNext: -1,
                        match: -1,
                        type: "",
                        text: "",
                        offset: a,
                        value: -1
                    };
                    e.push(o);
                    let b = Jt[i[0]] || "";
                    if (b) {
                        if (o.type = b, o.text = i[0], a++, "OPEN_PAREN" === b) n.push(e.length - 1), r.push(e.length - 1);
                        else if ("CLOSE_PAREN" == b) 0 === n.length && t("no matching open bracket"), o.match = n.pop(), e[o.match].match = e.length - 1, o.depth--, o.linkBack = r.pop(), e[o.linkBack].linkNext = e.length - 1;
                        else if ("COMMA" === b) o.linkBack = r.pop(), e[o.linkBack].linkNext = e.length - 1, r.push(e.length - 1);
                        else if ("OPEN_BRACKET" === b) o.type = "BRACKET";
                        else if ("CLOSE_BRACKET" === b) {
                            let f = e.pop().text;
                            if (e.length > 0 && "NUMBER" === e[e.length - 1].type) {
                                const t = e.pop().text;
                                f = t + f, e[e.length - 1].value = W(t);
                            }
                            if (0 === e.length || "BRACKET" !== e[e.length - 1].type) throw new Error("missing opening bracket");
                            e[e.length - 1].text += f;
                        }
                    } else if (s = i.match(Zt), s) {
                        if (o.text = s[1], a += o.text.length, $t.has(o.text)) {
                            o.type = "KEYWORD";
                            continue;
                        }
                        if (o.text.match(Qt)) {
                            o.type = "TYPE";
                            continue;
                        }
                        o.type = "ID";
                    } else {
                        if (s = i.match(qt), !s) throw new Error("unexpected token ".concat(JSON.stringify(i[0]), " at position ").concat(a));
                        o.text = s[1], o.type = "NUMBER", a += o.text.length;
                    }
                }
                return new nn(e.map((f)=>Object.freeze(f)));
            }
            function sn(f, e) {
                let t = [];
                for(const n in e.keys())f.has(n) && t.push(n);
                if (t.length > 1) throw new Error("conflicting types: ".concat(t.join(", ")));
            }
            function on(f, e) {
                if (e.peekKeyword(Gt)) {
                    const t = e.pop().text;
                    if (t !== f) throw new Error("expected ".concat(f, ", got ").concat(t));
                }
                return e.popType("ID");
            }
            function bn(f, e) {
                const t = new Set;
                for(;;){
                    const n = f.peekType("KEYWORD");
                    if (null == n || e && !e.has(n)) break;
                    if (f.pop(), t.has(n)) throw new Error("duplicate keywords: ".concat(JSON.stringify(n)));
                    t.add(n);
                }
                return Object.freeze(t);
            }
            function cn(f) {
                let e = bn(f, zt);
                return sn(e, Mt("constant payable nonpayable".split(" "))), sn(e, Mt("pure view payable nonpayable".split(" "))), e.has("view") ? "view" : e.has("pure") ? "pure" : e.has("payable") ? "payable" : e.has("nonpayable") ? "nonpayable" : e.has("constant") ? "view" : "nonpayable";
            }
            function dn(f, e) {
                return f.popParams().map((f)=>kn.from(f, e));
            }
            function un(f) {
                if (f.peekType("AT")) {
                    if (f.pop(), f.peekType("NUMBER")) return z(f.pop().text);
                    throw new Error("invalid gas");
                }
                return null;
            }
            function ln(f) {
                if (f.length) throw new Error("unexpected tokens at offset ".concat(f.offset, ": ").concat(f.toString()));
            }
            Lt = nn;
            const hn = new RegExp(/^(.*)\[([0-9]*)\]$/);
            function pn(f) {
                const e = f.match(Qt);
                if (l(e, "invalid type", "type", f), "uint" === f) return "uint256";
                if ("int" === f) return "int256";
                if (e[2]) {
                    const t = parseInt(e[2]);
                    l(0 !== t && t <= 32, "invalid bytes length", "type", f);
                } else if (e[3]) {
                    const t = parseInt(e[3]);
                    l(0 !== t && t <= 256 && t % 8 == 0, "invalid numeric width", "type", f);
                }
                return f;
            }
            const yn = {}, mn = Symbol.for("_ethers_internal"), gn = "_ParamTypeInternal", wn = "_ErrorInternal", vn = "_EventInternal", En = "_ConstructorInternal", Tn = "_FallbackInternal", An = "_FunctionInternal", xn = "_StructInternal";
            var In = Ft("walkAsync");
            class kn {
                constructor(f, e, t, n, r, a, i, s){
                    if (Object.defineProperty(this, In, {
                        value: On
                    }), this.name = void 0, this.type = void 0, this.baseType = void 0, this.indexed = void 0, this.components = void 0, this.arrayLength = void 0, this.arrayChildren = void 0, m(f, yn, "ParamType"), Object.defineProperty(this, mn, {
                        value: gn
                    }), a && (a = Object.freeze(a.slice())), "array" === n) {
                        if (null == i || null == s) throw new Error("");
                    } else if (null != i || null != s) throw new Error("");
                    if ("tuple" === n) {
                        if (null == a) throw new Error("");
                    } else if (null != a) throw new Error("");
                    o(this, {
                        name: e,
                        type: t,
                        baseType: n,
                        indexed: r,
                        components: a,
                        arrayLength: i,
                        arrayChildren: s
                    });
                }
                format(f) {
                    if (null == f && (f = "sighash"), "json" === f) {
                        const e = this.name || "";
                        if (this.isArray()) {
                            const f = JSON.parse(this.arrayChildren.format("json"));
                            return f.name = e, f.type += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]"), JSON.stringify(f);
                        }
                        const t = {
                            type: "tuple" === this.baseType ? "tuple" : this.type,
                            name: e
                        };
                        return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.isTuple() && (t.components = this.components.map((e)=>JSON.parse(e.format(f)))), JSON.stringify(t);
                    }
                    let e = "";
                    return this.isArray() ? (e += this.arrayChildren.format(f), e += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]")) : this.isTuple() ? e += "(" + this.components.map((e)=>e.format(f)).join("full" === f ? ", " : ",") + ")" : e += this.type, "sighash" !== f && (!0 === this.indexed && (e += " indexed"), "full" === f && this.name && (e += " " + this.name)), e;
                }
                isArray() {
                    return "array" === this.baseType;
                }
                isTuple() {
                    return "tuple" === this.baseType;
                }
                isIndexable() {
                    return null != this.indexed;
                }
                walk(f, e) {
                    if (this.isArray()) {
                        if (!Array.isArray(f)) throw new Error("invalid array value");
                        if (-1 !== this.arrayLength && f.length !== this.arrayLength) throw new Error("array is wrong length");
                        const t = this;
                        return f.map((f)=>t.arrayChildren.walk(f, e));
                    }
                    if (this.isTuple()) {
                        if (!Array.isArray(f)) throw new Error("invalid tuple value");
                        if (f.length !== this.components.length) throw new Error("array is wrong length");
                        const t = this;
                        return f.map((f, n)=>t.components[n].walk(f, e));
                    }
                    return e(this.type, f);
                }
                async walkAsync(f, e) {
                    const t = [], n = [
                        f
                    ];
                    return Bt(this, In)[In](t, f, e, (f)=>{
                        n[0] = f;
                    }), t.length && await Promise.all(t), n[0];
                }
                static from(f, e) {
                    if (kn.isParamType(f)) return f;
                    if ("string" == typeof f) try {
                        return kn.from(an(f), e);
                    } catch (e) {
                        l(!1, "invalid param type", "obj", f);
                    }
                    else if (f instanceof nn) {
                        let t = "", n = "", r = null;
                        bn(f, Mt([
                            "tuple"
                        ])).has("tuple") || f.peekType("OPEN_PAREN") ? (n = "tuple", r = f.popParams().map((f)=>kn.from(f)), t = "tuple(".concat(r.map((f)=>f.format()).join(","), ")")) : (t = pn(f.popType("TYPE")), n = t);
                        let a = null, i = null;
                        for(; f.length && f.peekType("BRACKET");){
                            const e = f.pop();
                            a = new kn(yn, "", t, n, null, r, i, a), i = e.value, t += e.text, n = "array", r = null;
                        }
                        let s = null;
                        if (bn(f, Wt).has("indexed")) {
                            if (!e) throw new Error("");
                            s = !0;
                        }
                        const o = f.peekType("ID") ? f.pop().text : "";
                        if (f.length) throw new Error("leftover tokens");
                        return new kn(yn, o, t, n, s, r, i, a);
                    }
                    const t = f.name;
                    l(!t || "string" == typeof t && t.match(Xt), "invalid name", "obj.name", t);
                    let n = f.indexed;
                    null != n && (l(e, "parameter cannot be indexed", "obj.indexed", f.indexed), n = !!n);
                    let r = f.type, a = r.match(hn);
                    if (a) {
                        const e = parseInt(a[2] || "-1"), i = kn.from({
                            type: a[1],
                            components: f.components
                        });
                        return new kn(yn, t || "", r, "array", n, null, e, i);
                    }
                    if ("tuple" === r || r.startsWith("tuple(") || r.startsWith("(")) {
                        const e = null != f.components ? f.components.map((f)=>kn.from(f)) : null;
                        return new kn(yn, t || "", r, "tuple", n, e, null, null);
                    }
                    return r = pn(f.type), new kn(yn, t || "", r, r, n, null, null, null);
                }
                static isParamType(f) {
                    return f && f[mn] === gn;
                }
            }
            function On(f, e, t, n) {
                if (this.isArray()) {
                    if (!Array.isArray(e)) throw new Error("invalid array value");
                    if (-1 !== this.arrayLength && e.length !== this.arrayLength) throw new Error("array is wrong length");
                    const r = this.arrayChildren, a = e.slice();
                    return a.forEach((e, n)=>{
                        Bt(r, In)[In](f, e, t, (f)=>{
                            a[n] = f;
                        });
                    }), void n(a);
                }
                if (this.isTuple()) {
                    const r = this.components;
                    let a;
                    if (Array.isArray(e)) a = e.slice();
                    else {
                        if (null == e || "object" != typeof e) throw new Error("invalid tuple value");
                        a = r.map((f)=>{
                            if (!f.name) throw new Error("cannot use object value with unnamed components");
                            if (!(f.name in e)) throw new Error("missing value for component ".concat(f.name));
                            return e[f.name];
                        });
                    }
                    if (a.length !== this.components.length) throw new Error("array is wrong length");
                    return a.forEach((e, n)=>{
                        Bt(r[n], In)[In](f, e, t, (f)=>{
                            a[n] = f;
                        });
                    }), void n(a);
                }
                const r = t(this.type, e);
                r.then ? f.push(async function() {
                    n(await r);
                }()) : n(r);
            }
            class _n {
                constructor(f, e, t){
                    this.type = void 0, this.inputs = void 0, m(f, yn, "Fragment"), o(this, {
                        type: e,
                        inputs: t = Object.freeze(t.slice())
                    });
                }
                static from(f) {
                    if ("string" == typeof f) {
                        try {
                            _n.from(JSON.parse(f));
                        } catch (f) {}
                        return _n.from(an(f));
                    }
                    if (f instanceof nn) switch(f.peekKeyword(Gt)){
                        case "constructor":
                            return Cn.from(f);
                        case "error":
                            return Rn.from(f);
                        case "event":
                            return Nn.from(f);
                        case "fallback":
                        case "receive":
                            return Un.from(f);
                        case "function":
                            return Ln.from(f);
                        case "struct":
                            return Bn.from(f);
                    }
                    else if ("object" == typeof f) {
                        switch(f.type){
                            case "constructor":
                                return Cn.from(f);
                            case "error":
                                return Rn.from(f);
                            case "event":
                                return Nn.from(f);
                            case "fallback":
                            case "receive":
                                return Un.from(f);
                            case "function":
                                return Ln.from(f);
                            case "struct":
                                return Bn.from(f);
                        }
                        u(!1, "unsupported type: ".concat(f.type), "UNSUPPORTED_OPERATION", {
                            operation: "Fragment.from"
                        });
                    }
                    l(!1, "unsupported frgament object", "obj", f);
                }
                static isConstructor(f) {
                    return Cn.isFragment(f);
                }
                static isError(f) {
                    return Rn.isFragment(f);
                }
                static isEvent(f) {
                    return Nn.isFragment(f);
                }
                static isFunction(f) {
                    return Ln.isFragment(f);
                }
                static isStruct(f) {
                    return Bn.isFragment(f);
                }
            }
            class Pn extends _n {
                constructor(f, e, t, n){
                    super(f, e, n), this.name = void 0, l("string" == typeof t && t.match(Xt), "invalid identifier", "name", t), n = Object.freeze(n.slice()), o(this, {
                        name: t
                    });
                }
            }
            function Sn(f, e) {
                return "(" + e.map((e)=>e.format(f)).join("full" === f ? ", " : ",") + ")";
            }
            class Rn extends Pn {
                constructor(f, e, t){
                    super(f, "error", e, t), Object.defineProperty(this, mn, {
                        value: wn
                    });
                }
                get selector() {
                    return Ut(this.format("sighash")).substring(0, 10);
                }
                format(f) {
                    if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                        type: "error",
                        name: this.name,
                        inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                    });
                    const e = [];
                    return "sighash" !== f && e.push("error"), e.push(this.name + Sn(f, this.inputs)), e.join(" ");
                }
                static from(f) {
                    if (Rn.isFragment(f)) return f;
                    if ("string" == typeof f) return Rn.from(an(f));
                    if (f instanceof nn) {
                        const e = on("error", f), t = dn(f);
                        return ln(f), new Rn(yn, e, t);
                    }
                    return new Rn(yn, f.name, f.inputs ? f.inputs.map(kn.from) : []);
                }
                static isFragment(f) {
                    return f && f[mn] === wn;
                }
            }
            class Nn extends Pn {
                constructor(f, e, t, n){
                    super(f, "event", e, t), this.anonymous = void 0, Object.defineProperty(this, mn, {
                        value: vn
                    }), o(this, {
                        anonymous: n
                    });
                }
                get topicHash() {
                    return Ut(this.format("sighash"));
                }
                format(f) {
                    if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                        type: "event",
                        anonymous: this.anonymous,
                        name: this.name,
                        inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                    });
                    const e = [];
                    return "sighash" !== f && e.push("event"), e.push(this.name + Sn(f, this.inputs)), "sighash" !== f && this.anonymous && e.push("anonymous"), e.join(" ");
                }
                static getTopicHash(f, e) {
                    return e = (e || []).map((f)=>kn.from(f)), new Nn(yn, f, e, !1).topicHash;
                }
                static from(f) {
                    if (Nn.isFragment(f)) return f;
                    if ("string" == typeof f) try {
                        return Nn.from(an(f));
                    } catch (e) {
                        l(!1, "invalid event fragment", "obj", f);
                    }
                    else if (f instanceof nn) {
                        const e = on("event", f), t = dn(f, !0), n = !!bn(f, Mt([
                            "anonymous"
                        ])).has("anonymous");
                        return ln(f), new Nn(yn, e, t, n);
                    }
                    return new Nn(yn, f.name, f.inputs ? f.inputs.map((f)=>kn.from(f, !0)) : [], !!f.anonymous);
                }
                static isFragment(f) {
                    return f && f[mn] === vn;
                }
            }
            class Cn extends _n {
                constructor(f, e, t, n, r){
                    super(f, e, t), this.payable = void 0, this.gas = void 0, Object.defineProperty(this, mn, {
                        value: En
                    }), o(this, {
                        payable: n,
                        gas: r
                    });
                }
                format(f) {
                    if (u(null != f && "sighash" !== f, "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", {
                        operation: "format(sighash)"
                    }), "json" === f) return JSON.stringify({
                        type: "constructor",
                        stateMutability: this.payable ? "payable" : "undefined",
                        payable: this.payable,
                        gas: null != this.gas ? this.gas : void 0,
                        inputs: this.inputs.map((e)=>JSON.parse(e.format(f)))
                    });
                    const e = [
                        "constructor".concat(Sn(f, this.inputs))
                    ];
                    return this.payable && e.push("payable"), null != this.gas && e.push("@".concat(this.gas.toString())), e.join(" ");
                }
                static from(f) {
                    if (Cn.isFragment(f)) return f;
                    if ("string" == typeof f) try {
                        return Cn.from(an(f));
                    } catch (e) {
                        l(!1, "invalid constuctor fragment", "obj", f);
                    }
                    else if (f instanceof nn) {
                        bn(f, Mt([
                            "constructor"
                        ]));
                        const e = dn(f), t = !!bn(f, jt).has("payable"), n = un(f);
                        return ln(f), new Cn(yn, "constructor", e, t, n);
                    }
                    return new Cn(yn, "constructor", f.inputs ? f.inputs.map(kn.from) : [], !!f.payable, null != f.gas ? f.gas : null);
                }
                static isFragment(f) {
                    return f && f[mn] === En;
                }
            }
            class Un extends _n {
                constructor(f, e, t){
                    super(f, "fallback", e), this.payable = void 0, Object.defineProperty(this, mn, {
                        value: Tn
                    }), o(this, {
                        payable: t
                    });
                }
                format(f) {
                    const e = 0 === this.inputs.length ? "receive" : "fallback";
                    if ("json" === f) {
                        const f = this.payable ? "payable" : "nonpayable";
                        return JSON.stringify({
                            type: e,
                            stateMutability: f
                        });
                    }
                    return "".concat(e, "()").concat(this.payable ? " payable" : "");
                }
                static from(f) {
                    if (Un.isFragment(f)) return f;
                    if ("string" == typeof f) try {
                        return Un.from(an(f));
                    } catch (e) {
                        l(!1, "invalid fallback fragment", "obj", f);
                    }
                    else if (f instanceof nn) {
                        const e = f.toString();
                        if (l(f.peekKeyword(Mt([
                            "fallback",
                            "receive"
                        ])), "type must be fallback or receive", "obj", e), "receive" === f.popKeyword(Mt([
                            "fallback",
                            "receive"
                        ]))) {
                            const e = dn(f);
                            return l(0 === e.length, "receive cannot have arguments", "obj.inputs", e), bn(f, Mt([
                                "payable"
                            ])), ln(f), new Un(yn, [], !0);
                        }
                        let t = dn(f);
                        t.length ? l(1 === t.length && "bytes" === t[0].type, "invalid fallback inputs", "obj.inputs", t.map((f)=>f.format("minimal")).join(", ")) : t = [
                            kn.from("bytes")
                        ];
                        const n = cn(f);
                        if (l("nonpayable" === n || "payable" === n, "fallback cannot be constants", "obj.stateMutability", n), bn(f, Mt([
                            "returns"
                        ])).has("returns")) {
                            const e = dn(f);
                            l(1 === e.length && "bytes" === e[0].type, "invalid fallback outputs", "obj.outputs", e.map((f)=>f.format("minimal")).join(", "));
                        }
                        return ln(f), new Un(yn, t, "payable" === n);
                    }
                    if ("receive" === f.type) return new Un(yn, [], !0);
                    if ("fallback" === f.type) {
                        const e = [
                            kn.from("bytes")
                        ], t = "payable" === f.stateMutability;
                        return new Un(yn, e, t);
                    }
                    l(!1, "invalid fallback description", "obj", f);
                }
                static isFragment(f) {
                    return f && f[mn] === Tn;
                }
            }
            class Ln extends Pn {
                constructor(f, e, t, n, r, a){
                    super(f, "function", e, n), this.constant = void 0, this.outputs = void 0, this.stateMutability = void 0, this.payable = void 0, this.gas = void 0, Object.defineProperty(this, mn, {
                        value: An
                    }), o(this, {
                        constant: "view" === t || "pure" === t,
                        gas: a,
                        outputs: r = Object.freeze(r.slice()),
                        payable: "payable" === t,
                        stateMutability: t
                    });
                }
                get selector() {
                    return Ut(this.format("sighash")).substring(0, 10);
                }
                format(f) {
                    if (null == f && (f = "sighash"), "json" === f) return JSON.stringify({
                        type: "function",
                        name: this.name,
                        constant: this.constant,
                        stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                        payable: this.payable,
                        gas: null != this.gas ? this.gas : void 0,
                        inputs: this.inputs.map((e)=>JSON.parse(e.format(f))),
                        outputs: this.outputs.map((e)=>JSON.parse(e.format(f)))
                    });
                    const e = [];
                    return "sighash" !== f && e.push("function"), e.push(this.name + Sn(f, this.inputs)), "sighash" !== f && ("nonpayable" !== this.stateMutability && e.push(this.stateMutability), this.outputs && this.outputs.length && (e.push("returns"), e.push(Sn(f, this.outputs))), null != this.gas && e.push("@".concat(this.gas.toString()))), e.join(" ");
                }
                static getSelector(f, e) {
                    return e = (e || []).map((f)=>kn.from(f)), new Ln(yn, f, "view", e, [], null).selector;
                }
                static from(f) {
                    if (Ln.isFragment(f)) return f;
                    if ("string" == typeof f) try {
                        return Ln.from(an(f));
                    } catch (e) {
                        l(!1, "invalid function fragment", "obj", f);
                    }
                    else if (f instanceof nn) {
                        const e = on("function", f), t = dn(f), n = cn(f);
                        let r = [];
                        bn(f, Mt([
                            "returns"
                        ])).has("returns") && (r = dn(f));
                        const a = un(f);
                        return ln(f), new Ln(yn, e, n, t, r, a);
                    }
                    let e = f.stateMutability;
                    return null == e && (e = "payable", "boolean" == typeof f.constant ? (e = "view", f.constant || (e = "payable", "boolean" != typeof f.payable || f.payable || (e = "nonpayable"))) : "boolean" != typeof f.payable || f.payable || (e = "nonpayable")), new Ln(yn, f.name, e, f.inputs ? f.inputs.map(kn.from) : [], f.outputs ? f.outputs.map(kn.from) : [], null != f.gas ? f.gas : null);
                }
                static isFragment(f) {
                    return f && f[mn] === An;
                }
            }
            class Bn extends Pn {
                constructor(f, e, t){
                    super(f, "struct", e, t), Object.defineProperty(this, mn, {
                        value: xn
                    });
                }
                format() {
                    throw new Error("@TODO");
                }
                static from(f) {
                    if ("string" == typeof f) try {
                        return Bn.from(an(f));
                    } catch (e) {
                        l(!1, "invalid struct fragment", "obj", f);
                    }
                    else if (f instanceof nn) {
                        const e = on("struct", f), t = dn(f);
                        return ln(f), new Bn(yn, e, t);
                    }
                    return new Bn(yn, f.name, f.inputs ? f.inputs.map(kn.from) : []);
                }
                static isFragment(f) {
                    return f && f[mn] === xn;
                }
            }
            function Dn(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Fn = 0;
            function Mn(f) {
                return "__private_" + Fn++ + "_" + f;
            }
            const jn = new Map;
            jn.set(0, "GENERIC_PANIC"), jn.set(1, "ASSERT_FALSE"), jn.set(17, "OVERFLOW"), jn.set(18, "DIVIDE_BY_ZERO"), jn.set(33, "ENUM_RANGE_ERROR"), jn.set(34, "BAD_STORAGE_DATA"), jn.set(49, "STACK_UNDERFLOW"), jn.set(50, "ARRAY_RANGE_ERROR"), jn.set(65, "OUT_OF_MEMORY"), jn.set(81, "UNINITIALIZED_FUNCTION_CALL");
            const Kn = new RegExp(/^bytes([0-9]*)$/), zn = new RegExp(/^(u?int)([0-9]*)$/);
            let Vn = null, Gn = 1024;
            var Hn = Mn("getCoder");
            class Wn {
                constructor(){
                    Object.defineProperty(this, Hn, {
                        value: $n
                    });
                }
                getDefaultValue(f) {
                    const e = f.map((f)=>Dn(this, Hn)[Hn](kn.from(f)));
                    return new Ct(e, "_").defaultValue();
                }
                encode(f, e) {
                    h(e.length, f.length, "types/values length mismatch");
                    const t = f.map((f)=>Dn(this, Hn)[Hn](kn.from(f))), n = new Ct(t, "_"), r = new qe;
                    return n.encode(r, e), r.data;
                }
                decode(f, e, t) {
                    const n = f.map((f)=>Dn(this, Hn)[Hn](kn.from(f)));
                    return new Ct(n, "_").decode(new at(e, t, Gn));
                }
                static _setDefaultMaxInflation(f) {
                    l("number" == typeof f && Number.isInteger(f), "invalid defaultMaxInflation factor", "value", f), Gn = f;
                }
                static defaultAbiCoder() {
                    return null == Vn && (Vn = new Wn), Vn;
                }
                static getBuiltinCallException(f, e, t) {
                    return function(f, e, t, n) {
                        let r = "missing revert data", a = null, i = null;
                        if (t) {
                            r = "execution reverted";
                            const f = w(t);
                            if (t = x(t), 0 === f.length) r += " (no data present; likely require(false) occurred", a = "require(false)";
                            else if (f.length % 32 != 4) r += " (could not decode reason; invalid data length)";
                            else if ("0x08c379a0" === x(f.slice(0, 4))) try {
                                a = n.decode([
                                    "string"
                                ], f.slice(4))[0], i = {
                                    signature: "Error(string)",
                                    name: "Error",
                                    args: [
                                        a
                                    ]
                                }, r += ": ".concat(JSON.stringify(a));
                            } catch (f) {
                                r += " (could not decode reason; invalid string data)";
                            }
                            else if ("0x4e487b71" === x(f.slice(0, 4))) try {
                                const e = Number(n.decode([
                                    "uint256"
                                ], f.slice(4))[0]);
                                i = {
                                    signature: "Panic(uint256)",
                                    name: "Panic",
                                    args: [
                                        e
                                    ]
                                }, a = "Panic due to ".concat(jn.get(e) || "UNKNOWN", "(").concat(e, ")"), r += ": ".concat(a);
                            } catch (f) {
                                r += " (could not decode panic code)";
                            }
                            else r += " (unknown custom error)";
                        }
                        const s = {
                            to: e.to ? ne(e.to) : null,
                            data: e.data || "0x"
                        };
                        return e.from && (s.from = ne(e.from)), d(r, "CALL_EXCEPTION", {
                            action: f,
                            data: t,
                            reason: a,
                            transaction: s,
                            invocation: null,
                            revert: i
                        });
                    }(f, e, t, Wn.defaultAbiCoder());
                }
            }
            function $n(f) {
                if (f.isArray()) return new Et(Dn(this, Hn)[Hn](f.arrayChildren), f.arrayLength, f.name);
                if (f.isTuple()) return new Ct(f.components.map((f)=>Dn(this, Hn)[Hn](f)), f.name);
                switch(f.baseType){
                    case "address":
                        return new mt(f.name);
                    case "bool":
                        return new Tt(f.name);
                    case "string":
                        return new Nt(f.name);
                    case "bytes":
                        return new xt(f.name);
                    case "":
                        return new Ot(f.name);
                }
                let e = f.type.match(zn);
                if (e) {
                    let t = parseInt(e[2] || "256");
                    return l(0 !== t && t <= 256 && t % 8 == 0, "invalid " + e[1] + " bit length", "param", f), new Rt(t / 8, "int" === e[1], f.name);
                }
                if (e = f.type.match(Kn), e) {
                    let t = parseInt(e[1]);
                    return l(0 !== t && t <= 32, "invalid bytes length", "param", f), new It(t, f.name);
                }
                l(!1, "invalid type", "type", f.type);
            }
            const Jn = async function(f, e, t, n, r, a, i, s, o, b) {
                const c = {
                    owner: e,
                    spender: t,
                    value: n,
                    validAfter: r,
                    validBefore: a,
                    nonce: ce(e, i, n, s, o)
                }, d = await f(b, {
                    ApproveWithAuthorization: [
                        {
                            name: "owner",
                            type: "address"
                        },
                        {
                            name: "spender",
                            type: "address"
                        },
                        {
                            name: "value",
                            type: "uint256"
                        },
                        {
                            name: "validAfter",
                            type: "uint256"
                        },
                        {
                            name: "validBefore",
                            type: "uint256"
                        },
                        {
                            name: "nonce",
                            type: "bytes32"
                        }
                    ]
                }, c), u = Se.from(d);
                return Wn.defaultAbiCoder().encode([
                    "address",
                    "address",
                    "uint256",
                    "uint256",
                    "uint256",
                    "bytes32",
                    "uint8",
                    "bytes32",
                    "bytes32"
                ], [
                    c.owner,
                    c.spender,
                    c.value,
                    c.validAfter,
                    c.validBefore,
                    c.nonce,
                    u.v,
                    u.r,
                    u.s
                ]);
            }, Yn = async function(f, e, t, n, r, a, i, s, o, b, c) {
                const d = {
                    from: e,
                    to: t,
                    value: n,
                    validAfter: r,
                    validBefore: a,
                    nonce: ce(e, i, n, s, o)
                }, u = await f(b, {
                    ReceiveWithAuthorization: [
                        {
                            name: "from",
                            type: "address"
                        },
                        {
                            name: "to",
                            type: "address"
                        },
                        {
                            name: "value",
                            type: "uint256"
                        },
                        {
                            name: "validAfter",
                            type: "uint256"
                        },
                        {
                            name: "validBefore",
                            type: "uint256"
                        },
                        {
                            name: "nonce",
                            type: "bytes32"
                        }
                    ]
                }, d);
                let l;
                const h = Wn.defaultAbiCoder();
                if (c === le.receiveWithAuthorizationEOA) {
                    const f = Se.from(u);
                    l = h.encode([
                        "address",
                        "address",
                        "uint256",
                        "uint256",
                        "uint256",
                        "bytes32",
                        "uint8",
                        "bytes32",
                        "bytes32"
                    ], [
                        d.from,
                        d.to,
                        d.value,
                        d.validAfter,
                        d.validBefore,
                        d.nonce,
                        f.v,
                        f.r,
                        f.s
                    ]);
                } else l = h.encode([
                    "address",
                    "address",
                    "uint256",
                    "uint256",
                    "uint256",
                    "bytes32",
                    "bytes"
                ], [
                    d.from,
                    d.to,
                    d.value,
                    d.validAfter,
                    d.validBefore,
                    d.nonce,
                    u
                ]);
                return l;
            };
            class qn extends _f {
                constructor(f, e){
                    super(), this.finished = !1, this.destroyed = !1, of(f);
                    const t = Of(e);
                    if (this.iHash = f.create(), "function" != typeof this.iHash.update) throw new Error("Expected instance of class which extends utils.Hash");
                    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
                    const n = this.blockLen, r = new Uint8Array(n);
                    r.set(t.length > n ? f.create().update(t).digest() : t);
                    for(let f = 0; f < r.length; f++)r[f] ^= 54;
                    this.iHash.update(r), this.oHash = f.create();
                    for(let f = 0; f < r.length; f++)r[f] ^= 106;
                    this.oHash.update(r), r.fill(0);
                }
                update(f) {
                    return bf(this), this.iHash.update(f), this;
                }
                digestInto(f) {
                    bf(this), sf(f, this.outputLen), this.finished = !0, this.iHash.digestInto(f), this.oHash.update(f), this.oHash.digestInto(f), this.destroy();
                }
                digest() {
                    const f = new Uint8Array(this.oHash.outputLen);
                    return this.digestInto(f), f;
                }
                _cloneInto(f) {
                    f || (f = Object.create(Object.getPrototypeOf(this), {}));
                    const { oHash: e, iHash: t, finished: n, destroyed: r, blockLen: a, outputLen: i } = this;
                    return f.finished = n, f.destroyed = r, f.blockLen = a, f.outputLen = i, f.oHash = e._cloneInto(f.oHash), f.iHash = t._cloneInto(f.iHash), f;
                }
                destroy() {
                    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
                }
            }
            const Zn = (f, e, t)=>new qn(f, e).update(t).digest();
            function Xn(f, e, t, n) {
                const { c: r, dkLen: a, DK: i, PRF: s, PRFSalt: o } = function(f, e, t, n) {
                    of(f);
                    const r = Sf({
                        dkLen: 32,
                        asyncTick: 10
                    }, n), { c: a, dkLen: i, asyncTick: s } = r;
                    if (af(a), af(i), af(s), a < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
                    const o = Of(e), b = Of(t), c = new Uint8Array(i), d = Zn.create(f, o), u = d._cloneInto().update(b);
                    return {
                        c: a,
                        dkLen: i,
                        asyncTick: s,
                        DK: c,
                        PRF: d,
                        PRFSalt: u
                    };
                }(f, e, t, n);
                let b;
                const c = new Uint8Array(4), d = Af(c), u = new Uint8Array(s.outputLen);
                for(let f = 1, e = 0; e < a; f++, e += s.outputLen){
                    const t = i.subarray(e, e + s.outputLen);
                    d.setInt32(0, f, !1), (b = o._cloneInto(b)).update(c).digestInto(u), t.set(u.subarray(0, t.length));
                    for(let f = 1; f < r; f++){
                        s._cloneInto(b).update(u).digestInto(u);
                        for(let f = 0; f < t.length; f++)t[f] ^= u[f];
                    }
                }
                return function(f, e, t, n, r) {
                    return f.destroy(), e.destroy(), n && n.destroy(), r.fill(0), t;
                }(s, o, i, b, u);
            }
            Zn.create = (f, e)=>new qn(f, e);
            class Qn extends _f {
                constructor(f, e, t, n){
                    super(), this.blockLen = f, this.outputLen = e, this.padOffset = t, this.isLE = n, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(f), this.view = Af(this.buffer);
                }
                update(f) {
                    bf(this);
                    const { view: e, buffer: t, blockLen: n } = this, r = (f = Of(f)).length;
                    for(let a = 0; a < r;){
                        const i = Math.min(n - this.pos, r - a);
                        if (i !== n) t.set(f.subarray(a, a + i), this.pos), this.pos += i, a += i, this.pos === n && (this.process(e, 0), this.pos = 0);
                        else {
                            const e = Af(f);
                            for(; n <= r - a; a += n)this.process(e, a);
                        }
                    }
                    return this.length += f.length, this.roundClean(), this;
                }
                digestInto(f) {
                    bf(this), cf(f, this), this.finished = !0;
                    const { buffer: e, view: t, blockLen: n, isLE: r } = this;
                    let { pos: a } = this;
                    e[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > n - a && (this.process(t, 0), a = 0);
                    for(let f = a; f < n; f++)e[f] = 0;
                    !function(f, e, t, n) {
                        if ("function" == typeof f.setBigUint64) return f.setBigUint64(e, t, n);
                        const r = BigInt(32), a = BigInt(4294967295), i = Number(t >> r & a), s = Number(t & a), o = n ? 4 : 0, b = n ? 0 : 4;
                        f.setUint32(e + o, i, n), f.setUint32(e + b, s, n);
                    }(t, n - 8, BigInt(8 * this.length), r), this.process(t, 0);
                    const i = Af(f), s = this.outputLen;
                    if (s % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
                    const o = s / 4, b = this.get();
                    if (o > b.length) throw new Error("_sha2: outputLen bigger than state");
                    for(let f = 0; f < o; f++)i.setUint32(4 * f, b[f], r);
                }
                digest() {
                    const { buffer: f, outputLen: e } = this;
                    this.digestInto(f);
                    const t = f.slice(0, e);
                    return this.destroy(), t;
                }
                _cloneInto(f) {
                    f || (f = new this.constructor), f.set(...this.get());
                    const { blockLen: e, buffer: t, length: n, finished: r, destroyed: a, pos: i } = this;
                    return f.length = n, f.pos = i, f.finished = r, f.destroyed = a, n % e && f.buffer.set(t), f;
                }
            }
            const fr = (f, e, t)=>f & e ^ ~f & t, er = (f, e, t)=>f & e ^ f & t ^ e & t, tr = new Uint32Array([
                1116352408,
                1899447441,
                3049323471,
                3921009573,
                961987163,
                1508970993,
                2453635748,
                2870763221,
                3624381080,
                310598401,
                607225278,
                1426881987,
                1925078388,
                2162078206,
                2614888103,
                3248222580,
                3835390401,
                4022224774,
                264347078,
                604807628,
                770255983,
                1249150122,
                1555081692,
                1996064986,
                2554220882,
                2821834349,
                2952996808,
                3210313671,
                3336571891,
                3584528711,
                113926993,
                338241895,
                666307205,
                773529912,
                1294757372,
                1396182291,
                1695183700,
                1986661051,
                2177026350,
                2456956037,
                2730485921,
                2820302411,
                3259730800,
                3345764771,
                3516065817,
                3600352804,
                4094571909,
                275423344,
                430227734,
                506948616,
                659060556,
                883997877,
                958139571,
                1322822218,
                1537002063,
                1747873779,
                1955562222,
                2024104815,
                2227730452,
                2361852424,
                2428436474,
                2756734187,
                3204031479,
                3329325298
            ]), nr = new Uint32Array([
                1779033703,
                3144134277,
                1013904242,
                2773480762,
                1359893119,
                2600822924,
                528734635,
                1541459225
            ]), rr = new Uint32Array(64);
            class ar extends Qn {
                constructor(){
                    super(64, 32, 8, !1), this.A = 0 | nr[0], this.B = 0 | nr[1], this.C = 0 | nr[2], this.D = 0 | nr[3], this.E = 0 | nr[4], this.F = 0 | nr[5], this.G = 0 | nr[6], this.H = 0 | nr[7];
                }
                get() {
                    const { A: f, B: e, C: t, D: n, E: r, F: a, G: i, H: s } = this;
                    return [
                        f,
                        e,
                        t,
                        n,
                        r,
                        a,
                        i,
                        s
                    ];
                }
                set(f, e, t, n, r, a, i, s) {
                    this.A = 0 | f, this.B = 0 | e, this.C = 0 | t, this.D = 0 | n, this.E = 0 | r, this.F = 0 | a, this.G = 0 | i, this.H = 0 | s;
                }
                process(f, e) {
                    for(let t = 0; t < 16; t++, e += 4)rr[t] = f.getUint32(e, !1);
                    for(let f = 16; f < 64; f++){
                        const e = rr[f - 15], t = rr[f - 2], n = xf(e, 7) ^ xf(e, 18) ^ e >>> 3, r = xf(t, 17) ^ xf(t, 19) ^ t >>> 10;
                        rr[f] = r + rr[f - 7] + n + rr[f - 16] | 0;
                    }
                    let { A: t, B: n, C: r, D: a, E: i, F: s, G: o, H: b } = this;
                    for(let f = 0; f < 64; f++){
                        const e = b + (xf(i, 6) ^ xf(i, 11) ^ xf(i, 25)) + fr(i, s, o) + tr[f] + rr[f] | 0, c = (xf(t, 2) ^ xf(t, 13) ^ xf(t, 22)) + er(t, n, r) | 0;
                        b = o, o = s, s = i, i = a + e | 0, a = r, r = n, n = t, t = e + c | 0;
                    }
                    t = t + this.A | 0, n = n + this.B | 0, r = r + this.C | 0, a = a + this.D | 0, i = i + this.E | 0, s = s + this.F | 0, o = o + this.G | 0, b = b + this.H | 0, this.set(t, n, r, a, i, s, o, b);
                }
                roundClean() {
                    rr.fill(0);
                }
                destroy() {
                    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
                }
            }
            const ir = Rf(()=>new ar), [sr, or] = (()=>wf.split([
                    "0x428a2f98d728ae22",
                    "0x7137449123ef65cd",
                    "0xb5c0fbcfec4d3b2f",
                    "0xe9b5dba58189dbbc",
                    "0x3956c25bf348b538",
                    "0x59f111f1b605d019",
                    "0x923f82a4af194f9b",
                    "0xab1c5ed5da6d8118",
                    "0xd807aa98a3030242",
                    "0x12835b0145706fbe",
                    "0x243185be4ee4b28c",
                    "0x550c7dc3d5ffb4e2",
                    "0x72be5d74f27b896f",
                    "0x80deb1fe3b1696b1",
                    "0x9bdc06a725c71235",
                    "0xc19bf174cf692694",
                    "0xe49b69c19ef14ad2",
                    "0xefbe4786384f25e3",
                    "0x0fc19dc68b8cd5b5",
                    "0x240ca1cc77ac9c65",
                    "0x2de92c6f592b0275",
                    "0x4a7484aa6ea6e483",
                    "0x5cb0a9dcbd41fbd4",
                    "0x76f988da831153b5",
                    "0x983e5152ee66dfab",
                    "0xa831c66d2db43210",
                    "0xb00327c898fb213f",
                    "0xbf597fc7beef0ee4",
                    "0xc6e00bf33da88fc2",
                    "0xd5a79147930aa725",
                    "0x06ca6351e003826f",
                    "0x142929670a0e6e70",
                    "0x27b70a8546d22ffc",
                    "0x2e1b21385c26c926",
                    "0x4d2c6dfc5ac42aed",
                    "0x53380d139d95b3df",
                    "0x650a73548baf63de",
                    "0x766a0abb3c77b2a8",
                    "0x81c2c92e47edaee6",
                    "0x92722c851482353b",
                    "0xa2bfe8a14cf10364",
                    "0xa81a664bbc423001",
                    "0xc24b8b70d0f89791",
                    "0xc76c51a30654be30",
                    "0xd192e819d6ef5218",
                    "0xd69906245565a910",
                    "0xf40e35855771202a",
                    "0x106aa07032bbd1b8",
                    "0x19a4c116b8d2d0c8",
                    "0x1e376c085141ab53",
                    "0x2748774cdf8eeb99",
                    "0x34b0bcb5e19b48a8",
                    "0x391c0cb3c5c95a63",
                    "0x4ed8aa4ae3418acb",
                    "0x5b9cca4f7763e373",
                    "0x682e6ff3d6b2b8a3",
                    "0x748f82ee5defb2fc",
                    "0x78a5636f43172f60",
                    "0x84c87814a1f0ab72",
                    "0x8cc702081a6439ec",
                    "0x90befffa23631e28",
                    "0xa4506cebde82bde9",
                    "0xbef9a3f7b2c67915",
                    "0xc67178f2e372532b",
                    "0xca273eceea26619c",
                    "0xd186b8c721c0c207",
                    "0xeada7dd6cde0eb1e",
                    "0xf57d4f7fee6ed178",
                    "0x06f067aa72176fba",
                    "0x0a637dc5a2c898a6",
                    "0x113f9804bef90dae",
                    "0x1b710b35131c471b",
                    "0x28db77f523047d84",
                    "0x32caab7b40c72493",
                    "0x3c9ebe0a15c9bebc",
                    "0x431d67c49c100d4c",
                    "0x4cc5d4becb3e42b6",
                    "0x597f299cfc657e2a",
                    "0x5fcb6fab3ad6faec",
                    "0x6c44198c4a475817"
                ].map((f)=>BigInt(f))))(), br = new Uint32Array(80), cr = new Uint32Array(80);
            class dr extends Qn {
                constructor(){
                    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
                }
                get() {
                    const { Ah: f, Al: e, Bh: t, Bl: n, Ch: r, Cl: a, Dh: i, Dl: s, Eh: o, El: b, Fh: c, Fl: d, Gh: u, Gl: l, Hh: h, Hl: p } = this;
                    return [
                        f,
                        e,
                        t,
                        n,
                        r,
                        a,
                        i,
                        s,
                        o,
                        b,
                        c,
                        d,
                        u,
                        l,
                        h,
                        p
                    ];
                }
                set(f, e, t, n, r, a, i, s, o, b, c, d, u, l, h, p) {
                    this.Ah = 0 | f, this.Al = 0 | e, this.Bh = 0 | t, this.Bl = 0 | n, this.Ch = 0 | r, this.Cl = 0 | a, this.Dh = 0 | i, this.Dl = 0 | s, this.Eh = 0 | o, this.El = 0 | b, this.Fh = 0 | c, this.Fl = 0 | d, this.Gh = 0 | u, this.Gl = 0 | l, this.Hh = 0 | h, this.Hl = 0 | p;
                }
                process(f, e) {
                    for(let t = 0; t < 16; t++, e += 4)br[t] = f.getUint32(e), cr[t] = f.getUint32(e += 4);
                    for(let f = 16; f < 80; f++){
                        const e = 0 | br[f - 15], t = 0 | cr[f - 15], n = wf.rotrSH(e, t, 1) ^ wf.rotrSH(e, t, 8) ^ wf.shrSH(e, t, 7), r = wf.rotrSL(e, t, 1) ^ wf.rotrSL(e, t, 8) ^ wf.shrSL(e, t, 7), a = 0 | br[f - 2], i = 0 | cr[f - 2], s = wf.rotrSH(a, i, 19) ^ wf.rotrBH(a, i, 61) ^ wf.shrSH(a, i, 6), o = wf.rotrSL(a, i, 19) ^ wf.rotrBL(a, i, 61) ^ wf.shrSL(a, i, 6), b = wf.add4L(r, o, cr[f - 7], cr[f - 16]), c = wf.add4H(b, n, s, br[f - 7], br[f - 16]);
                        br[f] = 0 | c, cr[f] = 0 | b;
                    }
                    let { Ah: t, Al: n, Bh: r, Bl: a, Ch: i, Cl: s, Dh: o, Dl: b, Eh: c, El: d, Fh: u, Fl: l, Gh: h, Gl: p, Hh: y, Hl: m } = this;
                    for(let f = 0; f < 80; f++){
                        const e = wf.rotrSH(c, d, 14) ^ wf.rotrSH(c, d, 18) ^ wf.rotrBH(c, d, 41), g = wf.rotrSL(c, d, 14) ^ wf.rotrSL(c, d, 18) ^ wf.rotrBL(c, d, 41), w = c & u ^ ~c & h, v = d & l ^ ~d & p, E = wf.add5L(m, g, v, or[f], cr[f]), T = wf.add5H(E, y, e, w, sr[f], br[f]), A = 0 | E, x = wf.rotrSH(t, n, 28) ^ wf.rotrBH(t, n, 34) ^ wf.rotrBH(t, n, 39), I = wf.rotrSL(t, n, 28) ^ wf.rotrBL(t, n, 34) ^ wf.rotrBL(t, n, 39), k = t & r ^ t & i ^ r & i, O = n & a ^ n & s ^ a & s;
                        y = 0 | h, m = 0 | p, h = 0 | u, p = 0 | l, u = 0 | c, l = 0 | d, ({ h: c, l: d } = wf.add(0 | o, 0 | b, 0 | T, 0 | A)), o = 0 | i, b = 0 | s, i = 0 | r, s = 0 | a, r = 0 | t, a = 0 | n;
                        const _ = wf.add3L(A, I, O);
                        t = wf.add3H(_, T, x, k), n = 0 | _;
                    }
                    ({ h: t, l: n } = wf.add(0 | this.Ah, 0 | this.Al, 0 | t, 0 | n)), ({ h: r, l: a } = wf.add(0 | this.Bh, 0 | this.Bl, 0 | r, 0 | a)), ({ h: i, l: s } = wf.add(0 | this.Ch, 0 | this.Cl, 0 | i, 0 | s)), ({ h: o, l: b } = wf.add(0 | this.Dh, 0 | this.Dl, 0 | o, 0 | b)), ({ h: c, l: d } = wf.add(0 | this.Eh, 0 | this.El, 0 | c, 0 | d)), ({ h: u, l } = wf.add(0 | this.Fh, 0 | this.Fl, 0 | u, 0 | l)), ({ h, l: p } = wf.add(0 | this.Gh, 0 | this.Gl, 0 | h, 0 | p)), ({ h: y, l: m } = wf.add(0 | this.Hh, 0 | this.Hl, 0 | y, 0 | m)), this.set(t, n, r, a, i, s, o, b, c, d, u, l, h, p, y, m);
                }
                roundClean() {
                    br.fill(0), cr.fill(0);
                }
                destroy() {
                    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
            }
            const ur = Rf(()=>new dr), lr = function() {
                if ("undefined" != typeof self) return self;
                if ("TURBOPACK compile-time falsy", 0) {
                    "TURBOPACK unreachable";
                }
                if ("undefined" != typeof global) return global;
                throw new Error("unable to locate global object");
            }(), hr = lr.crypto || lr.msCrypto;
            function pr(f) {
                switch(f){
                    case "sha256":
                        return ir.create();
                    case "sha512":
                        return ur.create();
                }
                l(!1, "invalid hashing algorithm name", "algorithm", f);
            }
            let yr = !1;
            const mr = function(f) {
                return new Uint8Array(function(f) {
                    u(null != hr, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
                        operation: "randomBytes"
                    }), l(Number.isInteger(f) && f > 0 && f <= 1024, "invalid length", "length", f);
                    const e = new Uint8Array(f);
                    return hr.getRandomValues(e), e;
                }(f));
            };
            let gr = mr;
            function wr(f) {
                return gr(f);
            }
            wr._ = mr, wr.lock = function() {
                yr = !0;
            }, wr.register = function(f) {
                if (yr) throw new Error("randomBytes is locked");
                gr = f;
            }, Object.freeze(wr), BigInt(0);
            const vr = BigInt(1), Er = BigInt(2), Tr = (f)=>f instanceof Uint8Array, Ar = Array.from({
                length: 256
            }, (f, e)=>e.toString(16).padStart(2, "0"));
            function xr(f) {
                if (!Tr(f)) throw new Error("Uint8Array expected");
                let e = "";
                for(let t = 0; t < f.length; t++)e += Ar[f[t]];
                return e;
            }
            function Ir(f) {
                if ("string" != typeof f) throw new Error("hex string expected, got " + typeof f);
                return BigInt("" === f ? "0" : "0x".concat(f));
            }
            function kr(f) {
                if ("string" != typeof f) throw new Error("hex string expected, got " + typeof f);
                const e = f.length;
                if (e % 2) throw new Error("padded hex string expected, got unpadded hex of length " + e);
                const t = new Uint8Array(e / 2);
                for(let e = 0; e < t.length; e++){
                    const n = 2 * e, r = f.slice(n, n + 2), a = Number.parseInt(r, 16);
                    if (Number.isNaN(a) || a < 0) throw new Error("Invalid byte sequence");
                    t[e] = a;
                }
                return t;
            }
            function Or(f) {
                return Ir(xr(f));
            }
            function _r(f) {
                if (!Tr(f)) throw new Error("Uint8Array expected");
                return Ir(xr(Uint8Array.from(f).reverse()));
            }
            function Pr(f, e) {
                return kr(f.toString(16).padStart(2 * e, "0"));
            }
            function Sr(f, e) {
                return Pr(f, e).reverse();
            }
            function Rr(f, e, t) {
                let n;
                if ("string" == typeof e) try {
                    n = kr(e);
                } catch (t) {
                    throw new Error("".concat(f, ' must be valid hex string, got "').concat(e, '". Cause: ').concat(t));
                }
                else {
                    if (!Tr(e)) throw new Error("".concat(f, " must be hex string or Uint8Array"));
                    n = Uint8Array.from(e);
                }
                const r = n.length;
                if ("number" == typeof t && r !== t) throw new Error("".concat(f, " expected ").concat(t, " bytes, got ").concat(r));
                return n;
            }
            function Nr() {
                for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                const n = new Uint8Array(e.reduce((f, e)=>f + e.length, 0));
                let r = 0;
                return e.forEach((f)=>{
                    if (!Tr(f)) throw new Error("Uint8Array expected");
                    n.set(f, r), r += f.length;
                }), n;
            }
            const Cr = (f)=>(Er << BigInt(f - 1)) - vr, Ur = (f)=>new Uint8Array(f), Lr = (f)=>Uint8Array.from(f);
            function Br(f, e, t) {
                if ("number" != typeof f || f < 2) throw new Error("hashLen must be a number");
                if ("number" != typeof e || e < 2) throw new Error("qByteLen must be a number");
                if ("function" != typeof t) throw new Error("hmacFn must be a function");
                let n = Ur(f), r = Ur(f), a = 0;
                const i = ()=>{
                    n.fill(1), r.fill(0), a = 0;
                }, s = function() {
                    for(var f = arguments.length, e = new Array(f), a = 0; a < f; a++)e[a] = arguments[a];
                    return t(r, n, ...e);
                }, o = function() {
                    let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ur();
                    r = s(Lr([
                        0
                    ]), f), n = s(), 0 !== f.length && (r = s(Lr([
                        1
                    ]), f), n = s());
                }, b = ()=>{
                    if (a++ >= 1e3) throw new Error("drbg: tried 1000 values");
                    let f = 0;
                    const t = [];
                    for(; f < e;){
                        n = s();
                        const e = n.slice();
                        t.push(e), f += n.length;
                    }
                    return Nr(...t);
                };
                return (f, e)=>{
                    let t;
                    for(i(), o(f); !(t = e(b()));)o();
                    return i(), t;
                };
            }
            const Dr = {
                bigint: (f)=>"bigint" == typeof f,
                function: (f)=>"function" == typeof f,
                boolean: (f)=>"boolean" == typeof f,
                string: (f)=>"string" == typeof f,
                stringOrUint8Array: (f)=>"string" == typeof f || f instanceof Uint8Array,
                isSafeInteger: (f)=>Number.isSafeInteger(f),
                array: (f)=>Array.isArray(f),
                field: (f, e)=>e.Fp.isValid(f),
                hash: (f)=>"function" == typeof f && Number.isSafeInteger(f.outputLen)
            };
            function Fr(f, e) {
                let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                const n = (e, t, n)=>{
                    const r = Dr[t];
                    if ("function" != typeof r) throw new Error('Invalid validator "'.concat(t, '", expected function'));
                    const a = f[e];
                    if (!(n && void 0 === a || r(a, f))) throw new Error("Invalid param ".concat(String(e), "=").concat(a, " (").concat(typeof a, "), expected ").concat(t));
                };
                for (const [f, t] of Object.entries(e))n(f, t, !1);
                for (const [f, e] of Object.entries(t))n(f, e, !0);
                return f;
            }
            const Mr = BigInt(0), jr = BigInt(1), Kr = BigInt(2), zr = BigInt(3), Vr = BigInt(4), Gr = BigInt(5), Hr = BigInt(8);
            function Wr(f, e) {
                const t = f % e;
                return t >= Mr ? t : e + t;
            }
            function $r(f, e, t) {
                if (t <= Mr || e < Mr) throw new Error("Expected power/modulo > 0");
                if (t === jr) return Mr;
                let n = jr;
                for(; e > Mr;)e & jr && (n = n * f % t), f = f * f % t, e >>= jr;
                return n;
            }
            function Jr(f, e, t) {
                let n = f;
                for(; e-- > Mr;)n *= n, n %= t;
                return n;
            }
            function Yr(f, e) {
                if (f === Mr || e <= Mr) throw new Error("invert: expected positive integers, got n=".concat(f, " mod=").concat(e));
                let t = Wr(f, e), n = e, r = Mr, a = jr, i = jr, s = Mr;
                for(; t !== Mr;){
                    const f = n / t, e = n % t, o = r - i * f, b = a - s * f;
                    n = t, t = e, r = i, a = s, i = o, s = b;
                }
                if (n !== jr) throw new Error("invert: does not exist");
                return Wr(r, e);
            }
            BigInt(9), BigInt(16);
            const qr = [
                "create",
                "isValid",
                "is0",
                "neg",
                "inv",
                "sqrt",
                "sqr",
                "eql",
                "add",
                "sub",
                "mul",
                "pow",
                "div",
                "addN",
                "subN",
                "mulN",
                "sqrN"
            ];
            function Zr(f, e) {
                const t = void 0 !== e ? e : f.toString(2).length;
                return {
                    nBitLength: t,
                    nByteLength: Math.ceil(t / 8)
                };
            }
            function Xr(f) {
                if ("bigint" != typeof f) throw new Error("field order must be bigint");
                const e = f.toString(2).length;
                return Math.ceil(e / 8);
            }
            function Qr(f) {
                const e = Xr(f);
                return e + Math.ceil(e / 2);
            }
            function fa(f, e) {
                var t = Object.keys(f);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(f);
                    e && (n = n.filter(function(e) {
                        return Object.getOwnPropertyDescriptor(f, e).enumerable;
                    })), t.push.apply(t, n);
                }
                return t;
            }
            function ea(f) {
                for(var e = 1; e < arguments.length; e++){
                    var t = null != arguments[e] ? arguments[e] : {};
                    e % 2 ? fa(Object(t), !0).forEach(function(e) {
                        ta(f, e, t[e]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : fa(Object(t)).forEach(function(e) {
                        Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                    });
                }
                return f;
            }
            function ta(f, e, t) {
                return (e = function(f) {
                    var e = function(f) {
                        if ("object" != typeof f || !f) return f;
                        var e = f[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var t = e.call(f, "string");
                            if ("object" != typeof t) return t;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(f);
                    }(f);
                    return "symbol" == typeof e ? e : e + "";
                }(e)) in f ? Object.defineProperty(f, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : f[e] = t, f;
            }
            const na = BigInt(0), ra = BigInt(1);
            function aa(f) {
                return Fr(f.Fp, qr.reduce((f, e)=>(f[e] = "function", f), {
                    ORDER: "bigint",
                    MASK: "bigint",
                    BYTES: "isSafeInteger",
                    BITS: "isSafeInteger"
                })), Fr(f, {
                    n: "bigint",
                    h: "bigint",
                    Gx: "field",
                    Gy: "field"
                }, {
                    nBitLength: "isSafeInteger",
                    nByteLength: "isSafeInteger"
                }), Object.freeze(ea(ea(ea({}, Zr(f.n, f.nBitLength)), f), {
                    p: f.Fp.ORDER
                }));
            }
            function ia(f, e) {
                var t = Object.keys(f);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(f);
                    e && (n = n.filter(function(e) {
                        return Object.getOwnPropertyDescriptor(f, e).enumerable;
                    })), t.push.apply(t, n);
                }
                return t;
            }
            function sa(f) {
                for(var e = 1; e < arguments.length; e++){
                    var t = null != arguments[e] ? arguments[e] : {};
                    e % 2 ? ia(Object(t), !0).forEach(function(e) {
                        oa(f, e, t[e]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : ia(Object(t)).forEach(function(e) {
                        Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                    });
                }
                return f;
            }
            function oa(f, e, t) {
                return (e = function(f) {
                    var e = function(f) {
                        if ("object" != typeof f || !f) return f;
                        var e = f[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var t = e.call(f, "string");
                            if ("object" != typeof t) return t;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(f);
                    }(f);
                    return "symbol" == typeof e ? e : e + "";
                }(e)) in f ? Object.defineProperty(f, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : f[e] = t, f;
            }
            const { Ph: ba, aT: ca } = f, da = {
                Err: class extends Error {
                    constructor(){
                        super(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "");
                    }
                },
                _parseInt (f) {
                    const { Err: e } = da;
                    if (f.length < 2 || 2 !== f[0]) throw new e("Invalid signature integer tag");
                    const t = f[1], n = f.subarray(2, t + 2);
                    if (!t || n.length !== t) throw new e("Invalid signature integer: wrong length");
                    if (128 & n[0]) throw new e("Invalid signature integer: negative");
                    if (0 === n[0] && !(128 & n[1])) throw new e("Invalid signature integer: unnecessary leading zero");
                    return {
                        d: ba(n),
                        l: f.subarray(t + 2)
                    };
                },
                toSig (f) {
                    const { Err: e } = da, t = "string" == typeof f ? ca(f) : f;
                    if (!(t instanceof Uint8Array)) throw new Error("ui8a expected");
                    let n = t.length;
                    if (n < 2 || 48 != t[0]) throw new e("Invalid signature tag");
                    if (t[1] !== n - 2) throw new e("Invalid signature: incorrect length");
                    const { d: r, l: a } = da._parseInt(t.subarray(2)), { d: i, l: s } = da._parseInt(a);
                    if (s.length) throw new e("Invalid signature: left bytes after parsing");
                    return {
                        r,
                        s: i
                    };
                },
                hexFromSig (f) {
                    const e = (f)=>8 & Number.parseInt(f[0], 16) ? "00" + f : f, t = (f)=>{
                        const e = f.toString(16);
                        return 1 & e.length ? "0".concat(e) : e;
                    }, n = e(t(f.s)), r = e(t(f.r)), a = n.length / 2, i = r.length / 2, s = t(a), o = t(i);
                    return "30".concat(t(i + a + 4), "02").concat(o).concat(r, "02").concat(s).concat(n);
                }
            }, ua = BigInt(0), la = BigInt(1), ha = (BigInt(2), BigInt(3));
            function pa(f) {
                const e = function(f) {
                    const e = aa(f);
                    return Fr(e, {
                        hash: "hash",
                        hmac: "function",
                        randomBytes: "function"
                    }, {
                        bits2int: "function",
                        bits2int_modN: "function",
                        lowS: "boolean"
                    }), Object.freeze(sa({
                        lowS: !0
                    }, e));
                }(f), { Fp: t, n } = e, r = t.BYTES + 1, a = 2 * t.BYTES + 1;
                function i(f) {
                    return Wr(f, n);
                }
                function s(f) {
                    return Yr(f, n);
                }
                const { ProjectivePoint: o, normPrivateKeyToScalar: b, weierstrassEquation: c, isWithinCurveOrder: d } = function(f) {
                    const e = function(f) {
                        const e = aa(f);
                        Fr(e, {
                            a: "field",
                            b: "field"
                        }, {
                            allowedPrivateKeyLengths: "array",
                            wrapPrivateKey: "boolean",
                            isTorsionFree: "function",
                            clearCofactor: "function",
                            allowInfinityPoint: "boolean",
                            fromBytes: "function",
                            toBytes: "function"
                        });
                        const { endo: t, Fp: n, a: r } = e;
                        if (t) {
                            if (!n.eql(r, n.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
                            if ("object" != typeof t || "bigint" != typeof t.beta || "function" != typeof t.splitScalar) throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
                        }
                        return Object.freeze(sa({}, e));
                    }(f), { Fp: t } = e, n = e.toBytes || ((f, e, n)=>{
                        const r = e.toAffine();
                        return Nr(Uint8Array.from([
                            4
                        ]), t.toBytes(r.x), t.toBytes(r.y));
                    }), r = e.fromBytes || ((f)=>{
                        const e = f.subarray(1);
                        return {
                            x: t.fromBytes(e.subarray(0, t.BYTES)),
                            y: t.fromBytes(e.subarray(t.BYTES, 2 * t.BYTES))
                        };
                    });
                    function a(f) {
                        const { a: n, b: r } = e, a = t.sqr(f), i = t.mul(a, f);
                        return t.add(t.add(i, t.mul(f, n)), r);
                    }
                    if (!t.eql(t.sqr(e.Gy), a(e.Gx))) throw new Error("bad generator point: equation left != right");
                    function i(f) {
                        return "bigint" == typeof f && ua < f && f < e.n;
                    }
                    function s(f) {
                        if (!i(f)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
                    }
                    function o(f) {
                        const { allowedPrivateKeyLengths: t, nByteLength: n, wrapPrivateKey: r, n: a } = e;
                        if (t && "bigint" != typeof f) {
                            if (f instanceof Uint8Array && (f = xr(f)), "string" != typeof f || !t.includes(f.length)) throw new Error("Invalid key");
                            f = f.padStart(2 * n, "0");
                        }
                        let i;
                        try {
                            i = "bigint" == typeof f ? f : Or(Rr("private key", f, n));
                        } catch (e) {
                            throw new Error("private key must be ".concat(n, " bytes, hex or bigint, not ").concat(typeof f));
                        }
                        return r && (i = Wr(i, a)), s(i), i;
                    }
                    const b = new Map;
                    function c(f) {
                        if (!(f instanceof d)) throw new Error("ProjectivePoint expected");
                    }
                    class d {
                        constructor(f, e, n){
                            if (this.px = f, this.py = e, this.pz = n, null == f || !t.isValid(f)) throw new Error("x required");
                            if (null == e || !t.isValid(e)) throw new Error("y required");
                            if (null == n || !t.isValid(n)) throw new Error("z required");
                        }
                        static fromAffine(f) {
                            const { x: e, y: n } = f || {};
                            if (!f || !t.isValid(e) || !t.isValid(n)) throw new Error("invalid affine point");
                            if (f instanceof d) throw new Error("projective point not allowed");
                            const r = (f)=>t.eql(f, t.ZERO);
                            return r(e) && r(n) ? d.ZERO : new d(e, n, t.ONE);
                        }
                        get x() {
                            return this.toAffine().x;
                        }
                        get y() {
                            return this.toAffine().y;
                        }
                        static normalizeZ(f) {
                            const e = t.invertBatch(f.map((f)=>f.pz));
                            return f.map((f, t)=>f.toAffine(e[t])).map(d.fromAffine);
                        }
                        static fromHex(f) {
                            const e = d.fromAffine(r(Rr("pointHex", f)));
                            return e.assertValidity(), e;
                        }
                        static fromPrivateKey(f) {
                            return d.BASE.multiply(o(f));
                        }
                        _setWindowSize(f) {
                            this._WINDOW_SIZE = f, b.delete(this);
                        }
                        assertValidity() {
                            if (this.is0()) {
                                if (e.allowInfinityPoint && !t.is0(this.py)) return;
                                throw new Error("bad point: ZERO");
                            }
                            const { x: f, y: n } = this.toAffine();
                            if (!t.isValid(f) || !t.isValid(n)) throw new Error("bad point: x or y not FE");
                            const r = t.sqr(n), i = a(f);
                            if (!t.eql(r, i)) throw new Error("bad point: equation left != right");
                            if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
                        }
                        hasEvenY() {
                            const { y: f } = this.toAffine();
                            if (t.isOdd) return !t.isOdd(f);
                            throw new Error("Field doesn't support isOdd");
                        }
                        equals(f) {
                            c(f);
                            const { px: e, py: n, pz: r } = this, { px: a, py: i, pz: s } = f, o = t.eql(t.mul(e, s), t.mul(a, r)), b = t.eql(t.mul(n, s), t.mul(i, r));
                            return o && b;
                        }
                        negate() {
                            return new d(this.px, t.neg(this.py), this.pz);
                        }
                        double() {
                            const { a: f, b: n } = e, r = t.mul(n, ha), { px: a, py: i, pz: s } = this;
                            let o = t.ZERO, b = t.ZERO, c = t.ZERO, u = t.mul(a, a), l = t.mul(i, i), h = t.mul(s, s), p = t.mul(a, i);
                            return p = t.add(p, p), c = t.mul(a, s), c = t.add(c, c), o = t.mul(f, c), b = t.mul(r, h), b = t.add(o, b), o = t.sub(l, b), b = t.add(l, b), b = t.mul(o, b), o = t.mul(p, o), c = t.mul(r, c), h = t.mul(f, h), p = t.sub(u, h), p = t.mul(f, p), p = t.add(p, c), c = t.add(u, u), u = t.add(c, u), u = t.add(u, h), u = t.mul(u, p), b = t.add(b, u), h = t.mul(i, s), h = t.add(h, h), u = t.mul(h, p), o = t.sub(o, u), c = t.mul(h, l), c = t.add(c, c), c = t.add(c, c), new d(o, b, c);
                        }
                        add(f) {
                            c(f);
                            const { px: n, py: r, pz: a } = this, { px: i, py: s, pz: o } = f;
                            let b = t.ZERO, u = t.ZERO, l = t.ZERO;
                            const h = e.a, p = t.mul(e.b, ha);
                            let y = t.mul(n, i), m = t.mul(r, s), g = t.mul(a, o), w = t.add(n, r), v = t.add(i, s);
                            w = t.mul(w, v), v = t.add(y, m), w = t.sub(w, v), v = t.add(n, a);
                            let E = t.add(i, o);
                            return v = t.mul(v, E), E = t.add(y, g), v = t.sub(v, E), E = t.add(r, a), b = t.add(s, o), E = t.mul(E, b), b = t.add(m, g), E = t.sub(E, b), l = t.mul(h, v), b = t.mul(p, g), l = t.add(b, l), b = t.sub(m, l), l = t.add(m, l), u = t.mul(b, l), m = t.add(y, y), m = t.add(m, y), g = t.mul(h, g), v = t.mul(p, v), m = t.add(m, g), g = t.sub(y, g), g = t.mul(h, g), v = t.add(v, g), y = t.mul(m, v), u = t.add(u, y), y = t.mul(E, v), b = t.mul(w, b), b = t.sub(b, y), y = t.mul(w, m), l = t.mul(E, l), l = t.add(l, y), new d(b, u, l);
                        }
                        subtract(f) {
                            return this.add(f.negate());
                        }
                        is0() {
                            return this.equals(d.ZERO);
                        }
                        wNAF(f) {
                            return l.wNAFCached(this, b, f, (f)=>{
                                const e = t.invertBatch(f.map((f)=>f.pz));
                                return f.map((f, t)=>f.toAffine(e[t])).map(d.fromAffine);
                            });
                        }
                        multiplyUnsafe(f) {
                            const n = d.ZERO;
                            if (f === ua) return n;
                            if (s(f), f === la) return this;
                            const { endo: r } = e;
                            if (!r) return l.unsafeLadder(this, f);
                            let { k1neg: a, k1: i, k2neg: o, k2: b } = r.splitScalar(f), c = n, u = n, h = this;
                            for(; i > ua || b > ua;)i & la && (c = c.add(h)), b & la && (u = u.add(h)), h = h.double(), i >>= la, b >>= la;
                            return a && (c = c.negate()), o && (u = u.negate()), u = new d(t.mul(u.px, r.beta), u.py, u.pz), c.add(u);
                        }
                        multiply(f) {
                            s(f);
                            let n, r, a = f;
                            const { endo: i } = e;
                            if (i) {
                                const { k1neg: f, k1: e, k2neg: s, k2: o } = i.splitScalar(a);
                                let { p: b, f: c } = this.wNAF(e), { p: u, f: h } = this.wNAF(o);
                                b = l.constTimeNegate(f, b), u = l.constTimeNegate(s, u), u = new d(t.mul(u.px, i.beta), u.py, u.pz), n = b.add(u), r = c.add(h);
                            } else {
                                const { p: f, f: e } = this.wNAF(a);
                                n = f, r = e;
                            }
                            return d.normalizeZ([
                                n,
                                r
                            ])[0];
                        }
                        multiplyAndAddUnsafe(f, e, t) {
                            const n = d.BASE, r = (f, e)=>e !== ua && e !== la && f.equals(n) ? f.multiply(e) : f.multiplyUnsafe(e), a = r(this, e).add(r(f, t));
                            return a.is0() ? void 0 : a;
                        }
                        toAffine(f) {
                            const { px: e, py: n, pz: r } = this, a = this.is0();
                            null == f && (f = a ? t.ONE : t.inv(r));
                            const i = t.mul(e, f), s = t.mul(n, f), o = t.mul(r, f);
                            if (a) return {
                                x: t.ZERO,
                                y: t.ZERO
                            };
                            if (!t.eql(o, t.ONE)) throw new Error("invZ was invalid");
                            return {
                                x: i,
                                y: s
                            };
                        }
                        isTorsionFree() {
                            const { h: f, isTorsionFree: t } = e;
                            if (f === la) return !0;
                            if (t) return t(d, this);
                            throw new Error("isTorsionFree() has not been declared for the elliptic curve");
                        }
                        clearCofactor() {
                            const { h: f, clearCofactor: t } = e;
                            return f === la ? this : t ? t(d, this) : this.multiplyUnsafe(e.h);
                        }
                        toRawBytes() {
                            let f = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                            return this.assertValidity(), n(d, this, f);
                        }
                        toHex() {
                            let f = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                            return xr(this.toRawBytes(f));
                        }
                    }
                    d.BASE = new d(e.Gx, e.Gy, t.ONE), d.ZERO = new d(t.ZERO, t.ONE, t.ZERO);
                    const u = e.nBitLength, l = function(f, e) {
                        const t = (f, e)=>{
                            const t = e.negate();
                            return f ? t : e;
                        }, n = (f)=>({
                                windows: Math.ceil(e / f) + 1,
                                windowSize: 2 ** (f - 1)
                            });
                        return {
                            constTimeNegate: t,
                            unsafeLadder (e, t) {
                                let n = f.ZERO, r = e;
                                for(; t > na;)t & ra && (n = n.add(r)), r = r.double(), t >>= ra;
                                return n;
                            },
                            precomputeWindow (f, e) {
                                const { windows: t, windowSize: r } = n(e), a = [];
                                let i = f, s = i;
                                for(let f = 0; f < t; f++){
                                    s = i, a.push(s);
                                    for(let f = 1; f < r; f++)s = s.add(i), a.push(s);
                                    i = s.double();
                                }
                                return a;
                            },
                            wNAF (e, r, a) {
                                const { windows: i, windowSize: s } = n(e);
                                let o = f.ZERO, b = f.BASE;
                                const c = BigInt(2 ** e - 1), d = 2 ** e, u = BigInt(e);
                                for(let f = 0; f < i; f++){
                                    const e = f * s;
                                    let n = Number(a & c);
                                    a >>= u, n > s && (n -= d, a += ra);
                                    const i = e, l = e + Math.abs(n) - 1, h = f % 2 != 0, p = n < 0;
                                    0 === n ? b = b.add(t(h, r[i])) : o = o.add(t(p, r[l]));
                                }
                                return {
                                    p: o,
                                    f: b
                                };
                            },
                            wNAFCached (f, e, t, n) {
                                const r = f._WINDOW_SIZE || 1;
                                let a = e.get(f);
                                return a || (a = this.precomputeWindow(f, r), 1 !== r && e.set(f, n(a))), this.wNAF(r, a, t);
                            }
                        };
                    }(d, e.endo ? Math.ceil(u / 2) : u);
                    return {
                        CURVE: e,
                        ProjectivePoint: d,
                        normPrivateKeyToScalar: o,
                        weierstrassEquation: a,
                        isWithinCurveOrder: i
                    };
                }(sa(sa({}, e), {}, {
                    toBytes (f, e, n) {
                        const r = e.toAffine(), a = t.toBytes(r.x), i = Nr;
                        return n ? i(Uint8Array.from([
                            e.hasEvenY() ? 2 : 3
                        ]), a) : i(Uint8Array.from([
                            4
                        ]), a, t.toBytes(r.y));
                    },
                    fromBytes (f) {
                        const e = f.length, n = f[0], i = f.subarray(1);
                        if (e !== r || 2 !== n && 3 !== n) {
                            if (e === a && 4 === n) return {
                                x: t.fromBytes(i.subarray(0, t.BYTES)),
                                y: t.fromBytes(i.subarray(t.BYTES, 2 * t.BYTES))
                            };
                            throw new Error("Point of length ".concat(e, " was invalid. Expected ").concat(r, " compressed bytes or ").concat(a, " uncompressed bytes"));
                        }
                        {
                            const f = Or(i);
                            if (!(ua < (s = f) && s < t.ORDER)) throw new Error("Point is not on curve");
                            const e = c(f);
                            let r = t.sqrt(e);
                            return !(1 & ~n) != ((r & la) === la) && (r = t.neg(r)), {
                                x: f,
                                y: r
                            };
                        }
                        "TURBOPACK unreachable";
                        var s;
                    }
                })), u = (f)=>xr(Pr(f, e.nByteLength));
                function l(f) {
                    return f > n >> la;
                }
                const h = (f, e, t)=>Or(f.slice(e, t));
                class p {
                    constructor(f, e, t){
                        this.r = f, this.s = e, this.recovery = t, this.assertValidity();
                    }
                    static fromCompact(f) {
                        const t = e.nByteLength;
                        return f = Rr("compactSignature", f, 2 * t), new p(h(f, 0, t), h(f, t, 2 * t));
                    }
                    static fromDER(f) {
                        const { r: e, s: t } = da.toSig(Rr("DER", f));
                        return new p(e, t);
                    }
                    assertValidity() {
                        if (!d(this.r)) throw new Error("r must be 0 < r < CURVE.n");
                        if (!d(this.s)) throw new Error("s must be 0 < s < CURVE.n");
                    }
                    addRecoveryBit(f) {
                        return new p(this.r, this.s, f);
                    }
                    recoverPublicKey(f) {
                        const { r: n, s: r, recovery: a } = this, b = w(Rr("msgHash", f));
                        if (null == a || ![
                            0,
                            1,
                            2,
                            3
                        ].includes(a)) throw new Error("recovery id invalid");
                        const c = 2 === a || 3 === a ? n + e.n : n;
                        if (c >= t.ORDER) throw new Error("recovery id 2 or 3 invalid");
                        const d = 1 & a ? "03" : "02", l = o.fromHex(d + u(c)), h = s(c), p = i(-b * h), y = i(r * h), m = o.BASE.multiplyAndAddUnsafe(l, p, y);
                        if (!m) throw new Error("point at infinify");
                        return m.assertValidity(), m;
                    }
                    hasHighS() {
                        return l(this.s);
                    }
                    normalizeS() {
                        return this.hasHighS() ? new p(this.r, i(-this.s), this.recovery) : this;
                    }
                    toDERRawBytes() {
                        return kr(this.toDERHex());
                    }
                    toDERHex() {
                        return da.hexFromSig({
                            r: this.r,
                            s: this.s
                        });
                    }
                    toCompactRawBytes() {
                        return kr(this.toCompactHex());
                    }
                    toCompactHex() {
                        return u(this.r) + u(this.s);
                    }
                }
                const y = {
                    isValidPrivateKey (f) {
                        try {
                            return b(f), !0;
                        } catch (f) {
                            return !1;
                        }
                    },
                    normPrivateKeyToScalar: b,
                    randomPrivateKey: ()=>{
                        const f = Qr(e.n);
                        return function(f, e) {
                            let t = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                            const n = f.length, r = Xr(e), a = Qr(e);
                            if (n < 16 || n < a || n > 1024) throw new Error("expected ".concat(a, "-1024 bytes of input, got ").concat(n));
                            const i = Wr(t ? Or(f) : _r(f), e - jr) + jr;
                            return t ? Sr(i, r) : Pr(i, r);
                        }(e.randomBytes(f), e.n);
                    },
                    precompute () {
                        let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.BASE;
                        return e._setWindowSize(f), e.multiply(BigInt(3)), e;
                    }
                };
                function m(f) {
                    const e = f instanceof Uint8Array, t = "string" == typeof f, n = (e || t) && f.length;
                    return e ? n === r || n === a : t ? n === 2 * r || n === 2 * a : f instanceof o;
                }
                const g = e.bits2int || function(f) {
                    const t = Or(f), n = 8 * f.length - e.nBitLength;
                    return n > 0 ? t >> BigInt(n) : t;
                }, w = e.bits2int_modN || function(f) {
                    return i(g(f));
                }, v = Cr(e.nBitLength);
                function E(f) {
                    if ("bigint" != typeof f) throw new Error("bigint expected");
                    if (!(ua <= f && f < v)) throw new Error("bigint expected < 2^".concat(e.nBitLength));
                    return Pr(f, e.nByteLength);
                }
                const T = {
                    lowS: e.lowS,
                    prehash: !1
                }, A = {
                    lowS: e.lowS,
                    prehash: !1
                };
                return o.BASE._setWindowSize(8), {
                    CURVE: e,
                    getPublicKey: function(f) {
                        let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        return o.fromPrivateKey(f).toRawBytes(e);
                    },
                    getSharedSecret: function(f, e) {
                        let t = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                        if (m(f)) throw new Error("first arg must be private key");
                        if (!m(e)) throw new Error("second arg must be public key");
                        return o.fromHex(e).multiply(b(f)).toRawBytes(t);
                    },
                    sign: function(f, n) {
                        let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;
                        const { seed: a, k2sig: c } = function(f, n) {
                            let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;
                            if ([
                                "recovered",
                                "canonical"
                            ].some((f)=>f in r)) throw new Error("sign() legacy options not supported");
                            const { hash: a, randomBytes: c } = e;
                            let { lowS: u, prehash: h, extraEntropy: y } = r;
                            null == u && (u = !0), f = Rr("msgHash", f), h && (f = Rr("prehashed msgHash", a(f)));
                            const m = w(f), v = b(n), A = [
                                E(v),
                                E(m)
                            ];
                            if (null != y) {
                                const f = !0 === y ? c(t.BYTES) : y;
                                A.push(Rr("extraEntropy", f));
                            }
                            const x = Nr(...A), I = m;
                            return {
                                seed: x,
                                k2sig: function(f) {
                                    const e = g(f);
                                    if (!d(e)) return;
                                    const t = s(e), n = o.BASE.multiply(e).toAffine(), r = i(n.x);
                                    if (r === ua) return;
                                    const a = i(t * i(I + r * v));
                                    if (a === ua) return;
                                    let b = (n.x === r ? 0 : 2) | Number(n.y & la), c = a;
                                    return u && l(a) && (c = function(f) {
                                        return l(f) ? i(-f) : f;
                                    }(a), b ^= 1), new p(r, c, b);
                                }
                            };
                        }(f, n, r), u = e;
                        return Br(u.hash.outputLen, u.nByteLength, u.hmac)(a, c);
                    },
                    verify: function(f, t, n) {
                        var r;
                        let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : A;
                        const b = f;
                        if (t = Rr("msgHash", t), n = Rr("publicKey", n), "strict" in a) throw new Error("options.strict was renamed to lowS");
                        const { lowS: c, prehash: d } = a;
                        let u, l;
                        try {
                            if ("string" == typeof b || b instanceof Uint8Array) try {
                                u = p.fromDER(b);
                            } catch (f) {
                                if (!(f instanceof da.Err)) throw f;
                                u = p.fromCompact(b);
                            }
                            else {
                                if ("object" != typeof b || "bigint" != typeof b.r || "bigint" != typeof b.s) throw new Error("PARSE");
                                {
                                    const { r: f, s: e } = b;
                                    u = new p(f, e);
                                }
                            }
                            l = o.fromHex(n);
                        } catch (f) {
                            if ("PARSE" === f.message) throw new Error("signature must be Signature instance, Uint8Array or hex string");
                            return !1;
                        }
                        if (c && u.hasHighS()) return !1;
                        d && (t = e.hash(t));
                        const { r: h, s: y } = u, m = w(t), g = s(y), v = i(m * g), E = i(h * g), T = null === (r = o.BASE.multiplyAndAddUnsafe(l, v, E)) || void 0 === r ? void 0 : r.toAffine();
                        return !!T && i(T.x) === h;
                    },
                    ProjectivePoint: o,
                    Signature: p,
                    utils: y
                };
            }
            function ya(f, e) {
                var t = Object.keys(f);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(f);
                    e && (n = n.filter(function(e) {
                        return Object.getOwnPropertyDescriptor(f, e).enumerable;
                    })), t.push.apply(t, n);
                }
                return t;
            }
            function ma(f) {
                for(var e = 1; e < arguments.length; e++){
                    var t = null != arguments[e] ? arguments[e] : {};
                    e % 2 ? ya(Object(t), !0).forEach(function(e) {
                        ga(f, e, t[e]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : ya(Object(t)).forEach(function(e) {
                        Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                    });
                }
                return f;
            }
            function ga(f, e, t) {
                return (e = function(f) {
                    var e = function(f) {
                        if ("object" != typeof f || !f) return f;
                        var e = f[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var t = e.call(f, "string");
                            if ("object" != typeof t) return t;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(f);
                    }(f);
                    return "symbol" == typeof e ? e : e + "";
                }(e)) in f ? Object.defineProperty(f, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : f[e] = t, f;
            }
            BigInt(4);
            const wa = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), va = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Ea = BigInt(1), Ta = BigInt(2), Aa = (f, e)=>(f + e / Ta) / e;
            const xa = function(f, e) {
                let t = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                if (f <= Mr) throw new Error("Expected Field ORDER > 0, got ".concat(f));
                const { nBitLength: r, nByteLength: a } = Zr(f, e);
                if (a > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
                const i = function(f) {
                    if (f % Vr === zr) {
                        const e = (f + jr) / Vr;
                        return function(f, t) {
                            const n = f.pow(t, e);
                            if (!f.eql(f.sqr(n), t)) throw new Error("Cannot find square root");
                            return n;
                        };
                    }
                    if (f % Hr === Gr) {
                        const e = (f - Gr) / Hr;
                        return function(f, t) {
                            const n = f.mul(t, Kr), r = f.pow(n, e), a = f.mul(t, r), i = f.mul(f.mul(a, Kr), r), s = f.mul(a, f.sub(i, f.ONE));
                            if (!f.eql(f.sqr(s), t)) throw new Error("Cannot find square root");
                            return s;
                        };
                    }
                    return function(f) {
                        const e = (f - jr) / Kr;
                        let t, n, r;
                        for(t = f - jr, n = 0; t % Kr === Mr; t /= Kr, n++);
                        for(r = Kr; r < f && $r(r, e, f) !== f - jr; r++);
                        if (1 === n) {
                            const e = (f + jr) / Vr;
                            return function(f, t) {
                                const n = f.pow(t, e);
                                if (!f.eql(f.sqr(n), t)) throw new Error("Cannot find square root");
                                return n;
                            };
                        }
                        const a = (t + jr) / Kr;
                        return function(f, i) {
                            if (f.pow(i, e) === f.neg(f.ONE)) throw new Error("Cannot find square root");
                            let s = n, o = f.pow(f.mul(f.ONE, r), t), b = f.pow(i, a), c = f.pow(i, t);
                            for(; !f.eql(c, f.ONE);){
                                if (f.eql(c, f.ZERO)) return f.ZERO;
                                let e = 1;
                                for(let t = f.sqr(c); e < s && !f.eql(t, f.ONE); e++)t = f.sqr(t);
                                const t = f.pow(o, jr << BigInt(s - e - 1));
                                o = f.sqr(t), b = f.mul(b, t), c = f.mul(c, o), s = e;
                            }
                            return b;
                        };
                    }(f);
                }(f), s = Object.freeze({
                    ORDER: f,
                    BITS: r,
                    BYTES: a,
                    MASK: Cr(r),
                    ZERO: Mr,
                    ONE: jr,
                    create: (e)=>Wr(e, f),
                    isValid: (e)=>{
                        if ("bigint" != typeof e) throw new Error("Invalid field element: expected bigint, got ".concat(typeof e));
                        return Mr <= e && e < f;
                    },
                    is0: (f)=>f === Mr,
                    isOdd: (f)=>(f & jr) === jr,
                    neg: (e)=>Wr(-e, f),
                    eql: (f, e)=>f === e,
                    sqr: (e)=>Wr(e * e, f),
                    add: (e, t)=>Wr(e + t, f),
                    sub: (e, t)=>Wr(e - t, f),
                    mul: (e, t)=>Wr(e * t, f),
                    pow: (f, e)=>(function(f, e, t) {
                            if (t < Mr) throw new Error("Expected power > 0");
                            if (t === Mr) return f.ONE;
                            if (t === jr) return e;
                            let n = f.ONE, r = e;
                            for(; t > Mr;)t & jr && (n = f.mul(n, r)), r = f.sqr(r), t >>= jr;
                            return n;
                        })(s, f, e),
                    div: (e, t)=>Wr(e * Yr(t, f), f),
                    sqrN: (f)=>f * f,
                    addN: (f, e)=>f + e,
                    subN: (f, e)=>f - e,
                    mulN: (f, e)=>f * e,
                    inv: (e)=>Yr(e, f),
                    sqrt: n.sqrt || ((f)=>i(s, f)),
                    invertBatch: (f)=>(function(f, e) {
                            const t = new Array(e.length), n = e.reduce((e, n, r)=>f.is0(n) ? e : (t[r] = e, f.mul(e, n)), f.ONE), r = f.inv(n);
                            return e.reduceRight((e, n, r)=>f.is0(n) ? e : (t[r] = f.mul(e, t[r]), f.mul(e, n)), r), t;
                        })(s, f),
                    cmov: (f, e, t)=>t ? e : f,
                    toBytes: (f)=>t ? Sr(f, a) : Pr(f, a),
                    fromBytes: (f)=>{
                        if (f.length !== a) throw new Error("Fp.fromBytes: expected ".concat(a, ", got ").concat(f.length));
                        return t ? _r(f) : Or(f);
                    }
                });
                return Object.freeze(s);
            }(wa, void 0, void 0, {
                sqrt: function(f) {
                    const e = wa, t = BigInt(3), n = BigInt(6), r = BigInt(11), a = BigInt(22), i = BigInt(23), s = BigInt(44), o = BigInt(88), b = f * f * f % e, c = b * b * f % e, d = Jr(c, t, e) * c % e, u = Jr(d, t, e) * c % e, l = Jr(u, Ta, e) * b % e, h = Jr(l, r, e) * l % e, p = Jr(h, a, e) * h % e, y = Jr(p, s, e) * p % e, m = Jr(y, o, e) * y % e, g = Jr(m, s, e) * p % e, w = Jr(g, t, e) * c % e, v = Jr(w, i, e) * h % e, E = Jr(v, n, e) * b % e, T = Jr(E, Ta, e);
                    if (!xa.eql(xa.sqr(T), f)) throw new Error("Cannot find square root");
                    return T;
                }
            }), Ia = function(f, e) {
                const t = (e)=>pa(ma(ma({}, f), function(f) {
                        return {
                            hash: f,
                            hmac: function(e) {
                                for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];
                                return Zn(f, e, function() {
                                    for(var f = arguments.length, e = new Array(f), t = 0; t < f; t++)e[t] = arguments[t];
                                    const n = new Uint8Array(e.reduce((f, e)=>f + e.length, 0));
                                    let r = 0;
                                    return e.forEach((f)=>{
                                        if (!Ef(f)) throw new Error("Uint8Array expected");
                                        n.set(f, r), r += f.length;
                                    }), n;
                                }(...n));
                            },
                            randomBytes: Nf
                        };
                    }(e)));
                return Object.freeze(ma(ma({}, t(e)), {}, {
                    create: t
                }));
            }({
                a: BigInt(0),
                b: BigInt(7),
                Fp: xa,
                n: va,
                Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
                Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
                h: BigInt(1),
                lowS: !0,
                endo: {
                    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
                    splitScalar: (f)=>{
                        const e = va, t = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -Ea * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), r = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), a = t, i = BigInt("0x100000000000000000000000000000000"), s = Aa(a * f, e), o = Aa(-n * f, e);
                        let b = Wr(f - s * t - o * r, e), c = Wr(-s * n - o * a, e);
                        const d = b > i, u = c > i;
                        if (d && (b = e - b), u && (c = e - c), b > i || c > i) throw new Error("splitScalar: Endomorphism failed, k=" + f);
                        return {
                            k1neg: d,
                            k1: b,
                            k2neg: u,
                            k2: c
                        };
                    }
                }
            }, ir);
            function ka(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            BigInt(0), Ia.ProjectivePoint;
            var Oa = 0;
            function _a(f) {
                return "__private_" + Oa++ + "_" + f;
            }
            var Pa = _a("privateKey");
            class Sa {
                constructor(f){
                    Object.defineProperty(this, Pa, {
                        writable: !0,
                        value: void 0
                    }), l(32 === k(f), "invalid private key", "privateKey", "[REDACTED]"), ka(this, Pa)[Pa] = x(f);
                }
                get privateKey() {
                    return ka(this, Pa)[Pa];
                }
                get publicKey() {
                    return Sa.computePublicKey(ka(this, Pa)[Pa]);
                }
                get compressedPublicKey() {
                    return Sa.computePublicKey(ka(this, Pa)[Pa], !0);
                }
                sign(f) {
                    l(32 === k(f), "invalid digest length", "digest", f);
                    const e = Ia.sign(v(f), v(ka(this, Pa)[Pa]), {
                        lowS: !0
                    });
                    return Se.from({
                        r: $(e.r, 32),
                        s: $(e.s, 32),
                        v: e.recovery ? 28 : 27
                    });
                }
                computeSharedSecret(f) {
                    const e = Sa.computePublicKey(f);
                    return x(Ia.getSharedSecret(v(ka(this, Pa)[Pa]), w(e), !1));
                }
                static computePublicKey(f, e) {
                    let t = w(f, "key");
                    if (32 === t.length) return x(Ia.getPublicKey(t, !!e));
                    if (64 === t.length) {
                        const f = new Uint8Array(65);
                        f[0] = 4, f.set(t, 1), t = f;
                    }
                    return x(Ia.ProjectivePoint.fromHex(t).toRawBytes(e));
                }
                static recoverPublicKey(f, e) {
                    l(32 === k(f), "invalid digest length", "digest", f);
                    const t = Se.from(e);
                    let n = Ia.Signature.fromCompact(v(I([
                        t.r,
                        t.s
                    ])));
                    n = n.addRecoveryBit(t.yParity);
                    const r = n.recoverPublicKey(v(f));
                    return l(null != r, "invalid signautre for digest", "signature", e), "0x" + r.toHex(!1);
                }
                static addPoints(f, e, t) {
                    const n = Ia.ProjectivePoint.fromHex(Sa.computePublicKey(f).substring(2)), r = Ia.ProjectivePoint.fromHex(Sa.computePublicKey(e).substring(2));
                    return "0x" + n.add(r).toHex(!!t);
                }
            }
            async function Ra(f, e) {
                const t = await e;
                return null != t && "0x0000000000000000000000000000000000000000" !== t || (u("string" != typeof f, "unconfigured name", "UNCONFIGURED_NAME", {
                    value: f
                }), l(!1, "invalid AddressLike value; did not resolve to a value address", "target", f)), ne(t);
            }
            function Na(f, e) {
                return "string" == typeof f ? f.match(/^0x[0-9a-f]{40}$/i) ? ne(f) : (u(null != e, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", {
                    operation: "resolveName"
                }), Ra(f, e.resolveName(f))) : (t = f) && "function" == typeof t.getAddress ? Ra(f, f.getAddress()) : f && "function" == typeof f.then ? Ra(f, f) : void l(!1, "unsupported addressable value", "target", f);
                "TURBOPACK unreachable";
                var t;
            }
            function Ca(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Ua = 0;
            function La(f) {
                return "__private_" + Ua++ + "_" + f;
            }
            const Ba = new Uint8Array(32);
            Ba.fill(0);
            const Da = BigInt(-1), Fa = BigInt(0), Ma = BigInt(1), ja = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Ka = $(Ma, 32), za = $(Fa, 32), Va = {
                name: "string",
                version: "string",
                chainId: "uint256",
                verifyingContract: "address",
                salt: "bytes32"
            }, Ga = [
                "name",
                "version",
                "chainId",
                "verifyingContract",
                "salt"
            ];
            function Ha(f) {
                return function(e) {
                    return l("string" == typeof e, "invalid domain value for ".concat(JSON.stringify(f)), "domain.".concat(f), e), e;
                };
            }
            const Wa = {
                name: Ha("name"),
                version: Ha("version"),
                chainId: function(f) {
                    const e = z(f, "domain.chainId");
                    return l(e >= 0, "invalid chain ID", "domain.chainId", f), Number.isSafeInteger(e) ? Number(e) : function(f) {
                        let e = x(T(f) ? f : J(f)).substring(2);
                        for(; e.startsWith("0");)e = e.substring(1);
                        return "" === e && (e = "0"), "0x" + e;
                    }(e);
                },
                verifyingContract: function(f) {
                    try {
                        return ne(f).toLowerCase();
                    } catch (f) {}
                    l(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", f);
                },
                salt: function(f) {
                    const e = w(f, "domain.salt");
                    return l(32 === e.length, 'invalid domain value "salt"', "domain.salt", f), x(e);
                }
            };
            function $a(f) {
                {
                    const e = f.match(/^(u?)int(\d+)$/);
                    if (e) {
                        const t = "" === e[1], n = parseInt(e[2]);
                        l(n % 8 == 0 && 0 !== n && n <= 256 && e[2] === String(n), "invalid numeric width", "type", f);
                        const r = K(ja, t ? n - 1 : n), a = t ? (r + Ma) * Da : Fa;
                        return function(e) {
                            const n = z(e, "value");
                            return l(n >= a && n <= r, "value out-of-bounds for ".concat(f), "value", n), $(t ? j(n, 256) : n, 32);
                        };
                    }
                }
                {
                    const e = f.match(/^bytes(\d+)$/);
                    if (e) {
                        const t = parseInt(e[1]);
                        return l(0 !== t && t <= 32 && e[1] === String(t), "invalid bytes width", "type", f), function(e) {
                            return l(w(e).length === t, "invalid length for ".concat(f), "value", e), function(f) {
                                const e = w(f), t = e.length % 32;
                                return t ? I([
                                    e,
                                    Ba.slice(t)
                                ]) : x(e);
                            }(e);
                        };
                    }
                }
                switch(f){
                    case "address":
                        return function(f) {
                            return P(ne(f), 32);
                        };
                    case "bool":
                        return function(f) {
                            return f ? Ka : za;
                        };
                    case "bytes":
                        return function(f) {
                            return Zf(f);
                        };
                    case "string":
                        return function(f) {
                            return Ut(f);
                        };
                }
                return null;
            }
            function Ja(f, e) {
                return "".concat(f, "(").concat(e.map((f)=>{
                    let { name: e, type: t } = f;
                    return t + " " + e;
                }).join(","), ")");
            }
            function Ya(f) {
                const e = f.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
                return e ? {
                    base: e[1],
                    index: e[2] + e[4],
                    array: {
                        base: e[1],
                        prefix: e[1] + e[2],
                        count: e[5] ? parseInt(e[5]) : -1
                    }
                } : {
                    base: f
                };
            }
            var qa = La("types"), Za = La("fullTypes"), Xa = La("encoderCache"), Qa = La("getEncoder");
            class fi {
                get types() {
                    return JSON.parse(Ca(this, qa)[qa]);
                }
                constructor(f){
                    Object.defineProperty(this, Qa, {
                        value: ei
                    }), this.primaryType = void 0, Object.defineProperty(this, qa, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Za, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Xa, {
                        writable: !0,
                        value: void 0
                    }), Ca(this, Za)[Za] = new Map, Ca(this, Xa)[Xa] = new Map;
                    const e = new Map, t = new Map, n = new Map, r = {};
                    Object.keys(f).forEach((a)=>{
                        r[a] = f[a].map((e)=>{
                            let { name: t, type: n } = e, { base: r, index: a } = Ya(n);
                            return "int" !== r || f.int || (r = "int256"), "uint" !== r || f.uint || (r = "uint256"), {
                                name: t,
                                type: r + (a || "")
                            };
                        }), e.set(a, new Set), t.set(a, []), n.set(a, new Set);
                    }), Ca(this, qa)[qa] = JSON.stringify(r);
                    for(const n in r){
                        const a = new Set;
                        for (const i of r[n]){
                            l(!a.has(i.name), "duplicate variable name ".concat(JSON.stringify(i.name), " in ").concat(JSON.stringify(n)), "types", f), a.add(i.name);
                            const r = Ya(i.type).base;
                            l(r !== n, "circular type reference to ".concat(JSON.stringify(r)), "types", f), $a(r) || (l(t.has(r), "unknown type ".concat(JSON.stringify(r)), "types", f), t.get(r).push(n), e.get(n).add(r));
                        }
                    }
                    const a = Array.from(t.keys()).filter((f)=>0 === t.get(f).length);
                    l(0 !== a.length, "missing primary type", "types", f), l(1 === a.length, "ambiguous primary types or unused types: ".concat(a.map((f)=>JSON.stringify(f)).join(", ")), "types", f), o(this, {
                        primaryType: a[0]
                    }), function r(a, i) {
                        l(!i.has(a), "circular type reference to ".concat(JSON.stringify(a)), "types", f), i.add(a);
                        for (const f of e.get(a))if (t.has(f)) {
                            r(f, i);
                            for (const e of i)n.get(e).add(f);
                        }
                        i.delete(a);
                    }(this.primaryType, new Set);
                    for (const [f, e] of n){
                        const t = Array.from(e);
                        t.sort(), Ca(this, Za)[Za].set(f, Ja(f, r[f]) + t.map((f)=>Ja(f, r[f])).join(""));
                    }
                }
                getEncoder(f) {
                    let e = Ca(this, Xa)[Xa].get(f);
                    return e || (e = Ca(this, Qa)[Qa](f), Ca(this, Xa)[Xa].set(f, e)), e;
                }
                encodeType(f) {
                    const e = Ca(this, Za)[Za].get(f);
                    return l(e, "unknown type: ".concat(JSON.stringify(f)), "name", f), e;
                }
                encodeData(f, e) {
                    return this.getEncoder(f)(e);
                }
                hashStruct(f, e) {
                    return Zf(this.encodeData(f, e));
                }
                encode(f) {
                    return this.encodeData(this.primaryType, f);
                }
                hash(f) {
                    return this.hashStruct(this.primaryType, f);
                }
                _visit(f, e, t) {
                    if ($a(f)) return t(f, e);
                    const n = Ya(f).array;
                    if (n) return l(-1 === n.count || n.count === e.length, "array length mismatch; expected length ".concat(n.count), "value", e), e.map((f)=>this._visit(n.prefix, f, t));
                    const r = this.types[f];
                    if (r) return r.reduce((f, n)=>{
                        let { name: r, type: a } = n;
                        return f[r] = this._visit(a, e[r], t), f;
                    }, {});
                    l(!1, "unknown type: ".concat(f), "type", f);
                }
                visit(f, e) {
                    return this._visit(this.primaryType, f, e);
                }
                static from(f) {
                    return new fi(f);
                }
                static getPrimaryType(f) {
                    return fi.from(f).primaryType;
                }
                static hashStruct(f, e, t) {
                    return fi.from(e).hashStruct(f, t);
                }
                static hashDomain(f) {
                    const e = [];
                    for(const t in f){
                        if (null == f[t]) continue;
                        const n = Va[t];
                        l(n, "invalid typed-data domain key: ".concat(JSON.stringify(t)), "domain", f), e.push({
                            name: t,
                            type: n
                        });
                    }
                    return e.sort((f, e)=>Ga.indexOf(f.name) - Ga.indexOf(e.name)), fi.hashStruct("EIP712Domain", {
                        EIP712Domain: e
                    }, f);
                }
                static encode(f, e, t) {
                    return I([
                        "0x1901",
                        fi.hashDomain(f),
                        fi.from(e).hash(t)
                    ]);
                }
                static hash(f, e, t) {
                    return Zf(fi.encode(f, e, t));
                }
                static async resolveNames(f, e, t, n) {
                    f = Object.assign({}, f);
                    for(const e in f)null == f[e] && delete f[e];
                    const r = {};
                    f.verifyingContract && !E(f.verifyingContract, 20) && (r[f.verifyingContract] = "0x");
                    const a = fi.from(e);
                    a.visit(t, (f, e)=>("address" !== f || E(e, 20) || (r[e] = "0x"), e));
                    for(const f in r)r[f] = await n(f);
                    return f.verifyingContract && r[f.verifyingContract] && (f.verifyingContract = r[f.verifyingContract]), {
                        domain: f,
                        value: t = a.visit(t, (f, e)=>"address" === f && r[e] ? r[e] : e)
                    };
                }
                static getPayload(f, e, t) {
                    fi.hashDomain(f);
                    const n = {}, r = [];
                    Ga.forEach((e)=>{
                        const t = f[e];
                        null != t && (n[e] = Wa[e](t), r.push({
                            name: e,
                            type: Va[e]
                        }));
                    });
                    const a = fi.from(e);
                    e = a.types;
                    const i = Object.assign({}, e);
                    return l(null == i.EIP712Domain, "types must not contain EIP712Domain type", "types.EIP712Domain", e), i.EIP712Domain = r, a.encode(t), {
                        types: i,
                        domain: n,
                        primaryType: a.primaryType,
                        message: a.visit(t, (f, e)=>{
                            if (f.match(/^bytes(\d*)/)) return x(w(e));
                            if (f.match(/^u?int/)) return z(e).toString();
                            switch(f){
                                case "address":
                                    return e.toLowerCase();
                                case "bool":
                                    return !!e;
                                case "string":
                                    return l("string" == typeof e, "invalid string", "value", e), e;
                            }
                            l(!1, "unsupported type", "type", f);
                        })
                    };
                }
            }
            function ei(f) {
                {
                    const e = $a(f);
                    if (e) return e;
                }
                const e = Ya(f).array;
                if (e) {
                    const f = e.prefix, t = this.getEncoder(f);
                    return (n)=>{
                        l(-1 === e.count || e.count === n.length, "array length mismatch; expected length ".concat(e.count), "value", n);
                        let r = n.map(t);
                        return Ca(this, Za)[Za].has(f) && (r = r.map(Zf)), Zf(I(r));
                    };
                }
                const t = this.types[f];
                if (t) {
                    const e = Ut(Ca(this, Za)[Za].get(f));
                    return (f)=>{
                        const n = t.map((e)=>{
                            let { name: t, type: n } = e;
                            const r = this.getEncoder(n)(f[t]);
                            return Ca(this, Za)[Za].has(n) ? Zf(r) : r;
                        });
                        return n.unshift(e), I(n);
                    };
                }
                l(!1, "unknown type: ".concat(f), "type", f);
            }
            const ti = "0x0000000000000000000000000000000000000000", ni = function(f) {
                return pr("sha256").update(f).digest();
            }, ri = function(f) {
                return pr("sha512").update(f).digest();
            };
            let ai = ni, ii = ri, si = !1, oi = !1;
            function bi(f) {
                const e = w(f, "data");
                return x(ai(e));
            }
            function ci(f) {
                const e = w(f, "data");
                return x(ii(e));
            }
            function di(f) {
                let e = f.toString(16);
                for(; e.length < 2;)e = "0" + e;
                return "0x" + e;
            }
            function ui(f, e, t) {
                let n = 0;
                for(let r = 0; r < t; r++)n = 256 * n + f[e + r];
                return n;
            }
            function li(f, e, t, n) {
                const r = [];
                for(; t < e + 1 + n;){
                    const a = hi(f, t);
                    r.push(a.result), u((t += a.consumed) <= e + 1 + n, "child data too short", "BUFFER_OVERRUN", {
                        buffer: f,
                        length: n,
                        offset: e
                    });
                }
                return {
                    consumed: 1 + n,
                    result: r
                };
            }
            function hi(f, e) {
                u(0 !== f.length, "data too short", "BUFFER_OVERRUN", {
                    buffer: f,
                    length: 0,
                    offset: 1
                });
                const t = (e)=>{
                    u(e <= f.length, "data short segment too short", "BUFFER_OVERRUN", {
                        buffer: f,
                        length: f.length,
                        offset: e
                    });
                };
                if (f[e] >= 248) {
                    const n = f[e] - 247;
                    t(e + 1 + n);
                    const r = ui(f, e + 1, n);
                    return t(e + 1 + n + r), li(f, e, e + 1 + n, n + r);
                }
                if (f[e] >= 192) {
                    const n = f[e] - 192;
                    return t(e + 1 + n), li(f, e, e + 1, n);
                }
                if (f[e] >= 184) {
                    const n = f[e] - 183;
                    t(e + 1 + n);
                    const r = ui(f, e + 1, n);
                    return t(e + 1 + n + r), {
                        consumed: 1 + n + r,
                        result: x(f.slice(e + 1 + n, e + 1 + n + r))
                    };
                }
                if (f[e] >= 128) {
                    const n = f[e] - 128;
                    return t(e + 1 + n), {
                        consumed: 1 + n,
                        result: x(f.slice(e + 1, e + 1 + n))
                    };
                }
                return {
                    consumed: 1,
                    result: di(f[e])
                };
            }
            function pi(f) {
                const e = w(f, "data"), t = hi(e, 0);
                return l(t.consumed === e.length, "unexpected junk after rlp payload", "data", f), t.result;
            }
            function yi(f) {
                const e = [];
                for(; f;)e.unshift(255 & f), f >>= 8;
                return e;
            }
            function mi(f) {
                if (Array.isArray(f)) {
                    let e = [];
                    if (f.forEach(function(f) {
                        e = e.concat(mi(f));
                    }), e.length <= 55) return e.unshift(192 + e.length), e;
                    const t = yi(e.length);
                    return t.unshift(247 + t.length), t.concat(e);
                }
                const e = Array.prototype.slice.call(w(f, "object"));
                if (1 === e.length && e[0] <= 127) return e;
                if (e.length <= 55) return e.unshift(128 + e.length), e;
                const t = yi(e.length);
                return t.unshift(183 + t.length), t.concat(e);
            }
            bi._ = ni, bi.lock = function() {
                si = !0;
            }, bi.register = function(f) {
                if (si) throw new Error("sha256 is locked");
                ai = f;
            }, Object.freeze(bi), ci._ = ri, ci.lock = function() {
                oi = !0;
            }, ci.register = function(f) {
                if (oi) throw new Error("sha512 is locked");
                ii = f;
            }, Object.freeze(bi);
            const gi = "0123456789abcdef";
            function wi(f) {
                let e = "0x";
                for (const t of mi(f))e += gi[t >> 4], e += gi[15 & t];
                return e;
            }
            function vi(f, e) {
                return {
                    address: ne(f),
                    storageKeys: e.map((f, e)=>(l(E(f, 32), "invalid slot", "storageKeys[".concat(e, "]"), f), f.toLowerCase()))
                };
            }
            function Ei(f) {
                if (Array.isArray(f)) return f.map((e, t)=>Array.isArray(e) ? (l(2 === e.length, "invalid slot set", "value[".concat(t, "]"), e), vi(e[0], e[1])) : (l(null != e && "object" == typeof e, "invalid address-slot set", "value", f), vi(e.address, e.storageKeys)));
                l(null != f && "object" == typeof f, "invalid access list", "value", f);
                const e = Object.keys(f).map((e)=>{
                    const t = f[e].reduce((f, e)=>(f[e] = !0, f), {});
                    return vi(e, Object.keys(t).sort());
                });
                return e.sort((f, e)=>f.address.localeCompare(e.address)), e;
            }
            function Ti(f) {
                let e;
                return e = "string" == typeof f ? Sa.computePublicKey(f, !1) : f.publicKey, ne(Zf("0x" + e.substring(4)).substring(26));
            }
            function Ai(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var xi = 0;
            function Ii(f) {
                return "__private_" + xi++ + "_" + f;
            }
            const ki = BigInt(0), Oi = BigInt(2), _i = BigInt(27), Pi = BigInt(28), Si = BigInt(35), Ri = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Ni = 131072;
            function Ci(f, e) {
                let t = f.toString(16);
                for(; t.length < 2;)t = "0" + t;
                return t += bi(e).substring(4), "0x" + t;
            }
            function Ui(f) {
                return "0x" === f ? null : ne(f);
            }
            function Li(f, e) {
                try {
                    return Ei(f);
                } catch (t) {
                    l(!1, t.message, e, f);
                }
            }
            function Bi(f, e) {
                return "0x" === f ? 0 : W(f, e);
            }
            function Di(f, e) {
                if ("0x" === f) return ki;
                const t = z(f, e);
                return l(t <= Ri, "value exceeds uint size", e, t), t;
            }
            function Fi(f, e) {
                const t = z(f, "value"), n = J(t);
                return l(n.length <= 32, "value too large", "tx.".concat(e), t), n;
            }
            function Mi(f) {
                return Ei(f).map((f)=>[
                        f.address,
                        f.storageKeys
                    ]);
            }
            function ji(f, e) {
                l(Array.isArray(f), "invalid ".concat(e), "value", f);
                for(let e = 0; e < f.length; e++)l(E(f[e], 32), "invalid ${ param } hash", "value[".concat(e, "]"), f[e]);
                return f;
            }
            function Ki(f, e) {
                let t;
                try {
                    if (t = Bi(e[0], "yParity"), 0 !== t && 1 !== t) throw new Error("bad yParity");
                } catch (f) {
                    l(!1, "invalid yParity", "yParity", e[0]);
                }
                const n = P(e[1], 32), r = P(e[2], 32), a = Se.from({
                    r: n,
                    s: r,
                    yParity: t
                });
                f.signature = a;
            }
            var zi = Ii("type"), Vi = Ii("to"), Gi = Ii("data"), Hi = Ii("nonce"), Wi = Ii("gasLimit"), $i = Ii("gasPrice"), Ji = Ii("maxPriorityFeePerGas"), Yi = Ii("maxFeePerGas"), qi = Ii("value"), Zi = Ii("chainId"), Xi = Ii("sig"), Qi = Ii("accessList"), fs = Ii("maxFeePerBlobGas"), es = Ii("blobVersionedHashes"), ts = Ii("kzg"), ns = Ii("blobs"), rs = Ii("getSerialized");
            class as {
                get type() {
                    return Ai(this, zi)[zi];
                }
                set type(f) {
                    switch(f){
                        case null:
                            Ai(this, zi)[zi] = null;
                            break;
                        case 0:
                        case "legacy":
                            Ai(this, zi)[zi] = 0;
                            break;
                        case 1:
                        case "berlin":
                        case "eip-2930":
                            Ai(this, zi)[zi] = 1;
                            break;
                        case 2:
                        case "london":
                        case "eip-1559":
                            Ai(this, zi)[zi] = 2;
                            break;
                        case 3:
                        case "cancun":
                        case "eip-4844":
                            Ai(this, zi)[zi] = 3;
                            break;
                        default:
                            l(!1, "unsupported transaction type", "type", f);
                    }
                }
                get typeName() {
                    switch(this.type){
                        case 0:
                            return "legacy";
                        case 1:
                            return "eip-2930";
                        case 2:
                            return "eip-1559";
                        case 3:
                            return "eip-4844";
                    }
                    return null;
                }
                get to() {
                    const f = Ai(this, Vi)[Vi];
                    return null == f && 3 === this.type ? ti : f;
                }
                set to(f) {
                    Ai(this, Vi)[Vi] = null == f ? null : ne(f);
                }
                get nonce() {
                    return Ai(this, Hi)[Hi];
                }
                set nonce(f) {
                    Ai(this, Hi)[Hi] = W(f, "value");
                }
                get gasLimit() {
                    return Ai(this, Wi)[Wi];
                }
                set gasLimit(f) {
                    Ai(this, Wi)[Wi] = z(f);
                }
                get gasPrice() {
                    const f = Ai(this, $i)[$i];
                    return null != f || 0 !== this.type && 1 !== this.type ? f : ki;
                }
                set gasPrice(f) {
                    Ai(this, $i)[$i] = null == f ? null : z(f, "gasPrice");
                }
                get maxPriorityFeePerGas() {
                    const f = Ai(this, Ji)[Ji];
                    return null == f ? 2 === this.type || 3 === this.type ? ki : null : f;
                }
                set maxPriorityFeePerGas(f) {
                    Ai(this, Ji)[Ji] = null == f ? null : z(f, "maxPriorityFeePerGas");
                }
                get maxFeePerGas() {
                    const f = Ai(this, Yi)[Yi];
                    return null == f ? 2 === this.type || 3 === this.type ? ki : null : f;
                }
                set maxFeePerGas(f) {
                    Ai(this, Yi)[Yi] = null == f ? null : z(f, "maxFeePerGas");
                }
                get data() {
                    return Ai(this, Gi)[Gi];
                }
                set data(f) {
                    Ai(this, Gi)[Gi] = x(f);
                }
                get value() {
                    return Ai(this, qi)[qi];
                }
                set value(f) {
                    Ai(this, qi)[qi] = z(f, "value");
                }
                get chainId() {
                    return Ai(this, Zi)[Zi];
                }
                set chainId(f) {
                    Ai(this, Zi)[Zi] = z(f);
                }
                get signature() {
                    return Ai(this, Xi)[Xi] || null;
                }
                set signature(f) {
                    Ai(this, Xi)[Xi] = null == f ? null : Se.from(f);
                }
                get accessList() {
                    const f = Ai(this, Qi)[Qi] || null;
                    return null == f ? 1 === this.type || 2 === this.type || 3 === this.type ? [] : null : f;
                }
                set accessList(f) {
                    Ai(this, Qi)[Qi] = null == f ? null : Ei(f);
                }
                get maxFeePerBlobGas() {
                    const f = Ai(this, fs)[fs];
                    return null == f && 3 === this.type ? ki : f;
                }
                set maxFeePerBlobGas(f) {
                    Ai(this, fs)[fs] = null == f ? null : z(f, "maxFeePerBlobGas");
                }
                get blobVersionedHashes() {
                    let f = Ai(this, es)[es];
                    return null == f && 3 === this.type ? [] : f;
                }
                set blobVersionedHashes(f) {
                    if (null != f) {
                        l(Array.isArray(f), "blobVersionedHashes must be an Array", "value", f), f = f.slice();
                        for(let e = 0; e < f.length; e++)l(E(f[e], 32), "invalid blobVersionedHash", "value[".concat(e, "]"), f[e]);
                    }
                    Ai(this, es)[es] = f;
                }
                get blobs() {
                    return null == Ai(this, ns)[ns] ? null : Ai(this, ns)[ns].map((f)=>Object.assign({}, f));
                }
                set blobs(f) {
                    if (null == f) return void (Ai(this, ns)[ns] = null);
                    const e = [], t = [];
                    for(let n = 0; n < f.length; n++){
                        const r = f[n];
                        if (T(r)) {
                            u(Ai(this, ts)[ts], "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
                                operation: "set blobs()"
                            });
                            let f = w(r);
                            if (l(f.length <= Ni, "blob is too large", "blobs[".concat(n, "]"), r), f.length !== Ni) {
                                const e = new Uint8Array(Ni);
                                e.set(f), f = e;
                            }
                            const a = Ai(this, ts)[ts].blobToKzgCommitment(f), i = x(Ai(this, ts)[ts].computeBlobKzgProof(f, a));
                            e.push({
                                data: x(f),
                                commitment: x(a),
                                proof: i
                            }), t.push(Ci(1, a));
                        } else {
                            const f = x(r.commitment);
                            e.push({
                                data: x(r.data),
                                commitment: f,
                                proof: x(r.proof)
                            }), t.push(Ci(1, f));
                        }
                    }
                    Ai(this, ns)[ns] = e, Ai(this, es)[es] = t;
                }
                get kzg() {
                    return Ai(this, ts)[ts];
                }
                set kzg(f) {
                    Ai(this, ts)[ts] = f;
                }
                constructor(){
                    Object.defineProperty(this, rs, {
                        value: is
                    }), Object.defineProperty(this, zi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Vi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Gi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Hi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Wi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, $i, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Ji, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Yi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, qi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Zi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Xi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, Qi, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, fs, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, es, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ts, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ns, {
                        writable: !0,
                        value: void 0
                    }), Ai(this, zi)[zi] = null, Ai(this, Vi)[Vi] = null, Ai(this, Hi)[Hi] = 0, Ai(this, Wi)[Wi] = ki, Ai(this, $i)[$i] = null, Ai(this, Ji)[Ji] = null, Ai(this, Yi)[Yi] = null, Ai(this, Gi)[Gi] = "0x", Ai(this, qi)[qi] = ki, Ai(this, Zi)[Zi] = ki, Ai(this, Xi)[Xi] = null, Ai(this, Qi)[Qi] = null, Ai(this, fs)[fs] = null, Ai(this, es)[es] = null, Ai(this, ns)[ns] = null, Ai(this, ts)[ts] = null;
                }
                get hash() {
                    return null == this.signature ? null : Zf(Ai(this, rs)[rs](!0, !1));
                }
                get unsignedHash() {
                    return Zf(this.unsignedSerialized);
                }
                get from() {
                    return null == this.signature ? null : (f = this.unsignedHash, e = this.signature, Ti(Sa.recoverPublicKey(f, e)));
                    "TURBOPACK unreachable";
                    var f, e;
                }
                get fromPublicKey() {
                    return null == this.signature ? null : Sa.recoverPublicKey(this.unsignedHash, this.signature);
                }
                isSigned() {
                    return null != this.signature;
                }
                get serialized() {
                    return Ai(this, rs)[rs](!0, !0);
                }
                get unsignedSerialized() {
                    return Ai(this, rs)[rs](!1, !1);
                }
                inferType() {
                    const f = this.inferTypes();
                    return f.indexOf(2) >= 0 ? 2 : f.pop();
                }
                inferTypes() {
                    const f = null != this.gasPrice, e = null != this.maxFeePerGas || null != this.maxPriorityFeePerGas, t = null != this.accessList, n = null != Ai(this, fs)[fs] || Ai(this, es)[es];
                    null != this.maxFeePerGas && null != this.maxPriorityFeePerGas && u(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", {
                        value: this
                    }), u(!e || 0 !== this.type && 1 !== this.type, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", {
                        value: this
                    }), u(0 !== this.type || !t, "legacy transaction cannot have accessList", "BAD_DATA", {
                        value: this
                    });
                    const r = [];
                    return null != this.type ? r.push(this.type) : e ? r.push(2) : f ? (r.push(1), t || r.push(0)) : t ? (r.push(1), r.push(2)) : (n && this.to || (r.push(0), r.push(1), r.push(2)), r.push(3)), r.sort(), r;
                }
                isLegacy() {
                    return 0 === this.type;
                }
                isBerlin() {
                    return 1 === this.type;
                }
                isLondon() {
                    return 2 === this.type;
                }
                isCancun() {
                    return 3 === this.type;
                }
                clone() {
                    return as.from(this);
                }
                toJSON() {
                    const f = (f)=>null == f ? null : f.toString();
                    return {
                        type: this.type,
                        to: this.to,
                        data: this.data,
                        nonce: this.nonce,
                        gasLimit: f(this.gasLimit),
                        gasPrice: f(this.gasPrice),
                        maxPriorityFeePerGas: f(this.maxPriorityFeePerGas),
                        maxFeePerGas: f(this.maxFeePerGas),
                        value: f(this.value),
                        chainId: f(this.chainId),
                        sig: this.signature ? this.signature.toJSON() : null,
                        accessList: this.accessList
                    };
                }
                static from(f) {
                    if (null == f) return new as;
                    if ("string" == typeof f) {
                        const e = w(f);
                        if (e[0] >= 127) return as.from(function(f) {
                            const e = pi(f);
                            l(Array.isArray(e) && (9 === e.length || 6 === e.length), "invalid field count for legacy transaction", "data", f);
                            const t = {
                                type: 0,
                                nonce: Bi(e[0], "nonce"),
                                gasPrice: Di(e[1], "gasPrice"),
                                gasLimit: Di(e[2], "gasLimit"),
                                to: Ui(e[3]),
                                value: Di(e[4], "value"),
                                data: x(e[5]),
                                chainId: ki
                            };
                            if (6 === e.length) return t;
                            const n = Di(e[6], "v"), r = Di(e[7], "r"), a = Di(e[8], "s");
                            if (r === ki && a === ki) t.chainId = n;
                            else {
                                let f = (n - Si) / Oi;
                                f < ki && (f = ki), t.chainId = f, l(f !== ki || n === _i || n === Pi, "non-canonical legacy v", "v", e[6]), t.signature = Se.from({
                                    r: P(e[7], 32),
                                    s: P(e[8], 32),
                                    v: n
                                });
                            }
                            return t;
                        }(e));
                        switch(e[0]){
                            case 1:
                                return as.from(function(f) {
                                    const e = pi(w(f).slice(1));
                                    l(Array.isArray(e) && (8 === e.length || 11 === e.length), "invalid field count for transaction type: 1", "data", x(f));
                                    const t = {
                                        type: 1,
                                        chainId: Di(e[0], "chainId"),
                                        nonce: Bi(e[1], "nonce"),
                                        gasPrice: Di(e[2], "gasPrice"),
                                        gasLimit: Di(e[3], "gasLimit"),
                                        to: Ui(e[4]),
                                        value: Di(e[5], "value"),
                                        data: x(e[6]),
                                        accessList: Li(e[7], "accessList")
                                    };
                                    return 8 === e.length || Ki(t, e.slice(8)), t;
                                }(e));
                            case 2:
                                return as.from(function(f) {
                                    const e = pi(w(f).slice(1));
                                    l(Array.isArray(e) && (9 === e.length || 12 === e.length), "invalid field count for transaction type: 2", "data", x(f));
                                    const t = {
                                        type: 2,
                                        chainId: Di(e[0], "chainId"),
                                        nonce: Bi(e[1], "nonce"),
                                        maxPriorityFeePerGas: Di(e[2], "maxPriorityFeePerGas"),
                                        maxFeePerGas: Di(e[3], "maxFeePerGas"),
                                        gasPrice: null,
                                        gasLimit: Di(e[4], "gasLimit"),
                                        to: Ui(e[5]),
                                        value: Di(e[6], "value"),
                                        data: x(e[7]),
                                        accessList: Li(e[8], "accessList")
                                    };
                                    return 9 === e.length || Ki(t, e.slice(9)), t;
                                }(e));
                            case 3:
                                return as.from(function(f) {
                                    let e = pi(w(f).slice(1)), t = "3", n = null;
                                    if (4 === e.length && Array.isArray(e[0])) {
                                        t = "3 (network format)";
                                        const f = e[1], r = e[2], a = e[3];
                                        l(Array.isArray(f), "invalid network format: blobs not an array", "fields[1]", f), l(Array.isArray(r), "invalid network format: commitments not an array", "fields[2]", r), l(Array.isArray(a), "invalid network format: proofs not an array", "fields[3]", a), l(f.length === r.length, "invalid network format: blobs/commitments length mismatch", "fields", e), l(f.length === a.length, "invalid network format: blobs/proofs length mismatch", "fields", e), n = [];
                                        for(let t = 0; t < e[1].length; t++)n.push({
                                            data: f[t],
                                            commitment: r[t],
                                            proof: a[t]
                                        });
                                        e = e[0];
                                    }
                                    l(Array.isArray(e) && (11 === e.length || 14 === e.length), "invalid field count for transaction type: ".concat(t), "data", x(f));
                                    const r = {
                                        type: 3,
                                        chainId: Di(e[0], "chainId"),
                                        nonce: Bi(e[1], "nonce"),
                                        maxPriorityFeePerGas: Di(e[2], "maxPriorityFeePerGas"),
                                        maxFeePerGas: Di(e[3], "maxFeePerGas"),
                                        gasPrice: null,
                                        gasLimit: Di(e[4], "gasLimit"),
                                        to: Ui(e[5]),
                                        value: Di(e[6], "value"),
                                        data: x(e[7]),
                                        accessList: Li(e[8], "accessList"),
                                        maxFeePerBlobGas: Di(e[9], "maxFeePerBlobGas"),
                                        blobVersionedHashes: e[10]
                                    };
                                    n && (r.blobs = n), l(null != r.to, "invalid address for transaction type: ".concat(t), "data", f), l(Array.isArray(r.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", f);
                                    for(let e = 0; e < r.blobVersionedHashes.length; e++)l(E(r.blobVersionedHashes[e], 32), "invalid blobVersionedHash at index ".concat(e, ": must be length 32"), "data", f);
                                    return 11 === e.length || Ki(r, e.slice(11)), r;
                                }(e));
                        }
                        u(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                            operation: "from"
                        });
                    }
                    const e = new as;
                    return null != f.type && (e.type = f.type), null != f.to && (e.to = f.to), null != f.nonce && (e.nonce = f.nonce), null != f.gasLimit && (e.gasLimit = f.gasLimit), null != f.gasPrice && (e.gasPrice = f.gasPrice), null != f.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = f.maxPriorityFeePerGas), null != f.maxFeePerGas && (e.maxFeePerGas = f.maxFeePerGas), null != f.maxFeePerBlobGas && (e.maxFeePerBlobGas = f.maxFeePerBlobGas), null != f.data && (e.data = f.data), null != f.value && (e.value = f.value), null != f.chainId && (e.chainId = f.chainId), null != f.signature && (e.signature = Se.from(f.signature)), null != f.accessList && (e.accessList = f.accessList), null != f.blobVersionedHashes && (e.blobVersionedHashes = f.blobVersionedHashes), null != f.kzg && (e.kzg = f.kzg), null != f.blobs && (e.blobs = f.blobs), null != f.hash && (l(e.isSigned(), "unsigned transaction cannot define '.hash'", "tx", f), l(e.hash === f.hash, "hash mismatch", "tx", f)), null != f.from && (l(e.isSigned(), "unsigned transaction cannot define '.from'", "tx", f), l(e.from.toLowerCase() === (f.from || "").toLowerCase(), "from mismatch", "tx", f)), e;
                }
            }
            function is(f, e) {
                u(!f || null != this.signature, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", {
                    operation: ".serialized"
                });
                const t = f ? this.signature : null;
                switch(this.inferType()){
                    case 0:
                        return function(f, e) {
                            const t = [
                                Fi(f.nonce, "nonce"),
                                Fi(f.gasPrice || 0, "gasPrice"),
                                Fi(f.gasLimit, "gasLimit"),
                                f.to || "0x",
                                Fi(f.value, "value"),
                                f.data
                            ];
                            let n = ki;
                            if (f.chainId != ki) n = z(f.chainId, "tx.chainId"), l(!e || null == e.networkV || e.legacyChainId === n, "tx.chainId/sig.v mismatch", "sig", e);
                            else if (f.signature) {
                                const e = f.signature.legacyChainId;
                                null != e && (n = e);
                            }
                            if (!e) return n !== ki && (t.push(J(n)), t.push("0x"), t.push("0x")), wi(t);
                            let r = BigInt(27 + e.yParity);
                            return n !== ki ? r = Se.getChainIdV(n, e.v) : BigInt(e.v) !== r && l(!1, "tx.chainId/sig.v mismatch", "sig", e), t.push(J(r)), t.push(J(e.r)), t.push(J(e.s)), wi(t);
                        }(this, t);
                    case 1:
                        return function(f, e) {
                            const t = [
                                Fi(f.chainId, "chainId"),
                                Fi(f.nonce, "nonce"),
                                Fi(f.gasPrice || 0, "gasPrice"),
                                Fi(f.gasLimit, "gasLimit"),
                                f.to || "0x",
                                Fi(f.value, "value"),
                                f.data,
                                Mi(f.accessList || [])
                            ];
                            return e && (t.push(Fi(e.yParity, "recoveryParam")), t.push(J(e.r)), t.push(J(e.s))), I([
                                "0x01",
                                wi(t)
                            ]);
                        }(this, t);
                    case 2:
                        return function(f, e) {
                            const t = [
                                Fi(f.chainId, "chainId"),
                                Fi(f.nonce, "nonce"),
                                Fi(f.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
                                Fi(f.maxFeePerGas || 0, "maxFeePerGas"),
                                Fi(f.gasLimit, "gasLimit"),
                                f.to || "0x",
                                Fi(f.value, "value"),
                                f.data,
                                Mi(f.accessList || [])
                            ];
                            return e && (t.push(Fi(e.yParity, "yParity")), t.push(J(e.r)), t.push(J(e.s))), I([
                                "0x02",
                                wi(t)
                            ]);
                        }(this, t);
                    case 3:
                        return function(f, e, t) {
                            const n = [
                                Fi(f.chainId, "chainId"),
                                Fi(f.nonce, "nonce"),
                                Fi(f.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
                                Fi(f.maxFeePerGas || 0, "maxFeePerGas"),
                                Fi(f.gasLimit, "gasLimit"),
                                f.to || ti,
                                Fi(f.value, "value"),
                                f.data,
                                Mi(f.accessList || []),
                                Fi(f.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
                                ji(f.blobVersionedHashes || [], "blobVersionedHashes")
                            ];
                            return e && (n.push(Fi(e.yParity, "yParity")), n.push(J(e.r)), n.push(J(e.s)), t) ? I([
                                "0x03",
                                wi([
                                    n,
                                    t.map((f)=>f.data),
                                    t.map((f)=>f.commitment),
                                    t.map((f)=>f.proof)
                                ])
                            ]) : I([
                                "0x03",
                                wi(n)
                            ]);
                        }(this, t, e ? this.blobs : null);
                }
                u(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                    operation: ".serialized"
                });
            }
            function ss(f) {
                const e = {};
                f.to && (e.to = f.to), f.from && (e.from = f.from), f.data && (e.data = x(f.data));
                const t = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
                for (const n of t)n in f && null != f[n] && (e[n] = z(f[n], "request.".concat(n)));
                const n = "type,nonce".split(/,/);
                for (const t of n)t in f && null != f[t] && (e[t] = W(f[t], "request.".concat(t)));
                return f.accessList && (e.accessList = Ei(f.accessList)), "blockTag" in f && (e.blockTag = f.blockTag), "enableCcipRead" in f && (e.enableCcipRead = !!f.enableCcipRead), "customData" in f && (e.customData = f.customData), "blobVersionedHashes" in f && f.blobVersionedHashes && (e.blobVersionedHashes = f.blobVersionedHashes.slice()), "kzg" in f && (e.kzg = f.kzg), "blobs" in f && f.blobs && (e.blobs = f.blobs.map((f)=>T(f) ? x(f) : Object.assign({}, f))), e;
            }
            function os(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            BigInt(0), Symbol.iterator, Symbol.iterator;
            var bs = 0;
            function cs(f) {
                return "__private_" + bs++ + "_" + f;
            }
            function ds(f, e) {
                if (f.provider) return f.provider;
                u(!1, "missing provider", "UNSUPPORTED_OPERATION", {
                    operation: e
                });
            }
            async function us(f, e) {
                let t = ss(e);
                if (null != t.to && (t.to = Na(t.to, f)), null != t.from) {
                    const e = t.from;
                    t.from = Promise.all([
                        f.getAddress(),
                        Na(e, f)
                    ]).then((f)=>{
                        let [e, t] = f;
                        return l(e.toLowerCase() === t.toLowerCase(), "transaction from mismatch", "tx.from", t), e;
                    });
                } else t.from = f.getAddress();
                return await s(t);
            }
            class ls {
                constructor(f){
                    this.provider = void 0, o(this, {
                        provider: f || null
                    });
                }
                async getNonce(f) {
                    return ds(this, "getTransactionCount").getTransactionCount(await this.getAddress(), f);
                }
                async populateCall(f) {
                    return await us(this, f);
                }
                async populateTransaction(f) {
                    const e = ds(this, "populateTransaction"), t = await us(this, f);
                    null == t.nonce && (t.nonce = await this.getNonce("pending")), null == t.gasLimit && (t.gasLimit = await this.estimateGas(t));
                    const n = await this.provider.getNetwork();
                    null != t.chainId ? l(z(t.chainId) === n.chainId, "transaction chainId mismatch", "tx.chainId", f.chainId) : t.chainId = n.chainId;
                    const r = null != t.maxFeePerGas || null != t.maxPriorityFeePerGas;
                    if (null == t.gasPrice || 2 !== t.type && !r ? 0 !== t.type && 1 !== t.type || !r || l(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", f) : l(!1, "eip-1559 transaction do not support gasPrice", "tx", f), 2 !== t.type && null != t.type || null == t.maxFeePerGas || null == t.maxPriorityFeePerGas) if (0 === t.type || 1 === t.type) {
                        const f = await e.getFeeData();
                        u(null != f.gasPrice, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
                            operation: "getGasPrice"
                        }), null == t.gasPrice && (t.gasPrice = f.gasPrice);
                    } else {
                        const f = await e.getFeeData();
                        if (null == t.type) if (null != f.maxFeePerGas && null != f.maxPriorityFeePerGas) if (t.type = 2, null != t.gasPrice) {
                            const f = t.gasPrice;
                            delete t.gasPrice, t.maxFeePerGas = f, t.maxPriorityFeePerGas = f;
                        } else null == t.maxFeePerGas && (t.maxFeePerGas = f.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = f.maxPriorityFeePerGas);
                        else null != f.gasPrice ? (u(!r, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                            operation: "populateTransaction"
                        }), null == t.gasPrice && (t.gasPrice = f.gasPrice), t.type = 0) : u(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                            operation: "signer.getFeeData"
                        });
                        else 2 !== t.type && 3 !== t.type || (null == t.maxFeePerGas && (t.maxFeePerGas = f.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = f.maxPriorityFeePerGas));
                    }
                    else t.type = 2;
                    return await s(t);
                }
                async estimateGas(f) {
                    return ds(this, "estimateGas").estimateGas(await this.populateCall(f));
                }
                async call(f) {
                    return ds(this, "call").call(await this.populateCall(f));
                }
                async resolveName(f) {
                    const e = ds(this, "resolveName");
                    return await e.resolveName(f);
                }
                async sendTransaction(f) {
                    const e = ds(this, "sendTransaction"), t = await this.populateTransaction(f);
                    delete t.from;
                    const n = as.from(t);
                    return await e.broadcastTransaction(await this.signTransaction(n));
                }
            }
            var hs = cs("throwUnsupported");
            class ps extends ls {
                constructor(f, e){
                    super(e), Object.defineProperty(this, hs, {
                        value: ys
                    }), this.address = void 0, o(this, {
                        address: f
                    });
                }
                async getAddress() {
                    return this.address;
                }
                connect(f) {
                    return new ps(this.address, f);
                }
                async signTransaction(f) {
                    os(this, hs)[hs]("transactions", "signTransaction");
                }
                async signMessage(f) {
                    os(this, hs)[hs]("messages", "signMessage");
                }
                async signTypedData(f, e, t) {
                    os(this, hs)[hs]("typed-data", "signTypedData");
                }
            }
            function ys(f, e) {
                u(!1, "VoidSigner cannot sign ".concat(f), "UNSUPPORTED_OPERATION", {
                    operation: e
                });
            }
            function ms(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var gs = 0;
            function ws(f) {
                return "__private_" + gs++ + "_" + f;
            }
            var vs = ws("signingKey");
            class Es extends ls {
                constructor(f, e){
                    super(e), this.address = void 0, Object.defineProperty(this, vs, {
                        writable: !0,
                        value: void 0
                    }), l(f && "function" == typeof f.sign, "invalid private key", "privateKey", "[ REDACTED ]"), ms(this, vs)[vs] = f, o(this, {
                        address: Ti(this.signingKey.publicKey)
                    });
                }
                get signingKey() {
                    return ms(this, vs)[vs];
                }
                get privateKey() {
                    return this.signingKey.privateKey;
                }
                async getAddress() {
                    return this.address;
                }
                connect(f) {
                    return new Es(ms(this, vs)[vs], f);
                }
                async signTransaction(f) {
                    f = ss(f);
                    const { to: e, from: t } = await s({
                        to: f.to ? Na(f.to, this.provider) : void 0,
                        from: f.from ? Na(f.from, this.provider) : void 0
                    });
                    null != e && (f.to = e), null != t && (f.from = t), null != f.from && (l(ne(f.from) === this.address, "transaction from address mismatch", "tx.from", f.from), delete f.from);
                    const n = as.from(f);
                    return n.signature = this.signingKey.sign(n.unsignedHash), n.serialized;
                }
                async signMessage(f) {
                    return this.signMessageSync(f);
                }
                signMessageSync(f) {
                    return this.signingKey.sign(function(f) {
                        return "string" == typeof f && (f = C(f)), Zf(I([
                            C("Ethereum Signed Message:\n"),
                            C(String(f.length)),
                            f
                        ]));
                    }(f)).serialized;
                }
                async signTypedData(f, e, t) {
                    const n = await fi.resolveNames(f, e, t, async (f)=>{
                        u(null != this.provider, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
                            operation: "resolveName",
                            info: {
                                name: f
                            }
                        });
                        const e = await this.provider.resolveName(f);
                        return u(null != e, "unconfigured ENS name", "UNCONFIGURED_NAME", {
                            value: f
                        }), e;
                    });
                    return this.signingKey.sign(fi.hash(n.domain, e, n.value)).serialized;
                }
            }
            let Ts = !1;
            const As = function(f, e, t) {
                return (function(f, e) {
                    const t = {
                        sha256: ir,
                        sha512: ur
                    }[f];
                    return l(null != t, "invalid hmac algorithm", "algorithm", f), Zn.create(t, e);
                })(f, e).update(t).digest();
            };
            let xs = As;
            function Is(f, e, t) {
                const n = w(e, "key"), r = w(t, "data");
                return x(xs(f, n, r));
            }
            Is._ = As, Is.lock = function() {
                Ts = !0;
            }, Is.register = function(f) {
                if (Ts) throw new Error("computeHmac is locked");
                xs = f;
            }, Object.freeze(Is);
            const ks = new Uint8Array([
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8
            ]), Os = Uint8Array.from({
                length: 16
            }, (f, e)=>e);
            let _s = [
                Os
            ], Ps = [
                Os.map((f)=>(9 * f + 5) % 16)
            ];
            for(let f = 0; f < 4; f++)for (let e of [
                _s,
                Ps
            ])e.push(e[f].map((f)=>ks[f]));
            const Ss = [
                [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8
                ],
                [
                    12,
                    13,
                    11,
                    15,
                    6,
                    9,
                    9,
                    7,
                    12,
                    15,
                    11,
                    13,
                    7,
                    8,
                    7,
                    7
                ],
                [
                    13,
                    15,
                    14,
                    11,
                    7,
                    7,
                    6,
                    8,
                    13,
                    14,
                    13,
                    12,
                    5,
                    5,
                    6,
                    9
                ],
                [
                    14,
                    11,
                    12,
                    14,
                    8,
                    6,
                    5,
                    5,
                    15,
                    12,
                    15,
                    14,
                    9,
                    9,
                    8,
                    6
                ],
                [
                    15,
                    12,
                    13,
                    13,
                    9,
                    5,
                    8,
                    6,
                    14,
                    11,
                    12,
                    11,
                    8,
                    6,
                    5,
                    5
                ]
            ].map((f)=>new Uint8Array(f)), Rs = _s.map((f, e)=>f.map((f)=>Ss[e][f])), Ns = Ps.map((f, e)=>f.map((f)=>Ss[e][f])), Cs = new Uint32Array([
                0,
                1518500249,
                1859775393,
                2400959708,
                2840853838
            ]), Us = new Uint32Array([
                1352829926,
                1548603684,
                1836072691,
                2053994217,
                0
            ]), Ls = (f, e)=>f << e | f >>> 32 - e;
            function Bs(f, e, t, n) {
                return 0 === f ? e ^ t ^ n : 1 === f ? e & t | ~e & n : 2 === f ? (e | ~t) ^ n : 3 === f ? e & n | t & ~n : e ^ (t | ~n);
            }
            const Ds = new Uint32Array(16);
            class Fs extends Qn {
                constructor(){
                    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
                }
                get() {
                    const { h0: f, h1: e, h2: t, h3: n, h4: r } = this;
                    return [
                        f,
                        e,
                        t,
                        n,
                        r
                    ];
                }
                set(f, e, t, n, r) {
                    this.h0 = 0 | f, this.h1 = 0 | e, this.h2 = 0 | t, this.h3 = 0 | n, this.h4 = 0 | r;
                }
                process(f, e) {
                    for(let t = 0; t < 16; t++, e += 4)Ds[t] = f.getUint32(e, !0);
                    let t = 0 | this.h0, n = t, r = 0 | this.h1, a = r, i = 0 | this.h2, s = i, o = 0 | this.h3, b = o, c = 0 | this.h4, d = c;
                    for(let f = 0; f < 5; f++){
                        const e = 4 - f, u = Cs[f], l = Us[f], h = _s[f], p = Ps[f], y = Rs[f], m = Ns[f];
                        for(let e = 0; e < 16; e++){
                            const n = Ls(t + Bs(f, r, i, o) + Ds[h[e]] + u, y[e]) + c | 0;
                            t = c, c = o, o = 0 | Ls(i, 10), i = r, r = n;
                        }
                        for(let f = 0; f < 16; f++){
                            const t = Ls(n + Bs(e, a, s, b) + Ds[p[f]] + l, m[f]) + d | 0;
                            n = d, d = b, b = 0 | Ls(s, 10), s = a, a = t;
                        }
                    }
                    this.set(this.h1 + i + b | 0, this.h2 + o + d | 0, this.h3 + c + n | 0, this.h4 + t + a | 0, this.h0 + r + s | 0);
                }
                roundClean() {
                    Ds.fill(0);
                }
                destroy() {
                    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
                }
            }
            const Ms = Rf(()=>new Fs);
            let js = !1;
            const Ks = function(f) {
                return Ms(f);
            };
            let zs = Ks;
            function Vs(f) {
                const e = w(f, "data");
                return x(zs(e));
            }
            Vs._ = Ks, Vs.lock = function() {
                js = !0;
            }, Vs.register = function(f) {
                if (js) throw new TypeError("ripemd160 is locked");
                zs = f;
            }, Object.freeze(Vs);
            const Gs = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
            let Hs = null;
            function Ws(f) {
                if (null == Hs) {
                    Hs = {};
                    for(let f = 0; f < 58; f++)Hs[Gs[f]] = BigInt(f);
                }
                const e = Hs[f];
                return l(null != e, "invalid base58 value", "letter", f), e;
            }
            const $s = BigInt(0), Js = BigInt(58);
            function Ys(f) {
                const e = w(f);
                let t = H(e), n = "";
                for(; t;)n = Gs[Number(t % Js)] + n, t /= Js;
                for(let f = 0; f < e.length && !e[f]; f++)n = Gs[0] + n;
                return n;
            }
            function qs(f) {
                let e = $s;
                for(let t = 0; t < f.length; t++)e *= Js, e += Ws(f[t]);
                return e;
            }
            const Zs = /^[a-z]*$/i;
            function Xs(f, e) {
                let t = 97;
                return f.reduce((f, n)=>(n === e ? t++ : n.match(Zs) ? f.push(String.fromCharCode(t) + n) : (t = 97, f.push(n)), f), []);
            }
            class Qs {
                constructor(f){
                    this.locale = void 0, o(this, {
                        locale: f
                    });
                }
                split(f) {
                    return f.toLowerCase().split(/\s+/g);
                }
                join(f) {
                    return f.join(" ");
                }
            }
            function fo(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var eo = 0;
            function to(f) {
                return "__private_" + eo++ + "_" + f;
            }
            var no = to("data"), ro = to("checksum"), ao = to("words"), io = to("loadWords");
            class so extends Qs {
                constructor(f, e, t){
                    super(f), Object.defineProperty(this, io, {
                        value: oo
                    }), Object.defineProperty(this, no, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ro, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ao, {
                        writable: !0,
                        value: void 0
                    }), fo(this, no)[no] = e, fo(this, ro)[ro] = t, fo(this, ao)[ao] = null;
                }
                get _data() {
                    return fo(this, no)[no];
                }
                _decodeWords() {
                    return l("0" === (f = fo(this, no)[no])[0], "unsupported auwl data", "data", f), function(f, e) {
                        for(let t = 28; t >= 0; t--)f = f.split(" !#$%&'()*+,-./<=>?@[]^_`{|}~"[t]).join(e.substring(2 * t, 2 * t + 2));
                        const t = [], n = f.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (f, e, n, r)=>{
                            if (n) for(let f = parseInt(n); f >= 0; f--)t.push(";");
                            else t.push(e.toLowerCase());
                            return "";
                        });
                        if (n) throw new Error("leftovers: ".concat(JSON.stringify(n)));
                        return Xs(Xs(t, ";"), ":");
                    }(f.substring(59), f.substring(1, 59));
                    "TURBOPACK unreachable";
                    var f;
                }
                getWord(f) {
                    const e = fo(this, io)[io]();
                    return l(f >= 0 && f < e.length, "invalid word index: ".concat(f), "index", f), e[f];
                }
                getWordIndex(f) {
                    return fo(this, io)[io]().indexOf(f);
                }
            }
            function oo() {
                if (null == fo(this, ao)[ao]) {
                    const f = this._decodeWords();
                    if (Ut(f.join("\n") + "\n") !== fo(this, ro)[ro]) throw new Error("BIP39 Wordlist for ".concat(this.locale, " FAILED"));
                    fo(this, ao)[ao] = f;
                }
                return fo(this, ao)[ao];
            }
            let bo = null;
            class co extends so {
                constructor(){
                    super("en", "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO", "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60");
                }
                static wordlist() {
                    return null == bo && (bo = new co), bo;
                }
            }
            let uo = !1;
            const lo = function(f, e, t, n, r) {
                return function(f, e, t, n, r) {
                    const a = {
                        sha256: ir,
                        sha512: ur
                    }[r];
                    return l(null != a, "invalid pbkdf2 algorithm", "algorithm", r), Xn(a, f, e, {
                        c: t,
                        dkLen: n
                    });
                }(f, e, t, n, r);
            };
            let ho = lo;
            function po(f, e, t, n, r) {
                const a = w(f, "password"), i = w(e, "salt");
                return x(ho(a, i, t, n, r));
            }
            function yo(f) {
                return (1 << f) - 1 << 8 - f & 255;
            }
            function mo(f, e) {
                y("NFKD"), null == e && (e = co.wordlist());
                const t = e.split(f);
                l(t.length % 3 == 0 && t.length >= 12 && t.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
                const n = new Uint8Array(Math.ceil(11 * t.length / 8));
                let r = 0;
                for(let f = 0; f < t.length; f++){
                    let a = e.getWordIndex(t[f].normalize("NFKD"));
                    l(a >= 0, "invalid mnemonic word at index ".concat(f), "mnemonic", "[ REDACTED ]");
                    for(let f = 0; f < 11; f++)a & 1 << 10 - f && (n[r >> 3] |= 1 << 7 - r % 8), r++;
                }
                const a = 32 * t.length / 3, i = yo(t.length / 3);
                return l((w(bi(n.slice(0, a / 8)))[0] & i) == (n[n.length - 1] & i), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]"), x(n.slice(0, a / 8));
            }
            function go(f, e) {
                l(f.length % 4 == 0 && f.length >= 16 && f.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]"), null == e && (e = co.wordlist());
                const t = [
                    0
                ];
                let n = 11;
                for(let e = 0; e < f.length; e++)n > 8 ? (t[t.length - 1] <<= 8, t[t.length - 1] |= f[e], n -= 8) : (t[t.length - 1] <<= n, t[t.length - 1] |= f[e] >> 8 - n, t.push(f[e] & (1 << 8 - n) - 1 & 255), n += 3);
                const r = f.length / 4, a = parseInt(bi(f).substring(2, 4), 16) & yo(r);
                return t[t.length - 1] <<= r, t[t.length - 1] |= a >> 8 - r, e.join(t.map((f)=>e.getWord(f)));
            }
            po._ = lo, po.lock = function() {
                uo = !0;
            }, po.register = function(f) {
                if (uo) throw new Error("pbkdf2 is locked");
                ho = f;
            }, Object.freeze(po);
            const wo = {};
            class vo {
                constructor(f, e, t, n, r){
                    this.phrase = void 0, this.password = void 0, this.wordlist = void 0, this.entropy = void 0, null == n && (n = ""), null == r && (r = co.wordlist()), m(f, wo, "Mnemonic"), o(this, {
                        phrase: t,
                        password: n,
                        wordlist: r,
                        entropy: e
                    });
                }
                computeSeed() {
                    const f = C("mnemonic" + this.password, "NFKD");
                    return po(C(this.phrase, "NFKD"), f, 2048, 64, "sha512");
                }
                static fromPhrase(f, e, t) {
                    const n = mo(f, t);
                    return f = go(w(n), t), new vo(wo, n, f, e, t);
                }
                static fromEntropy(f, e, t) {
                    const n = w(f, "entropy"), r = go(n, t);
                    return new vo(wo, x(n), r, e, t);
                }
                static entropyToPhrase(f, e) {
                    return go(w(f, "entropy"), e);
                }
                static phraseToEntropy(f, e) {
                    return mo(f, e);
                }
                static isValidMnemonic(f, e) {
                    try {
                        return mo(f, e), !0;
                    } catch (f) {}
                    return !1;
                }
            }
            var Eo, To, Ao, xo = function(f, e, t, n) {
                if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
            }, Io = function(f, e, t, n, r) {
                if ("m" === n) throw new TypeError("Private method is not writable");
                if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
            };
            const ko = {
                16: 10,
                24: 12,
                32: 14
            }, Oo = [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                27,
                54,
                108,
                216,
                171,
                77,
                154,
                47,
                94,
                188,
                99,
                198,
                151,
                53,
                106,
                212,
                179,
                125,
                250,
                239,
                197,
                145
            ], _o = [
                99,
                124,
                119,
                123,
                242,
                107,
                111,
                197,
                48,
                1,
                103,
                43,
                254,
                215,
                171,
                118,
                202,
                130,
                201,
                125,
                250,
                89,
                71,
                240,
                173,
                212,
                162,
                175,
                156,
                164,
                114,
                192,
                183,
                253,
                147,
                38,
                54,
                63,
                247,
                204,
                52,
                165,
                229,
                241,
                113,
                216,
                49,
                21,
                4,
                199,
                35,
                195,
                24,
                150,
                5,
                154,
                7,
                18,
                128,
                226,
                235,
                39,
                178,
                117,
                9,
                131,
                44,
                26,
                27,
                110,
                90,
                160,
                82,
                59,
                214,
                179,
                41,
                227,
                47,
                132,
                83,
                209,
                0,
                237,
                32,
                252,
                177,
                91,
                106,
                203,
                190,
                57,
                74,
                76,
                88,
                207,
                208,
                239,
                170,
                251,
                67,
                77,
                51,
                133,
                69,
                249,
                2,
                127,
                80,
                60,
                159,
                168,
                81,
                163,
                64,
                143,
                146,
                157,
                56,
                245,
                188,
                182,
                218,
                33,
                16,
                255,
                243,
                210,
                205,
                12,
                19,
                236,
                95,
                151,
                68,
                23,
                196,
                167,
                126,
                61,
                100,
                93,
                25,
                115,
                96,
                129,
                79,
                220,
                34,
                42,
                144,
                136,
                70,
                238,
                184,
                20,
                222,
                94,
                11,
                219,
                224,
                50,
                58,
                10,
                73,
                6,
                36,
                92,
                194,
                211,
                172,
                98,
                145,
                149,
                228,
                121,
                231,
                200,
                55,
                109,
                141,
                213,
                78,
                169,
                108,
                86,
                244,
                234,
                101,
                122,
                174,
                8,
                186,
                120,
                37,
                46,
                28,
                166,
                180,
                198,
                232,
                221,
                116,
                31,
                75,
                189,
                139,
                138,
                112,
                62,
                181,
                102,
                72,
                3,
                246,
                14,
                97,
                53,
                87,
                185,
                134,
                193,
                29,
                158,
                225,
                248,
                152,
                17,
                105,
                217,
                142,
                148,
                155,
                30,
                135,
                233,
                206,
                85,
                40,
                223,
                140,
                161,
                137,
                13,
                191,
                230,
                66,
                104,
                65,
                153,
                45,
                15,
                176,
                84,
                187,
                22
            ], Po = [
                82,
                9,
                106,
                213,
                48,
                54,
                165,
                56,
                191,
                64,
                163,
                158,
                129,
                243,
                215,
                251,
                124,
                227,
                57,
                130,
                155,
                47,
                255,
                135,
                52,
                142,
                67,
                68,
                196,
                222,
                233,
                203,
                84,
                123,
                148,
                50,
                166,
                194,
                35,
                61,
                238,
                76,
                149,
                11,
                66,
                250,
                195,
                78,
                8,
                46,
                161,
                102,
                40,
                217,
                36,
                178,
                118,
                91,
                162,
                73,
                109,
                139,
                209,
                37,
                114,
                248,
                246,
                100,
                134,
                104,
                152,
                22,
                212,
                164,
                92,
                204,
                93,
                101,
                182,
                146,
                108,
                112,
                72,
                80,
                253,
                237,
                185,
                218,
                94,
                21,
                70,
                87,
                167,
                141,
                157,
                132,
                144,
                216,
                171,
                0,
                140,
                188,
                211,
                10,
                247,
                228,
                88,
                5,
                184,
                179,
                69,
                6,
                208,
                44,
                30,
                143,
                202,
                63,
                15,
                2,
                193,
                175,
                189,
                3,
                1,
                19,
                138,
                107,
                58,
                145,
                17,
                65,
                79,
                103,
                220,
                234,
                151,
                242,
                207,
                206,
                240,
                180,
                230,
                115,
                150,
                172,
                116,
                34,
                231,
                173,
                53,
                133,
                226,
                249,
                55,
                232,
                28,
                117,
                223,
                110,
                71,
                241,
                26,
                113,
                29,
                41,
                197,
                137,
                111,
                183,
                98,
                14,
                170,
                24,
                190,
                27,
                252,
                86,
                62,
                75,
                198,
                210,
                121,
                32,
                154,
                219,
                192,
                254,
                120,
                205,
                90,
                244,
                31,
                221,
                168,
                51,
                136,
                7,
                199,
                49,
                177,
                18,
                16,
                89,
                39,
                128,
                236,
                95,
                96,
                81,
                127,
                169,
                25,
                181,
                74,
                13,
                45,
                229,
                122,
                159,
                147,
                201,
                156,
                239,
                160,
                224,
                59,
                77,
                174,
                42,
                245,
                176,
                200,
                235,
                187,
                60,
                131,
                83,
                153,
                97,
                23,
                43,
                4,
                126,
                186,
                119,
                214,
                38,
                225,
                105,
                20,
                99,
                85,
                33,
                12,
                125
            ], So = [
                3328402341,
                4168907908,
                4000806809,
                4135287693,
                4294111757,
                3597364157,
                3731845041,
                2445657428,
                1613770832,
                33620227,
                3462883241,
                1445669757,
                3892248089,
                3050821474,
                1303096294,
                3967186586,
                2412431941,
                528646813,
                2311702848,
                4202528135,
                4026202645,
                2992200171,
                2387036105,
                4226871307,
                1101901292,
                3017069671,
                1604494077,
                1169141738,
                597466303,
                1403299063,
                3832705686,
                2613100635,
                1974974402,
                3791519004,
                1033081774,
                1277568618,
                1815492186,
                2118074177,
                4126668546,
                2211236943,
                1748251740,
                1369810420,
                3521504564,
                4193382664,
                3799085459,
                2883115123,
                1647391059,
                706024767,
                134480908,
                2512897874,
                1176707941,
                2646852446,
                806885416,
                932615841,
                168101135,
                798661301,
                235341577,
                605164086,
                461406363,
                3756188221,
                3454790438,
                1311188841,
                2142417613,
                3933566367,
                302582043,
                495158174,
                1479289972,
                874125870,
                907746093,
                3698224818,
                3025820398,
                1537253627,
                2756858614,
                1983593293,
                3084310113,
                2108928974,
                1378429307,
                3722699582,
                1580150641,
                327451799,
                2790478837,
                3117535592,
                0,
                3253595436,
                1075847264,
                3825007647,
                2041688520,
                3059440621,
                3563743934,
                2378943302,
                1740553945,
                1916352843,
                2487896798,
                2555137236,
                2958579944,
                2244988746,
                3151024235,
                3320835882,
                1336584933,
                3992714006,
                2252555205,
                2588757463,
                1714631509,
                293963156,
                2319795663,
                3925473552,
                67240454,
                4269768577,
                2689618160,
                2017213508,
                631218106,
                1269344483,
                2723238387,
                1571005438,
                2151694528,
                93294474,
                1066570413,
                563977660,
                1882732616,
                4059428100,
                1673313503,
                2008463041,
                2950355573,
                1109467491,
                537923632,
                3858759450,
                4260623118,
                3218264685,
                2177748300,
                403442708,
                638784309,
                3287084079,
                3193921505,
                899127202,
                2286175436,
                773265209,
                2479146071,
                1437050866,
                4236148354,
                2050833735,
                3362022572,
                3126681063,
                840505643,
                3866325909,
                3227541664,
                427917720,
                2655997905,
                2749160575,
                1143087718,
                1412049534,
                999329963,
                193497219,
                2353415882,
                3354324521,
                1807268051,
                672404540,
                2816401017,
                3160301282,
                369822493,
                2916866934,
                3688947771,
                1681011286,
                1949973070,
                336202270,
                2454276571,
                201721354,
                1210328172,
                3093060836,
                2680341085,
                3184776046,
                1135389935,
                3294782118,
                965841320,
                831886756,
                3554993207,
                4068047243,
                3588745010,
                2345191491,
                1849112409,
                3664604599,
                26054028,
                2983581028,
                2622377682,
                1235855840,
                3630984372,
                2891339514,
                4092916743,
                3488279077,
                3395642799,
                4101667470,
                1202630377,
                268961816,
                1874508501,
                4034427016,
                1243948399,
                1546530418,
                941366308,
                1470539505,
                1941222599,
                2546386513,
                3421038627,
                2715671932,
                3899946140,
                1042226977,
                2521517021,
                1639824860,
                227249030,
                260737669,
                3765465232,
                2084453954,
                1907733956,
                3429263018,
                2420656344,
                100860677,
                4160157185,
                470683154,
                3261161891,
                1781871967,
                2924959737,
                1773779408,
                394692241,
                2579611992,
                974986535,
                664706745,
                3655459128,
                3958962195,
                731420851,
                571543859,
                3530123707,
                2849626480,
                126783113,
                865375399,
                765172662,
                1008606754,
                361203602,
                3387549984,
                2278477385,
                2857719295,
                1344809080,
                2782912378,
                59542671,
                1503764984,
                160008576,
                437062935,
                1707065306,
                3622233649,
                2218934982,
                3496503480,
                2185314755,
                697932208,
                1512910199,
                504303377,
                2075177163,
                2824099068,
                1841019862,
                739644986
            ], Ro = [
                2781242211,
                2230877308,
                2582542199,
                2381740923,
                234877682,
                3184946027,
                2984144751,
                1418839493,
                1348481072,
                50462977,
                2848876391,
                2102799147,
                434634494,
                1656084439,
                3863849899,
                2599188086,
                1167051466,
                2636087938,
                1082771913,
                2281340285,
                368048890,
                3954334041,
                3381544775,
                201060592,
                3963727277,
                1739838676,
                4250903202,
                3930435503,
                3206782108,
                4149453988,
                2531553906,
                1536934080,
                3262494647,
                484572669,
                2923271059,
                1783375398,
                1517041206,
                1098792767,
                49674231,
                1334037708,
                1550332980,
                4098991525,
                886171109,
                150598129,
                2481090929,
                1940642008,
                1398944049,
                1059722517,
                201851908,
                1385547719,
                1699095331,
                1587397571,
                674240536,
                2704774806,
                252314885,
                3039795866,
                151914247,
                908333586,
                2602270848,
                1038082786,
                651029483,
                1766729511,
                3447698098,
                2682942837,
                454166793,
                2652734339,
                1951935532,
                775166490,
                758520603,
                3000790638,
                4004797018,
                4217086112,
                4137964114,
                1299594043,
                1639438038,
                3464344499,
                2068982057,
                1054729187,
                1901997871,
                2534638724,
                4121318227,
                1757008337,
                0,
                750906861,
                1614815264,
                535035132,
                3363418545,
                3988151131,
                3201591914,
                1183697867,
                3647454910,
                1265776953,
                3734260298,
                3566750796,
                3903871064,
                1250283471,
                1807470800,
                717615087,
                3847203498,
                384695291,
                3313910595,
                3617213773,
                1432761139,
                2484176261,
                3481945413,
                283769337,
                100925954,
                2180939647,
                4037038160,
                1148730428,
                3123027871,
                3813386408,
                4087501137,
                4267549603,
                3229630528,
                2315620239,
                2906624658,
                3156319645,
                1215313976,
                82966005,
                3747855548,
                3245848246,
                1974459098,
                1665278241,
                807407632,
                451280895,
                251524083,
                1841287890,
                1283575245,
                337120268,
                891687699,
                801369324,
                3787349855,
                2721421207,
                3431482436,
                959321879,
                1469301956,
                4065699751,
                2197585534,
                1199193405,
                2898814052,
                3887750493,
                724703513,
                2514908019,
                2696962144,
                2551808385,
                3516813135,
                2141445340,
                1715741218,
                2119445034,
                2872807568,
                2198571144,
                3398190662,
                700968686,
                3547052216,
                1009259540,
                2041044702,
                3803995742,
                487983883,
                1991105499,
                1004265696,
                1449407026,
                1316239930,
                504629770,
                3683797321,
                168560134,
                1816667172,
                3837287516,
                1570751170,
                1857934291,
                4014189740,
                2797888098,
                2822345105,
                2754712981,
                936633572,
                2347923833,
                852879335,
                1133234376,
                1500395319,
                3084545389,
                2348912013,
                1689376213,
                3533459022,
                3762923945,
                3034082412,
                4205598294,
                133428468,
                634383082,
                2949277029,
                2398386810,
                3913789102,
                403703816,
                3580869306,
                2297460856,
                1867130149,
                1918643758,
                607656988,
                4049053350,
                3346248884,
                1368901318,
                600565992,
                2090982877,
                2632479860,
                557719327,
                3717614411,
                3697393085,
                2249034635,
                2232388234,
                2430627952,
                1115438654,
                3295786421,
                2865522278,
                3633334344,
                84280067,
                33027830,
                303828494,
                2747425121,
                1600795957,
                4188952407,
                3496589753,
                2434238086,
                1486471617,
                658119965,
                3106381470,
                953803233,
                334231800,
                3005978776,
                857870609,
                3151128937,
                1890179545,
                2298973838,
                2805175444,
                3056442267,
                574365214,
                2450884487,
                550103529,
                1233637070,
                4289353045,
                2018519080,
                2057691103,
                2399374476,
                4166623649,
                2148108681,
                387583245,
                3664101311,
                836232934,
                3330556482,
                3100665960,
                3280093505,
                2955516313,
                2002398509,
                287182607,
                3413881008,
                4238890068,
                3597515707,
                975967766
            ], No = [
                1671808611,
                2089089148,
                2006576759,
                2072901243,
                4061003762,
                1807603307,
                1873927791,
                3310653893,
                810573872,
                16974337,
                1739181671,
                729634347,
                4263110654,
                3613570519,
                2883997099,
                1989864566,
                3393556426,
                2191335298,
                3376449993,
                2106063485,
                4195741690,
                1508618841,
                1204391495,
                4027317232,
                2917941677,
                3563566036,
                2734514082,
                2951366063,
                2629772188,
                2767672228,
                1922491506,
                3227229120,
                3082974647,
                4246528509,
                2477669779,
                644500518,
                911895606,
                1061256767,
                4144166391,
                3427763148,
                878471220,
                2784252325,
                3845444069,
                4043897329,
                1905517169,
                3631459288,
                827548209,
                356461077,
                67897348,
                3344078279,
                593839651,
                3277757891,
                405286936,
                2527147926,
                84871685,
                2595565466,
                118033927,
                305538066,
                2157648768,
                3795705826,
                3945188843,
                661212711,
                2999812018,
                1973414517,
                152769033,
                2208177539,
                745822252,
                439235610,
                455947803,
                1857215598,
                1525593178,
                2700827552,
                1391895634,
                994932283,
                3596728278,
                3016654259,
                695947817,
                3812548067,
                795958831,
                2224493444,
                1408607827,
                3513301457,
                0,
                3979133421,
                543178784,
                4229948412,
                2982705585,
                1542305371,
                1790891114,
                3410398667,
                3201918910,
                961245753,
                1256100938,
                1289001036,
                1491644504,
                3477767631,
                3496721360,
                4012557807,
                2867154858,
                4212583931,
                1137018435,
                1305975373,
                861234739,
                2241073541,
                1171229253,
                4178635257,
                33948674,
                2139225727,
                1357946960,
                1011120188,
                2679776671,
                2833468328,
                1374921297,
                2751356323,
                1086357568,
                2408187279,
                2460827538,
                2646352285,
                944271416,
                4110742005,
                3168756668,
                3066132406,
                3665145818,
                560153121,
                271589392,
                4279952895,
                4077846003,
                3530407890,
                3444343245,
                202643468,
                322250259,
                3962553324,
                1608629855,
                2543990167,
                1154254916,
                389623319,
                3294073796,
                2817676711,
                2122513534,
                1028094525,
                1689045092,
                1575467613,
                422261273,
                1939203699,
                1621147744,
                2174228865,
                1339137615,
                3699352540,
                577127458,
                712922154,
                2427141008,
                2290289544,
                1187679302,
                3995715566,
                3100863416,
                339486740,
                3732514782,
                1591917662,
                186455563,
                3681988059,
                3762019296,
                844522546,
                978220090,
                169743370,
                1239126601,
                101321734,
                611076132,
                1558493276,
                3260915650,
                3547250131,
                2901361580,
                1655096418,
                2443721105,
                2510565781,
                3828863972,
                2039214713,
                3878868455,
                3359869896,
                928607799,
                1840765549,
                2374762893,
                3580146133,
                1322425422,
                2850048425,
                1823791212,
                1459268694,
                4094161908,
                3928346602,
                1706019429,
                2056189050,
                2934523822,
                135794696,
                3134549946,
                2022240376,
                628050469,
                779246638,
                472135708,
                2800834470,
                3032970164,
                3327236038,
                3894660072,
                3715932637,
                1956440180,
                522272287,
                1272813131,
                3185336765,
                2340818315,
                2323976074,
                1888542832,
                1044544574,
                3049550261,
                1722469478,
                1222152264,
                50660867,
                4127324150,
                236067854,
                1638122081,
                895445557,
                1475980887,
                3117443513,
                2257655686,
                3243809217,
                489110045,
                2662934430,
                3778599393,
                4162055160,
                2561878936,
                288563729,
                1773916777,
                3648039385,
                2391345038,
                2493985684,
                2612407707,
                505560094,
                2274497927,
                3911240169,
                3460925390,
                1442818645,
                678973480,
                3749357023,
                2358182796,
                2717407649,
                2306869641,
                219617805,
                3218761151,
                3862026214,
                1120306242,
                1756942440,
                1103331905,
                2578459033,
                762796589,
                252780047,
                2966125488,
                1425844308,
                3151392187,
                372911126
            ], Co = [
                1667474886,
                2088535288,
                2004326894,
                2071694838,
                4075949567,
                1802223062,
                1869591006,
                3318043793,
                808472672,
                16843522,
                1734846926,
                724270422,
                4278065639,
                3621216949,
                2880169549,
                1987484396,
                3402253711,
                2189597983,
                3385409673,
                2105378810,
                4210693615,
                1499065266,
                1195886990,
                4042263547,
                2913856577,
                3570689971,
                2728590687,
                2947541573,
                2627518243,
                2762274643,
                1920112356,
                3233831835,
                3082273397,
                4261223649,
                2475929149,
                640051788,
                909531756,
                1061110142,
                4160160501,
                3435941763,
                875846760,
                2779116625,
                3857003729,
                4059105529,
                1903268834,
                3638064043,
                825316194,
                353713962,
                67374088,
                3351728789,
                589522246,
                3284360861,
                404236336,
                2526454071,
                84217610,
                2593830191,
                117901582,
                303183396,
                2155911963,
                3806477791,
                3958056653,
                656894286,
                2998062463,
                1970642922,
                151591698,
                2206440989,
                741110872,
                437923380,
                454765878,
                1852748508,
                1515908788,
                2694904667,
                1381168804,
                993742198,
                3604373943,
                3014905469,
                690584402,
                3823320797,
                791638366,
                2223281939,
                1398011302,
                3520161977,
                0,
                3991743681,
                538992704,
                4244381667,
                2981218425,
                1532751286,
                1785380564,
                3419096717,
                3200178535,
                960056178,
                1246420628,
                1280103576,
                1482221744,
                3486468741,
                3503319995,
                4025428677,
                2863326543,
                4227536621,
                1128514950,
                1296947098,
                859002214,
                2240123921,
                1162203018,
                4193849577,
                33687044,
                2139062782,
                1347481760,
                1010582648,
                2678045221,
                2829640523,
                1364325282,
                2745433693,
                1077985408,
                2408548869,
                2459086143,
                2644360225,
                943212656,
                4126475505,
                3166494563,
                3065430391,
                3671750063,
                555836226,
                269496352,
                4294908645,
                4092792573,
                3537006015,
                3452783745,
                202118168,
                320025894,
                3974901699,
                1600119230,
                2543297077,
                1145359496,
                387397934,
                3301201811,
                2812801621,
                2122220284,
                1027426170,
                1684319432,
                1566435258,
                421079858,
                1936954854,
                1616945344,
                2172753945,
                1330631070,
                3705438115,
                572679748,
                707427924,
                2425400123,
                2290647819,
                1179044492,
                4008585671,
                3099120491,
                336870440,
                3739122087,
                1583276732,
                185277718,
                3688593069,
                3772791771,
                842159716,
                976899700,
                168435220,
                1229577106,
                101059084,
                606366792,
                1549591736,
                3267517855,
                3553849021,
                2897014595,
                1650632388,
                2442242105,
                2509612081,
                3840161747,
                2038008818,
                3890688725,
                3368567691,
                926374254,
                1835907034,
                2374863873,
                3587531953,
                1313788572,
                2846482505,
                1819063512,
                1448540844,
                4109633523,
                3941213647,
                1701162954,
                2054852340,
                2930698567,
                134748176,
                3132806511,
                2021165296,
                623210314,
                774795868,
                471606328,
                2795958615,
                3031746419,
                3334885783,
                3907527627,
                3722280097,
                1953799400,
                522133822,
                1263263126,
                3183336545,
                2341176845,
                2324333839,
                1886425312,
                1044267644,
                3048588401,
                1718004428,
                1212733584,
                50529542,
                4143317495,
                235803164,
                1633788866,
                892690282,
                1465383342,
                3115962473,
                2256965911,
                3250673817,
                488449850,
                2661202215,
                3789633753,
                4177007595,
                2560144171,
                286339874,
                1768537042,
                3654906025,
                2391705863,
                2492770099,
                2610673197,
                505291324,
                2273808917,
                3924369609,
                3469625735,
                1431699370,
                673740880,
                3755965093,
                2358021891,
                2711746649,
                2307489801,
                218961690,
                3217021541,
                3873845719,
                1111672452,
                1751693520,
                1094828930,
                2576986153,
                757954394,
                252645662,
                2964376443,
                1414855848,
                3149649517,
                370555436
            ], Uo = [
                1374988112,
                2118214995,
                437757123,
                975658646,
                1001089995,
                530400753,
                2902087851,
                1273168787,
                540080725,
                2910219766,
                2295101073,
                4110568485,
                1340463100,
                3307916247,
                641025152,
                3043140495,
                3736164937,
                632953703,
                1172967064,
                1576976609,
                3274667266,
                2169303058,
                2370213795,
                1809054150,
                59727847,
                361929877,
                3211623147,
                2505202138,
                3569255213,
                1484005843,
                1239443753,
                2395588676,
                1975683434,
                4102977912,
                2572697195,
                666464733,
                3202437046,
                4035489047,
                3374361702,
                2110667444,
                1675577880,
                3843699074,
                2538681184,
                1649639237,
                2976151520,
                3144396420,
                4269907996,
                4178062228,
                1883793496,
                2403728665,
                2497604743,
                1383856311,
                2876494627,
                1917518562,
                3810496343,
                1716890410,
                3001755655,
                800440835,
                2261089178,
                3543599269,
                807962610,
                599762354,
                33778362,
                3977675356,
                2328828971,
                2809771154,
                4077384432,
                1315562145,
                1708848333,
                101039829,
                3509871135,
                3299278474,
                875451293,
                2733856160,
                92987698,
                2767645557,
                193195065,
                1080094634,
                1584504582,
                3178106961,
                1042385657,
                2531067453,
                3711829422,
                1306967366,
                2438237621,
                1908694277,
                67556463,
                1615861247,
                429456164,
                3602770327,
                2302690252,
                1742315127,
                2968011453,
                126454664,
                3877198648,
                2043211483,
                2709260871,
                2084704233,
                4169408201,
                0,
                159417987,
                841739592,
                504459436,
                1817866830,
                4245618683,
                260388950,
                1034867998,
                908933415,
                168810852,
                1750902305,
                2606453969,
                607530554,
                202008497,
                2472011535,
                3035535058,
                463180190,
                2160117071,
                1641816226,
                1517767529,
                470948374,
                3801332234,
                3231722213,
                1008918595,
                303765277,
                235474187,
                4069246893,
                766945465,
                337553864,
                1475418501,
                2943682380,
                4003061179,
                2743034109,
                4144047775,
                1551037884,
                1147550661,
                1543208500,
                2336434550,
                3408119516,
                3069049960,
                3102011747,
                3610369226,
                1113818384,
                328671808,
                2227573024,
                2236228733,
                3535486456,
                2935566865,
                3341394285,
                496906059,
                3702665459,
                226906860,
                2009195472,
                733156972,
                2842737049,
                294930682,
                1206477858,
                2835123396,
                2700099354,
                1451044056,
                573804783,
                2269728455,
                3644379585,
                2362090238,
                2564033334,
                2801107407,
                2776292904,
                3669462566,
                1068351396,
                742039012,
                1350078989,
                1784663195,
                1417561698,
                4136440770,
                2430122216,
                775550814,
                2193862645,
                2673705150,
                1775276924,
                1876241833,
                3475313331,
                3366754619,
                270040487,
                3902563182,
                3678124923,
                3441850377,
                1851332852,
                3969562369,
                2203032232,
                3868552805,
                2868897406,
                566021896,
                4011190502,
                3135740889,
                1248802510,
                3936291284,
                699432150,
                832877231,
                708780849,
                3332740144,
                899835584,
                1951317047,
                4236429990,
                3767586992,
                866637845,
                4043610186,
                1106041591,
                2144161806,
                395441711,
                1984812685,
                1139781709,
                3433712980,
                3835036895,
                2664543715,
                1282050075,
                3240894392,
                1181045119,
                2640243204,
                25965917,
                4203181171,
                4211818798,
                3009879386,
                2463879762,
                3910161971,
                1842759443,
                2597806476,
                933301370,
                1509430414,
                3943906441,
                3467192302,
                3076639029,
                3776767469,
                2051518780,
                2631065433,
                1441952575,
                404016761,
                1942435775,
                1408749034,
                1610459739,
                3745345300,
                2017778566,
                3400528769,
                3110650942,
                941896748,
                3265478751,
                371049330,
                3168937228,
                675039627,
                4279080257,
                967311729,
                135050206,
                3635733660,
                1683407248,
                2076935265,
                3576870512,
                1215061108,
                3501741890
            ], Lo = [
                1347548327,
                1400783205,
                3273267108,
                2520393566,
                3409685355,
                4045380933,
                2880240216,
                2471224067,
                1428173050,
                4138563181,
                2441661558,
                636813900,
                4233094615,
                3620022987,
                2149987652,
                2411029155,
                1239331162,
                1730525723,
                2554718734,
                3781033664,
                46346101,
                310463728,
                2743944855,
                3328955385,
                3875770207,
                2501218972,
                3955191162,
                3667219033,
                768917123,
                3545789473,
                692707433,
                1150208456,
                1786102409,
                2029293177,
                1805211710,
                3710368113,
                3065962831,
                401639597,
                1724457132,
                3028143674,
                409198410,
                2196052529,
                1620529459,
                1164071807,
                3769721975,
                2226875310,
                486441376,
                2499348523,
                1483753576,
                428819965,
                2274680428,
                3075636216,
                598438867,
                3799141122,
                1474502543,
                711349675,
                129166120,
                53458370,
                2592523643,
                2782082824,
                4063242375,
                2988687269,
                3120694122,
                1559041666,
                730517276,
                2460449204,
                4042459122,
                2706270690,
                3446004468,
                3573941694,
                533804130,
                2328143614,
                2637442643,
                2695033685,
                839224033,
                1973745387,
                957055980,
                2856345839,
                106852767,
                1371368976,
                4181598602,
                1033297158,
                2933734917,
                1179510461,
                3046200461,
                91341917,
                1862534868,
                4284502037,
                605657339,
                2547432937,
                3431546947,
                2003294622,
                3182487618,
                2282195339,
                954669403,
                3682191598,
                1201765386,
                3917234703,
                3388507166,
                0,
                2198438022,
                1211247597,
                2887651696,
                1315723890,
                4227665663,
                1443857720,
                507358933,
                657861945,
                1678381017,
                560487590,
                3516619604,
                975451694,
                2970356327,
                261314535,
                3535072918,
                2652609425,
                1333838021,
                2724322336,
                1767536459,
                370938394,
                182621114,
                3854606378,
                1128014560,
                487725847,
                185469197,
                2918353863,
                3106780840,
                3356761769,
                2237133081,
                1286567175,
                3152976349,
                4255350624,
                2683765030,
                3160175349,
                3309594171,
                878443390,
                1988838185,
                3704300486,
                1756818940,
                1673061617,
                3403100636,
                272786309,
                1075025698,
                545572369,
                2105887268,
                4174560061,
                296679730,
                1841768865,
                1260232239,
                4091327024,
                3960309330,
                3497509347,
                1814803222,
                2578018489,
                4195456072,
                575138148,
                3299409036,
                446754879,
                3629546796,
                4011996048,
                3347532110,
                3252238545,
                4270639778,
                915985419,
                3483825537,
                681933534,
                651868046,
                2755636671,
                3828103837,
                223377554,
                2607439820,
                1649704518,
                3270937875,
                3901806776,
                1580087799,
                4118987695,
                3198115200,
                2087309459,
                2842678573,
                3016697106,
                1003007129,
                2802849917,
                1860738147,
                2077965243,
                164439672,
                4100872472,
                32283319,
                2827177882,
                1709610350,
                2125135846,
                136428751,
                3874428392,
                3652904859,
                3460984630,
                3572145929,
                3593056380,
                2939266226,
                824852259,
                818324884,
                3224740454,
                930369212,
                2801566410,
                2967507152,
                355706840,
                1257309336,
                4148292826,
                243256656,
                790073846,
                2373340630,
                1296297904,
                1422699085,
                3756299780,
                3818836405,
                457992840,
                3099667487,
                2135319889,
                77422314,
                1560382517,
                1945798516,
                788204353,
                1521706781,
                1385356242,
                870912086,
                325965383,
                2358957921,
                2050466060,
                2388260884,
                2313884476,
                4006521127,
                901210569,
                3990953189,
                1014646705,
                1503449823,
                1062597235,
                2031621326,
                3212035895,
                3931371469,
                1533017514,
                350174575,
                2256028891,
                2177544179,
                1052338372,
                741876788,
                1606591296,
                1914052035,
                213705253,
                2334669897,
                1107234197,
                1899603969,
                3725069491,
                2631447780,
                2422494913,
                1635502980,
                1893020342,
                1950903388,
                1120974935
            ], Bo = [
                2807058932,
                1699970625,
                2764249623,
                1586903591,
                1808481195,
                1173430173,
                1487645946,
                59984867,
                4199882800,
                1844882806,
                1989249228,
                1277555970,
                3623636965,
                3419915562,
                1149249077,
                2744104290,
                1514790577,
                459744698,
                244860394,
                3235995134,
                1963115311,
                4027744588,
                2544078150,
                4190530515,
                1608975247,
                2627016082,
                2062270317,
                1507497298,
                2200818878,
                567498868,
                1764313568,
                3359936201,
                2305455554,
                2037970062,
                1047239e3,
                1910319033,
                1337376481,
                2904027272,
                2892417312,
                984907214,
                1243112415,
                830661914,
                861968209,
                2135253587,
                2011214180,
                2927934315,
                2686254721,
                731183368,
                1750626376,
                4246310725,
                1820824798,
                4172763771,
                3542330227,
                48394827,
                2404901663,
                2871682645,
                671593195,
                3254988725,
                2073724613,
                145085239,
                2280796200,
                2779915199,
                1790575107,
                2187128086,
                472615631,
                3029510009,
                4075877127,
                3802222185,
                4107101658,
                3201631749,
                1646252340,
                4270507174,
                1402811438,
                1436590835,
                3778151818,
                3950355702,
                3963161475,
                4020912224,
                2667994737,
                273792366,
                2331590177,
                104699613,
                95345982,
                3175501286,
                2377486676,
                1560637892,
                3564045318,
                369057872,
                4213447064,
                3919042237,
                1137477952,
                2658625497,
                1119727848,
                2340947849,
                1530455833,
                4007360968,
                172466556,
                266959938,
                516552836,
                0,
                2256734592,
                3980931627,
                1890328081,
                1917742170,
                4294704398,
                945164165,
                3575528878,
                958871085,
                3647212047,
                2787207260,
                1423022939,
                775562294,
                1739656202,
                3876557655,
                2530391278,
                2443058075,
                3310321856,
                547512796,
                1265195639,
                437656594,
                3121275539,
                719700128,
                3762502690,
                387781147,
                218828297,
                3350065803,
                2830708150,
                2848461854,
                428169201,
                122466165,
                3720081049,
                1627235199,
                648017665,
                4122762354,
                1002783846,
                2117360635,
                695634755,
                3336358691,
                4234721005,
                4049844452,
                3704280881,
                2232435299,
                574624663,
                287343814,
                612205898,
                1039717051,
                840019705,
                2708326185,
                793451934,
                821288114,
                1391201670,
                3822090177,
                376187827,
                3113855344,
                1224348052,
                1679968233,
                2361698556,
                1058709744,
                752375421,
                2431590963,
                1321699145,
                3519142200,
                2734591178,
                188127444,
                2177869557,
                3727205754,
                2384911031,
                3215212461,
                2648976442,
                2450346104,
                3432737375,
                1180849278,
                331544205,
                3102249176,
                4150144569,
                2952102595,
                2159976285,
                2474404304,
                766078933,
                313773861,
                2570832044,
                2108100632,
                1668212892,
                3145456443,
                2013908262,
                418672217,
                3070356634,
                2594734927,
                1852171925,
                3867060991,
                3473416636,
                3907448597,
                2614737639,
                919489135,
                164948639,
                2094410160,
                2997825956,
                590424639,
                2486224549,
                1723872674,
                3157750862,
                3399941250,
                3501252752,
                3625268135,
                2555048196,
                3673637356,
                1343127501,
                4130281361,
                3599595085,
                2957853679,
                1297403050,
                81781910,
                3051593425,
                2283490410,
                532201772,
                1367295589,
                3926170974,
                895287692,
                1953757831,
                1093597963,
                492483431,
                3528626907,
                1446242576,
                1192455638,
                1636604631,
                209336225,
                344873464,
                1015671571,
                669961897,
                3375740769,
                3857572124,
                2973530695,
                3747192018,
                1933530610,
                3464042516,
                935293895,
                3454686199,
                2858115069,
                1863638845,
                3683022916,
                4085369519,
                3292445032,
                875313188,
                1080017571,
                3279033885,
                621591778,
                1233856572,
                2504130317,
                24197544,
                3017672716,
                3835484340,
                3247465558,
                2220981195,
                3060847922,
                1551124588,
                1463996600
            ], Do = [
                4104605777,
                1097159550,
                396673818,
                660510266,
                2875968315,
                2638606623,
                4200115116,
                3808662347,
                821712160,
                1986918061,
                3430322568,
                38544885,
                3856137295,
                718002117,
                893681702,
                1654886325,
                2975484382,
                3122358053,
                3926825029,
                4274053469,
                796197571,
                1290801793,
                1184342925,
                3556361835,
                2405426947,
                2459735317,
                1836772287,
                1381620373,
                3196267988,
                1948373848,
                3764988233,
                3385345166,
                3263785589,
                2390325492,
                1480485785,
                3111247143,
                3780097726,
                2293045232,
                548169417,
                3459953789,
                3746175075,
                439452389,
                1362321559,
                1400849762,
                1685577905,
                1806599355,
                2174754046,
                137073913,
                1214797936,
                1174215055,
                3731654548,
                2079897426,
                1943217067,
                1258480242,
                529487843,
                1437280870,
                3945269170,
                3049390895,
                3313212038,
                923313619,
                679998e3,
                3215307299,
                57326082,
                377642221,
                3474729866,
                2041877159,
                133361907,
                1776460110,
                3673476453,
                96392454,
                878845905,
                2801699524,
                777231668,
                4082475170,
                2330014213,
                4142626212,
                2213296395,
                1626319424,
                1906247262,
                1846563261,
                562755902,
                3708173718,
                1040559837,
                3871163981,
                1418573201,
                3294430577,
                114585348,
                1343618912,
                2566595609,
                3186202582,
                1078185097,
                3651041127,
                3896688048,
                2307622919,
                425408743,
                3371096953,
                2081048481,
                1108339068,
                2216610296,
                0,
                2156299017,
                736970802,
                292596766,
                1517440620,
                251657213,
                2235061775,
                2933202493,
                758720310,
                265905162,
                1554391400,
                1532285339,
                908999204,
                174567692,
                1474760595,
                4002861748,
                2610011675,
                3234156416,
                3693126241,
                2001430874,
                303699484,
                2478443234,
                2687165888,
                585122620,
                454499602,
                151849742,
                2345119218,
                3064510765,
                514443284,
                4044981591,
                1963412655,
                2581445614,
                2137062819,
                19308535,
                1928707164,
                1715193156,
                4219352155,
                1126790795,
                600235211,
                3992742070,
                3841024952,
                836553431,
                1669664834,
                2535604243,
                3323011204,
                1243905413,
                3141400786,
                4180808110,
                698445255,
                2653899549,
                2989552604,
                2253581325,
                3252932727,
                3004591147,
                1891211689,
                2487810577,
                3915653703,
                4237083816,
                4030667424,
                2100090966,
                865136418,
                1229899655,
                953270745,
                3399679628,
                3557504664,
                4118925222,
                2061379749,
                3079546586,
                2915017791,
                983426092,
                2022837584,
                1607244650,
                2118541908,
                2366882550,
                3635996816,
                972512814,
                3283088770,
                1568718495,
                3499326569,
                3576539503,
                621982671,
                2895723464,
                410887952,
                2623762152,
                1002142683,
                645401037,
                1494807662,
                2595684844,
                1335535747,
                2507040230,
                4293295786,
                3167684641,
                367585007,
                3885750714,
                1865862730,
                2668221674,
                2960971305,
                2763173681,
                1059270954,
                2777952454,
                2724642869,
                1320957812,
                2194319100,
                2429595872,
                2815956275,
                77089521,
                3973773121,
                3444575871,
                2448830231,
                1305906550,
                4021308739,
                2857194700,
                2516901860,
                3518358430,
                1787304780,
                740276417,
                1699839814,
                1592394909,
                2352307457,
                2272556026,
                188821243,
                1729977011,
                3687994002,
                274084841,
                3594982253,
                3613494426,
                2701949495,
                4162096729,
                322734571,
                2837966542,
                1640576439,
                484830689,
                1202797690,
                3537852828,
                4067639125,
                349075736,
                3342319475,
                4157467219,
                4255800159,
                1030690015,
                1155237496,
                2951971274,
                1757691577,
                607398968,
                2738905026,
                499347990,
                3794078908,
                1011452712,
                227885567,
                2818666809,
                213114376,
                3034881240,
                1455525988,
                3414450555,
                850817237,
                1817998408,
                3092726480
            ], Fo = [
                0,
                235474187,
                470948374,
                303765277,
                941896748,
                908933415,
                607530554,
                708780849,
                1883793496,
                2118214995,
                1817866830,
                1649639237,
                1215061108,
                1181045119,
                1417561698,
                1517767529,
                3767586992,
                4003061179,
                4236429990,
                4069246893,
                3635733660,
                3602770327,
                3299278474,
                3400528769,
                2430122216,
                2664543715,
                2362090238,
                2193862645,
                2835123396,
                2801107407,
                3035535058,
                3135740889,
                3678124923,
                3576870512,
                3341394285,
                3374361702,
                3810496343,
                3977675356,
                4279080257,
                4043610186,
                2876494627,
                2776292904,
                3076639029,
                3110650942,
                2472011535,
                2640243204,
                2403728665,
                2169303058,
                1001089995,
                899835584,
                666464733,
                699432150,
                59727847,
                226906860,
                530400753,
                294930682,
                1273168787,
                1172967064,
                1475418501,
                1509430414,
                1942435775,
                2110667444,
                1876241833,
                1641816226,
                2910219766,
                2743034109,
                2976151520,
                3211623147,
                2505202138,
                2606453969,
                2302690252,
                2269728455,
                3711829422,
                3543599269,
                3240894392,
                3475313331,
                3843699074,
                3943906441,
                4178062228,
                4144047775,
                1306967366,
                1139781709,
                1374988112,
                1610459739,
                1975683434,
                2076935265,
                1775276924,
                1742315127,
                1034867998,
                866637845,
                566021896,
                800440835,
                92987698,
                193195065,
                429456164,
                395441711,
                1984812685,
                2017778566,
                1784663195,
                1683407248,
                1315562145,
                1080094634,
                1383856311,
                1551037884,
                101039829,
                135050206,
                437757123,
                337553864,
                1042385657,
                807962610,
                573804783,
                742039012,
                2531067453,
                2564033334,
                2328828971,
                2227573024,
                2935566865,
                2700099354,
                3001755655,
                3168937228,
                3868552805,
                3902563182,
                4203181171,
                4102977912,
                3736164937,
                3501741890,
                3265478751,
                3433712980,
                1106041591,
                1340463100,
                1576976609,
                1408749034,
                2043211483,
                2009195472,
                1708848333,
                1809054150,
                832877231,
                1068351396,
                766945465,
                599762354,
                159417987,
                126454664,
                361929877,
                463180190,
                2709260871,
                2943682380,
                3178106961,
                3009879386,
                2572697195,
                2538681184,
                2236228733,
                2336434550,
                3509871135,
                3745345300,
                3441850377,
                3274667266,
                3910161971,
                3877198648,
                4110568485,
                4211818798,
                2597806476,
                2497604743,
                2261089178,
                2295101073,
                2733856160,
                2902087851,
                3202437046,
                2968011453,
                3936291284,
                3835036895,
                4136440770,
                4169408201,
                3535486456,
                3702665459,
                3467192302,
                3231722213,
                2051518780,
                1951317047,
                1716890410,
                1750902305,
                1113818384,
                1282050075,
                1584504582,
                1350078989,
                168810852,
                67556463,
                371049330,
                404016761,
                841739592,
                1008918595,
                775550814,
                540080725,
                3969562369,
                3801332234,
                4035489047,
                4269907996,
                3569255213,
                3669462566,
                3366754619,
                3332740144,
                2631065433,
                2463879762,
                2160117071,
                2395588676,
                2767645557,
                2868897406,
                3102011747,
                3069049960,
                202008497,
                33778362,
                270040487,
                504459436,
                875451293,
                975658646,
                675039627,
                641025152,
                2084704233,
                1917518562,
                1615861247,
                1851332852,
                1147550661,
                1248802510,
                1484005843,
                1451044056,
                933301370,
                967311729,
                733156972,
                632953703,
                260388950,
                25965917,
                328671808,
                496906059,
                1206477858,
                1239443753,
                1543208500,
                1441952575,
                2144161806,
                1908694277,
                1675577880,
                1842759443,
                3610369226,
                3644379585,
                3408119516,
                3307916247,
                4011190502,
                3776767469,
                4077384432,
                4245618683,
                2809771154,
                2842737049,
                3144396420,
                3043140495,
                2673705150,
                2438237621,
                2203032232,
                2370213795
            ], Mo = [
                0,
                185469197,
                370938394,
                487725847,
                741876788,
                657861945,
                975451694,
                824852259,
                1483753576,
                1400783205,
                1315723890,
                1164071807,
                1950903388,
                2135319889,
                1649704518,
                1767536459,
                2967507152,
                3152976349,
                2801566410,
                2918353863,
                2631447780,
                2547432937,
                2328143614,
                2177544179,
                3901806776,
                3818836405,
                4270639778,
                4118987695,
                3299409036,
                3483825537,
                3535072918,
                3652904859,
                2077965243,
                1893020342,
                1841768865,
                1724457132,
                1474502543,
                1559041666,
                1107234197,
                1257309336,
                598438867,
                681933534,
                901210569,
                1052338372,
                261314535,
                77422314,
                428819965,
                310463728,
                3409685355,
                3224740454,
                3710368113,
                3593056380,
                3875770207,
                3960309330,
                4045380933,
                4195456072,
                2471224067,
                2554718734,
                2237133081,
                2388260884,
                3212035895,
                3028143674,
                2842678573,
                2724322336,
                4138563181,
                4255350624,
                3769721975,
                3955191162,
                3667219033,
                3516619604,
                3431546947,
                3347532110,
                2933734917,
                2782082824,
                3099667487,
                3016697106,
                2196052529,
                2313884476,
                2499348523,
                2683765030,
                1179510461,
                1296297904,
                1347548327,
                1533017514,
                1786102409,
                1635502980,
                2087309459,
                2003294622,
                507358933,
                355706840,
                136428751,
                53458370,
                839224033,
                957055980,
                605657339,
                790073846,
                2373340630,
                2256028891,
                2607439820,
                2422494913,
                2706270690,
                2856345839,
                3075636216,
                3160175349,
                3573941694,
                3725069491,
                3273267108,
                3356761769,
                4181598602,
                4063242375,
                4011996048,
                3828103837,
                1033297158,
                915985419,
                730517276,
                545572369,
                296679730,
                446754879,
                129166120,
                213705253,
                1709610350,
                1860738147,
                1945798516,
                2029293177,
                1239331162,
                1120974935,
                1606591296,
                1422699085,
                4148292826,
                4233094615,
                3781033664,
                3931371469,
                3682191598,
                3497509347,
                3446004468,
                3328955385,
                2939266226,
                2755636671,
                3106780840,
                2988687269,
                2198438022,
                2282195339,
                2501218972,
                2652609425,
                1201765386,
                1286567175,
                1371368976,
                1521706781,
                1805211710,
                1620529459,
                2105887268,
                1988838185,
                533804130,
                350174575,
                164439672,
                46346101,
                870912086,
                954669403,
                636813900,
                788204353,
                2358957921,
                2274680428,
                2592523643,
                2441661558,
                2695033685,
                2880240216,
                3065962831,
                3182487618,
                3572145929,
                3756299780,
                3270937875,
                3388507166,
                4174560061,
                4091327024,
                4006521127,
                3854606378,
                1014646705,
                930369212,
                711349675,
                560487590,
                272786309,
                457992840,
                106852767,
                223377554,
                1678381017,
                1862534868,
                1914052035,
                2031621326,
                1211247597,
                1128014560,
                1580087799,
                1428173050,
                32283319,
                182621114,
                401639597,
                486441376,
                768917123,
                651868046,
                1003007129,
                818324884,
                1503449823,
                1385356242,
                1333838021,
                1150208456,
                1973745387,
                2125135846,
                1673061617,
                1756818940,
                2970356327,
                3120694122,
                2802849917,
                2887651696,
                2637442643,
                2520393566,
                2334669897,
                2149987652,
                3917234703,
                3799141122,
                4284502037,
                4100872472,
                3309594171,
                3460984630,
                3545789473,
                3629546796,
                2050466060,
                1899603969,
                1814803222,
                1730525723,
                1443857720,
                1560382517,
                1075025698,
                1260232239,
                575138148,
                692707433,
                878443390,
                1062597235,
                243256656,
                91341917,
                409198410,
                325965383,
                3403100636,
                3252238545,
                3704300486,
                3620022987,
                3874428392,
                3990953189,
                4042459122,
                4227665663,
                2460449204,
                2578018489,
                2226875310,
                2411029155,
                3198115200,
                3046200461,
                2827177882,
                2743944855
            ], jo = [
                0,
                218828297,
                437656594,
                387781147,
                875313188,
                958871085,
                775562294,
                590424639,
                1750626376,
                1699970625,
                1917742170,
                2135253587,
                1551124588,
                1367295589,
                1180849278,
                1265195639,
                3501252752,
                3720081049,
                3399941250,
                3350065803,
                3835484340,
                3919042237,
                4270507174,
                4085369519,
                3102249176,
                3051593425,
                2734591178,
                2952102595,
                2361698556,
                2177869557,
                2530391278,
                2614737639,
                3145456443,
                3060847922,
                2708326185,
                2892417312,
                2404901663,
                2187128086,
                2504130317,
                2555048196,
                3542330227,
                3727205754,
                3375740769,
                3292445032,
                3876557655,
                3926170974,
                4246310725,
                4027744588,
                1808481195,
                1723872674,
                1910319033,
                2094410160,
                1608975247,
                1391201670,
                1173430173,
                1224348052,
                59984867,
                244860394,
                428169201,
                344873464,
                935293895,
                984907214,
                766078933,
                547512796,
                1844882806,
                1627235199,
                2011214180,
                2062270317,
                1507497298,
                1423022939,
                1137477952,
                1321699145,
                95345982,
                145085239,
                532201772,
                313773861,
                830661914,
                1015671571,
                731183368,
                648017665,
                3175501286,
                2957853679,
                2807058932,
                2858115069,
                2305455554,
                2220981195,
                2474404304,
                2658625497,
                3575528878,
                3625268135,
                3473416636,
                3254988725,
                3778151818,
                3963161475,
                4213447064,
                4130281361,
                3599595085,
                3683022916,
                3432737375,
                3247465558,
                3802222185,
                4020912224,
                4172763771,
                4122762354,
                3201631749,
                3017672716,
                2764249623,
                2848461854,
                2331590177,
                2280796200,
                2431590963,
                2648976442,
                104699613,
                188127444,
                472615631,
                287343814,
                840019705,
                1058709744,
                671593195,
                621591778,
                1852171925,
                1668212892,
                1953757831,
                2037970062,
                1514790577,
                1463996600,
                1080017571,
                1297403050,
                3673637356,
                3623636965,
                3235995134,
                3454686199,
                4007360968,
                3822090177,
                4107101658,
                4190530515,
                2997825956,
                3215212461,
                2830708150,
                2779915199,
                2256734592,
                2340947849,
                2627016082,
                2443058075,
                172466556,
                122466165,
                273792366,
                492483431,
                1047239e3,
                861968209,
                612205898,
                695634755,
                1646252340,
                1863638845,
                2013908262,
                1963115311,
                1446242576,
                1530455833,
                1277555970,
                1093597963,
                1636604631,
                1820824798,
                2073724613,
                1989249228,
                1436590835,
                1487645946,
                1337376481,
                1119727848,
                164948639,
                81781910,
                331544205,
                516552836,
                1039717051,
                821288114,
                669961897,
                719700128,
                2973530695,
                3157750862,
                2871682645,
                2787207260,
                2232435299,
                2283490410,
                2667994737,
                2450346104,
                3647212047,
                3564045318,
                3279033885,
                3464042516,
                3980931627,
                3762502690,
                4150144569,
                4199882800,
                3070356634,
                3121275539,
                2904027272,
                2686254721,
                2200818878,
                2384911031,
                2570832044,
                2486224549,
                3747192018,
                3528626907,
                3310321856,
                3359936201,
                3950355702,
                3867060991,
                4049844452,
                4234721005,
                1739656202,
                1790575107,
                2108100632,
                1890328081,
                1402811438,
                1586903591,
                1233856572,
                1149249077,
                266959938,
                48394827,
                369057872,
                418672217,
                1002783846,
                919489135,
                567498868,
                752375421,
                209336225,
                24197544,
                376187827,
                459744698,
                945164165,
                895287692,
                574624663,
                793451934,
                1679968233,
                1764313568,
                2117360635,
                1933530610,
                1343127501,
                1560637892,
                1243112415,
                1192455638,
                3704280881,
                3519142200,
                3336358691,
                3419915562,
                3907448597,
                3857572124,
                4075877127,
                4294704398,
                3029510009,
                3113855344,
                2927934315,
                2744104290,
                2159976285,
                2377486676,
                2594734927,
                2544078150
            ], Ko = [
                0,
                151849742,
                303699484,
                454499602,
                607398968,
                758720310,
                908999204,
                1059270954,
                1214797936,
                1097159550,
                1517440620,
                1400849762,
                1817998408,
                1699839814,
                2118541908,
                2001430874,
                2429595872,
                2581445614,
                2194319100,
                2345119218,
                3034881240,
                3186202582,
                2801699524,
                2951971274,
                3635996816,
                3518358430,
                3399679628,
                3283088770,
                4237083816,
                4118925222,
                4002861748,
                3885750714,
                1002142683,
                850817237,
                698445255,
                548169417,
                529487843,
                377642221,
                227885567,
                77089521,
                1943217067,
                2061379749,
                1640576439,
                1757691577,
                1474760595,
                1592394909,
                1174215055,
                1290801793,
                2875968315,
                2724642869,
                3111247143,
                2960971305,
                2405426947,
                2253581325,
                2638606623,
                2487810577,
                3808662347,
                3926825029,
                4044981591,
                4162096729,
                3342319475,
                3459953789,
                3576539503,
                3693126241,
                1986918061,
                2137062819,
                1685577905,
                1836772287,
                1381620373,
                1532285339,
                1078185097,
                1229899655,
                1040559837,
                923313619,
                740276417,
                621982671,
                439452389,
                322734571,
                137073913,
                19308535,
                3871163981,
                4021308739,
                4104605777,
                4255800159,
                3263785589,
                3414450555,
                3499326569,
                3651041127,
                2933202493,
                2815956275,
                3167684641,
                3049390895,
                2330014213,
                2213296395,
                2566595609,
                2448830231,
                1305906550,
                1155237496,
                1607244650,
                1455525988,
                1776460110,
                1626319424,
                2079897426,
                1928707164,
                96392454,
                213114376,
                396673818,
                514443284,
                562755902,
                679998e3,
                865136418,
                983426092,
                3708173718,
                3557504664,
                3474729866,
                3323011204,
                4180808110,
                4030667424,
                3945269170,
                3794078908,
                2507040230,
                2623762152,
                2272556026,
                2390325492,
                2975484382,
                3092726480,
                2738905026,
                2857194700,
                3973773121,
                3856137295,
                4274053469,
                4157467219,
                3371096953,
                3252932727,
                3673476453,
                3556361835,
                2763173681,
                2915017791,
                3064510765,
                3215307299,
                2156299017,
                2307622919,
                2459735317,
                2610011675,
                2081048481,
                1963412655,
                1846563261,
                1729977011,
                1480485785,
                1362321559,
                1243905413,
                1126790795,
                878845905,
                1030690015,
                645401037,
                796197571,
                274084841,
                425408743,
                38544885,
                188821243,
                3613494426,
                3731654548,
                3313212038,
                3430322568,
                4082475170,
                4200115116,
                3780097726,
                3896688048,
                2668221674,
                2516901860,
                2366882550,
                2216610296,
                3141400786,
                2989552604,
                2837966542,
                2687165888,
                1202797690,
                1320957812,
                1437280870,
                1554391400,
                1669664834,
                1787304780,
                1906247262,
                2022837584,
                265905162,
                114585348,
                499347990,
                349075736,
                736970802,
                585122620,
                972512814,
                821712160,
                2595684844,
                2478443234,
                2293045232,
                2174754046,
                3196267988,
                3079546586,
                2895723464,
                2777952454,
                3537852828,
                3687994002,
                3234156416,
                3385345166,
                4142626212,
                4293295786,
                3841024952,
                3992742070,
                174567692,
                57326082,
                410887952,
                292596766,
                777231668,
                660510266,
                1011452712,
                893681702,
                1108339068,
                1258480242,
                1343618912,
                1494807662,
                1715193156,
                1865862730,
                1948373848,
                2100090966,
                2701949495,
                2818666809,
                3004591147,
                3122358053,
                2235061775,
                2352307457,
                2535604243,
                2653899549,
                3915653703,
                3764988233,
                4219352155,
                4067639125,
                3444575871,
                3294430577,
                3746175075,
                3594982253,
                836553431,
                953270745,
                600235211,
                718002117,
                367585007,
                484830689,
                133361907,
                251657213,
                2041877159,
                1891211689,
                1806599355,
                1654886325,
                1568718495,
                1418573201,
                1335535747,
                1184342925
            ];
            function zo(f) {
                const e = [];
                for(let t = 0; t < f.length; t += 4)e.push(f[t] << 24 | f[t + 1] << 16 | f[t + 2] << 8 | f[t + 3]);
                return e;
            }
            class Vo {
                get key() {
                    return xo(this, Eo, "f").slice();
                }
                constructor(f){
                    if (Eo.set(this, void 0), To.set(this, void 0), Ao.set(this, void 0), !(this instanceof Vo)) throw Error("AES must be instanitated with `new`");
                    Io(this, Eo, new Uint8Array(f), "f");
                    const e = ko[this.key.length];
                    if (null == e) throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
                    Io(this, Ao, [], "f"), Io(this, To, [], "f");
                    for(let f = 0; f <= e; f++)xo(this, Ao, "f").push([
                        0,
                        0,
                        0,
                        0
                    ]), xo(this, To, "f").push([
                        0,
                        0,
                        0,
                        0
                    ]);
                    const t = 4 * (e + 1), n = this.key.length / 4, r = zo(this.key);
                    let a;
                    for(let f = 0; f < n; f++)a = f >> 2, xo(this, Ao, "f")[a][f % 4] = r[f], xo(this, To, "f")[e - a][f % 4] = r[f];
                    let i, s = 0, o = n;
                    for(; o < t;){
                        if (i = r[n - 1], r[0] ^= _o[i >> 16 & 255] << 24 ^ _o[i >> 8 & 255] << 16 ^ _o[255 & i] << 8 ^ _o[i >> 24 & 255] ^ Oo[s] << 24, s += 1, 8 != n) for(let f = 1; f < n; f++)r[f] ^= r[f - 1];
                        else {
                            for(let f = 1; f < n / 2; f++)r[f] ^= r[f - 1];
                            i = r[n / 2 - 1], r[n / 2] ^= _o[255 & i] ^ _o[i >> 8 & 255] << 8 ^ _o[i >> 16 & 255] << 16 ^ _o[i >> 24 & 255] << 24;
                            for(let f = n / 2 + 1; f < n; f++)r[f] ^= r[f - 1];
                        }
                        let f, a, b = 0;
                        for(; b < n && o < t;)f = o >> 2, a = o % 4, xo(this, Ao, "f")[f][a] = r[b], xo(this, To, "f")[e - f][a] = r[b++], o++;
                    }
                    for(let f = 1; f < e; f++)for(let e = 0; e < 4; e++)i = xo(this, To, "f")[f][e], xo(this, To, "f")[f][e] = Fo[i >> 24 & 255] ^ Mo[i >> 16 & 255] ^ jo[i >> 8 & 255] ^ Ko[255 & i];
                }
                encrypt(f) {
                    if (16 != f.length) throw new TypeError("invalid plaintext size (must be 16 bytes)");
                    const e = xo(this, Ao, "f").length - 1, t = [
                        0,
                        0,
                        0,
                        0
                    ];
                    let n = zo(f);
                    for(let f = 0; f < 4; f++)n[f] ^= xo(this, Ao, "f")[0][f];
                    for(let f = 1; f < e; f++){
                        for(let e = 0; e < 4; e++)t[e] = So[n[e] >> 24 & 255] ^ Ro[n[(e + 1) % 4] >> 16 & 255] ^ No[n[(e + 2) % 4] >> 8 & 255] ^ Co[255 & n[(e + 3) % 4]] ^ xo(this, Ao, "f")[f][e];
                        n = t.slice();
                    }
                    const r = new Uint8Array(16);
                    let a = 0;
                    for(let f = 0; f < 4; f++)a = xo(this, Ao, "f")[e][f], r[4 * f] = 255 & (_o[n[f] >> 24 & 255] ^ a >> 24), r[4 * f + 1] = 255 & (_o[n[(f + 1) % 4] >> 16 & 255] ^ a >> 16), r[4 * f + 2] = 255 & (_o[n[(f + 2) % 4] >> 8 & 255] ^ a >> 8), r[4 * f + 3] = 255 & (_o[255 & n[(f + 3) % 4]] ^ a);
                    return r;
                }
                decrypt(f) {
                    if (16 != f.length) throw new TypeError("invalid ciphertext size (must be 16 bytes)");
                    const e = xo(this, To, "f").length - 1, t = [
                        0,
                        0,
                        0,
                        0
                    ];
                    let n = zo(f);
                    for(let f = 0; f < 4; f++)n[f] ^= xo(this, To, "f")[0][f];
                    for(let f = 1; f < e; f++){
                        for(let e = 0; e < 4; e++)t[e] = Uo[n[e] >> 24 & 255] ^ Lo[n[(e + 3) % 4] >> 16 & 255] ^ Bo[n[(e + 2) % 4] >> 8 & 255] ^ Do[255 & n[(e + 1) % 4]] ^ xo(this, To, "f")[f][e];
                        n = t.slice();
                    }
                    const r = new Uint8Array(16);
                    let a = 0;
                    for(let f = 0; f < 4; f++)a = xo(this, To, "f")[e][f], r[4 * f] = 255 & (Po[n[f] >> 24 & 255] ^ a >> 24), r[4 * f + 1] = 255 & (Po[n[(f + 3) % 4] >> 16 & 255] ^ a >> 16), r[4 * f + 2] = 255 & (Po[n[(f + 2) % 4] >> 8 & 255] ^ a >> 8), r[4 * f + 3] = 255 & (Po[255 & n[(f + 1) % 4]] ^ a);
                    return r;
                }
            }
            Eo = new WeakMap, To = new WeakMap, Ao = new WeakMap;
            class Go {
                constructor(f, e, t){
                    if (t && !(this instanceof t)) throw new Error("".concat(f, ' must be instantiated with "new"'));
                    Object.defineProperties(this, {
                        aes: {
                            enumerable: !0,
                            value: new Vo(e)
                        },
                        name: {
                            enumerable: !0,
                            value: f
                        }
                    });
                }
            }
            var Ho, Wo, $o = function(f, e, t, n, r) {
                if ("m" === n) throw new TypeError("Private method is not writable");
                if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
            }, Jo = function(f, e, t, n) {
                if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
            };
            class Yo extends Go {
                constructor(f, e){
                    if (super("ECC", f, Yo), Ho.set(this, void 0), Wo.set(this, void 0), e) {
                        if (e.length % 16) throw new TypeError("invalid iv size (must be 16 bytes)");
                        $o(this, Ho, new Uint8Array(e), "f");
                    } else $o(this, Ho, new Uint8Array(16), "f");
                    $o(this, Wo, this.iv, "f");
                }
                get iv() {
                    return new Uint8Array(Jo(this, Ho, "f"));
                }
                encrypt(f) {
                    if (f.length % 16) throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
                    const e = new Uint8Array(f.length);
                    for(let t = 0; t < f.length; t += 16){
                        for(let e = 0; e < 16; e++)Jo(this, Wo, "f")[e] ^= f[t + e];
                        $o(this, Wo, this.aes.encrypt(Jo(this, Wo, "f")), "f"), e.set(Jo(this, Wo, "f"), t);
                    }
                    return e;
                }
                decrypt(f) {
                    if (f.length % 16) throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
                    const e = new Uint8Array(f.length);
                    for(let t = 0; t < f.length; t += 16){
                        const n = this.aes.decrypt(f.subarray(t, t + 16));
                        for(let r = 0; r < 16; r++)e[t + r] = n[r] ^ Jo(this, Wo, "f")[r], Jo(this, Wo, "f")[r] = f[t + r];
                    }
                    return e;
                }
            }
            Ho = new WeakMap, Wo = new WeakMap;
            new WeakMap, new WeakMap, new WeakSet;
            var qo, Zo, Xo, Qo = function(f, e, t, n, r) {
                if ("m" === n) throw new TypeError("Private method is not writable");
                if ("a" === n && !r) throw new TypeError("Private accessor was defined without a setter");
                if ("function" == typeof e ? f !== e || !r : !e.has(f)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return "a" === n ? r.call(f, t) : r ? r.value = t : e.set(f, t), t;
            }, fb = function(f, e, t, n) {
                if ("a" === t && !n) throw new TypeError("Private accessor was defined without a getter");
                if ("function" == typeof e ? f !== e || !n : !e.has(f)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return "m" === t ? n : "a" === t ? n.call(f) : n ? n.value : e.get(f);
            };
            class eb extends Go {
                constructor(f, e){
                    super("CTR", f, eb), qo.set(this, void 0), Zo.set(this, void 0), Xo.set(this, void 0), Qo(this, Xo, new Uint8Array(16), "f"), fb(this, Xo, "f").fill(0), Qo(this, qo, fb(this, Xo, "f"), "f"), Qo(this, Zo, 16, "f"), null == e && (e = 1), "number" == typeof e ? this.setCounterValue(e) : this.setCounterBytes(e);
                }
                get counter() {
                    return new Uint8Array(fb(this, Xo, "f"));
                }
                setCounterValue(f) {
                    if (!Number.isInteger(f) || f < 0 || f > Number.MAX_SAFE_INTEGER) throw new TypeError("invalid counter initial integer value");
                    for(let e = 15; e >= 0; --e)fb(this, Xo, "f")[e] = f % 256, f = Math.floor(f / 256);
                }
                setCounterBytes(f) {
                    if (16 !== f.length) throw new TypeError("invalid counter initial Uint8Array value length");
                    fb(this, Xo, "f").set(f);
                }
                increment() {
                    for(let f = 15; f >= 0; f--){
                        if (255 !== fb(this, Xo, "f")[f]) {
                            fb(this, Xo, "f")[f]++;
                            break;
                        }
                        fb(this, Xo, "f")[f] = 0;
                    }
                }
                encrypt(f) {
                    var e, t;
                    const n = new Uint8Array(f);
                    for(let f = 0; f < n.length; f++)16 === fb(this, Zo, "f") && (Qo(this, qo, this.aes.encrypt(fb(this, Xo, "f")), "f"), Qo(this, Zo, 0, "f"), this.increment()), n[f] ^= fb(this, qo, "f")[Qo(this, Zo, (t = fb(this, Zo, "f"), e = t++, t), "f"), e];
                    return n;
                }
                decrypt(f) {
                    return this.encrypt(f);
                }
            }
            qo = new WeakMap, Zo = new WeakMap, Xo = new WeakMap, new WeakMap, new WeakMap, new WeakMap;
            const tb = (f, e)=>f << e | f >>> 32 - e;
            function nb(f, e, t, n, r, a) {
                let i = f[e++] ^ t[n++], s = f[e++] ^ t[n++], o = f[e++] ^ t[n++], b = f[e++] ^ t[n++], c = f[e++] ^ t[n++], d = f[e++] ^ t[n++], u = f[e++] ^ t[n++], l = f[e++] ^ t[n++], h = f[e++] ^ t[n++], p = f[e++] ^ t[n++], y = f[e++] ^ t[n++], m = f[e++] ^ t[n++], g = f[e++] ^ t[n++], w = f[e++] ^ t[n++], v = f[e++] ^ t[n++], E = f[e++] ^ t[n++], T = i, A = s, x = o, I = b, k = c, O = d, _ = u, P = l, S = h, R = p, N = y, C = m, U = g, L = w, B = v, D = E;
                for(let f = 0; f < 8; f += 2)k ^= tb(T + U | 0, 7), S ^= tb(k + T | 0, 9), U ^= tb(S + k | 0, 13), T ^= tb(U + S | 0, 18), R ^= tb(O + A | 0, 7), L ^= tb(R + O | 0, 9), A ^= tb(L + R | 0, 13), O ^= tb(A + L | 0, 18), B ^= tb(N + _ | 0, 7), x ^= tb(B + N | 0, 9), _ ^= tb(x + B | 0, 13), N ^= tb(_ + x | 0, 18), I ^= tb(D + C | 0, 7), P ^= tb(I + D | 0, 9), C ^= tb(P + I | 0, 13), D ^= tb(C + P | 0, 18), A ^= tb(T + I | 0, 7), x ^= tb(A + T | 0, 9), I ^= tb(x + A | 0, 13), T ^= tb(I + x | 0, 18), _ ^= tb(O + k | 0, 7), P ^= tb(_ + O | 0, 9), k ^= tb(P + _ | 0, 13), O ^= tb(k + P | 0, 18), C ^= tb(N + R | 0, 7), S ^= tb(C + N | 0, 9), R ^= tb(S + C | 0, 13), N ^= tb(R + S | 0, 18), U ^= tb(D + B | 0, 7), L ^= tb(U + D | 0, 9), B ^= tb(L + U | 0, 13), D ^= tb(B + L | 0, 18);
                r[a++] = i + T | 0, r[a++] = s + A | 0, r[a++] = o + x | 0, r[a++] = b + I | 0, r[a++] = c + k | 0, r[a++] = d + O | 0, r[a++] = u + _ | 0, r[a++] = l + P | 0, r[a++] = h + S | 0, r[a++] = p + R | 0, r[a++] = y + N | 0, r[a++] = m + C | 0, r[a++] = g + U | 0, r[a++] = w + L | 0, r[a++] = v + B | 0, r[a++] = E + D | 0;
            }
            function rb(f, e, t, n, r) {
                let a = n + 0, i = n + 16 * r;
                for(let n = 0; n < 16; n++)t[i + n] = f[e + 16 * (2 * r - 1) + n];
                for(let n = 0; n < r; n++, a += 16, e += 16)nb(t, i, f, e, t, a), n > 0 && (i += 16), nb(t, a, f, e += 16, t, i);
            }
            function ab(f, e, t) {
                const n = Sf({
                    dkLen: 32,
                    asyncTick: 10,
                    maxmem: 1073742848
                }, t), { N: r, r: a, p: i, dkLen: s, asyncTick: o, maxmem: b, onProgress: c } = n;
                if (af(r), af(a), af(i), af(s), af(o), af(b), void 0 !== c && "function" != typeof c) throw new Error("progressCb should be function");
                const d = 128 * a, u = d / 4;
                if (r <= 1 || r & r - 1 || r >= 2 ** (d / 8) || r > 2 ** 32) throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
                if (i < 0 || i > 137438953440 / d) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
                if (s < 0 || s > 137438953440) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
                const l = d * (r + i);
                if (l > b) throw new Error("Scrypt: parameters too large, ".concat(l, " (128 * r * (N + p)) > ").concat(b, " (maxmem)"));
                const h = Xn(ir, f, e, {
                    c: 1,
                    dkLen: d * i
                }), p = Tf(h), y = Tf(new Uint8Array(d * r)), m = Tf(new Uint8Array(d));
                let g = ()=>{};
                if (c) {
                    const f = 2 * r * i, e = Math.max(Math.floor(f / 1e4), 1);
                    let t = 0;
                    g = ()=>{
                        t++, !c || t % e && t !== f || c(t / f);
                    };
                }
                return {
                    N: r,
                    r: a,
                    p: i,
                    dkLen: s,
                    blockSize32: u,
                    V: y,
                    B32: p,
                    B: h,
                    tmp: m,
                    blockMixCb: g,
                    asyncTick: o
                };
            }
            function ib(f, e, t, n, r) {
                const a = Xn(ir, f, t, {
                    c: 1,
                    dkLen: e
                });
                return t.fill(0), n.fill(0), r.fill(0), a;
            }
            let sb = !1, ob = !1;
            const bb = async function(f, e, t, n, r, a, i) {
                return await async function(f, e, t) {
                    const { N: n, r, p: a, dkLen: i, blockSize32: s, V: o, B32: b, B: c, tmp: d, blockMixCb: u, asyncTick: l } = ab(f, e, t);
                    for(let f = 0; f < a; f++){
                        const e = s * f;
                        for(let f = 0; f < s; f++)o[f] = b[e + f];
                        let t = 0;
                        await kf(n - 1, l, ()=>{
                            rb(o, t, o, t += s, r), u();
                        }), rb(o, (n - 1) * s, b, e, r), u(), await kf(n, l, ()=>{
                            const f = b[e + s - 16] % n;
                            for(let t = 0; t < s; t++)d[t] = b[e + t] ^ o[f * s + t];
                            rb(d, 0, b, e, r), u();
                        });
                    }
                    return ib(f, i, c, o, d);
                }(f, e, {
                    N: t,
                    r: n,
                    p: r,
                    dkLen: a,
                    onProgress: i
                });
            }, cb = function(f, e, t, n, r, a) {
                return function(f, e, t) {
                    const { N: n, r, p: a, dkLen: i, blockSize32: s, V: o, B32: b, B: c, tmp: d, blockMixCb: u } = ab(f, e, t);
                    for(let f = 0; f < a; f++){
                        const e = s * f;
                        for(let f = 0; f < s; f++)o[f] = b[e + f];
                        for(let f = 0, e = 0; f < n - 1; f++)rb(o, e, o, e += s, r), u();
                        rb(o, (n - 1) * s, b, e, r), u();
                        for(let f = 0; f < n; f++){
                            const f = b[e + s - 16] % n;
                            for(let t = 0; t < s; t++)d[t] = b[e + t] ^ o[f * s + t];
                            rb(d, 0, b, e, r), u();
                        }
                    }
                    return ib(f, i, c, o, d);
                }(f, e, {
                    N: t,
                    r: n,
                    p: r,
                    dkLen: a
                });
            };
            let db = bb, ub = cb;
            async function lb(f, e, t, n, r, a, i) {
                const s = w(f, "passwd"), o = w(e, "salt");
                return x(await db(s, o, t, n, r, a, i));
            }
            function hb(f, e, t, n, r, a) {
                const i = w(f, "passwd"), s = w(e, "salt");
                return x(ub(i, s, t, n, r, a));
            }
            function pb(f) {
                const e = w(f, "randomBytes");
                e[6] = 15 & e[6] | 64, e[8] = 63 & e[8] | 128;
                const t = x(e);
                return [
                    t.substring(2, 10),
                    t.substring(10, 14),
                    t.substring(14, 18),
                    t.substring(18, 22),
                    t.substring(22, 34)
                ].join("-");
            }
            function yb(f) {
                return "string" != typeof f || f.startsWith("0x") || (f = "0x" + f), v(f);
            }
            function mb(f, e) {
                for(f = String(f); f.length < e;)f = "0" + f;
                return f;
            }
            function gb(f) {
                return "string" == typeof f ? C(f, "NFKC") : v(f);
            }
            function wb(f, e) {
                const t = e.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
                l(null != t, "invalid path", "path", e);
                const n = t[1], r = t[3], a = "!" === t[4];
                let i = f;
                for (const f of n.toLowerCase().split(".")){
                    if (Array.isArray(i)) {
                        if (!f.match(/^[0-9]+$/)) break;
                        i = i[parseInt(f)];
                    } else if ("object" == typeof i) {
                        let e = null;
                        for(const t in i)if (t.toLowerCase() === f) {
                            e = i[t];
                            break;
                        }
                        i = e;
                    } else i = null;
                    if (null == i) break;
                }
                if (l(!a || null != i, "missing required value", "path", n), r && null != i) {
                    if ("int" === r) {
                        if ("string" == typeof i && i.match(/^-?[0-9]+$/)) return parseInt(i);
                        if (Number.isSafeInteger(i)) return i;
                    }
                    if ("number" === r && "string" == typeof i && i.match(/^-?[0-9.]*$/)) return parseFloat(i);
                    if ("data" === r && "string" == typeof i) return yb(i);
                    if ("array" === r && Array.isArray(i)) return i;
                    if (r === typeof i) return i;
                    l(!1, "wrong type found for ".concat(r, " "), "path", n);
                }
                return i;
            }
            lb._ = bb, lb.lock = function() {
                ob = !0;
            }, lb.register = function(f) {
                if (ob) throw new Error("scrypt is locked");
                db = f;
            }, Object.freeze(lb), hb._ = cb, hb.lock = function() {
                sb = !0;
            }, hb.register = function(f) {
                if (sb) throw new Error("scryptSync is locked");
                ub = f;
            }, Object.freeze(hb);
            const vb = "m/44'/60'/0'/0/0";
            function Eb(f) {
                try {
                    const e = JSON.parse(f);
                    if (3 === (null != e.version ? parseInt(e.version) : 0)) return !0;
                } catch (f) {}
                return !1;
            }
            function Tb(f, e) {
                const t = w(e), n = wb(f, "crypto.ciphertext:data!");
                l(x(Zf(I([
                    t.slice(16, 32),
                    n
                ]))).substring(2) === wb(f, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
                const r = function(f, e, t) {
                    if ("aes-128-ctr" === wb(f, "crypto.cipher:string")) {
                        const n = wb(f, "crypto.cipherparams.iv:data!");
                        return x(new eb(e, n).decrypt(t));
                    }
                    u(!1, "unsupported cipher", "UNSUPPORTED_OPERATION", {
                        operation: "decrypt"
                    });
                }(f, t.slice(0, 16), n), a = Ti(r);
                if (f.address) {
                    let e = f.address.toLowerCase();
                    e.startsWith("0x") || (e = "0x" + e), l(ne(e) === a, "keystore address/privateKey mismatch", "address", f.address);
                }
                const i = {
                    address: a,
                    privateKey: r
                };
                if ("0.1" === wb(f, "x-ethers.version:string")) {
                    const e = t.slice(32, 64), n = wb(f, "x-ethers.mnemonicCiphertext:data!"), r = wb(f, "x-ethers.mnemonicCounter:data!"), a = new eb(e, r);
                    i.mnemonic = {
                        path: wb(f, "x-ethers.path:string") || vb,
                        locale: wb(f, "x-ethers.locale:string") || "en",
                        entropy: x(w(a.decrypt(n)))
                    };
                }
                return i;
            }
            function Ab(f) {
                const e = wb(f, "crypto.kdf:string");
                if (e && "string" == typeof e) {
                    if ("scrypt" === e.toLowerCase()) {
                        const t = wb(f, "crypto.kdfparams.salt:data!"), n = wb(f, "crypto.kdfparams.n:int!"), r = wb(f, "crypto.kdfparams.r:int!"), a = wb(f, "crypto.kdfparams.p:int!");
                        l(n > 0 && !(n & n - 1), "invalid kdf.N", "kdf.N", n), l(r > 0 && a > 0, "invalid kdf", "kdf", e);
                        const i = wb(f, "crypto.kdfparams.dklen:int!");
                        return l(32 === i, "invalid kdf.dklen", "kdf.dflen", i), {
                            name: "scrypt",
                            salt: t,
                            N: n,
                            r,
                            p: a,
                            dkLen: 64
                        };
                    }
                    if ("pbkdf2" === e.toLowerCase()) {
                        const e = wb(f, "crypto.kdfparams.salt:data!"), t = wb(f, "crypto.kdfparams.prf:string!"), n = t.split("-").pop();
                        l("sha256" === n || "sha512" === n, "invalid kdf.pdf", "kdf.pdf", t);
                        const r = wb(f, "crypto.kdfparams.c:int!"), a = wb(f, "crypto.kdfparams.dklen:int!");
                        return l(32 === a, "invalid kdf.dklen", "kdf.dklen", a), {
                            name: "pbkdf2",
                            salt: e,
                            count: r,
                            dkLen: a,
                            algorithm: n
                        };
                    }
                }
                l(!1, "unsupported key-derivation function", "kdf", e);
            }
            function xb(f) {
                return new Promise((e)=>{
                    setTimeout(()=>{
                        e();
                    }, f);
                });
            }
            function Ib(f) {
                const e = null != f.salt ? w(f.salt, "options.salt") : wr(32);
                let t = 1 << 17, n = 8, r = 1;
                return f.scrypt && (f.scrypt.N && (t = f.scrypt.N), f.scrypt.r && (n = f.scrypt.r), f.scrypt.p && (r = f.scrypt.p)), l("number" == typeof t && t > 0 && Number.isSafeInteger(t) && (BigInt(t) & BigInt(t - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", t), l("number" == typeof n && n > 0 && Number.isSafeInteger(n), "invalid scrypt r parameter", "options.r", n), l("number" == typeof r && r > 0 && Number.isSafeInteger(r), "invalid scrypt p parameter", "options.p", r), {
                    name: "scrypt",
                    dkLen: 32,
                    salt: e,
                    N: t,
                    r: n,
                    p: r
                };
            }
            function kb(f, e, t, n) {
                const r = w(t.privateKey, "privateKey"), i = null != n.iv ? w(n.iv, "options.iv") : wr(16);
                l(16 === i.length, "invalid options.iv length", "options.iv", n.iv);
                const s = null != n.uuid ? w(n.uuid, "options.uuid") : wr(16);
                l(16 === s.length, "invalid options.uuid length", "options.uuid", n.iv);
                const o = f.slice(0, 16), b = f.slice(16, 32), c = w(new eb(o, i).encrypt(r)), d = Zf(I([
                    b,
                    c
                ])), u = {
                    address: t.address.substring(2).toLowerCase(),
                    id: pb(s),
                    version: 3,
                    Crypto: {
                        cipher: "aes-128-ctr",
                        cipherparams: {
                            iv: x(i).substring(2)
                        },
                        ciphertext: x(c).substring(2),
                        kdf: "scrypt",
                        kdfparams: {
                            salt: x(e.salt).substring(2),
                            n: e.N,
                            dklen: 32,
                            p: e.p,
                            r: e.r
                        },
                        mac: d.substring(2)
                    }
                };
                if (t.mnemonic) {
                    const e = null != n.client ? n.client : "ethers/".concat(a), r = t.mnemonic.path || vb, i = t.mnemonic.locale || "en", s = f.slice(32, 64), o = w(t.mnemonic.entropy, "account.mnemonic.entropy"), b = wr(16), c = w(new eb(s, b).encrypt(o)), d = new Date, l = "UTC--" + d.getUTCFullYear() + "-" + mb(d.getUTCMonth() + 1, 2) + "-" + mb(d.getUTCDate(), 2) + "T" + mb(d.getUTCHours(), 2) + "-" + mb(d.getUTCMinutes(), 2) + "-" + mb(d.getUTCSeconds(), 2) + ".0Z--" + u.address;
                    u["x-ethers"] = {
                        client: e,
                        gethFilename: l,
                        path: r,
                        locale: i,
                        mnemonicCounter: x(b).substring(2),
                        mnemonicCiphertext: x(c).substring(2),
                        version: "0.1"
                    };
                }
                return JSON.stringify(u);
            }
            function Ob(f, e, t) {
                null == t && (t = {});
                const n = gb(e), r = Ib(t);
                return kb(w(hb(n, r.salt, r.N, r.r, r.p, 64)), r, f, t);
            }
            async function _b(f, e, t) {
                null == t && (t = {});
                const n = gb(e), r = Ib(t);
                return kb(w(await lb(n, r.salt, r.N, r.r, r.p, 64, t.progressCallback)), r, f, t);
            }
            var Pb;
            function Sb(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Rb = 0;
            function Nb(f) {
                return "__private_" + Rb++ + "_" + f;
            }
            const Cb = "m/44'/60'/0'/0/0", Ub = new Uint8Array([
                66,
                105,
                116,
                99,
                111,
                105,
                110,
                32,
                115,
                101,
                101,
                100
            ]), Lb = 2147483648, Bb = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
            function Db(f, e) {
                let t = "";
                for(; f;)t = "0123456789abcdef"[f % 16] + t, f = Math.trunc(f / 16);
                for(; t.length < 2 * e;)t = "0" + t;
                return "0x" + t;
            }
            function Fb(f) {
                const e = w(f);
                return Ys(I([
                    e,
                    O(bi(bi(e)), 0, 4)
                ]));
            }
            const Mb = {};
            function jb(f, e, t, n) {
                const r = new Uint8Array(37);
                f & Lb ? (u(null != n, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
                    operation: "deriveChild"
                }), r.set(w(n), 1)) : r.set(w(t));
                for(let e = 24; e >= 0; e -= 8)r[33 + (e >> 3)] = f >> 24 - e & 255;
                const a = w(Is("sha512", e, r));
                return {
                    IL: a.slice(0, 32),
                    IR: a.slice(32)
                };
            }
            function Kb(f, e) {
                const t = e.split("/");
                l(t.length > 0, "invalid path", "path", e), "m" === t[0] && (l(0 === f.depth, 'cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth '.concat(f.depth), "path", e), t.shift());
                let n = f;
                for(let f = 0; f < t.length; f++){
                    const e = t[f];
                    if (e.match(/^[0-9]+'$/)) {
                        const t = parseInt(e.substring(0, e.length - 1));
                        l(t < Lb, "invalid path index", "path[".concat(f, "]"), e), n = n.deriveChild(Lb + t);
                    } else if (e.match(/^[0-9]+$/)) {
                        const t = parseInt(e);
                        l(t < Lb, "invalid path index", "path[".concat(f, "]"), e), n = n.deriveChild(t);
                    } else l(!1, "invalid path component", "path[".concat(f, "]"), e);
                }
                return n;
            }
            var zb, Vb = Nb("account"), Gb = Nb("fromSeed");
            class Hb extends Es {
                constructor(f, e, t, n, r, a, i, s, b){
                    super(e, b), Object.defineProperty(this, Vb, {
                        value: Wb
                    }), this.publicKey = void 0, this.fingerprint = void 0, this.parentFingerprint = void 0, this.mnemonic = void 0, this.chainCode = void 0, this.path = void 0, this.index = void 0, this.depth = void 0, m(f, Mb, "HDNodeWallet"), o(this, {
                        publicKey: e.compressedPublicKey
                    }), o(this, {
                        parentFingerprint: t,
                        fingerprint: O(Vs(bi(this.publicKey)), 0, 4),
                        chainCode: n,
                        path: r,
                        index: a,
                        depth: i
                    }), o(this, {
                        mnemonic: s
                    });
                }
                connect(f) {
                    return new Hb(Mb, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, f);
                }
                async encrypt(f, e) {
                    return await _b(Sb(this, Vb)[Vb](), f, {
                        progressCallback: e
                    });
                }
                encryptSync(f) {
                    return Ob(Sb(this, Vb)[Vb](), f);
                }
                get extendedKey() {
                    return u(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
                        operation: "extendedKey"
                    }), Fb(I([
                        "0x0488ADE4",
                        Db(this.depth, 1),
                        this.parentFingerprint,
                        Db(this.index, 4),
                        this.chainCode,
                        I([
                            "0x00",
                            this.privateKey
                        ])
                    ]));
                }
                hasPath() {
                    return null != this.path;
                }
                neuter() {
                    return new $b(Mb, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
                }
                deriveChild(f) {
                    const e = W(f, "index");
                    l(e <= 4294967295, "invalid index", "index", e);
                    let t = this.path;
                    t && (t += "/" + (2147483647 & e), e & Lb && (t += "'"));
                    const { IR: n, IL: r } = jb(e, this.chainCode, this.publicKey, this.privateKey), a = new Sa($((H(r) + BigInt(this.privateKey)) % Bb, 32));
                    return new Hb(Mb, a, this.fingerprint, x(n), t, e, this.depth + 1, this.mnemonic, this.provider);
                }
                derivePath(f) {
                    return Kb(this, f);
                }
                static fromExtendedKey(f) {
                    const e = J(qs(f));
                    l(82 === e.length || Fb(e.slice(0, 78)) === f, "invalid extended key", "extendedKey", "[ REDACTED ]");
                    const t = e[4], n = x(e.slice(5, 9)), r = parseInt(x(e.slice(9, 13)).substring(2), 16), a = x(e.slice(13, 45)), i = e.slice(45, 78);
                    switch(x(e.slice(0, 4))){
                        case "0x0488b21e":
                        case "0x043587cf":
                            {
                                const f = x(i);
                                return new $b(Mb, Ti(f), f, n, a, null, r, t, null);
                            }
                        case "0x0488ade4":
                        case "0x04358394 ":
                            if (0 !== i[0]) break;
                            return new Hb(Mb, new Sa(i.slice(1)), n, a, null, r, t, null, null);
                    }
                    l(!1, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
                }
                static createRandom(f, e, t) {
                    null == f && (f = ""), null == e && (e = Cb), null == t && (t = co.wordlist());
                    const n = vo.fromEntropy(wr(16), f, t);
                    return Sb(Hb, Gb)[Gb](n.computeSeed(), n).derivePath(e);
                }
                static fromMnemonic(f, e) {
                    return e || (e = Cb), Sb(Hb, Gb)[Gb](f.computeSeed(), f).derivePath(e);
                }
                static fromPhrase(f, e, t, n) {
                    null == e && (e = ""), null == t && (t = Cb), null == n && (n = co.wordlist());
                    const r = vo.fromPhrase(f, e, n);
                    return Sb(Hb, Gb)[Gb](r.computeSeed(), r).derivePath(t);
                }
                static fromSeed(f) {
                    return Sb(Hb, Gb)[Gb](f, null);
                }
            }
            function Wb() {
                const f = {
                    address: this.address,
                    privateKey: this.privateKey
                }, e = this.mnemonic;
                return this.path && e && "en" === e.wordlist.locale && "" === e.password && (f.mnemonic = {
                    path: this.path,
                    locale: "en",
                    entropy: e.entropy
                }), f;
            }
            Pb = Hb, Object.defineProperty(Hb, Gb, {
                value: function(f, e) {
                    l(T(f), "invalid seed", "seed", "[REDACTED]");
                    const t = w(f, "seed");
                    l(t.length >= 16 && t.length <= 64, "invalid seed", "seed", "[REDACTED]");
                    const n = w(Is("sha512", Ub, t)), r = new Sa(x(n.slice(0, 32)));
                    return new Pb(Mb, r, "0x00000000", x(n.slice(32)), "m", 0, 0, e, null);
                }
            });
            class $b extends ps {
                constructor(f, e, t, n, r, a, i, s, b){
                    super(e, b), this.publicKey = void 0, this.fingerprint = void 0, this.parentFingerprint = void 0, this.chainCode = void 0, this.path = void 0, this.index = void 0, this.depth = void 0, m(f, Mb, "HDNodeVoidWallet"), o(this, {
                        publicKey: t
                    }), o(this, {
                        publicKey: t,
                        fingerprint: O(Vs(bi(t)), 0, 4),
                        parentFingerprint: n,
                        chainCode: r,
                        path: a,
                        index: i,
                        depth: s
                    });
                }
                connect(f) {
                    return new $b(Mb, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, f);
                }
                get extendedKey() {
                    return u(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
                        operation: "extendedKey"
                    }), Fb(I([
                        "0x0488B21E",
                        Db(this.depth, 1),
                        this.parentFingerprint,
                        Db(this.index, 4),
                        this.chainCode,
                        this.publicKey
                    ]));
                }
                hasPath() {
                    return null != this.path;
                }
                deriveChild(f) {
                    const e = W(f, "index");
                    l(e <= 4294967295, "invalid index", "index", e);
                    let t = this.path;
                    t && (t += "/" + (2147483647 & e), e & Lb && (t += "'"));
                    const { IR: n, IL: r } = jb(e, this.chainCode, this.publicKey, null), a = Sa.addPoints(r, this.publicKey, !0), i = Ti(a);
                    return new $b(Mb, i, a, this.fingerprint, x(n), t, e, this.depth + 1, this.provider);
                }
                derivePath(f) {
                    return Kb(this, f);
                }
            }
            function Jb(f) {
                try {
                    if (JSON.parse(f).encseed) return !0;
                } catch (f) {}
                return !1;
            }
            function Yb(f, e) {
                const t = JSON.parse(f), n = gb(e), r = ne(wb(t, "ethaddr:string!")), a = yb(wb(t, "encseed:string!"));
                l(a && a.length % 16 == 0, "invalid encseed", "json", f);
                const i = w(po(n, n, 2e3, 32, "sha256")).slice(0, 16), s = a.slice(0, 16), o = a.slice(16), b = function(f) {
                    if (f.length < 16) throw new TypeError("PKCS#7 invalid length");
                    const e = f[f.length - 1];
                    if (e > 16) throw new TypeError("PKCS#7 padding byte out of range");
                    const t = f.length - e;
                    for(let n = 0; n < e; n++)if (f[t + n] !== e) throw new TypeError("PKCS#7 invalid padding byte");
                    return new Uint8Array(f.subarray(0, t));
                }(w(new Yo(i, s).decrypt(o)));
                let c = "";
                for(let f = 0; f < b.length; f++)c += String.fromCharCode(b[f]);
                return {
                    address: r,
                    privateKey: Ut(c)
                };
            }
            function qb(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Zb = 0;
            function Xb(f) {
                return "__private_" + Zb++ + "_" + f;
            }
            function Qb(f) {
                return new Promise((e)=>{
                    setTimeout(()=>{
                        e();
                    }, f);
                });
            }
            var fc = Xb("fromAccount");
            class ec extends Es {
                constructor(f, e){
                    "string" != typeof f || f.startsWith("0x") || (f = "0x" + f), super("string" == typeof f ? new Sa(f) : f, e);
                }
                connect(f) {
                    return new ec(this.signingKey, f);
                }
                async encrypt(f, e) {
                    const t = {
                        address: this.address,
                        privateKey: this.privateKey
                    };
                    return await _b(t, f, {
                        progressCallback: e
                    });
                }
                encryptSync(f) {
                    return Ob({
                        address: this.address,
                        privateKey: this.privateKey
                    }, f);
                }
                static async fromEncryptedJson(f, e, t) {
                    let n = null;
                    return Eb(f) ? n = await async function(f, e, t) {
                        const n = JSON.parse(f), r = gb(e), a = Ab(n);
                        if ("pbkdf2" === a.name) {
                            t && (t(0), await xb(0));
                            const { salt: f, count: e, dkLen: i, algorithm: s } = a, o = po(r, f, e, i, s);
                            return t && (t(1), await xb(0)), Tb(n, o);
                        }
                        u("scrypt" === a.name, "cannot be reached", "UNKNOWN_ERROR", {
                            params: a
                        });
                        const { salt: i, N: s, r: o, p: b, dkLen: c } = a;
                        return Tb(n, await lb(r, i, s, o, b, c, t));
                    }(f, e, t) : Jb(f) && (t && (t(0), await Qb(0)), n = Yb(f, e), t && (t(1), await Qb(0))), qb(ec, fc)[fc](n);
                }
                static fromEncryptedJsonSync(f, e) {
                    let t = null;
                    return Eb(f) ? t = function(f, e) {
                        const t = JSON.parse(f), n = gb(e), r = Ab(t);
                        if ("pbkdf2" === r.name) {
                            const { salt: f, count: e, dkLen: a, algorithm: i } = r;
                            return Tb(t, po(n, f, e, a, i));
                        }
                        u("scrypt" === r.name, "cannot be reached", "UNKNOWN_ERROR", {
                            params: r
                        });
                        const { salt: a, N: i, r: s, p: o, dkLen: b } = r;
                        return Tb(t, hb(n, a, i, s, o, b));
                    }(f, e) : Jb(f) ? t = Yb(f, e) : l(!1, "invalid JSON wallet", "json", "[ REDACTED ]"), qb(ec, fc)[fc](t);
                }
                static createRandom(f) {
                    const e = Hb.createRandom();
                    return f ? e.connect(f) : e;
                }
                static fromPhrase(f, e) {
                    const t = Hb.fromPhrase(f);
                    return e ? t.connect(e) : t;
                }
            }
            zb = ec, Object.defineProperty(ec, fc, {
                value: function(f) {
                    if (l(f, "invalid JSON wallet", "json", "[ REDACTED ]"), "mnemonic" in f && f.mnemonic && "en" === f.mnemonic.locale) {
                        const e = vo.fromEntropy(f.mnemonic.entropy), t = Hb.fromMnemonic(e, f.mnemonic.path);
                        if (t.address === f.address && t.privateKey === f.privateKey) return t;
                        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
                    }
                    const e = new zb(f.privateKey);
                    return l(e.address === f.address, "address/privateKey mismatch", "json", "[ REDACTED ]"), e;
                }
            });
            const tc = async (f, e)=>{
                const t = new ec(f), n = w(be([
                    "address"
                ], [
                    e
                ]));
                return await t.signMessage(n);
            }, nc = function() {
                let f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 65, e = arguments.length > 1 ? arguments[1] : void 0;
                if (e) return $(qs(e), f);
            }, rc = (f, e)=>{
                const t = Ys(e.linkKey), n = Ys(e.transferId), r = e.encryptionKey ? "&m=".concat(e.encryptionKey) : "";
                if (e.senderSig) {
                    const a = (e.senderSig.length - 2) / 2, i = Ys(e.senderSig);
                    return "".concat(f, "/#/code?k=").concat(t, "&sg=").concat(i, "&i=").concat(n, "&c=").concat(e.chainId, "&v=3&sgl=").concat(a, "&src=p2p").concat(r);
                }
                return "".concat(f, "/#/code?k=").concat(t, "&c=").concat(e.chainId, "&v=3&src=p2p").concat(r);
            }, ac = (f)=>{
                const e = f.indexOf("#"), t = f.substring(e + 1).split("?")[1], n = vc(t), r = {
                    linkKey: n.k || "",
                    signature: n.sg,
                    transferId: n.i || "",
                    chainId: n.c,
                    version: n.v || "1",
                    signatureLength: n.sgl || "65",
                    encryptionKey: n.m
                }, a = $(qs(r.linkKey), 32);
                return {
                    senderSig: nc(Number(r.signatureLength), r.signature),
                    linkKey: a,
                    transferId: r.transferId ? $(qs(r.transferId), 20) : new ec(a).address.toLowerCase(),
                    chainId: Number(r.chainId),
                    version: r.version,
                    encryptionKey: r.encryptionKey ? r.encryptionKey : void 0
                };
            }, ic = "0x0000000000000000000000000000000000000000", sc = "0x5badb0143f69015c5c86cbd9373474a9c8ab713b", oc = "0xbe7b40eb3a9d85d3a76142cb637ab824f0d35ead", bc = "0x3c74782de03c0402d207fe41307fe50fe9b6b5c7", cc = "0x5fc1316119a1b7cec52a2984c62764343dca70c9", dc = {
                [ue.usdcBase]: le.receiveWithAuthorization,
                [ue.eurcBase]: le.receiveWithAuthorization,
                [ue.usdcBridgedPolygon]: le.approveWithAuthorization,
                [ue.usdcPolygon]: le.receiveWithAuthorization,
                [ue.usdcArbitrum]: le.receiveWithAuthorization,
                [ue.usdcOptimism]: le.receiveWithAuthorization,
                [ue.usdcAvalanche]: le.receiveWithAuthorizationEOA,
                [ue.cbBTC]: le.receiveWithAuthorizationEOA
            }, uc = (f, e)=>{
                const t = e || "https://escrow-api.linkdrop.io/v3";
                switch(Number(f)){
                    case de.polygon:
                        return "".concat(t, "/polygon");
                    case de.base:
                        return "".concat(t, "/base");
                    case de.arbitrum:
                        return "".concat(t, "/arbitrum");
                    case de.optimism:
                        return "".concat(t, "/optimism");
                    case de.avalanche:
                        return "".concat(t, "/avalanche");
                    default:
                        return null;
                }
            }, lc = {
                1: [
                    "0x0522dd6e9f2beca1cd15a5fd275dc279a1a08eac"
                ],
                2: [
                    "0xad27383460183fd7e21b71df3b4cac9480eb9a75",
                    "0x0B79cC1E78C47fF08cA6f355e8aCD32AEa5bFe58",
                    "0xc4eb6e5933bc5e32dfd5c80baf143212a95549b3"
                ],
                3: [
                    "0x0b962bbbf101941d0d0ec1041d01668dac36647a",
                    "0x2d5dfe0e4582c905233df527242616017f36e192",
                    "0x021ccef76804c43da62b01652d41bcf6f6394731"
                ],
                3.1: [
                    "0x88d51990a3b962f975846f3688e36d2a1fc611f1",
                    "0x648b9a6c54890a8fb17de128c6352f621154f358",
                    "0x7143f68e689e8540a8eec26b482e1d4ac2e28794",
                    "0xe07fa88a10a915b7339aff050db82c0030bf6861",
                    "0x4366caf3963d147da4a4287061354058d871d1be",
                    "0x317d2501396fe75d997799bf3bdbc7cc6768b533",
                    "0x59548f7e4ef381df57a3e5dacbf2ab65111404d6",
                    "0xedfea6336c922f896c7e09ba282beb0cb4476675",
                    "0xff3471dfdc6f82694e5ad4d4e7ffedf23e1e38e0",
                    "0x139b79602b68e8198ea3d57f5e6311fd98262269",
                    "0xe0cec4f0b66257fc6b13652c303237de0fd92ed8"
                ],
                3.2: [
                    "0x5badb0143f69015c5c86cbd9373474a9c8ab713b",
                    "0x3c74782de03c0402d207fe41307fe50fe9b6b5c7",
                    "0xbe7b40eb3a9d85d3a76142cb637ab824f0d35ead",
                    "0x5fc1316119a1b7cec52a2984c62764343dca70c9"
                ]
            }, hc = (f)=>{
                const e = Object.keys(lc).find((e)=>{
                    const t = lc[e];
                    if (t && t.length > 0) return t.find((e)=>e.toLowerCase() === f.toLowerCase());
                });
                return e;
            }, pc = (f)=>Object.entries(f).reduce((f, e)=>{
                    let [t, n] = e;
                    return n ? "" === f ? "".concat(t, "=").concat(n) : "".concat(f, "&").concat(t, "=").concat(n) : f;
                }, "");
            function yc(f, e) {
                var t = Object.keys(f);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(f);
                    e && (n = n.filter(function(e) {
                        return Object.getOwnPropertyDescriptor(f, e).enumerable;
                    })), t.push.apply(t, n);
                }
                return t;
            }
            function mc(f) {
                for(var e = 1; e < arguments.length; e++){
                    var t = null != arguments[e] ? arguments[e] : {};
                    e % 2 ? yc(Object(t), !0).forEach(function(e) {
                        gc(f, e, t[e]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : yc(Object(t)).forEach(function(e) {
                        Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                    });
                }
                return f;
            }
            function gc(f, e, t) {
                return (e = function(f) {
                    var e = function(f) {
                        if ("object" != typeof f || !f) return f;
                        var e = f[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var t = e.call(f, "string");
                            if ("object" != typeof t) return t;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(f);
                    }(f);
                    return "symbol" == typeof e ? e : e + "";
                }(e)) in f ? Object.defineProperty(f, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : f[e] = t, f;
            }
            const wc = (f)=>f.map((f)=>{
                    const e = mc(mc({}, f), {}, {
                        txHash: f.tx_hash
                    });
                    return delete e.tx_hash, e;
                }), vc = function(f) {
                const e = f.replace("?", "").split("&"), t = {};
                return e.forEach((f)=>{
                    const [e, n] = f.split("=");
                    t[e] = decodeURIComponent(n || "");
                }), t;
            }, Ec = {
                name: "USD Coin",
                version: "2",
                chainId: de.polygon,
                verifyingContract: ue.usdcPolygon
            }, Tc = {
                name: "USD Coin (PoS)",
                version: "1",
                verifyingContract: ue.usdcBridgedPolygon,
                salt: "0x0000000000000000000000000000000000000000000000000000000000000089"
            }, Ac = {
                name: "USD Coin",
                version: "2",
                chainId: de.optimism,
                verifyingContract: ue.usdcOptimism
            }, xc = {
                name: "USD Coin",
                version: "2",
                chainId: de.avalanche,
                verifyingContract: ue.usdcAvalanche
            }, Ic = {
                name: "USD Coin",
                version: "2",
                chainId: de.arbitrum,
                verifyingContract: ue.usdcArbitrum
            }, kc = {
                name: "USD Coin",
                version: "2",
                chainId: de.base,
                verifyingContract: ue.usdcBase
            }, Oc = {
                name: "EURC",
                version: "2",
                chainId: de.base,
                verifyingContract: ue.eurcBase
            }, _c = {
                name: "Coinbase Wrapped BTC",
                version: "2",
                chainId: de.base,
                verifyingContract: ue.cbBTC
            }, Pc = async function(f) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                try {
                    const r = await fetch(f, e);
                    if (r.ok) return r.json();
                    const a = await r.json(), i = r.status, s = (t = r.status, n = a, 403 === t ? n.message ? n.message : n.geographicContext ? "Service is not available in this region" : "Some error occured. Please check server response for more info" : n.message ? n.message : "Some error occured. Please check server response for more info"), o = a.errors, b = o && o.length ? o[0] : "SERVER_ERROR";
                    switch(i){
                        case 409:
                            throw new X(s, b);
                        case 400:
                            throw new q(s, b);
                        case 403:
                            throw new ff(s, b);
                        case 404:
                            throw new tf(s, b);
                        default:
                            throw new Error(s);
                    }
                } catch (f) {
                    throw f;
                }
                var t, n;
            }, Sc = (f)=>{
                const e = {
                    "content-type": "application/json"
                };
                return f && (e.authorization = "Bearer ".concat(f)), e;
            }, Rc = ()=>"Chain is not supported. Please use ".concat(Object.keys(de).filter((f)=>isNaN(Number(f))).join(", ")), Nc = (f, e)=>'Argument "'.concat(f, '" is not provided (argument="').concat(f, '", value="').concat(e, '")'), Cc = (f, e)=>'Property "'.concat(f, '" is not provided (property="').concat(f, '", value="').concat(e, '")'), Uc = (f)=>"Amount should be greater than or equal to ".concat(f), Lc = (f)=>"Max amount ".concat(f), Bc = (f, e)=>"Escrow contract is not available for token ".concat(f, " (chain id: ").concat(e, ")"), Dc = (f, e, t)=>'Variable "'.concat(f, '" is not valid. Expected value type: ').concat(e, ". Current value: ").concat(t), Fc = (f)=>{
                const e = new URL(f);
                return e.hash || e.pathname.startsWith("/redeem/0x") ? e.search ? e.hash.replace("#", "") : e.hash.replace("#", "").replace("/redeem/", "").split("?")[0] : e.pathname.replace("/redeem/", "");
            }, Mc = async (f)=>{
                let { chainId: e, transferId: t, message: n, signTypedData: a, getRandomBytes: i, encryptionKeyLength: s } = f;
                const { encryptionKey: o, encryptionKeyLinkParam: b } = await Kc({
                    transferId: t,
                    signTypedData: a,
                    encryptionKeyLength: s,
                    chainId: e
                }), c = function(f) {
                    const e = new Uint8Array([
                        0
                    ]), t = L(f.symKey);
                    if (32 !== t.length) throw new Error("Key must be 32 bytes (in hex).");
                    const n = void 0 !== f.iv ? L(f.iv) : f.randomBytes(24);
                    if (24 !== n.length) throw new Error("IV must be 24 bytes.");
                    const a = C(f.message), i = r().secretbox(a, n, t);
                    return s = new Uint8Array([
                        ...e,
                        ...n,
                        ...i
                    ]), Array.from(s).map((f)=>f.toString(16).padStart(2, "0")).join("");
                    "TURBOPACK unreachable";
                    var s;
                }({
                    message: n,
                    symKey: o,
                    randomBytes: i
                }), d = Vc(s);
                return {
                    encryptedSenderMessage: "".concat(d).concat(c),
                    encryptionKey: b
                };
            }, jc = (f)=>{
                let { message: e, encryptionKey: t } = f;
                return B({
                    encoded: e.slice(2),
                    symKey: bi(zc(t)).replace("0x", "")
                });
            }, Kc = async (f)=>{
                let { transferId: e, signTypedData: t, chainId: n, encryptionKeyLength: r } = f;
                const a = {
                    name: "MyEncryptionScheme",
                    version: "1",
                    chainId: n
                }, i = {
                    seed: "Encrypting message (transferId: ".concat(e, ")")
                }, s = Ys(bi(await t(a, {
                    EncryptionMessage: [
                        {
                            name: "seed",
                            type: "string"
                        }
                    ]
                }, i))).slice(0, r);
                return {
                    encryptionKey: bi(zc(s)).replace("0x", ""),
                    encryptionKeyLinkParam: s
                };
            }, zc = (f)=>{
                let e = [
                    0
                ];
                for(let t = 0; t < f.length; t++){
                    const n = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz".indexOf(f[t]);
                    if (-1 === n) throw new Error("Invalid Base58 character");
                    let r = n;
                    for(let f = 0; f < e.length; f++)r += 58 * e[f], e[f] = r % 256, r = Math.floor(r / 256);
                    for(; r > 0;)e.push(r % 256), r = Math.floor(r / 256);
                }
                for(let t = 0; t < f.length && "1" === f[t]; t++)e.push(0);
                return Uint8Array.from(e.reverse());
            }, Vc = (f)=>f.toString(16).padStart(2, "0").toUpperCase(), Gc = (f)=>parseInt(f, 16), Hc = (f, e, t, n, r, a, i, s, o)=>Pc("".concat(f, "/redeem-recovered"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        receiver: t,
                        sender: n,
                        escrow: r,
                        transfer_id: a,
                        receiver_sig: i,
                        sender_sig: s,
                        token: o
                    })
                }), Wc = (f, e, t, n, r, a, i, s)=>Pc("".concat(f, "/redeem"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        receiver: t,
                        sender: i,
                        escrow: s,
                        transfer_id: n,
                        receiver_sig: r,
                        token: a
                    })
                }), $c = (f, e, t, n, r, a, i, s, o, b, c, d, u, l, h)=>Pc("".concat(f, "/deposit-with-authorization"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        sender: r,
                        token: t,
                        token_type: n,
                        escrow: a,
                        transfer_id: i,
                        expiration: s,
                        amount: d,
                        authorization: o,
                        authorization_selector: b,
                        fee_amount: u,
                        total_amount: l,
                        fee_authorization: c,
                        encrypted_sender_message: h
                    })
                }), Jc = (f, e, t, n, r, a, i, s, o, b, c, d, u, l, h)=>Pc("".concat(f, "/deposit"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        sender: r,
                        escrow: a,
                        transfer_id: i,
                        token: t,
                        token_type: n,
                        expiration: s,
                        tx_hash: o,
                        fee_authorization: b,
                        amount: c,
                        fee_amount: d,
                        total_amount: u,
                        fee_token: l,
                        encrypted_sender_message: h
                    })
                }), Yc = (f, e, t, n, r, a, i, s, o, b, c, d, u, l, h)=>Pc("".concat(f, "/deposit-erc721"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        sender: r,
                        escrow: a,
                        transfer_id: i,
                        token: t,
                        token_type: n,
                        expiration: s,
                        tx_hash: o,
                        fee_authorization: b,
                        token_id: c,
                        fee_amount: d,
                        total_amount: u,
                        fee_token: l,
                        amount: "1",
                        encrypted_sender_message: h
                    })
                }), qc = (f, e, t, n, r, a, i, s, o, b, c, d, u, l, h, p)=>Pc("".concat(f, "/deposit-erc1155"), {
                    headers: Sc(e),
                    method: "POST",
                    body: JSON.stringify({
                        sender: r,
                        escrow: a,
                        transfer_id: i,
                        token: t,
                        token_type: n,
                        expiration: s,
                        tx_hash: o,
                        fee_authorization: b,
                        token_id: c,
                        amount: d,
                        fee_amount: u,
                        total_amount: l,
                        fee_token: h,
                        encrypted_sender_message: p
                    })
                }), Zc = (f, e, t)=>Pc("".concat(f, "/payment-status/transfer/").concat(t), {
                    headers: Sc(e)
                }), Xc = (f, e, t)=>Pc("".concat(f, "/payment-status/transaction/").concat(t), {
                    headers: Sc(e)
                }), Qc = (f, e, t, n, r, a, i, s, o)=>{
                const b = pc({
                    amount: s,
                    token_address: t,
                    sender: n,
                    token_type: r,
                    transfer_id: a,
                    expiration: i,
                    token_id: o
                });
                return Pc("".concat(f, "/fee?").concat(b), {
                    headers: Sc(e)
                });
            }, fd = (f, e, t, n, r, a, i)=>{
                const s = pc({
                    only_active: n,
                    offset: r,
                    limit: a,
                    token_address: i
                });
                return Pc("".concat(f, "/payment-status/sender/").concat(t, "/get-sender-history?").concat(s), {
                    headers: Sc(e)
                });
            }, ed = (f, e, t, n)=>{
                const r = pc({
                    token_address: t,
                    token_type: n
                });
                return Pc("".concat(f, "/limits?").concat(r), {
                    headers: Sc(e)
                });
            };
            function td(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var nd = 0;
            function rd(f) {
                return "__private_" + nd++ + "_" + f;
            }
            class ad {
                constructor(f, e, t){
                    this.fragment = void 0, this.name = void 0, this.signature = void 0, this.topic = void 0, this.args = void 0;
                    const n = f.name, r = f.format();
                    o(this, {
                        fragment: f,
                        name: n,
                        signature: r,
                        topic: e,
                        args: t
                    });
                }
            }
            class id {
                constructor(f, e, t, n){
                    this.fragment = void 0, this.name = void 0, this.args = void 0, this.signature = void 0, this.selector = void 0, this.value = void 0;
                    const r = f.name, a = f.format();
                    o(this, {
                        fragment: f,
                        name: r,
                        args: t,
                        signature: a,
                        selector: e,
                        value: n
                    });
                }
            }
            class sd {
                constructor(f, e, t){
                    this.fragment = void 0, this.name = void 0, this.args = void 0, this.signature = void 0, this.selector = void 0;
                    const n = f.name, r = f.format();
                    o(this, {
                        fragment: f,
                        name: n,
                        args: t,
                        signature: r,
                        selector: e
                    });
                }
            }
            class od {
                static isIndexed(f) {
                    return !(!f || !f._isIndexed);
                }
                constructor(f){
                    this.hash = void 0, this._isIndexed = void 0, o(this, {
                        hash: f,
                        _isIndexed: !0
                    });
                }
            }
            const bd = {
                0: "generic panic",
                1: "assert(false)",
                17: "arithmetic overflow",
                18: "division or modulo by zero",
                33: "enum overflow",
                34: "invalid encoded storage byte array accessed",
                49: "out-of-bounds array access; popping on an empty array",
                50: "out-of-bounds access of an array or bytesN",
                65: "out of memory",
                81: "uninitialized function"
            }, cd = {
                "0x08c379a0": {
                    signature: "Error(string)",
                    name: "Error",
                    inputs: [
                        "string"
                    ],
                    reason: (f)=>"reverted with reason string ".concat(JSON.stringify(f))
                },
                "0x4e487b71": {
                    signature: "Panic(uint256)",
                    name: "Panic",
                    inputs: [
                        "uint256"
                    ],
                    reason: (f)=>{
                        let e = "unknown panic code";
                        return f >= 0 && f <= 255 && bd[f.toString()] && (e = bd[f.toString()]), "reverted with panic code 0x".concat(f.toString(16), " (").concat(e, ")");
                    }
                }
            };
            var dd = rd("errors"), ud = rd("events"), ld = rd("functions"), hd = rd("abiCoder"), pd = rd("getFunction"), yd = rd("getEvent");
            class md {
                constructor(f){
                    Object.defineProperty(this, yd, {
                        value: wd
                    }), Object.defineProperty(this, pd, {
                        value: gd
                    }), this.fragments = void 0, this.deploy = void 0, this.fallback = void 0, this.receive = void 0, Object.defineProperty(this, dd, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ud, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, ld, {
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, hd, {
                        writable: !0,
                        value: void 0
                    });
                    let e = [];
                    e = "string" == typeof f ? JSON.parse(f) : f, td(this, ld)[ld] = new Map, td(this, dd)[dd] = new Map, td(this, ud)[ud] = new Map;
                    const t = [];
                    for (const f of e)try {
                        t.push(_n.from(f));
                    } catch (e) {
                        console.log("[Warning] Invalid Fragment ".concat(JSON.stringify(f), ":"), e.message);
                    }
                    o(this, {
                        fragments: Object.freeze(t)
                    });
                    let n = null, r = !1;
                    td(this, hd)[hd] = this.getAbiCoder(), this.fragments.forEach((f, e)=>{
                        let t;
                        switch(f.type){
                            case "constructor":
                                return this.deploy ? void console.log("duplicate definition - constructor") : void o(this, {
                                    deploy: f
                                });
                            case "fallback":
                                return void (0 === f.inputs.length ? r = !0 : (l(!n || f.payable !== n.payable, "conflicting fallback fragments", "fragments[".concat(e, "]"), f), n = f, r = n.payable));
                            case "function":
                                t = td(this, ld)[ld];
                                break;
                            case "event":
                                t = td(this, ud)[ud];
                                break;
                            case "error":
                                t = td(this, dd)[dd];
                                break;
                            default:
                                return;
                        }
                        const a = f.format();
                        t.has(a) || t.set(a, f);
                    }), this.deploy || o(this, {
                        deploy: Cn.from("constructor()")
                    }), o(this, {
                        fallback: n,
                        receive: r
                    });
                }
                format(f) {
                    const e = f ? "minimal" : "full", t = this.fragments.map((f)=>f.format(e));
                    return t;
                }
                formatJson() {
                    const f = this.fragments.map((f)=>f.format("json"));
                    return JSON.stringify(f.map((f)=>JSON.parse(f)));
                }
                getAbiCoder() {
                    return Wn.defaultAbiCoder();
                }
                getFunctionName(f) {
                    const e = td(this, pd)[pd](f, null, !1);
                    return l(e, "no matching function", "key", f), e.name;
                }
                hasFunction(f) {
                    return !!td(this, pd)[pd](f, null, !1);
                }
                getFunction(f, e) {
                    return td(this, pd)[pd](f, e || null, !0);
                }
                forEachFunction(f) {
                    const e = Array.from(td(this, ld)[ld].keys());
                    e.sort((f, e)=>f.localeCompare(e));
                    for(let t = 0; t < e.length; t++){
                        const n = e[t];
                        f(td(this, ld)[ld].get(n), t);
                    }
                }
                getEventName(f) {
                    const e = td(this, yd)[yd](f, null, !1);
                    return l(e, "no matching event", "key", f), e.name;
                }
                hasEvent(f) {
                    return !!td(this, yd)[yd](f, null, !1);
                }
                getEvent(f, e) {
                    return td(this, yd)[yd](f, e || null, !0);
                }
                forEachEvent(f) {
                    const e = Array.from(td(this, ud)[ud].keys());
                    e.sort((f, e)=>f.localeCompare(e));
                    for(let t = 0; t < e.length; t++){
                        const n = e[t];
                        f(td(this, ud)[ud].get(n), t);
                    }
                }
                getError(f, e) {
                    if (E(f)) {
                        const e = f.toLowerCase();
                        if (cd[e]) return Rn.from(cd[e].signature);
                        for (const f of td(this, dd)[dd].values())if (e === f.selector) return f;
                        return null;
                    }
                    if (-1 === f.indexOf("(")) {
                        const e = [];
                        for (const [t, n] of td(this, dd)[dd])t.split("(")[0] === f && e.push(n);
                        if (0 === e.length) return "Error" === f ? Rn.from("error Error(string)") : "Panic" === f ? Rn.from("error Panic(uint256)") : null;
                        if (e.length > 1) {
                            const t = e.map((f)=>JSON.stringify(f.format())).join(", ");
                            l(!1, "ambiguous error description (i.e. ".concat(t, ")"), "name", f);
                        }
                        return e[0];
                    }
                    if ("Error(string)" === (f = Rn.from(f).format())) return Rn.from("error Error(string)");
                    if ("Panic(uint256)" === f) return Rn.from("error Panic(uint256)");
                    return td(this, dd)[dd].get(f) || null;
                }
                forEachError(f) {
                    const e = Array.from(td(this, dd)[dd].keys());
                    e.sort((f, e)=>f.localeCompare(e));
                    for(let t = 0; t < e.length; t++){
                        const n = e[t];
                        f(td(this, dd)[dd].get(n), t);
                    }
                }
                _decodeParams(f, e) {
                    return td(this, hd)[hd].decode(f, e);
                }
                _encodeParams(f, e) {
                    return td(this, hd)[hd].encode(f, e);
                }
                encodeDeploy(f) {
                    return this._encodeParams(this.deploy.inputs, f || []);
                }
                decodeErrorResult(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getError(f);
                        l(e, "unknown error", "fragment", f), f = e;
                    }
                    return l(O(e, 0, 4) === f.selector, "data signature does not match error ".concat(f.name, "."), "data", e), this._decodeParams(f.inputs, O(e, 4));
                }
                encodeErrorResult(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getError(f);
                        l(e, "unknown error", "fragment", f), f = e;
                    }
                    return I([
                        f.selector,
                        this._encodeParams(f.inputs, e || [])
                    ]);
                }
                decodeFunctionData(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getFunction(f);
                        l(e, "unknown function", "fragment", f), f = e;
                    }
                    return l(O(e, 0, 4) === f.selector, "data signature does not match function ".concat(f.name, "."), "data", e), this._decodeParams(f.inputs, O(e, 4));
                }
                encodeFunctionData(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getFunction(f);
                        l(e, "unknown function", "fragment", f), f = e;
                    }
                    return I([
                        f.selector,
                        this._encodeParams(f.inputs, e || [])
                    ]);
                }
                decodeFunctionResult(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getFunction(f);
                        l(e, "unknown function", "fragment", f), f = e;
                    }
                    let t = "invalid length for result data";
                    const n = v(e);
                    if (n.length % 32 == 0) try {
                        return td(this, hd)[hd].decode(f.outputs, n);
                    } catch (f) {
                        t = "could not decode result data";
                    }
                    u(!1, t, "BAD_DATA", {
                        value: x(n),
                        info: {
                            method: f.name,
                            signature: f.format()
                        }
                    });
                }
                makeError(f, e) {
                    const t = w(f, "data"), n = Wn.getBuiltinCallException("call", e, t);
                    if (n.message.startsWith("execution reverted (unknown custom error)")) {
                        const f = x(t.slice(0, 4)), e = this.getError(f);
                        if (e) try {
                            const f = td(this, hd)[hd].decode(e.inputs, t.slice(4));
                            n.revert = {
                                name: e.name,
                                signature: e.format(),
                                args: f
                            }, n.reason = n.revert.signature, n.message = "execution reverted: ".concat(n.reason);
                        } catch (f) {
                            n.message = "execution reverted (coult not decode custom error)";
                        }
                    }
                    const r = this.parseTransaction(e);
                    return r && (n.invocation = {
                        method: r.name,
                        signature: r.signature,
                        args: r.args
                    }), n;
                }
                encodeFunctionResult(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getFunction(f);
                        l(e, "unknown function", "fragment", f), f = e;
                    }
                    return x(td(this, hd)[hd].encode(f.outputs, e || []));
                }
                encodeFilterTopics(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getEvent(f);
                        l(e, "unknown event", "eventFragment", f), f = e;
                    }
                    u(e.length <= f.inputs.length, "too many arguments for ".concat(f.format()), "UNEXPECTED_ARGUMENT", {
                        count: e.length,
                        expectedCount: f.inputs.length
                    });
                    const t = [];
                    f.anonymous || t.push(f.topicHash);
                    const n = (f, e)=>"string" === f.type ? Ut(e) : "bytes" === f.type ? Zf(x(e)) : ("bool" === f.type && "boolean" == typeof e ? e = e ? "0x01" : "0x00" : f.type.match(/^u?int/) ? e = $(e) : f.type.match(/^bytes/) ? e = S(e, 32) : "address" === f.type && td(this, hd)[hd].encode([
                            "address"
                        ], [
                            e
                        ]), P(x(e), 32));
                    for(e.forEach((e, r)=>{
                        const a = f.inputs[r];
                        a.indexed ? null == e ? t.push(null) : "array" === a.baseType || "tuple" === a.baseType ? l(!1, "filtering with tuples or arrays not supported", "contract." + a.name, e) : Array.isArray(e) ? t.push(e.map((f)=>n(a, f))) : t.push(n(a, e)) : l(null == e, "cannot filter non-indexed parameters; must be null", "contract." + a.name, e);
                    }); t.length && null === t[t.length - 1];)t.pop();
                    return t;
                }
                encodeEventLog(f, e) {
                    if ("string" == typeof f) {
                        const e = this.getEvent(f);
                        l(e, "unknown event", "eventFragment", f), f = e;
                    }
                    const t = [], n = [], r = [];
                    return f.anonymous || t.push(f.topicHash), l(e.length === f.inputs.length, "event arguments/values mismatch", "values", e), f.inputs.forEach((f, a)=>{
                        const i = e[a];
                        if (f.indexed) if ("string" === f.type) t.push(Ut(i));
                        else if ("bytes" === f.type) t.push(Zf(i));
                        else {
                            if ("tuple" === f.baseType || "array" === f.baseType) throw new Error("not implemented");
                            t.push(td(this, hd)[hd].encode([
                                f.type
                            ], [
                                i
                            ]));
                        }
                        else n.push(f), r.push(i);
                    }), {
                        data: td(this, hd)[hd].encode(n, r),
                        topics: t
                    };
                }
                decodeEventLog(f, e, t) {
                    if ("string" == typeof f) {
                        const e = this.getEvent(f);
                        l(e, "unknown event", "eventFragment", f), f = e;
                    }
                    if (null != t && !f.anonymous) {
                        const e = f.topicHash;
                        l(E(t[0], 32) && t[0].toLowerCase() === e, "fragment/topic mismatch", "topics[0]", t[0]), t = t.slice(1);
                    }
                    const n = [], r = [], a = [];
                    f.inputs.forEach((f, e)=>{
                        f.indexed ? "string" === f.type || "bytes" === f.type || "tuple" === f.baseType || "array" === f.baseType ? (n.push(kn.from({
                            type: "bytes32",
                            name: f.name
                        })), a.push(!0)) : (n.push(f), a.push(!1)) : (r.push(f), a.push(!1));
                    });
                    const i = null != t ? td(this, hd)[hd].decode(n, I(t)) : null, s = td(this, hd)[hd].decode(r, e, !0), o = [], b = [];
                    let c = 0, d = 0;
                    return f.inputs.forEach((f, e)=>{
                        let t = null;
                        if (f.indexed) if (null == i) t = new od(null);
                        else if (a[e]) t = new od(i[d++]);
                        else try {
                            t = i[d++];
                        } catch (f) {
                            t = f;
                        }
                        else try {
                            t = s[c++];
                        } catch (f) {
                            t = f;
                        }
                        o.push(t), b.push(f.name || null);
                    }), Ge.fromItems(o, b);
                }
                parseTransaction(f) {
                    const e = w(f.data, "tx.data"), t = z(null != f.value ? f.value : 0, "tx.value"), n = this.getFunction(x(e.slice(0, 4)));
                    if (!n) return null;
                    const r = td(this, hd)[hd].decode(n.inputs, e.slice(4));
                    return new id(n, n.selector, r, t);
                }
                parseCallResult(f) {
                    throw new Error("@TODO");
                }
                parseLog(f) {
                    const e = this.getEvent(f.topics[0]);
                    return !e || e.anonymous ? null : new ad(e, e.topicHash, this.decodeEventLog(e, f.data, f.topics));
                }
                parseError(f) {
                    const e = x(f), t = this.getError(O(e, 0, 4));
                    if (!t) return null;
                    const n = td(this, hd)[hd].decode(t.inputs, O(e, 4));
                    return new sd(t, t.selector, n);
                }
                static from(f) {
                    return f instanceof md ? f : "string" == typeof f ? new md(JSON.parse(f)) : "function" == typeof f.formatJson ? new md(f.formatJson()) : "function" == typeof f.format ? new md(f.format("json")) : new md(f);
                }
            }
            function gd(f, e, t) {
                if (E(f)) {
                    const e = f.toLowerCase();
                    for (const f of td(this, ld)[ld].values())if (e === f.selector) return f;
                    return null;
                }
                if (-1 === f.indexOf("(")) {
                    const n = [];
                    for (const [e, t] of td(this, ld)[ld])e.split("(")[0] === f && n.push(t);
                    if (e) {
                        const f = e.length > 0 ? e[e.length - 1] : null;
                        let t = e.length, r = !0;
                        yt.isTyped(f) && "overrides" === f.type && (r = !1, t--);
                        for(let f = n.length - 1; f >= 0; f--){
                            const e = n[f].inputs.length;
                            e === t || r && e === t - 1 || n.splice(f, 1);
                        }
                        for(let f = n.length - 1; f >= 0; f--){
                            const t = n[f].inputs;
                            for(let r = 0; r < e.length; r++)if (yt.isTyped(e[r])) {
                                if (r >= t.length) {
                                    if ("overrides" === e[r].type) continue;
                                    n.splice(f, 1);
                                    break;
                                }
                                if (e[r].type !== t[r].baseType) {
                                    n.splice(f, 1);
                                    break;
                                }
                            }
                        }
                    }
                    if (1 === n.length && e && e.length !== n[0].inputs.length) {
                        const f = e[e.length - 1];
                        (null == f || Array.isArray(f) || "object" != typeof f) && n.splice(0, 1);
                    }
                    if (0 === n.length) return null;
                    if (n.length > 1 && t) {
                        const e = n.map((f)=>JSON.stringify(f.format())).join(", ");
                        l(!1, "ambiguous function description (i.e. matches ".concat(e, ")"), "key", f);
                    }
                    return n[0];
                }
                return td(this, ld)[ld].get(Ln.from(f).format()) || null;
            }
            function wd(f, e, t) {
                if (E(f)) {
                    const e = f.toLowerCase();
                    for (const f of td(this, ud)[ud].values())if (e === f.topicHash) return f;
                    return null;
                }
                if (-1 === f.indexOf("(")) {
                    const n = [];
                    for (const [e, t] of td(this, ud)[ud])e.split("(")[0] === f && n.push(t);
                    if (e) {
                        for(let f = n.length - 1; f >= 0; f--)n[f].inputs.length < e.length && n.splice(f, 1);
                        for(let f = n.length - 1; f >= 0; f--){
                            const t = n[f].inputs;
                            for(let r = 0; r < e.length; r++)if (yt.isTyped(e[r]) && e[r].type !== t[r].baseType) {
                                n.splice(f, 1);
                                break;
                            }
                        }
                    }
                    if (0 === n.length) return null;
                    if (n.length > 1 && t) {
                        const e = n.map((f)=>JSON.stringify(f.format())).join(", ");
                        l(!1, "ambiguous event description (i.e. matches ".concat(e, ")"), "key", f);
                    }
                    return n[0];
                }
                return td(this, ud)[ud].get(Nn.from(f).format()) || null;
            }
            function vd(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Ed = 0;
            function Td(f) {
                return "__private_" + Ed++ + "_" + f;
            }
            var Ad = Td("apiKey"), xd = Td("forRecipient");
            const Id = class {
                constructor(f){
                    let { weiAmount: e, tokenImage: t, tokenName: n, additionalWalletsOn: r, preferredWalletOn: a, claimingFinishedAutoRedirect: i, claimingFinishedButtonOn: s, claimingFinishedButtonURL: o, claimingFinishedButtonTitle: b, claimingFinishedDescription: c, wallet: d, sender: u, token: l, amount: h, pendingTxs: p, pendingTxSubmittedBn: y, pendingTxSubmittedAt: m, pendingBlocks: g, feeAmount: w, totalAmount: v, expiration: E, chainId: T, apiUrl: A, baseUrl: x, apiKey: I, transferId: k, tokenType: O, escrowAddress: _, operations: P, linkKey: S, getRandomBytes: R, feeAuthorization: N, feeToken: C, claimUrl: U, tokenId: L, forRecipient: D, status: F, source: M, deployment: j, encryptedSenderMessage: K, senderMessage: z } = f;
                    if (this.sender = void 0, this.token = void 0, this.expiration = void 0, this.chainId = void 0, Object.defineProperty(this, Ad, {
                        writable: !0,
                        value: void 0
                    }), this.apiUrl = void 0, this.baseUrl = void 0, this.escrowAddress = void 0, this.getRandomBytes = void 0, this.transferId = void 0, this.claimUrl = void 0, this.tokenType = void 0, this.operations = void 0, this.linkKey = void 0, this.deposited = !1, this.tokenId = void 0, this.feeAuthorization = void 0, this.amount = void 0, this.totalAmount = void 0, this.feeAmount = void 0, this.feeToken = void 0, this.source = void 0, Object.defineProperty(this, xd, {
                        writable: !0,
                        value: void 0
                    }), this.deployment = void 0, this.status = void 0, this.pendingTxs = void 0, this.pendingTxSubmittedBn = void 0, this.pendingTxSubmittedAt = void 0, this.pendingBlocks = void 0, this.wallet = void 0, this.claimingFinishedDescription = void 0, this.claimingFinishedButtonTitle = void 0, this.tokenImage = void 0, this.tokenName = void 0, this.claimingFinishedButtonURL = void 0, this.claimingFinishedButtonOn = void 0, this.claimingFinishedAutoRedirect = void 0, this.preferredWalletOn = void 0, this.additionalWalletsOn = void 0, this.weiAmount = void 0, this.encryptedSenderMessage = void 0, this.encryptionKey = void 0, this.senderMessage = void 0, this.addMessage = async (f)=>{
                        let { message: e, signTypedData: t, encryptionKeyLength: n = 12 } = f;
                        if (this.deposited) throw new Error("Cannot add message after the deposit");
                        if (e.length > 140) throw new Error("Length of the message text should be lower than or equal to ".concat(140));
                        if (n > 43 || n < 6) throw new Error("Length of the encryption key should be greater than or equal to ".concat(6, " and lower than or equal to ").concat(43));
                        if (!e) throw new Error(Nc("message", String(e)));
                        if (!t) throw new Error(Nc("signTypedData", String(t)));
                        const r = await Mc({
                            message: e,
                            signTypedData: t,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            encryptionKeyLength: n,
                            getRandomBytes: this.getRandomBytes
                        });
                        this.encryptedSenderMessage = r.encryptedSenderMessage, this.encryptionKey = r.encryptionKey;
                    }, this.getDepositParams = ()=>{
                        let f;
                        if (!this.escrowAddress) throw new Error(Cc("escrowAddress", String(this.escrowAddress)));
                        return f = "ERC20" === this.tokenType ? new md(nf.abi).encodeFunctionData("deposit", [
                            this.token,
                            this.transferId,
                            this.totalAmount,
                            this.expiration,
                            this.feeToken,
                            this.feeAmount,
                            this.feeAuthorization,
                            this.encryptedSenderMessage ? "0x".concat(this.encryptedSenderMessage) : "0x"
                        ]) : "NATIVE" === this.tokenType ? new md(nf.abi).encodeFunctionData("depositETH", [
                            this.transferId,
                            this.totalAmount,
                            this.expiration,
                            this.feeAmount,
                            this.feeAuthorization,
                            this.encryptedSenderMessage ? "0x".concat(this.encryptedSenderMessage) : "0x"
                        ]) : "ERC721" === this.tokenType ? new md(rf.abi).encodeFunctionData("depositERC721", [
                            this.token,
                            this.transferId,
                            this.tokenId,
                            this.expiration,
                            this.feeAmount,
                            this.feeAuthorization,
                            this.encryptedSenderMessage ? "0x".concat(this.encryptedSenderMessage) : "0x"
                        ]) : new md(rf.abi).encodeFunctionData("depositERC1155", [
                            this.token,
                            this.transferId,
                            this.tokenId,
                            this.amount,
                            this.expiration,
                            this.feeAmount,
                            this.feeAuthorization,
                            this.encryptedSenderMessage ? "0x".concat(this.encryptedSenderMessage) : "0x"
                        ]), {
                            value: this._defineValue(this.token, this.feeToken, this.totalAmount, this.feeAmount),
                            data: f,
                            to: this.escrowAddress
                        };
                    }, this.redeem = async (f)=>{
                        if (!f) throw new q(Nc("dest", String(f)), "DESTINATION_ADDRESS_NOT_PROVIDED");
                        if (!this.escrowAddress && "d" !== this.source) throw new Error(Bc(this.token, this.chainId));
                        if (!this.claimUrl) throw new Error("Tokens should be deposited before redeem");
                        if ("d" === this.source) {
                            const e = Ut(Fc(this.claimUrl)), t = await tc(e, f), n = await Wc(this.apiUrl, vd(this, Ad)[Ad], f, this.transferId, t), { tx_hash: r } = n;
                            return r;
                        }
                        const e = (t = this.claimUrl, n || (n = ac(t)), {
                            senderSig: n.senderSig,
                            linkKey: n.linkKey
                        });
                        var t, n;
                        if (!e) throw new Error("Link should have 'sg' (signature) or 's' (sender) param to be decoded");
                        const { senderSig: r, linkKey: a } = e, i = await tc(a, f);
                        if (r) {
                            const e = await Hc(this.apiUrl, vd(this, Ad)[Ad], f, this.sender.toLowerCase(), this.escrowAddress, this.transferId, i, r, this.token), { tx_hash: t } = e;
                            return t;
                        }
                        {
                            const e = await Wc(this.apiUrl, vd(this, Ad)[Ad], f, this.transferId, i, this.token, this.sender.toLowerCase(), this.escrowAddress), { tx_hash: t } = e;
                            return t;
                        }
                    }, this.getStatus = async ()=>{
                        if (!this.transferId) throw new Error(Cc("transferId", String(this.transferId)));
                        const { claim_link: f } = await Zc(this.apiUrl, vd(this, Ad)[Ad], this.transferId), e = wc(f.operations);
                        return f.status !== this.status && (this.status = f.status, this.operations = e), {
                            status: f.status,
                            operations: e
                        };
                    }, this._defineDomain = ()=>((f, e)=>{
                            if (f === de.polygon) return e === ue.usdcBridgedPolygon ? Tc : Ec;
                            if (f === de.avalanche && e === ue.usdcAvalanche) return xc;
                            if (f === de.optimism && e === ue.usdcOptimism) return Ac;
                            if (f === de.arbitrum && e === ue.usdcArbitrum) return Ic;
                            if (f === de.base) {
                                if (e === ue.usdcBase) return kc;
                                if (e === ue.eurcBase) return Oc;
                                if (e === ue.cbBTC) return _c;
                            }
                            return null;
                        })(this.chainId, this.token), this.decryptSenderMessage = async (f)=>{
                        let { signTypedData: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        if (!this.encryptedSenderMessage) return "";
                        const t = this.encryptedSenderMessage.slice(0, 2), n = Gc(t), { encryptionKey: r } = await Kc({
                            transferId: this.transferId,
                            signTypedData: e,
                            encryptionKeyLength: n,
                            chainId: this.chainId
                        });
                        return B({
                            encoded: this.encryptedSenderMessage,
                            symKey: r
                        });
                    }, this._defineValue = (f, e, t, n)=>e === f && f !== ic ? "0" : f === ic ? t : n, this._depositERC20 = async (f)=>{
                        let { sendTransaction: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                            data: t,
                            value: n,
                            to: r
                        });
                        await Jc(this.apiUrl, vd(this, Ad)[Ad], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount, this.feeToken, this.encryptedSenderMessage);
                        const i = {
                            linkKey: this.linkKey,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            sender: this.sender.toLowerCase(),
                            encryptionKey: this.encryptionKey
                        }, s = rc(this.baseUrl, i);
                        if (!s) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = s, this.deposited = !0, {
                            txHash: a,
                            transferId: this.transferId,
                            claimUrl: s
                        };
                    }, this._depositNative = async (f)=>{
                        let { sendTransaction: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                            data: t,
                            value: n,
                            to: r
                        });
                        await Jc(this.apiUrl, vd(this, Ad)[Ad], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount, this.feeToken, this.encryptedSenderMessage);
                        const i = {
                            linkKey: this.linkKey,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            sender: this.sender.toLowerCase(),
                            encryptionKey: this.encryptionKey
                        }, s = rc(this.baseUrl, i);
                        if (!s) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = s, this.deposited = !0, {
                            txHash: a,
                            transferId: this.transferId,
                            claimUrl: s
                        };
                    }, this._depositERC1155 = async (f)=>{
                        let { sendTransaction: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                            data: t,
                            value: n,
                            to: r
                        });
                        await qc(this.apiUrl, vd(this, Ad)[Ad], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.tokenId, this.amount, this.feeAmount, this.totalAmount, this.feeToken, this.encryptedSenderMessage);
                        const i = {
                            linkKey: this.linkKey,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            sender: this.sender.toLowerCase(),
                            encryptionKey: this.encryptionKey
                        }, s = rc(this.baseUrl, i);
                        if (!s) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = s, this.deposited = !0, {
                            txHash: a,
                            transferId: this.transferId,
                            claimUrl: s
                        };
                    }, this._depositERC721 = async (f)=>{
                        let { sendTransaction: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        const { data: t, value: n, to: r } = this.getDepositParams(), { hash: a } = await e({
                            data: t,
                            value: n,
                            to: r
                        });
                        await Yc(this.apiUrl, vd(this, Ad)[Ad], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, a, this.feeAuthorization, this.tokenId, this.feeAmount, this.totalAmount, this.feeToken, this.encryptedSenderMessage);
                        const i = {
                            linkKey: this.linkKey,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            sender: this.sender.toLowerCase(),
                            encryptionKey: this.encryptionKey
                        }, s = rc(this.baseUrl, i);
                        if (!s) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = s, this.deposited = !0, {
                            txHash: a,
                            transferId: this.transferId,
                            claimUrl: s
                        };
                    }, this.deposit = async (f)=>{
                        let { sendTransaction: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        if (!this.linkKey) throw new Error("You cannot make a deposit again after retrieving the link");
                        if (this.deposited) throw new Error("The deposit has already been made");
                        if (!this.escrowAddress) throw new Error(Cc("escrowAddress", String(this.escrowAddress)));
                        if (!this.expiration) throw new Error(Cc("expiration", String(this.expiration)));
                        if (!this.amount) throw new Error(Cc("amount", String(this.amount)));
                        if (!e) throw new q(Nc("sendTransaction", String(e)), "SEND_TRANSACTION_NOT_PROVIDED");
                        return "NATIVE" === this.tokenType ? this._depositNative({
                            sendTransaction: e
                        }) : "ERC20" === this.tokenType ? this._depositERC20({
                            sendTransaction: e
                        }) : "ERC721" === this.tokenType ? this._depositERC721({
                            sendTransaction: e
                        }) : this._depositERC1155({
                            sendTransaction: e
                        });
                    }, this.isDepositWithAuthorizationAvailable = (f)=>{
                        const e = dc[f.toLowerCase()];
                        return Boolean(e);
                    }, this.depositWithAuthorization = async (f)=>{
                        let e, t, { signTypedData: n, authConfig: r } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        if (r ? (t = r.domain, e = "ApproveWithAuthorization" === (a = r.authorizationMethod) ? le.approveWithAuthorization : "ReceiveWithAuthorizationEOA" === a ? le.receiveWithAuthorizationEOA : le.receiveWithAuthorization) : (e = dc[this.token], t = this._defineDomain()), !t) throw new Error(Rc());
                        var a;
                        if (!e) throw new q((this.token, "Stablecoin with address not supported for depositWithAuthorization method"), "TOKEN_NOT_SUPPORTED_FOR_DEPOSIT_WITH_AUTH");
                        if (!this.linkKey) throw new Error("You cannot make a deposit again after retrieving the link");
                        if (this.deposited) throw new Error("The deposit has already been made");
                        if (!n) throw new q(Nc("signTypedData", String(n)), "SIGN_TYPED_DATA_NOT_PROVIDED");
                        if ("NATIVE" === this.tokenType) throw new Error("You can use 'depositWithAuthorization' method only for ERC20 tokens. Use 'deposit' method instead");
                        const [i, s] = (()=>{
                            const f = Math.floor(Date.now() / 1e3);
                            return [
                                f - 3600,
                                f + 86400
                            ];
                        })();
                        if (!this.escrowAddress) throw new Error(Cc("escrowAddress", String(this.escrowAddress)));
                        if (!this.expiration) throw new Error(Cc("expiration", String(this.expiration)));
                        if (!this.amount) throw new Error(Cc("amount", String(this.amount)));
                        const o = await async function(f, e, t, n, r, a, i, s, o, b, c, d, u, l) {
                            return l ? "ApproveWithAuthorization" === l ? Jn(f, e, t, n, r, a, i, s, d, o) : Yn(f, e, t, n, r, a, i, s, d, o, u) : b === de.polygon && c === ue.usdcBridgedPolygon ? Jn(f, e, t, n, r, a, i, s, d, o) : Yn(f, e, t, n, r, a, i, s, d, o, u);
                        }(n, this.sender.toLowerCase(), this.escrowAddress, this.totalAmount, i, s, this.transferId, String(this.expiration), t, this.chainId, this.token, this.feeAmount, e, null == r ? void 0 : r.authorizationMethod), b = await $c(this.apiUrl, vd(this, Ad)[Ad], this.token, this.tokenType, this.sender.toLowerCase(), this.escrowAddress, this.transferId, this.expiration, o, e, this.feeAuthorization, this.amount, this.feeAmount, this.totalAmount, this.encryptedSenderMessage), { tx_hash: c } = b, d = {
                            linkKey: this.linkKey,
                            transferId: this.transferId,
                            chainId: this.chainId,
                            sender: this.sender.toLowerCase(),
                            encryptionKey: this.encryptionKey
                        }, u = rc(this.baseUrl, d);
                        if (!u) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = u, this.deposited = !0, {
                            txHash: c,
                            claimUrl: this.claimUrl,
                            transferId: this.transferId
                        };
                    }, this.getCurrentFee = async (f)=>{
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        return await Qc(this.apiUrl, vd(this, Ad)[Ad], this.token, this.sender.toLowerCase(), this.tokenType, this.transferId, this.expiration, f, this.tokenId);
                    }, this.updateAmount = async (f)=>{
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        if ("ERC721" === this.tokenType) throw new q("Cannot update amount for ERC721 token", "CANNOT_UPDATE_AMOUNT_FOR_ERC721");
                        const { fee_amount: e, total_amount: t, min_transfer_amount: n, max_transfer_amount: r, fee_authorization: a, fee_token: i } = await this.getCurrentFee(f);
                        if (H(f) < H(n)) throw new q(Uc(n.toString()), "MIN_LIMIT_FAILED");
                        if (H(f) > H(r)) throw new q(Lc(r.toString()), "MAX_LIMIT_FAILED");
                        if (!this.linkKey) {
                            if ("created" === (await this.getStatus()).status) return this.amount = f, this.feeAmount = e, this.totalAmount = t, this.feeAuthorization = a, this.feeToken = i.toLowerCase(), {
                                amount: f,
                                feeAmount: e,
                                totalAmount: t,
                                feeToken: i
                            };
                            throw new Error("Cannot update amount after deposit");
                        }
                        if (this.deposited) throw new Error("Cannot update amount after deposit");
                        return this.amount = f, this.feeAmount = e, this.totalAmount = t, this.feeAuthorization = a, this.feeToken = i.toLowerCase(), {
                            amount: f,
                            feeAmount: e,
                            totalAmount: t,
                            feeToken: i
                        };
                    }, this._getEscrowPaymentDomain = ()=>{
                        if (!this.escrowAddress) throw new Error(Bc(this.token, this.chainId));
                        const f = hc(this.escrowAddress);
                        if (!f) throw new Error("Version not found for the provided escrow contract address");
                        return {
                            name: "LinkdropEscrow",
                            version: f,
                            chainId: this.chainId,
                            verifyingContract: this.escrowAddress
                        };
                    }, this.generateClaimUrl = async (f)=>{
                        let { signTypedData: e } = f;
                        if (vd(this, xd)[xd]) throw new Error("This link can only be redeemed");
                        if (!this.getRandomBytes) throw new Error(Cc("getRandomBytes", String(this.getRandomBytes)));
                        if (!e) throw new q(Nc("signTypedData", String(e)), "SIGN_TYPED_DATA_NOT_PROVIDED");
                        if (!this.transferId) throw new Error(Cc("transferId", String(this.transferId)));
                        const t = this._getEscrowPaymentDomain(), n = await (async (f, e, t, n)=>{
                            wr.register(e);
                            const r = ec.createRandom(), a = {
                                linkKeyId: r.address,
                                transferId: t
                            }, i = await f(n, {
                                Transfer: [
                                    {
                                        name: "linkKeyId",
                                        type: "address"
                                    },
                                    {
                                        name: "transferId",
                                        type: "address"
                                    }
                                ]
                            }, a);
                            return {
                                linkKey: r.privateKey,
                                linkKeyId: r.address,
                                senderSig: i
                            };
                        })(e, this.getRandomBytes, this.transferId, t), { linkKey: r, senderSig: a } = n, i = {
                            linkKey: r,
                            senderSig: a,
                            transferId: this.transferId,
                            chainId: this.chainId
                        };
                        if (this.encryptedSenderMessage) {
                            const f = this.encryptedSenderMessage.slice(0, 2), t = Gc(f), { encryptionKeyLinkParam: n } = await Kc({
                                transferId: this.transferId,
                                signTypedData: e,
                                encryptionKeyLength: t,
                                chainId: this.chainId
                            });
                            i.encryptionKey = n;
                        }
                        const s = rc(this.baseUrl, i);
                        if (!s) throw new Error("Link should have senderSig or sender to be created");
                        return this.claimUrl = s, {
                            claimUrl: this.claimUrl,
                            transferId: this.transferId
                        };
                    }, this.getRandomBytes = R, !u) throw new q(Nc("sender", String(u)), "SENDER_NOT_PROVIDED");
                    if (this.deployment = j, this.encryptedSenderMessage = K, this.senderMessage = z || "", vd(this, xd)[xd] = Boolean(D), "ERC721" === O || "ERC1155" === O) {
                        if (!L) throw new q(Nc("tokenId", String(L)), "TOKEN_ID_NOT_PROVIDED");
                        this.tokenId = L;
                    }
                    if (F && (this.status = F), this.source = M || "p2p", this.sender = u.toLowerCase(), this.feeAmount = w, this.totalAmount = v, N && (this.feeAuthorization = N), C && (this.feeToken = C.toLowerCase()), this.pendingBlocks = g, this.pendingTxSubmittedAt = m, this.pendingTxSubmittedBn = y, this.pendingTxs = p, this.weiAmount = e, this.additionalWalletsOn = r, this.preferredWalletOn = a, this.claimingFinishedAutoRedirect = i, this.claimingFinishedButtonOn = s, this.claimingFinishedButtonURL = o, this.claimingFinishedButtonTitle = b, this.claimingFinishedDescription = c, this.tokenImage = t, this.tokenName = n, this.wallet = d, "ERC721" !== O && !h) throw new q(Nc("amount", String(h)), "AMOUNT_NOT_PROVIDED");
                    if (this.amount = h, this.operations = P || [], this.expiration = E, !T) throw new q(Nc("chainId", String(T)), "CHAIN_ID_NOT_PROVIDED");
                    if (this.chainId = T, this.apiUrl = A, vd(this, Ad)[Ad] = I, !O) throw new q(Nc("tokenType", String(O)), "TOKEN_TYPE_NOT_PROVIDED");
                    if (this.tokenType = O, "NATIVE" === O) this.token = ic;
                    else {
                        if (!l) throw new q(Nc("token", String(l)), "TOKEN_NOT_PROVIDED");
                        this.token = l.toLowerCase();
                    }
                    if (this.escrowAddress = (null == _ ? void 0 : _.toLowerCase()) || ((f, e, t)=>f && e ? "CBW" === t ? "ERC1155" === e || "ERC721" === e ? bc || null : sc || null : "ERC1155" === e || "ERC721" === e ? cc : oc : null)(this.chainId, this.tokenType, this.deployment), !this.escrowAddress && "d" !== this.source) throw new Error(Bc(this.token, this.chainId));
                    if ("d" !== this.source && !((f, e, t)=>!!(f && e && ("CBW" === t ? "ERC1155" === e || "ERC721" === e ? f === bc || hc(f) : f === sc || hc(f) : "ERC1155" === e || "ERC721" === e ? f === cc || hc(f) : f === oc || hc(f))))(this.escrowAddress, this.tokenType, this.deployment)) throw new Error("Escrow contract address is not correct. Please check chainId and token address");
                    if (!k) throw new q(Nc("transferId", String(k)), "TRANSFER_ID_NOT_PROVIDED");
                    this.transferId = k.toLowerCase(), S && (this.linkKey = S), U && (this.claimUrl = U), this.baseUrl = x || "http://localhost:3000";
                }
            };
            var kd = t(299);
            function Od(f, e) {
                var t = Object.keys(f);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(f);
                    e && (n = n.filter(function(e) {
                        return Object.getOwnPropertyDescriptor(f, e).enumerable;
                    })), t.push.apply(t, n);
                }
                return t;
            }
            function _d(f) {
                for(var e = 1; e < arguments.length; e++){
                    var t = null != arguments[e] ? arguments[e] : {};
                    e % 2 ? Od(Object(t), !0).forEach(function(e) {
                        Pd(f, e, t[e]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(f, Object.getOwnPropertyDescriptors(t)) : Od(Object(t)).forEach(function(e) {
                        Object.defineProperty(f, e, Object.getOwnPropertyDescriptor(t, e));
                    });
                }
                return f;
            }
            function Pd(f, e, t) {
                return (e = function(f) {
                    var e = function(f) {
                        if ("object" != typeof f || !f) return f;
                        var e = f[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var t = e.call(f, "string");
                            if ("object" != typeof t) return t;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(f);
                    }(f);
                    return "symbol" == typeof e ? e : e + "";
                }(e)) in f ? Object.defineProperty(f, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : f[e] = t, f;
            }
            function Sd(f, e) {
                if (!({}).hasOwnProperty.call(f, e)) throw new TypeError("attempted to use private field on non-instance");
                return f;
            }
            var Rd = 0;
            function Nd(f) {
                return "__private_" + Rd++ + "_" + f;
            }
            var Cd = Nd("apiKey");
            const Ud = class {
                constructor(f){
                    let { apiKey: e, baseUrl: t, apiUrl: n, deployment: r, getRandomBytes: a } = f;
                    if (Object.defineProperty(this, Cd, {
                        writable: !0,
                        value: void 0
                    }), this.baseUrl = void 0, this.apiUrl = void 0, this.deployment = "LD", this.getRandomBytes = void 0, this.getVersionFromClaimUrl = (f)=>((f)=>{
                            const e = f.indexOf("#"), t = f.substring(e + 1).split("?")[1], n = vc(t).v;
                            if (!n) throw new Error('Version parameter "v" not found in URL');
                            return n;
                        })(f), this.createClaimLink = async (f)=>{
                        let { token: e, expiration: t, chainId: n, amount: r, from: a, tokenType: i, tokenId: s } = f;
                        if (!n) throw new q(Nc("chainId", String(n)), "CHAIN_ID_NOT_PROVIDED");
                        const o = uc(n, this.apiUrl);
                        if (!o) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                        if (!a) throw new q(Nc("from", String(a)), "FROM_NOT_PROVIDED");
                        if ("ERC721" !== i && !r) throw new q(Nc("amount", String(r)), "AMOUNT_NOT_PROVIDED");
                        if (!e && "NATIVE" !== i) throw new q(Nc("token", String(e)), "TOKEN_NOT_PROVIDED");
                        return this._initializeClaimLink({
                            token: e || ic,
                            expiration: t || Math.floor(Date.now() / 1e3 + 1296e3),
                            chainId: n,
                            amount: r || "1",
                            sender: a.toLowerCase(),
                            apiUrl: o,
                            apiKey: Sd(this, Cd)[Cd],
                            tokenType: i,
                            baseUrl: this.baseUrl,
                            tokenId: s,
                            source: "p2p",
                            deployment: this.deployment,
                            wallet: null,
                            claimingFinishedDescription: null,
                            claimingFinishedButtonTitle: null,
                            claimingFinishedButtonURL: null,
                            claimingFinishedButtonOn: null,
                            claimingFinishedAutoRedirect: null,
                            preferredWalletOn: null,
                            additionalWalletsOn: null,
                            weiAmount: null,
                            tokenImage: null,
                            tokenName: null
                        });
                    }, this.getSenderHistory = async (f)=>{
                        let { onlyActive: e, chainId: t, sender: n, limit: r, offset: a, token: i } = f;
                        const s = uc(t, this.apiUrl);
                        if (!s) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                        const { claim_links: o, result_set: b } = await fd(s, Sd(this, Cd)[Cd], n, e, a, r, i);
                        return {
                            claimLinks: o.map((f)=>{
                                const e = _d(_d({}, f), {}, {
                                    transferId: f.transfer_id,
                                    tokenType: f.token_type,
                                    chainId: f.chain_id,
                                    totalAmount: f.total_amount,
                                    operations: wc(f.operations),
                                    tokenId: f.token_id,
                                    feeToken: f.fee_token,
                                    feeAmount: f.fee_amount,
                                    createdAt: f.created_at,
                                    updatedAt: f.updated_at,
                                    encryptedSenderMessage: f.encrypted_sender_message
                                });
                                return delete e.transfer_id, delete e.created_at, delete e.updated_at, delete e.total_amount, delete e.chain_id, delete e.token_type, delete e.token_id, delete e.fee_token, delete e.fee_amount, delete e.encrypted_sender_message, e;
                            }),
                            resultSet: b
                        };
                    }, this.getVersionFromEscrowContract = (f)=>{
                        const e = hc(f);
                        if (!e) throw new Error("Version not found for the provided escrow contract address");
                        return e;
                    }, this.getLinkSourceFromClaimUrl = (f)=>((f)=>f.includes("src=d") ? "d" : "p2p")(f), this.getLimits = async (f)=>{
                        let { token: e, chainId: t, tokenType: n } = f;
                        const r = uc(t, this.apiUrl);
                        if (!r) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                        if ("ERC721" === n || "ERC1155" === n) throw new q("Cannot fetch limits for ERC1155 or ERC721 tokens", "LIMITS_NOT_AVAILABLE_FOR_ERC721_AND_ERC1155");
                        let a = e;
                        if (a !== ic && !a) throw new q(Nc("token", String(e)), "TOKEN_NOT_PROVIDED");
                        const i = await ed(r, Sd(this, Cd)[Cd], a, n);
                        return {
                            minTransferAmount: i.min_transfer_amount,
                            maxTransferAmount: i.max_transfer_amount,
                            minTransferAmountUSD: i.min_transfer_amount_usd,
                            maxTransferAmountUSD: i.max_transfer_amount_usd
                        };
                    }, this._initializeClaimLink = async (f)=>{
                        let e, t = f.transferId, n = f.feeAmount, r = f.totalAmount, a = f.feeAuthorization, i = f.feeToken, s = f.pendingTxs, o = f.pendingBlocks, b = f.pendingTxSubmittedBn, c = f.pendingTxSubmittedAt, d = f.encryptedSenderMessage, u = f.senderMessage;
                        if (t || (e = await (async (f)=>(wr.register(f), ec.createRandom()))(this.getRandomBytes), t = e.address), !n || !r) {
                            const e = await this._getCurrentFee(f.apiUrl, f.token, f.tokenType, f.sender, t, f.expiration, "ERC721" === f.tokenType ? "1" : f.amount, f.tokenId);
                            if (n = e.fee_amount, r = e.total_amount, a = e.fee_authorization, i = e.fee_token, s = e.pending_txs, o = e.pending_blocks, b = e.pending_tx_submitted_bn, c = e.pending_tx_submitted_at, "NATIVE" === f.tokenType || "ERC20" === f.tokenType) {
                                if (H(f.amount) < H(e.min_transfer_amount)) throw new q(Uc(e.min_transfer_amount.toString()), "MIN_LIMIT_FAILED");
                                if (H(f.amount) > H(e.max_transfer_amount)) throw new q(Lc(e.max_transfer_amount.toString()), "MAX_LIMIT_FAILED");
                            }
                        }
                        if (!t) throw new Error(Dc("transferId", "string", t));
                        if (!i) throw new Error(Dc("feeToken", "string", i));
                        if (!r) throw new Error(Dc("totalAmount", "string", r));
                        if (!n) throw new Error(Dc("feeAmount", "string", n));
                        return new Id(_d(_d({}, f), {}, {
                            transferId: t,
                            getRandomBytes: this.getRandomBytes,
                            linkKey: e ? e.privateKey : null,
                            feeAmount: n,
                            feeToken: i,
                            feeAuthorization: a,
                            totalAmount: r,
                            pendingTxs: s,
                            pendingTxSubmittedBn: b,
                            pendingTxSubmittedAt: c,
                            pendingBlocks: o,
                            encryptedSenderMessage: d,
                            senderMessage: u
                        }));
                    }, this._getCurrentFee = async (f, e, t, n, r, a, i, s)=>await Qc(f, Sd(this, Cd)[Cd], e, n.toLowerCase(), t, r, a, i, s), this.getClaimLink = async (f)=>{
                        const e = this.getLinkSourceFromClaimUrl(f);
                        if ("d" === e) {
                            const n = ((f)=>{
                                const e = new URL(f);
                                if (e.hash || e.pathname.startsWith("/redeem/0x")) {
                                    if (e.search) return e.pathname.replace("/redeem/", "");
                                    {
                                        const e = Ut(Fc(f));
                                        return new ec(e).address;
                                    }
                                }
                                {
                                    const e = Ut(Fc(f));
                                    return new ec(e).address;
                                }
                            })(f), r = ((f)=>{
                                const e = new URL(f);
                                if (e.hash || e.pathname.startsWith("/redeem/0x")) {
                                    if (e.search) {
                                        const f = vc(e.search).c;
                                        return f ? Number(f) : de.polygon;
                                    }
                                    {
                                        const f = e.hash.split("?")[1], t = vc(f);
                                        return Number(t.c);
                                    }
                                }
                                {
                                    const f = vc(e.search).c;
                                    return f ? Number(f) : de.polygon;
                                }
                            })(f), a = (t = f).includes("dev.") || t.includes("localhost") || t.includes("vercel.app") ? "https://escrow-api.linkdrop.io/staging" : "https://escrow-api.linkdrop.io/dashboard", { claim_link: i } = await Zc(a, Sd(this, Cd)[Cd], n), { token: s, expiration: o, amount: b, token_type: c, operations: d, sender: u, fee_token: l, fee_amount: h, total_amount: p, escrow: y, token_id: m, status: g, claiming_finished_auto_redirect: w, claiming_finished_button_on: v, claiming_finished_button_title: E, claiming_finished_button_url: T, claiming_finished_description: A, token_image: x, token_name: I, wei_amount: k, wallet: O, preferred_wallet_on: _, additional_wallets_on: P, encrypted_sender_message: S } = i;
                            if (!uc(r, this.apiUrl)) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                            const R = {
                                token: s,
                                expiration: o,
                                chainId: r,
                                feeAmount: h,
                                feeToken: l,
                                totalAmount: p,
                                amount: b,
                                sender: u,
                                apiUrl: a,
                                apiKey: Sd(this, Cd)[Cd],
                                transferId: n.toLowerCase(),
                                claimUrl: f,
                                tokenId: m,
                                operations: wc(d),
                                tokenType: c,
                                baseUrl: this.baseUrl,
                                escrowAddress: y,
                                forRecipient: !0,
                                status: g,
                                source: e,
                                deployment: this.deployment,
                                wallet: O,
                                claimingFinishedDescription: A,
                                claimingFinishedButtonTitle: E,
                                claimingFinishedButtonURL: T,
                                claimingFinishedButtonOn: v,
                                claimingFinishedAutoRedirect: w,
                                tokenImage: x,
                                tokenName: I,
                                preferredWalletOn: _,
                                additionalWalletsOn: P,
                                weiAmount: k,
                                encryptedSenderMessage: S
                            };
                            return this._initializeClaimLink(R);
                        }
                        var t;
                        const { transferId: n, chainId: r, encryptionKey: a } = ac(f), i = uc(r, this.apiUrl);
                        if (!i) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                        const { claim_link: s } = await Zc(i, Sd(this, Cd)[Cd], n), { token: o, expiration: b, amount: c, token_type: d, operations: u, sender: l, fee_token: h, fee_amount: p, total_amount: y, escrow: m, token_id: g, status: w, claiming_finished_auto_redirect: v, claiming_finished_button_on: E, claiming_finished_button_title: T, claiming_finished_button_url: A, claiming_finished_description: x, token_image: I, token_name: k, wei_amount: O, wallet: _, preferred_wallet_on: P, additional_wallets_on: S, encrypted_sender_message: R } = s;
                        if ("3" === hc(m)) {
                            const e = new kd.LinkdropP2P({
                                baseUrl: this.baseUrl,
                                apiKey: String(Sd(this, Cd)[Cd]),
                                deployment: this.deployment,
                                getRandomBytes: this.getRandomBytes
                            });
                            return await e.getClaimLink(f);
                        }
                        const N = {
                            token: o,
                            expiration: b,
                            chainId: r,
                            feeAmount: p,
                            feeToken: h,
                            totalAmount: y,
                            amount: c,
                            sender: l,
                            apiUrl: i,
                            apiKey: Sd(this, Cd)[Cd],
                            transferId: n.toLowerCase(),
                            claimUrl: f,
                            tokenId: g,
                            operations: wc(u),
                            tokenType: d,
                            baseUrl: this.baseUrl,
                            escrowAddress: m,
                            forRecipient: !0,
                            status: w,
                            source: e,
                            deployment: this.deployment,
                            wallet: _,
                            claimingFinishedDescription: x,
                            claimingFinishedButtonTitle: T,
                            claimingFinishedButtonURL: A,
                            claimingFinishedButtonOn: E,
                            claimingFinishedAutoRedirect: v,
                            tokenImage: I,
                            tokenName: k,
                            preferredWalletOn: P,
                            additionalWalletsOn: S,
                            weiAmount: O,
                            encryptedSenderMessage: R,
                            encryptionKey: a,
                            senderMessage: R && a ? jc({
                                message: R,
                                encryptionKey: a,
                                getRandomBytes: this.getRandomBytes
                            }) : void 0
                        };
                        return this._initializeClaimLink(N);
                    }, this.retrieveClaimLink = async (f)=>{
                        let { chainId: e, txHash: t, transferId: n, customApiHost: r } = f;
                        const a = r || uc(e, this.apiUrl);
                        if (!a) throw new q(Rc(), "CHAIN_NOT_SUPPORTED");
                        if (n) {
                            const { claim_link: f } = await Zc(a, Sd(this, Cd)[Cd], n), { token: t, expiration: i, amount: s, token_type: o, operations: b, fee_token: c, fee_amount: d, total_amount: u, sender: l, status: h, token_id: p, escrow: y, claiming_finished_auto_redirect: m, claiming_finished_button_on: g, claiming_finished_button_title: w, claiming_finished_button_url: v, claiming_finished_description: E, token_image: T, token_name: A, wei_amount: x, wallet: I, preferred_wallet_on: k, additional_wallets_on: O, encrypted_sender_message: _ } = f, P = {
                                token: t,
                                expiration: i,
                                chainId: e,
                                amount: s,
                                sender: l.toLowerCase(),
                                apiUrl: a,
                                apiKey: Sd(this, Cd)[Cd],
                                tokenType: o,
                                transferId: n.toLowerCase(),
                                baseUrl: this.baseUrl,
                                operations: wc(b),
                                feeAmount: d,
                                feeToken: c,
                                totalAmount: u,
                                status: h,
                                escrowAddress: y,
                                tokenId: p,
                                source: r ? "d" : "p2p",
                                deployment: this.deployment,
                                wallet: I,
                                claimingFinishedDescription: E,
                                claimingFinishedButtonTitle: w,
                                claimingFinishedButtonURL: v,
                                claimingFinishedButtonOn: g,
                                claimingFinishedAutoRedirect: m,
                                tokenImage: T,
                                tokenName: A,
                                preferredWalletOn: k,
                                additionalWalletsOn: O,
                                weiAmount: x,
                                encryptedSenderMessage: _
                            };
                            return this._initializeClaimLink(P);
                        }
                        if (t) {
                            const { claim_link: f } = await Xc(a, Sd(this, Cd)[Cd], t), { token: n, expiration: r, amount: i, sender: s, transfer_id: o, token_type: b, operations: c, fee_token: d, fee_amount: u, total_amount: l, status: h, token_id: p, escrow: y, claiming_finished_auto_redirect: m, claiming_finished_button_on: g, claiming_finished_button_title: w, claiming_finished_button_url: v, claiming_finished_description: E, token_image: T, token_name: A, wei_amount: x, wallet: I, preferred_wallet_on: k, additional_wallets_on: O, encrypted_sender_message: _ } = f, P = {
                                token: n,
                                expiration: r,
                                chainId: e,
                                amount: i,
                                sender: s.toLowerCase(),
                                apiUrl: a,
                                apiKey: Sd(this, Cd)[Cd],
                                transferId: o.toLowerCase(),
                                tokenType: b,
                                operations: wc(c),
                                baseUrl: this.baseUrl,
                                feeAmount: u,
                                feeToken: d,
                                tokenId: p,
                                totalAmount: l,
                                status: h,
                                escrow: y,
                                source: "p2p",
                                deployment: this.deployment,
                                wallet: I,
                                claimingFinishedDescription: E,
                                claimingFinishedButtonTitle: w,
                                claimingFinishedButtonURL: v,
                                claimingFinishedButtonOn: g,
                                claimingFinishedAutoRedirect: m,
                                tokenImage: T,
                                tokenName: A,
                                preferredWalletOn: k,
                                additionalWalletsOn: O,
                                weiAmount: x,
                                encryptedSenderMessage: _
                            };
                            if ("3" === hc(y)) {
                                const f = new kd.LinkdropP2P({
                                    baseUrl: this.baseUrl,
                                    apiKey: String(Sd(this, Cd)[Cd]),
                                    getRandomBytes: this.getRandomBytes,
                                    deployment: this.deployment
                                });
                                return await f.retrieveClaimLink({
                                    txHash: t,
                                    chainId: e
                                });
                            }
                            return this._initializeClaimLink(P);
                        }
                        throw new q("At least one of the following arguments should be provided: ".concat([
                            "txHash",
                            "transferId"
                        ].join(", ")));
                    }, Sd(this, Cd)[Cd] = e || null, r) {
                        if ("CBW" !== r && "LD" !== r) throw new q("Deployment is not valid. Use LD instead or remove it", "INVALID_DEPLOYMENT_PROPERTY");
                        this.deployment = r;
                    }
                    if (n && (this.apiUrl = n), !t) throw new q(Nc("baseUrl", String(t)), "BASE_URL_NOT_PROVIDED");
                    if (this.baseUrl = t, !a) throw new q(Nc("getRandomBytes", String(a)), "GET_RANDOM_BYTES_NOT_PROVIDED");
                    this.getRandomBytes = a;
                }
            };
        })(), n;
    })());
}}),

};

//# sourceMappingURL=node_modules_linkdrop-sdk_dist_index_e586c5.js.map