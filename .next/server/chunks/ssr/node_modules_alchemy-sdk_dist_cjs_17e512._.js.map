{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"utils.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/logger/lib.esm/_version.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/logger/lib.esm/index.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/strings/lib.esm/_version.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/strings/lib.esm/utf8.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/strings/lib.esm/idna.js"],"sourcesContent":["export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"strings/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map","\"use strict\";\nimport { toUtf8CodePoints, _toUtf8String, UnicodeNormalizationForm } from \"./utf8\";\nfunction bytes2(data) {\n    if ((data.length % 4) !== 0) {\n        throw new Error(\"bad data\");\n    }\n    let result = [];\n    for (let i = 0; i < data.length; i += 4) {\n        result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n}\nfunction createTable(data, func) {\n    if (!func) {\n        func = function (value) { return [parseInt(value, 16)]; };\n    }\n    let lo = 0;\n    let result = {};\n    data.split(\",\").forEach((pair) => {\n        let comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n    });\n    return result;\n}\nfunction createRangeTable(data) {\n    let hi = 0;\n    return data.split(\",\").map((v) => {\n        let comps = v.split(\"-\");\n        if (comps.length === 1) {\n            comps[1] = \"0\";\n        }\n        else if (comps[1] === \"\") {\n            comps[1] = \"1\";\n        }\n        let lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return { l: lo, h: hi };\n    });\n}\nfunction matchMap(value, ranges) {\n    let lo = 0;\n    for (let i = 0; i < ranges.length; i++) {\n        let range = ranges[i];\n        lo += range.l;\n        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {\n            if (range.e && range.e.indexOf(value - lo) !== -1) {\n                continue;\n            }\n            return range;\n        }\n    }\n    return null;\n}\nconst Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n// @TODO: Make this relative...\nconst Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((v) => parseInt(v, 16));\nconst Table_B_2_ranges = [\n    { h: 25, s: 32, l: 65 },\n    { h: 30, s: 32, e: [23], l: 127 },\n    { h: 54, s: 1, e: [48], l: 64, d: 2 },\n    { h: 14, s: 1, l: 57, d: 2 },\n    { h: 44, s: 1, l: 17, d: 2 },\n    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },\n    { h: 16, s: 1, l: 68, d: 2 },\n    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },\n    { h: 26, s: 32, e: [17], l: 435 },\n    { h: 22, s: 1, l: 71, d: 2 },\n    { h: 15, s: 80, l: 40 },\n    { h: 31, s: 32, l: 16 },\n    { h: 32, s: 1, l: 80, d: 2 },\n    { h: 52, s: 1, l: 42, d: 2 },\n    { h: 12, s: 1, l: 55, d: 2 },\n    { h: 40, s: 1, e: [38], l: 15, d: 2 },\n    { h: 14, s: 1, l: 48, d: 2 },\n    { h: 37, s: 48, l: 49 },\n    { h: 148, s: 1, l: 6351, d: 2 },\n    { h: 88, s: 1, l: 160, d: 2 },\n    { h: 15, s: 16, l: 704 },\n    { h: 25, s: 26, l: 854 },\n    { h: 25, s: 32, l: 55915 },\n    { h: 37, s: 40, l: 1247 },\n    { h: 25, s: -119711, l: 53248 },\n    { h: 25, s: -119763, l: 52 },\n    { h: 25, s: -119815, l: 52 },\n    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },\n    { h: 25, s: -119919, l: 52 },\n    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },\n    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },\n    { h: 25, s: -120075, l: 52 },\n    { h: 25, s: -120127, l: 52 },\n    { h: 25, s: -120179, l: 52 },\n    { h: 25, s: -120231, l: 52 },\n    { h: 25, s: -120283, l: 52 },\n    { h: 25, s: -120335, l: 52 },\n    { h: 24, s: -119543, e: [17], l: 56 },\n    { h: 24, s: -119601, e: [17], l: 58 },\n    { h: 24, s: -119659, e: [17], l: 58 },\n    { h: 24, s: -119717, e: [17], l: 58 },\n    { h: 24, s: -119775, e: [17], l: 58 }\n];\nconst Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\nconst Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\nconst Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\nconst Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nfunction flatten(values) {\n    return values.reduce((accum, value) => {\n        value.forEach((value) => { accum.push(value); });\n        return accum;\n    }, []);\n}\nexport function _nameprepTableA1(codepoint) {\n    return !!matchMap(codepoint, Table_A_1_ranges);\n}\nexport function _nameprepTableB2(codepoint) {\n    let range = matchMap(codepoint, Table_B_2_ranges);\n    if (range) {\n        return [codepoint + range.s];\n    }\n    let codes = Table_B_2_lut_abs[codepoint];\n    if (codes) {\n        return codes;\n    }\n    let shift = Table_B_2_lut_rel[codepoint];\n    if (shift) {\n        return [codepoint + shift[0]];\n    }\n    let complex = Table_B_2_complex[codepoint];\n    if (complex) {\n        return complex;\n    }\n    return null;\n}\nexport function _nameprepTableC(codepoint) {\n    return !!matchMap(codepoint, Table_C_ranges);\n}\nexport function nameprep(value) {\n    // This allows platforms with incomplete normalize to bypass\n    // it for very basic names which the built-in toLowerCase\n    // will certainly handle correctly\n    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n        return value.toLowerCase();\n    }\n    // Get the code points (keeping the current normalization)\n    let codes = toUtf8CodePoints(value);\n    codes = flatten(codes.map((code) => {\n        // Substitute Table B.1 (Maps to Nothing)\n        if (Table_B_1_flags.indexOf(code) >= 0) {\n            return [];\n        }\n        if (code >= 0xfe00 && code <= 0xfe0f) {\n            return [];\n        }\n        // Substitute Table B.2 (Case Folding)\n        let codesTableB2 = _nameprepTableB2(code);\n        if (codesTableB2) {\n            return codesTableB2;\n        }\n        // No Substitution\n        return [code];\n    }));\n    // Normalize using form KC\n    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);\n    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n    codes.forEach((code) => {\n        if (_nameprepTableC(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n        }\n    });\n    // Prohibit Unassigned Code Points (Table A.1)\n    codes.forEach((code) => {\n        if (_nameprepTableA1(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n        }\n    });\n    // IDNA extras\n    let name = _toUtf8String(codes);\n    // IDNA: 4.2.3.1\n    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n        throw new Error(\"invalid hyphen\");\n    }\n    return name;\n}\n//# sourceMappingURL=idna.js.map"],"names":["version","bytes","arrayify"],"mappings":"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","ignoreList":[0,1,2,3,4]}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 797, "column": 0}, "map": {"version":3,"file":"alchemy-provider-6f54d97b.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/request-batcher.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    let connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Add user provided overrides if they exist.\n    if (config.connectionInfoOverrides) {\n      connection = {\n        ...connection,\n        ...config.connectionInfoOverrides\n      };\n    }\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n\n    this.modifyFormatter();\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  /**\n   * Overrides the base `Formatter` class inherited from ethers to support\n   * returning custom fields in Ethers response types.\n   *\n   * For context, ethers has a `Formatter` class that is used to format the\n   * response from a JSON-RPC request. Any fields that are not defined in the\n   * `Formatter` class are removed from the returned response. By modifying the\n   * `Formatter` class in this method, we can add support for fields that are\n   * not defined in ethers.\n   */\n  private modifyFormatter(): void {\n    this.formatter.formats['receiptLog']['removed'] = val => {\n      if (typeof val === 'boolean') {\n        return val;\n      }\n      return undefined;\n    };\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"],"names":["JsonRpcProvider","EthersNetwork","fetchJson","DEFAULT_ALCHEMY_API_KEY","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","Network","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","logWarn","deepCopy"],"mappings":"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","ignoreList":[0,1]}},
    {"offset": {"line": 1143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1148, "column": 0}, "map": {"version":3,"file":"alchemy-websocket-provider-c84f84b9.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts"],"sourcesContent":["import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n"],"names":["fromHex","toHex","WebSocketProvider","AlchemyProvider","VERSION","SturdyWebSocket","EthersNetwork","__awaiter","noop","CustomNetworks","getNetworkFromEthers","isAlchemyEvent","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","ALCHEMY_EVENT_TYPES","DEFAULT_ALCHEMY_API_KEY","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","AlchemySubscription","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","BigNumber"],"mappings":"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","ignoreList":[0,1]}},
    {"offset": {"line": 2261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2266, "column": 0}, "map": {"version":3,"file":"index-6926ea6b.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/types/types.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/types/nft-types.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/types/prices-types.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/util/const.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy-config.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/logger/lib.esm/_version.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/logger/lib.esm/index.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/properties/lib.esm/_version.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/node_modules/%40ethersproject/properties/lib.esm/index.js","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/util.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/util/util.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/core-api.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/core-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/debug-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/util/inputSanitization.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/util/logger.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/version.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/util/sendRest.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/backoff.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/dispatch.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/nft-api.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/nft-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/notify-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/prices-api.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/prices-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/transact-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/internal-types.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/internal/ethers-event.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/websocket-namespace.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy-wallet.ts","file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/alchemy-sdk/src/api/alchemy-contract.ts"],"sourcesContent":["import {\n  BlockTag,\n  EventType,\n  TransactionReceipt\n} from '@ethersproject/abstract-provider';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { ConnectionInfo } from '@ethersproject/web';\n\nimport {\n  ERC1155Metadata,\n  NftRefreshState,\n  NftTokenType,\n  RawContract\n} from './nft-types';\n\nexport * from './ethers-types';\n\n// TODO: separate this file into other files.\n\n/**\n * Options object used to configure the Alchemy SDK.\n *\n * @public\n */\nexport interface AlchemySettings {\n  /**\n   * The Alchemy API key that can be found in the Alchemy dashboard.\n   *\n   * Defaults to: \"demo\" (a rate-limited public API key)\n   */\n  apiKey?: string;\n\n  /**\n   * The name of the network. Once configured, the network cannot be changed. To\n   * use a different network, instantiate a new `Alchemy` instance.\n   *\n   * Defaults to: Network.ETH_MAINNET\n   */\n  network?: Network;\n\n  /** The maximum number of retries to attempt if a request fails. Defaults to 5. */\n  maxRetries?: number;\n\n  /**\n   * Optional URL endpoint to use for all requests. Setting this field will\n   * override the URL generated by the {@link network} and {@link apiKey} fields.\n   *\n   * This field is useful for testing or for using a custom node endpoint. Note\n   * that not all methods will work with custom URLs.\n   */\n  url?: string;\n\n  /**\n   * Alchemy auth token required to use the Notify API. This token can be found\n   * in the Alchemy Dashboard on the Notify tab.\n   */\n  authToken?: string;\n\n  /**\n   * Optional Request timeout provided in `ms` while using NFT and NOTIFY API.\n   * Default to 0 (No timeout).\n   */\n  requestTimeout?: number;\n\n  /**\n   * Optional setting that automatically batches and sends json-rpc requests for\n   * higher throughput and reduced network IO. Defaults to false.\n   *\n   * This implementation is based on the `JsonRpcBatchProvider` in ethers.\n   */\n  batchRequests?: boolean;\n\n  /**\n   * Optional overrides on the Ethers `ConnectionInfo` object used to configure\n   * the underlying JsonRpcProvider. This field is for advanced users who want\n   * to customize the provider's behavior.\n   *\n   * This override is applied last, so it will override any other\n   * AlchemySettings properties that affect the connection.\n   *\n   * Note that modifying the ConnectionInfo may break Alchemy SDK's default\n   * connection/url logic. It also does not affect `nft` and `notify`\n   * namespaces.\n   *\n   * {@link https://docs.ethers.org/v5/api/utils/web/#ConnectionInfo}\n   */\n  connectionInfoOverrides?: Partial<ConnectionInfo>;\n}\n\n/**\n * The supported networks by Alchemy. Note that some functions are not available\n * on all networks. Please refer to the Alchemy documentation for which APIs are\n * available on which networks\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\n *\n * @public\n */\nexport enum Network {\n  ETH_MAINNET = 'eth-mainnet',\n  /** @deprecated */\n  ETH_GOERLI = 'eth-goerli',\n  ETH_SEPOLIA = 'eth-sepolia',\n  OPT_MAINNET = 'opt-mainnet',\n  /** @deprecated */\n  OPT_GOERLI = 'opt-goerli',\n  OPT_SEPOLIA = 'opt-sepolia',\n  ARB_MAINNET = 'arb-mainnet',\n  /** @deprecated */\n  ARB_GOERLI = 'arb-goerli',\n  ARB_SEPOLIA = 'arb-sepolia',\n  MATIC_MAINNET = 'polygon-mainnet',\n  /** @deprecated */\n  MATIC_MUMBAI = 'polygon-mumbai',\n  MATIC_AMOY = 'polygon-amoy',\n  ASTAR_MAINNET = 'astar-mainnet',\n  POLYGONZKEVM_MAINNET = 'polygonzkevm-mainnet',\n  /** @deprecated */\n  POLYGONZKEVM_TESTNET = 'polygonzkevm-testnet',\n  POLYGONZKEVM_CARDONA = 'polygonzkevm-cardona',\n  BASE_MAINNET = 'base-mainnet',\n  BASE_GOERLI = 'base-goerli',\n  BASE_SEPOLIA = 'base-sepolia',\n  ZKSYNC_MAINNET = 'zksync-mainnet',\n  ZKSYNC_SEPOLIA = 'zksync-sepolia',\n  SHAPE_MAINNET = 'shape-mainnet',\n  SHAPE_SEPOLIA = 'shape-sepolia',\n  LINEA_MAINNET = 'linea-mainnet',\n  LINEA_SEPOLIA = 'linea-sepolia',\n  FANTOM_MAINNET = 'fantom-mainnet',\n  FANTOM_TESTNET = 'fantom-testnet',\n  ZETACHAIN_MAINNET = 'zetachain-mainnet',\n  ZETACHAIN_TESTNET = 'zetachain-testnet',\n  ARBNOVA_MAINNET = 'arbnova-mainnet',\n  BLAST_MAINNET = 'blast-mainnet',\n  BLAST_SEPOLIA = 'blast-sepolia',\n  MANTLE_MAINNET = 'mantle-mainnet',\n  MANTLE_SEPOLIA = 'mantle-sepolia',\n  SCROLL_MAINNET = 'scroll-mainnet',\n  SCROLL_SEPOLIA = 'scroll-sepolia',\n  GNOSIS_MAINNET = 'gnosis-mainnet',\n  GNOSIS_CHIADO = 'gnosis-chiado',\n  BNB_MAINNET = 'bnb-mainnet',\n  BNB_TESTNET = 'bnb-testnet',\n  AVAX_MAINNET = 'avax-mainnet',\n  AVAX_FUJI = 'avax-fuji',\n  CELO_MAINNET = 'celo-mainnet',\n  CELO_ALFAJORES = 'celo-alfajores',\n  METIS_MAINNET = 'metis-mainnet',\n  OPBNB_MAINNET = 'opbnb-mainnet',\n  OPBNB_TESTNET = 'opbnb-testnet',\n  BERACHAIN_BARTIO = 'berachain-bartio',\n  SONEIUM_MINATO = 'soneium-minato',\n  WORLDCHAIN_MAINNET = 'worldchain-mainnet',\n  WORLDCHAIN_SEPOLIA = 'worldchain-sepolia',\n  ROOTSTOCK_MAINNET = 'rootstock-mainnet',\n  ROOTSTOCK_TESTNET = 'rootstock-testnet',\n  FLOW_MAINNET = 'flow-mainnet',\n  FLOW_TESTNET = 'flow-testnet'\n}\n\n/** Token Types for the `getTokenBalances()` endpoint. */\nexport enum TokenBalanceType {\n  /**\n   * Option to fetch the top 100 tokens by 24-hour volume. This option is only\n   * available on Mainnet in Ethereum, Polygon, and Arbitrum.\n   */\n  DEFAULT_TOKENS = 'DEFAULT_TOKENS',\n\n  /**\n   * Option to fetch the set of ERC-20 tokens that the address as ever held. his\n   * list is produced by an address's historical transfer activity and includes\n   * all tokens that the address has ever received.\n   */\n  ERC20 = 'erc20'\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch all ERC-20 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsErc20 {\n  /** The ERC-20 token type. */\n  type: TokenBalanceType.ERC20;\n\n  /** Optional page key for pagination (only applicable to TokenBalanceType.ERC20) */\n  pageKey?: string;\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch the top 100 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsDefaultTokens {\n  /** The top 100 token type. */\n  type: TokenBalanceType.DEFAULT_TOKENS;\n}\n\n/**\n * Response object for when the {@link TokenBalancesOptionsErc20} options are\n * used. A page key may be returned if the provided address has many transfers.\n */\nexport interface TokenBalancesResponseErc20 extends TokenBalancesResponse {\n  /**\n   * An optional page key to passed into the next request to fetch the next page\n   * of token balances.\n   */\n  pageKey?: string;\n}\n\n/** @public */\nexport interface TokenBalancesResponse {\n  address: string;\n  tokenBalances: TokenBalance[];\n}\n\n/** @public */\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\n\n/** @public */\nexport interface TokenBalanceSuccess {\n  contractAddress: string;\n  tokenBalance: string;\n  error: null;\n}\n\n/** @public */\nexport interface TokenBalanceFailure {\n  contractAddress: string;\n  tokenBalance: null;\n  error: string;\n}\n\n/**\n * Optional params to pass into {@link CoreNamespace.getTokensForOwner}.\n */\nexport interface GetTokensForOwnerOptions {\n  /**\n   * List of contract addresses to filter by. If omitted, defaults to\n   * {@link TokenBalanceType.ERC20}.\n   */\n  contractAddresses?: string[] | TokenBalanceType;\n  /**\n   * Optional page key from an existing {@link GetTokensForOwnerResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Response object for {@link CoreNamespace.getTokensForOwner}.\n */\nexport interface GetTokensForOwnerResponse {\n  /** Owned tokens for the provided addresses along with relevant metadata. */\n  tokens: OwnedToken[];\n  /** Page key for the next page of results, if one exists. */\n  pageKey?: string;\n}\n\n/**\n * Represents an owned token on a {@link GetTokensForOwnerResponse}.\n */\nexport interface OwnedToken {\n  /** The contract address of the token. */\n  contractAddress: string;\n  /**\n   * The raw value of the balance field as a hex string. This value is undefined\n   * if the {@link error} field is present.\n   */\n  rawBalance?: string;\n  /**\n   * The formatted value of the balance field as a hex string. This value is\n   * undefined if the {@link error} field is present, or if the `decimals` field=\n   * is undefined.\n   */\n  balance?: string;\n  /** */\n  /**\n   * The token's name. Is undefined if the name is not defined in the contract and\n   * not available from other sources.\n   */\n  name?: string;\n  /**\n   * The token's symbol. Is undefined if the symbol is not defined in the contract\n   * and not available from other sources.\n   */\n  symbol?: string;\n  /**\n   * The number of decimals of the token. Is undefined if not defined in the\n   * contract and not available from other sources.\n   */\n  decimals?: number;\n  /** URL link to the token's logo. Is undefined if the logo is not available. */\n  logo?: string;\n  /**\n   * Error from fetching the token balances. If this field is defined, none of\n   * the other fields will be defined.\n   */\n  error?: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getTokenMetadata} method.\n *\n * @public\n */\nexport interface TokenMetadataResponse {\n  /**\n   * The token's name. Is `null` if the name is not defined in the contract and\n   * not available from other sources.\n   */\n  name: string | null;\n\n  /**\n   * The token's symbol. Is `null` if the symbol is not defined in the contract\n   * and not available from other sources.\n   */\n  symbol: string | null;\n\n  /**\n   * The number of decimals of the token. Returns `null` if not defined in the\n   * contract and not available from other sources.\n   */\n  decimals: number | null;\n\n  /** URL link to the token's logo. Is `null` if the logo is not available. */\n  logo: string | null;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersParams {\n  /**\n   * The starting block to check for transfers. This value is inclusive and\n   * defaults to `0x0` if omitted.\n   */\n  fromBlock?: string;\n\n  /**\n   * The ending block to check for transfers. This value is inclusive and\n   * defaults to the latest block if omitted.\n   */\n  toBlock?: string;\n\n  /**\n   * Whether to return results in ascending or descending order by block number.\n   * Defaults to ascending if omitted.\n   */\n  order?: SortingOrder;\n\n  /**\n   * The from address to filter transfers by. This value defaults to a wildcard\n   * for all addresses if omitted.\n   */\n  fromAddress?: string;\n\n  /**\n   * The to address to filter transfers by. This value defaults to a wildcard\n   * for all address if omitted.\n   */\n  toAddress?: string;\n\n  /**\n   * List of contract addresses to filter for - only applies to \"erc20\",\n   * \"erc721\", \"erc1155\" transfers. Defaults to all address if omitted.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Whether to exclude transfers with zero value. Note that zero value is\n   * different than null value. Defaults to `true` if omitted.\n   */\n  excludeZeroValue?: boolean;\n\n  /** REQUIRED field. An array of categories to get transfers for. */\n  category: AssetTransfersCategory[];\n\n  /** The maximum number of results to return per page. Defaults to 1000 if omitted. */\n  maxCount?: number;\n\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse}\n   * {@link AssetTransfersResult}to use for pagination.\n   */\n  pageKey?: string;\n\n  /**\n   * Whether to include additional metadata about each transfer event. Defaults\n   * to `false` if omitted.\n   */\n  withMetadata?: boolean;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method that\n * includes metadata.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataParams extends AssetTransfersParams {\n  withMetadata: true;\n}\n\n/**\n * Categories of transfers to use with the {@link AssetTransfersParams} request\n * object when using {@link CoreNamespace.getAssetTransfers}.\n *\n * @public\n */\nexport enum AssetTransfersCategory {\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * external user-created address. External addresses have private keys and are\n   * accessed by users.\n   */\n  EXTERNAL = 'external',\n\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * internal, smart contract address. For example, a smart contract calling\n   * another smart contract or sending\n   */\n  INTERNAL = 'internal',\n\n  /** ERC20 transfers. */\n  ERC20 = 'erc20',\n\n  /** ERC721 transfers. */\n  ERC721 = 'erc721',\n\n  /** ERC1155 transfers. */\n  ERC1155 = 'erc1155',\n\n  /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\n  SPECIALNFT = 'specialnft'\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersResponse {\n  transfers: AssetTransfersResult[];\n  /** Page key for the next page of results, if one exists. */\n  pageKey?: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method when\n * the {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResponse {\n  transfers: AssetTransfersWithMetadataResult[];\n  pageKey?: string;\n}\n\n/**\n * Represents a transfer event that is returned in a {@link AssetTransfersResponse}.\n *\n * @public\n */\nexport interface AssetTransfersResult {\n  /** The unique ID of the transfer. */\n  uniqueId: string;\n\n  /** The category of the transfer. */\n  category: AssetTransfersCategory;\n\n  /** The block number where the transfer occurred. */\n  blockNum: string;\n\n  /** The from address of the transfer. */\n  from: string;\n\n  /** The to address of the transfer. */\n  to: string | null;\n\n  /**\n   * Converted asset transfer value as a number (raw value divided by contract\n   * decimal). `null` if ERC721 transfer or contract decimal not available.\n   */\n  value: number | null;\n\n  /**\n   * The raw ERC721 token id of the transfer as a hex string. `null` if not an\n   * ERC721 transfer.\n   */\n  erc721TokenId: string | null;\n\n  /**\n   * A list of ERC1155 metadata objects if the asset transferred is an ERC1155\n   * token. `null` if not an ERC1155 transfer.\n   */\n  erc1155Metadata: ERC1155Metadata[] | null;\n\n  /** The token id of the token transferred. */\n  tokenId: string | null;\n\n  /**\n   * Returns the token's symbol or ETH for other transfers. `null` if the\n   * information was not available.\n   */\n  asset: string | null;\n\n  /** The transaction hash of the transfer transaction. */\n  hash: string;\n\n  /** Information about the raw contract of the asset transferred. */\n  rawContract: RawContract;\n}\n\n/**\n * Represents a transfer event that is returned in a\n * {@link AssetTransfersResponse} when {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResult extends AssetTransfersResult {\n  /** Additional metadata about the transfer event. */\n  metadata: AssetTransfersMetadata;\n}\n\n/**\n * The metadata object for a {@link AssetTransfersResult} when the\n * {@link AssetTransfersParams.withMetadata} field is set to true.\n *\n * @public\n */\nexport interface AssetTransfersMetadata {\n  /** Timestamp of the block from which the transaction event originated. */\n  blockTimestamp: string;\n}\n\n/**\n * The type of transfer for the request. Note that using `TO` will also include\n * NFTs that were minted by the owner.\n */\nexport enum GetTransfersForOwnerTransferType {\n  'TO' = 'TO',\n  'FROM' = 'FROM'\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getTransfersForOwner} method.\n */\nexport interface GetTransfersForOwnerOptions {\n  /**\n   * List of NFT contract addresses to filter mints by. If omitted, defaults to\n   * all contract addresses.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Filter mints by ERC721 vs ERC1155 contracts. If omitted, defaults to all\n   * NFTs.\n   */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Enum for representing the supported sorting orders of the API.\n *\n * @public\n */\nexport enum SortingOrder {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/** The refresh result response object returned by {@link refreshContract}. */\nexport interface RefreshContractResult {\n  /** The NFT contract address that was passed in to be refreshed. */\n  contractAddress: string;\n\n  /** The current state of the refresh request. */\n  refreshState: NftRefreshState;\n\n  /**\n   * Percentage of tokens currently refreshed, represented as an integer string.\n   * Field can be null if the refresh has not occurred.\n   */\n  progress: string | null;\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockNumber {\n  /** The block number to get transaction receipts for. */\n  blockNumber: string;\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockHash {\n  /** The block hash to get transaction receipts for. */\n  blockHash: string;\n}\n\n/**\n * The parameters to use with the {@link CoreNamespace.getTransactionReceipts} method.\n *\n * @public\n */\nexport type TransactionReceiptsParams =\n  | TransactionReceiptsBlockNumber\n  | TransactionReceiptsBlockHash;\n\n/**\n * Response object for a {@link CoreNamespace.getTransactionReceipts} call.\n *\n * @public\n */\nexport interface TransactionReceiptsResponse {\n  /** A list of transaction receipts for the queried block. */\n  receipts: TransactionReceipt[] | null;\n}\n\n/** An OpenSea collection's approval status. */\nexport enum OpenSeaSafelistRequestStatus {\n  /** Verified collection. */\n  VERIFIED = 'verified',\n  /** Collections that are approved on open sea and can be found in search results. */\n  APPROVED = 'approved',\n  /** Collections that requested safelisting on OpenSea. */\n  REQUESTED = 'requested',\n  /** Brand new collections. */\n  NOT_REQUESTED = 'not_requested'\n}\n\n/**\n * The response object for the {@link findContractDeployer} function.\n *\n * @public\n */\nexport interface DeployResult {\n  /** The address of the contract deployer, if it is available. */\n  deployerAddress?: string;\n\n  /** The block number the contract was deployed in. */\n  blockNumber: number;\n}\n\n/**\n * Method names for Alchemy's custom Subscription API endpoints.\n *\n * This value is provided in the `method` field when creating an event filter on\n * the Websocket Namespace.\n */\nexport enum AlchemySubscription {\n  PENDING_TRANSACTIONS = 'alchemy_pendingTransactions',\n  MINED_TRANSACTIONS = 'alchemy_minedTransactions'\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_pendingTransactions` endpoint.\n *\n * Returns the transaction information for all pending transactions that match a\n * given filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-pendingtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL pending transactions that are added to the mempool.\n *\n * @public\n */\nexport interface AlchemyPendingTransactionsEventFilter {\n  method: AlchemySubscription.PENDING_TRANSACTIONS;\n\n  /**\n   * Filter pending transactions sent FROM the provided address or array of\n   * addresses.\n   *\n   * If a {@link AlchemyPendingTransactionsEventFilter.toAddress} is also\n   * present, then this filter will return transactions sent from the\n   * `fromAddress` OR transactions received by the `toAddress`.\n   */\n  fromAddress?: string | string[];\n\n  /**\n   * Filter pending transactions sent TO the provided address or array of\n   * addresses.\n   *\n   * If a {@link AlchemyPendingTransactionsEventFilter.fromAddress} is also\n   * present, then this filter will return transactions sent from the\n   * `fromAddress` OR transactions received by the `toAddress`.\n   */\n  toAddress?: string | string[];\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   *\n   * Note that setting only {@link hashesOnly} to true will return the same\n   * response as subscribing to `newPendingTransactions`.\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_minedTransactions` endpoint.\n *\n * Returns the transaction information for all mined transactions that match the\n * provided filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-minedtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL mined transactions.\n *\n * @public\n */\nexport interface AlchemyMinedTransactionsEventFilter {\n  method: AlchemySubscription.MINED_TRANSACTIONS;\n\n  /**\n   * Address filters to subscribe to. Defaults to all transactions if omitted.\n   * Limit 100 address filters. Requires a non-empty array.\n   */\n  addresses?: NonEmptyArray<AlchemyMinedTransactionsAddress>;\n\n  /**\n   * Whether to include transactions that were removed from the mempool.\n   * Defaults to false.\n   */\n  includeRemoved?: boolean;\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Address filters for {@link AlchemyMinedTransactionsEventFilter}. Requires at\n * least one of the fields to be set.\n */\nexport type AlchemyMinedTransactionsAddress = RequireAtLeastOne<{\n  to?: string;\n  from?: string;\n}>;\n\n/**\n * Alchemy's event type that extends the default {@link EventType} interface to\n * also include Alchemy's Subscription API.\n *\n * @public\n */\nexport type AlchemyEventType = EventType | AlchemyEventFilter;\n\n/**\n * This type represents the Alchemy's Subscription API endpoints as event\n * filters compatible with other ethers events.\n */\nexport type AlchemyEventFilter =\n  | AlchemyMinedTransactionsEventFilter\n  | AlchemyPendingTransactionsEventFilter;\n\n/** Options for the {@link TransactNamespace.sendPrivateTransaction} method. */\nexport interface SendPrivateTransactionOptions {\n  /**\n   * Whether to use fast-mode. Defaults to false. Please note that fast mode\n   * transactions cannot be cancelled using\n   * {@link TransactNamespace.cancelPrivateTransaction}. method.\n   *\n   * See {@link https://docs.flashbots.net/flashbots-protect/rpc/fast-mode} for\n   * more details.\n   */\n  fast: boolean;\n}\n\n/**\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\n * Allows you to determine if the assets approved or / and transferred are\n * native, tokens or NFTs.\n */\nexport enum SimulateAssetType {\n  /**\n   * Native transfers that involve the currency of the chain the simulation is\n   * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\n   */\n  NATIVE = 'NATIVE',\n  /** ERC20 approval or transfers. */\n  ERC20 = 'ERC20',\n  /** ERC721 approval or transfers. */\n  ERC721 = 'ERC721',\n  /** ERC1155 approval or transfers. */\n  ERC1155 = 'ERC1155',\n  /**\n   * Special contracts that don't follow ERC 721/1155.Currently limited to\n   * CryptoKitties and CryptoPunks.\n   */\n  SPECIAL_NFT = 'SPECIAL_NFT'\n}\n\n/**\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\n */\nexport enum SimulateChangeType {\n  /**\n   * Represents a transaction that approved or disapproved permissions for a\n   * contract.\n   *\n   * APPROVE without token ID → approve all tokens\n   * APPROVE without amount → approve all amount\n   * APPROVE with zero amount → approval being cleared\n   */\n  APPROVE = 'APPROVE',\n\n  /**\n   * Represents a transaction that transferred tokens from one address to another.\n   */\n  TRANSFER = 'TRANSFER'\n}\n\n/**\n * The error field returned in a {@link SimulateAssetChangesResponse} if the\n * simulation failed.\n */\nexport interface SimulateAssetChangesError extends Record<string, any> {\n  /** The error message. */\n  message: string;\n}\n\n/**\n * Represents an asset change from a call to\n * {@link TransactNamespace.simulateAssetChanges}.\n */\nexport interface SimulateAssetChangesChange {\n  /** The type of asset from the transaction. */\n  assetType: SimulateAssetType;\n\n  /** The type of change from the transaction. */\n  changeType: SimulateChangeType;\n\n  /** The from address. */\n  from: string;\n\n  /** The to address. */\n  to: string;\n\n  /**\n   * The raw amount as an integer string. Only available on TRANSFER changes for\n   * NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes (field set to\n   * '0').\n   */\n  rawAmount?: string;\n\n  /**\n   * The amount as an integer string. This value is calculated by applying the\n   * `decimals` field to the `rawAmount` field. Only available on TRANSFER\n   * changes for NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes\n   * (field set to '0').\n   */\n  amount?: string;\n\n  /** The name of the asset transferred, if available. */\n  name?: string;\n\n  /** The symbol of the asset transferred if available. */\n  symbol?: string;\n\n  /**\n   * The number of decimals used by the ERC20 token. Set to 0 for APPROVE\n   * changes. Field is undefined if it's not defined in the contract and not\n   * available from other sources.\n   */\n  decimals?: number;\n\n  /**\n   * The contract address of the asset. Only applicable to ERC20, ERC721,\n   * ERC1155, NFT and SPECIAL_NFT transactions.\n   */\n  contractAddress?: string;\n\n  /**\n   * URL for the logo of the asset, if available. Only applicable to ERC20 transactions.\n   */\n  logo?: string;\n\n  /**\n   * The token id of the asset transferred. Only applicable to ERC721,\n   * ERC1155 and SPECIAL_NFT NFTs.\n   */\n  tokenId?: string;\n}\n\n/**\n * Response object for the {@link TransactNamespace.simulateAssetChanges} method.\n */\nexport interface SimulateAssetChangesResponse {\n  /** An array of asset changes that resulted from the transaction. */\n  changes: SimulateAssetChangesChange[];\n  /**\n   * The amount of gas used by the transaction represented as a hex string. The\n   * field is undefined if an error occurred.\n   */\n  gasUsed?: string;\n  /** Optional error field that is present if an error occurred. */\n  error?: SimulateAssetChangesError;\n}\n\n/**\n * Authority used to decode calls and logs when using the\n * {@link TransactNamespace.simulateExecution} method.\n */\nexport enum DecodingAuthority {\n  ETHERSCAN = 'ETHERSCAN'\n}\n\n/** The input or output parameters from a {@link DecodedDebugCallTrace}. */\nexport interface DecodedCallParam {\n  /** Value of the parameter. */\n  value: string;\n  /** The name of the parameter. */\n  name: string;\n  /** The type of the parameter.*/\n  type: string;\n}\n\n/** The input parameters from a {@link DecodedLog}. */\nexport interface DecodedLogInput extends DecodedCallParam {\n  /** Whether the log is marked as indexed in the smart contract. */\n  indexed: boolean;\n}\n\n/**\n * Decoded representation of the call trace that is part of a\n * {@link SimulationCallTrace}.\n */\nexport interface DecodedDebugCallTrace {\n  /** The smart contract method called. */\n  methodName: string;\n  /** Method inputs. */\n  inputs: DecodedCallParam[];\n  /** Method outputs. */\n  outputs: DecodedCallParam[];\n  /** The source used to provide the decoded call trace. */\n  authority: DecodingAuthority;\n}\n\n/** The type of call in a debug call trace. */\nexport enum DebugCallType {\n  CREATE = 'CREATE',\n  CALL = 'CALL',\n  STATICCALL = 'STATICCALL',\n  DELEGATECALL = 'DELEGATECALL'\n}\n\n/**\n * Debug call trace in a {@link SimulateExecutionResponse}.\n */\nexport interface SimulationCallTrace\n  extends Omit<DebugCallTrace, 'revertReason' | 'calls'> {\n  /** The type of call. */\n  type: DebugCallType;\n  /** A decoded version of the call. Provided on a best-effort basis. */\n  decoded?: DecodedDebugCallTrace;\n}\n\n/**\n * Decoded representation of the debug log that is part of a\n * {@link SimulationDebugLog}.\n */\n\nexport interface DecodedLog {\n  /** The decoded name of the log event. */\n  eventName: string;\n  /** The decoded inputs to the log. */\n  inputs: DecodedLogInput[];\n  /** The source used to provide the decoded log. */\n  authority: DecodingAuthority;\n}\n\n/**\n * Debug log in a {@link SimulateExecutionResponse}.\n */\nexport interface SimulationDebugLog {\n  /** An array of topics in the log. */\n  topics: string[];\n  /** The address of the contract that generated the log. */\n  address: string;\n  /** The data included the log. */\n  data: string;\n  /** A decoded version of the log. Provided on a best-effort basis. */\n  decoded?: DecodedLog;\n}\n\n/** Response object for the {@link TransactNamespace.simulateExecution} method. */\nexport interface SimulateExecutionResponse {\n  /**\n   * An array of traces generated during simulation that represent the execution\n   * of the transaction along with the decoded calls if available.\n   */\n  calls: SimulationCallTrace[];\n\n  /**\n   * An array of logs emitted during simulation along with the decoded logs if\n   * available.\n   */\n  logs: SimulationDebugLog[];\n}\n\n/**\n * Response object for the {@link TransactNamespace.sendGasOptimizedTransaction} method.\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionResponse {\n  /**\n   * The tracking id. This can be used to check the status of the transaction\n   * via {@link TransactNamespace.getGasOptimizedTransactionStatus}.\n   */\n  trackingId: string;\n\n  /* An array of the transaction hashes from submitted transactions. */\n  transactionHashes: string[];\n}\n\n/**\n * Response object for the\n * {@link TransactNamespace.getGasOptimizedTransactionStatus} method.\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionStatusResponse {\n  /** The status of the submitted transaction job. */\n  jobStatus: GasOptimizedTransactionStatus;\n\n  /** An array of the submitted transactions hashes that have been attempted. */\n  transactionHashesAttempted: string[];\n\n  /** The final mined transaction hash if the job was completed successfully. */\n  minedTransactionHash?: string;\n}\n\n/**\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport enum GasOptimizedTransactionStatus {\n  UNSPECIFIED = 'TRANSACTION_JOB_STATUS_UNSPECIFIED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETE = 'COMPLETE',\n  ABANDONED = 'ABANDONED'\n}\n\n/** SDK representation of a Webhook in the Notify API. */\nexport interface Webhook {\n  /** The webhook's unique id. */\n  id: string;\n  /** The network the webhook is on. */\n  network: Network;\n  /** The type of webhook. */\n  type: WebhookType;\n  /** The url that the webhook sends its payload to. */\n  url: string;\n  /** Whether the webhook is currently active */\n  isActive: boolean;\n  /** The creation time of the webhook as an ISO string. */\n  timeCreated: string;\n  /** The signing key used to verify payloads for the webhook. */\n  signingKey: string;\n  /** The webhook version. All newly created webhooks default to V2. */\n  version: WebhookVersion;\n  /**\n   * The app id of the app used for the webhook. This field is only present on\n   * {@link MinedTransactionWebhook} and {@link DroppedTransactionWebhook}\n   */\n  appId?: string;\n}\n\n/** The version of the webhook. All newly created webhooks default to V2. */\nexport enum WebhookVersion {\n  V1 = 'V1',\n  V2 = 'V2'\n}\n\n/** The type of {@link Webhook}. */\nexport enum WebhookType {\n  MINED_TRANSACTION = 'MINED_TRANSACTION',\n  DROPPED_TRANSACTION = 'DROPPED_TRANSACTION',\n  ADDRESS_ACTIVITY = 'ADDRESS_ACTIVITY',\n  NFT_ACTIVITY = 'NFT_ACTIVITY',\n  NFT_METADATA_UPDATE = 'NFT_METADATA_UPDATE',\n  GRAPHQL = 'GRAPHQL'\n}\n\n/**\n * A Mined Transaction Webhook is used to notify your app whenever a transaction\n * sent through your API key gets successfully mined. This is useful if you want\n * to notify customers that their transaction went through.\n */\nexport interface MinedTransactionWebhook extends Webhook {\n  type: WebhookType.MINED_TRANSACTION;\n}\n\n/**\n * A Dropped Transaction webhook is used to notify your app whenever a\n * transaction sent through your API key gets dropped. This can be useful if you\n * want to notify customers that their transactions were dropped.\n */\nexport interface DroppedTransactionWebhook extends Webhook {\n  type: WebhookType.DROPPED_TRANSACTION;\n}\n\n/**\n * An Address Activity Webhook tracks ETH, ERC20, ERC721, and ERC1155 transfers\n * for the provided addresses. This can be used to notify your app with\n * real-time state changes when your tracked addresses send or receive tokens.\n */\nexport interface AddressActivityWebhook extends Webhook {\n  type: WebhookType.ADDRESS_ACTIVITY;\n}\n\n/**\n * The NFT Activity Webhook tracks all ERC721 and ERC1155 activity. This can be\n * used to notify your app with real time state changes when an NFT is\n * transferred between addresses.\n */\nexport interface NftActivityWebhook extends Webhook {\n  type: WebhookType.NFT_ACTIVITY;\n}\n\n/**\n * The NFT Metadata Update Webhook tracks all ERC721 and ERC1155 metadata updates.\n * This can be used to notify your app with real time state changes when an NFT's\n * metadata changes.\n */\nexport interface NftMetadataUpdateWebhook extends Webhook {\n  type: WebhookType.NFT_METADATA_UPDATE;\n}\n\n/**\n * The Custom Webhook can track any event on every block (think transfers, staking,\n * minting, burning, approvals, etc.)\n * This can be used to notify your app with real time changes whenever an\n * EOA or a smart contract performs any action on-chain.\n */\nexport interface CustomGraphqlWebhook extends Webhook {\n  type: WebhookType.GRAPHQL;\n}\n\n/** The response for a {@link NotifyNamespace.getAllWebhooks} method. */\nexport interface GetAllWebhooksResponse {\n  /** All webhooks attached to the provided auth token. */\n  webhooks: Webhook[];\n  /** The total number of webhooks. */\n  totalCount: number;\n}\n\n/** Options object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface GetAddressesOptions {\n  /** Number of addresses to fetch. */\n  limit?: number;\n\n  /** Page */\n  pageKey?: string;\n}\n\n/** Response object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface AddressActivityResponse {\n  /** The addresses for the webhook. */\n  addresses: string[];\n  /** The total number of addresses. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining addresses. */\n  pageKey?: string;\n}\n\n/** Response object for the {@link NotifyNamespace.getGraphqlQuery} method. */\nexport interface CustomGraphqlWebhookConfig {\n  /** The graphql query for the webhook. */\n  graphqlQuery: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link MinedTransactionWebhook} or {@link DroppedTransactionWebhook}.\n *\n * The webhook will be created on the app and network associated with the appId.\n * To find the app id of a project, go to the Alchemy Dashboard in the Apps tab.\n * After clicking on an app, the app id is the string in the URL following 'apps/'.\n *\n * This is a temporary workaround for now. We're planning on detecting the app\n * id from the provided api key directly. Stay tuned!\n */\nexport interface TransactionWebhookParams {\n  /** The app id of the project to create the webhook on. */\n  appId: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link NftActivityWebhook} or {@link NftMetadataUpdateWebhook}.\n */\nexport interface NftWebhookParams {\n  /** Array of NFT filters the webhook should track. */\n  filters: NftFilter[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link CustomGraphqlWebhook}\n */\nexport interface CustomGraphqlWebhookParams {\n  /** GraphQL query */\n  graphqlQuery: string;\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n  /**\n   * Whether to only receive webhooks if the query on the block is not empty.\n   * Defaults to false.\n   */\n  skipEmptyMessages?: boolean;\n  /**\n   * App IDs are now required for graphQL webhooks. You can find the app ID\n   * following the steps here:\n   * {@link https://docs.alchemy.com/reference/notify-api-faq#where-can-i-find-the-app-id}.\n   *\n   * The webhook will be created on the app and network associated with the appId.\n   * To find the app id of a project, go to the Alchemy Dashboard in the Apps tab.\n   * After clicking on an app, the app id is the string in the URL following 'apps/'.\n   *\n   * Note that although this property is marked as optional, it is *actually required*\n   * for creating a custom GraphQL webhook. This is a workaround to avoid a breaking\n   * change in the API.\n   */\n  appId?: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link AddressActivityWebhook}.\n */\nexport interface AddressWebhookParams {\n  /** Array of addresses the webhook should activity for. */\n  addresses: string[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/** NFT to track on a {@link NftActivityWebhook} or {@link NftMetadataUpdateWebhook}. */\nexport interface NftFilter {\n  /** The contract address of the NFT. */\n  contractAddress: string;\n  /**\n   * The token id of the NFT to track. If this field is omitted, defaults to\n   * tracking all NFTs for the provided contract address.\n   */\n  tokenId?: BigNumberish;\n}\n\n/** Response object for the {@link NotifyNamespace.getNftFilters} method. */\nexport interface NftFiltersResponse {\n  /** The NFT filters on the provided webhook. */\n  filters: NftFilter[];\n  /** The total number of NFT filters on the webhook. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining filters. */\n  pageKey?: string;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to mark a\n * webhook as active or inactive.\n */\nexport interface WebhookStatusUpdate {\n  /** Whether the webhook is active. */\n  isActive: boolean;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove NFT filters for a {@link NftActivityWebhook}.\n */\nexport interface WebhookNftFilterUpdate {\n  /** The filters to additionally track. */\n  addFilters: NftFilter[];\n  /** Existing filters to remove. */\n  removeFilters: NftFilter[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove NFT filters for a {@link NftMetadataUpdateWebhook}.\n */\nexport interface WebhookNftMetadataFilterUpdate {\n  /** The filters to additionally track. */\n  addMetadataFilters: NftFilter[];\n  /** Existing filters to remove. */\n  removeMetadataFilters: NftFilter[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressUpdate {\n  /** The addresses to additionally track. */\n  addAddresses: string[];\n  /** Existing addresses to remove. */\n  removeAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to replace\n * all existing addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressOverride {\n  /** The new addresses to track. Existing addresses will be removed. */\n  newAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link NftActivityWebhook}.\n */\nexport type NftWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookNftFilterUpdate>;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link NftMetadataUpdateWebhook}.\n */\nexport type NftMetadataWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookNftMetadataFilterUpdate>;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link CustomGraphqlWebhook}.\n */\nexport type CustomGraphqlWebhookUpdate = WebhookStatusUpdate;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link AddressActivityWebhook}.\n */\nexport type AddressWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookAddressUpdate>\n  | WebhookAddressOverride;\n\n/**\n * Transaction object used in {@link DebugNamespace.traceCall}, {@link TransactNamespace.simulateAssetChanges} and {@link TransactNamespace.simulateExecution}.\n */\nexport interface DebugTransaction {\n  /** The address the transaction is directed to. */\n  to?: string;\n  /** The address the transaction is sent from. */\n  from?: string;\n  /** The gas provided for the transaction execution, as a hex string. */\n  gas?: string;\n  /** The gas price to use as a hex string. */\n  gasPrice?: string;\n  /** The value associated with the transaction as a hex string. */\n  value?: string;\n  /** The data associated with the transaction. */\n  data?: string;\n}\n\n/**\n * Commitment level of the target block with using methods in the\n * {@link DebugNamespace}\n */\nexport enum CommitmentLevel {\n  /**\n   * Sample next block inferred by Alchemy built on top of the latest block.\n   * This contains the set of transactions taken from the local mempool and\n   * is a proxy for blocks that have not been mined yet.\n   */\n  PENDING = 'pending',\n  /**\n   * The most recent block in the canonical chain observed by Alchemy. Note that\n   * this block may be re-orged out of the canonical chain.\n   */\n  LATEST = 'latest',\n  /**\n   * The most recent crypto-economically secure block that cannot be re-orged\n   * outside of manual intervention driven by community coordination. This is\n   * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\n   */\n  SAFE = 'safe',\n  /**\n   * The most recent secure block that has been accepted by >2/3 of validators.\n   * This block is very unlikely to be re-orged. This is only available on\n   * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\n   */\n  FINALIZED = 'finalized',\n  /**\n   * The lowest numbered block available that is usually the first block created.\n   */\n  EARLIEST = 'earliest'\n}\n\n/**\n * The block identifier to specify which block to run a debug call in, used for\n * methods in the {@link DebugNamespace}.\n */\nexport type BlockIdentifier = string | CommitmentLevel;\n\n/**\n * The type of tracer to use when running debug methods in the\n * {@link DebugNamespace}.\n */\nexport enum DebugTracerType {\n  CALL_TRACER = 'callTracer',\n  PRESTATE_TRACER = 'prestateTracer'\n}\n\n/**\n * Tracer used with debug methods in the {@link DebugNamespace}.\n *\n * This tracer tracks all call frames executed during a transaction, including\n * depth 0. The returned result {@link DebugCallTrace} is a nested list of call\n * frames executed as part of the call.\n *\n * Here are some things to note when using the call tracer:\n * - Calls to precompiles are also included in the result.\n * - In case a frame reverts, the field output will contain the raw return data.\n * - In case the top level frame reverts, its `revertReason` field will contain\n *   the parsed reason of revert as returned by the Solidity contract\n */\nexport interface DebugCallTracer {\n  /** Specified type is `CALL_TRACER`. */\n  type: DebugTracerType.CALL_TRACER;\n  /**\n   * Whether to only trace the main (top-level) calls and ignore sub-calls.\n   * Defaults to `false`.\n   */\n  onlyTopCall?: boolean;\n}\n\n/**\n * Tracer used with debug methods in the {@link DebugNamespace}.\n *\n * This tracer replays the transaction and tracks every part of state that was\n * touched during the transaction.\n *\n * Returns a {@link DebugPrestateTrace}. This contains sufficient information to\n * create a local execution of the transaction from a custom assembled genesis\n * block.\n */\nexport interface DebugPrestateTracer {\n  /** Specified type is `PRESTATE_TRACER`. */\n  type: DebugTracerType.PRESTATE_TRACER;\n  /**\n   * Whether to only trace the main (top-level) calls and ignore sub-calls.\n   * Defaults to `false`.\n   */\n  onlyTopCall?: boolean;\n}\n\n/**\n * Debug result returned when using a {@link DebugCallTracer}.\n */\nexport interface DebugCallTrace {\n  /** The type of call: `CALL` or `CREATE` for the top-level call. */\n  type: string;\n  /** From address of the transaction. */\n  from: string;\n  /** To address of the transaction. */\n  to: string;\n  /** Amount of value transfer as a hex string. */\n  value: string;\n  /** Gas provided for call as a hex string. */\n  gas: string;\n  /** Gas used during the call as a hex string. */\n  gasUsed: string;\n  /** Call data. */\n  input: string;\n  /** Return data. */\n  output: string;\n  /** Optional error field. */\n  error?: string;\n  /** Solidity revert reason, if the call reverted. */\n  revertReason?: string;\n  /** Array of sub-calls executed as part of the original call. */\n  calls?: DebugCallTrace[];\n}\n\n/**\n * Filter object used to filter logs by a specific block hash when using\n * {@link CoreNamespace.getLogs}.\n */\nexport interface FilterByBlockHash extends EventFilter {\n  /** The specific block hash to search for logs matching the filter. */\n  blockHash?: string;\n}\n\n/**\n * Filter object used to filter logs by block number range when using\n * {@link CoreNamespace.getLogs}\n */\nexport interface Filter extends EventFilter {\n  /** The starting block (inclusive) to search for logs matching the filter. */\n  fromBlock?: BlockTag;\n  /** The end block (inclusive) to search for logs matching the filter.*/\n  toBlock?: BlockTag;\n}\n\n/**\n * Filter object used to filter logs by when using {@link CoreNamespace.getLogs}\n */\nexport interface EventFilter {\n  /** The address to filter by. If omitted, filters for all addresses. */\n  address?: string | string[];\n  /** The topics to filter by, or null to match any topics. */\n  topics?: Array<string | Array<string> | null>;\n}\n\n/**\n * Debug result returned by a {@link DebugPrestateTracer}.\n *\n * The keys are the addresses of the accounts, mapped to its corresponding state.\n */\nexport type DebugPrestateTrace = Record<string, DebugPrestate>;\n\n/** The */\nexport interface DebugPrestate {\n  /** Balance of the account in wei as a hex string. */\n  balance: string;\n  /** Nonce */\n  nonce: number;\n  /** Hex-encoded bytecode. */\n  code: string;\n  /** Storage slots of the contract. */\n  storage: Record<string, string>;\n}\n\n/**\n * Requires at least one of the properties to be set.\n *\n * Implementation copied over from\n * {@link https://learn.microsoft.com/en-us/javascript/api/@azure/keyvault-certificates/requireatleastone?view=azure-node-latest}\n */\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> &\n    Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\n/** Requires an array with at least one value. */\nexport type NonEmptyArray<T> = [T, ...T[]];\n","import { BlockTag } from '@ethersproject/abstract-provider';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nimport { OpenSeaSafelistRequestStatus, SortingOrder } from './types';\n\n/**\n * An enum for specifying the token type on NFTs.\n *\n * @public\n */\nexport enum NftTokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  NO_SUPPORTED_NFT_STANDARD = 'NO_SUPPORTED_NFT_STANDARD',\n  NOT_A_CONTRACT = 'NOT_A_CONTRACT',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/**\n * Represents NFT metadata that holds fields. Note that since there is no\n * standard metadata format, the fields are not guaranteed to be present.\n *\n * @public\n */\nexport interface NftMetadata extends Record<string, any> {\n  /** Name of the NFT asset. */\n  name?: string;\n\n  /** A human-readable description of the NFT asset. */\n  description?: string;\n\n  /** URL to the NFT asset image. */\n  image?: string;\n\n  /**\n   * The image URL that appears along the top of the NFT asset page. This tends\n   * to be the highest resolution image.\n   */\n  external_url?: string;\n\n  /** Background color of the NFT item. Usually defined as a 6 character hex string. */\n  background_color?: string;\n\n  /** The traits, attributes, and characteristics for the NFT asset. */\n  attributes?: Array<Record<string, any>>;\n}\n\n/** Media URLs and information for an NFT. */\nexport interface NftImage {\n  /** URL of the image stored in Alchemy's cache. */\n  cachedUrl?: string;\n  /** URL of a thumbnail sized image. */\n  thumbnailUrl?: string;\n  /** URL of the image in png format */\n  pngUrl?: string;\n  /** The type of the media image. */\n  contentType?: string;\n  /** The size of the media asset in bytes. */\n  size?: number;\n  /** The original URL of the image as stored on the contract. */\n  originalUrl?: string;\n}\n\n/** Potential reasons why an NFT contract was classified as spam. */\nexport enum NftSpamClassification {\n  Erc721TooManyOwners = 'Erc721TooManyOwners',\n  Erc721TooManyTokens = 'Erc721TooManyTokens',\n  Erc721DishonestTotalSupply = 'Erc721DishonestTotalSupply',\n  MostlyHoneyPotOwners = 'MostlyHoneyPotOwners',\n  OwnedByMostHoneyPots = 'OwnedByMostHoneyPots',\n  LowDistinctOwnersPercent = 'LowDistinctOwnersPercent',\n  HighHoneyPotOwnerPercent = 'HighHoneyPotOwnerPercent',\n  HighHoneyPotPercent = 'HighHoneyPotPercent',\n  HoneyPotsOwnMultipleTokens = 'HoneyPotsOwnMultipleTokens',\n  NoSalesActivity = 'NoSalesActivity',\n  HighAirdropPercent = 'HighAirdropPercent',\n  Unknown = 'Unknown'\n}\n\n/** Block time and number at which an NFT was acquired. */\nexport interface AcquiredAt {\n  /** Timestamp of the block at which an NFT was last acquired. */\n  blockTimestamp?: string;\n\n  /** Block number of the block at which an NFT was last acquired. */\n  blockNumber?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to include NFT metadata. Defaults to `false`. */\n  omitMetadata: true;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\n * {@link getContractsForOwner} request.\n *\n * @beta\n */\nexport enum NftFilters {\n  /** NFTs that have been classified as spam. */\n  SPAM = 'SPAM',\n\n  /** NFTs that have been airdropped to a user. */\n  AIRDROPS = 'AIRDROPS'\n}\n\n/**\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\n * {@link getContractsForOwner} response.\n *\n * @beta\n */\nexport enum NftOrdering {\n  TRANSFERTIME = 'TRANSFERTIME'\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs with\n * metadata owned by the provided address, along with pagination information and\n * the total count.\n *\n * @public\n */\nexport interface OwnedNftsResponse {\n  /** The NFTs owned by the provided address. */\n  ownedNfts: OwnedNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  totalCount: number;\n\n  /**\n   * Block Information of the block as of which the corresponding data is valid\n   */\n  validAt: OwnedNftsValidAt;\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs\n * without metadata owned by the provided address, along with pagination\n * information and the total count.\n *\n * @public\n */\nexport interface OwnedBaseNftsResponse {\n  /** The NFTs owned by the provided address. */\n  ownedNfts: OwnedBaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  totalCount: number;\n\n  /**\n   * Block Information of the block as of which the corresponding data is valid\n   */\n  validAt: OwnedNftsValidAt;\n}\n\n/**\n * Represents an NFT with metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedNft extends Nft {\n  /** The token balance of the NFT. */\n  balance: string;\n}\n\n/**\n * Represents an NFT without metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedBaseNft extends BaseNft {\n  /** The token balance of the NFT. */\n  balance: string;\n}\n\n/** The block information at which the NFT sale information is valid at. */\nexport interface OwnedNftsValidAt {\n  /** The block number the sale information is valid at. */\n  blockNumber?: number;\n  /** The block hash. Used to detect reorgs. */\n  blockHash: string;\n  /** The timestamp for the block. */\n  blockTimestamp?: string;\n}\n\n/**\n * The response object for the {@link getOwnersForNft}.\n *\n * @public\n */\nexport interface GetOwnersForNftResponse {\n  /** An array of owner addresses for the provided token. */\n  owners: string[];\n\n  /** Optional The key for the next page of results, if applicable. */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: string[];\n  /**\n   * Total count of unique owners. Only present if\n   * {@link GetOwnersForContractOptions.includeCount} is true.\n   */\n  totalCount?: number;\n\n  /** Optional page key that is returned when a collection has more than 50,000 owners. */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: NftContractOwner[];\n\n  /** Optional page key that is returned when a collection has more than 50,000 owners. */\n  pageKey?: string;\n}\n\nexport interface GetNftMetadataBatchResponse {\n  /** An array of NFT metadata objects. */\n  nfts: Nft[];\n}\n\nexport interface GetContractMetadataBatchResponse {\n  contracts: NftContract[];\n}\n\n/**\n * An object representing the owner of an NFT and its corresponding token\n * balances in a {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractOwner {\n  /** The NFT's owner address. */\n  ownerAddress: string;\n\n  /** A list of objects containing token balances for the provided NFT contract. */\n  tokenBalances: NftContractTokenBalance[];\n}\n\n/**\n * An object representing the owned token and balance values in a\n * {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractTokenBalance {\n  /** The token id owned in the NFT contract. */\n  tokenId: string;\n  /** The token id balance for the provided owner. */\n  balance: string;\n}\n\nexport interface IsSpamContractResponse {\n  isSpamContract: boolean;\n}\n\nexport interface IsAirdropNftResponse {\n  isAirdrop: boolean;\n}\n\nexport interface GetSpamContractsResponse {\n  contractAddresses: string[];\n}\n\n/**\n * Additional options for the {@link NftNamespace.getNftMetadata} method.\n */\nexport interface GetNftMetadataOptions {\n  /** Optional field to specify the type of token to speed up the query. */\n  tokenType?: NftTokenType;\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Whether to refresh the metadata for the given NFT token before returning\n   * the response. Defaults to false for faster response times.\n   */\n  refreshCache?: boolean;\n}\n\n/**\n * Represents an NFT token to fetch metadata for in a\n * {@link NftNamespace.getNftMetadataBatch} method.\n */\nexport interface NftMetadataBatchToken {\n  /** The NFT contract address. Limited to ERC721 and ERC1155 tokens. */\n  contractAddress: string;\n\n  /** The id of the NFT. */\n  tokenId: BigNumberish;\n\n  /** Optional field to specify the type of token to speed up the query. */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n}\n\n/** Additional options for the {@link NftNamespace.getNftMetadataBatch} method. */\nexport interface NftMetadataBatchOptions {\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Whether to refresh the metadata for the given NFT token before returning\n   * the response. Defaults to false for faster response times.\n   */\n  refreshCache?: boolean;\n}\n\n/**\n * The successful object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceMarketplace {\n  /** The floor price of the collection on the given marketplace */\n  floorPrice: number;\n  /** The currency in which the floor price is denominated */\n  priceCurrency: string;\n  /** The link to the collection on the given marketplace */\n  collectionUrl: string;\n  /** UTC timestamp of when the floor price was retrieved from the marketplace */\n  retrievedAt: string;\n}\n\n/**\n * The failing object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceError {\n  /** Error fetching floor prices from the given marketplace */\n  error: string;\n}\n\n/**\n * The response object for the {@link getFloorPrice} method.\n *\n * @public\n */\nexport interface GetFloorPriceResponse {\n  /**\n   * Name of the NFT marketplace where the collection is listed. Current\n   * marketplaces supported: OpenSea, LooksRare\n   */\n  openSea: FloorPriceMarketplace | FloorPriceError;\n  looksRare: FloorPriceMarketplace | FloorPriceError;\n}\n\n/**\n * Optional parameters object for the {@link getContractsForOwner} method\n *\n * @public\n */\nexport interface GetContractsForOwnerOptions {\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n\n  /**\n   * Configure the number of NFTs to return in each response. Maximum pages size\n   * is 100. Defaults to 100.\n   */\n  pageSize?: number;\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response. May not be used in\n   * conjunction with {@link excludeFilters}.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response. May not be used in\n   * conjunction with {@link includeFilters}\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * The response for the {@link NftNamespace.getContractsForOwner} method.\n *\n * @public\n */\nexport interface GetContractsForOwnerResponse {\n  /** The list of contracts, that match the query, held by the given address. */\n  contracts: NftContractForOwner[];\n\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n\n  /** Total number of NFT contracts held by the given address. */\n  totalCount: number;\n}\n\n/** Represents a single NFT contract data in the {@link GetContractsForOwnerResponse}. */\nexport interface NftContractForOwner extends NftContract {\n  /**\n   * Sum of NFT balances across all token IDs held by the owner. For\n   * non-fungible tokens this will be equal to the numDistinctTokensOwned, but\n   * it may be higher if the user holds some fungible ERC1155 tokens.\n   */\n  totalBalance: string;\n\n  /**\n   * Number of distinct token IDs held by the owner. For non-fungible tokens\n   * this will be equal to the totalBalance, but it may be lower if the user\n   * holds some fungible ERC1155 tokens.\n   */\n  numDistinctTokensOwned: string;\n\n  /** Whether the NFT contract is considered spam. */\n  isSpam: boolean;\n\n  /**\n   * Object containing an NFT owned by the owner for this particular contract.\n   * Use this to display a sample NFT for the contract.\n   */\n  displayNft: DisplayNftForContract;\n\n  /** Object containing different URLs for the NFT media. */\n  image: NftImage;\n}\n\n/** Sample owned NFT on a {@link NftContract}, used to display placeholder info. */\nexport interface DisplayNftForContract {\n  /** A token id of an NFT owned by the owner on the contract. */\n  tokenId: string;\n  /** The name of the NFT, if available. */\n  name?: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getTransfersForOwner}\n * method.\n */\nexport interface GetTransfersForContractOptions {\n  /** Starting block (inclusive) to get transfers from. */\n  fromBlock?: BlockTag;\n  /** Ending block (inclusive) to get transfers from. */\n  toBlock?: BlockTag;\n  /**\n   * Whether to return results in ascending or descending order by block number.\n   * Defaults to ascending if omitted.\n   */\n  order?: SortingOrder;\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Response object for NFT methods that fetch NFTs that were transferred or\n * minted (ex: {@link NftNamespace.getTransfersForOwner} or\n * {@link NftNamespace.getMintedNfts}).\n */\nexport interface TransfersNftResponse {\n  /** An array of NFTs.*/\n  nfts: TransferredNft[];\n  /** Optional page key to use to fetch the next group of NFTs. */\n  pageKey?: string;\n}\n\n/**\n * NFT with extra data for a single NFT that was transferred or minted.\n */\nexport interface TransferredNft extends Nft {\n  /**\n   * The address the NFT was from. For minted NFTs, this field is the set to\n   * `0x0000000000000000000000000000000000000000`.\n   **/\n  from: string;\n  /** The address the NFT was sent or minted to. */\n  to?: string;\n  /** The transaction hash where the transfer or mint occurred. */\n  transactionHash: string;\n  /** The block number as a hex string of when the transfer or mint occurred. */\n  blockNumber: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getMintedNfts} method.\n */\nexport interface GetMintedNftsOptions {\n  /**\n   * List of NFT contract addresses to filter mints by. If omitted, defaults to\n   * all contract addresses.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Filter mints by ERC721 vs ERC1155 contracts. If omitted, defaults to all\n   * NFTs.\n   */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getNftSales} method.\n *\n * This interface is used to filter the NFT sales data.\n *\n * @public\n */\nexport interface GetNftSalesOptions {\n  /** The block number to start fetching NFT sales data from. */\n  fromBlock?: number | 'latest';\n\n  /** The block number limit to fetch NFT sales data from. */\n  toBlock?: number | 'latest';\n\n  /** Whether to return the results in ascending or descending order by block number. */\n  order?: SortingOrder;\n\n  /** The NFT marketplace to filter sales by. */\n  marketplace?: NftSaleMarketplace;\n\n  /** The address of the NFT buyer to filter sales by. */\n  buyerAddress?: string;\n\n  /** The address of the NFT seller to filter sales by. */\n  sellerAddress?: string;\n\n  /**\n   * Filter by whether the buyer or seller was the taker in the NFT trade.\n   * Defaults to returning both buyer and seller taker trades.\n   */\n  taker?: NftSaleTakerType;\n\n  /** The maximum number of NFT sales to return. */\n  limit?: number;\n\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n}\n\n/**\n * Alternative optional parameters object for the {@link NftNamespace.getNftSales}\n * method that allows filtering results by contractAddress.\n *\n * This interface is used to filter the NFT sales data.\n *\n * @public\n */\nexport interface GetNftSalesOptionsByContractAddress\n  extends GetNftSalesOptions {\n  /** The contract address of a NFT collection to filter sales by. */\n  contractAddress: string;\n\n  /** The token ID of an NFT within the specified contractAddress to filter sales by. */\n  tokenId?: BigNumberish;\n}\n\n/**\n * The response for the {@link NftNamespace.getNftSales} method.\n *\n * @public\n */\nexport interface GetNftSalesResponse {\n  /** List of NFT sales that match the query */\n  nftSales: NftSale[];\n  /**\n   * Block Information of the block as of which the corresponding data is valid.\n   */\n  validAt: NftSaleValidAt;\n  /**\n   * The page key to use to fetch the next page if more results are available.\n   */\n  pageKey?: string;\n}\n\n/** Represents a single NFT sale data in the {@link GetNftSalesResponse}. */\nexport interface NftSale {\n  /** The marketplace the sale took place on. */\n  marketplace: NftSaleMarketplace;\n\n  /** The marketplace address the sale was on. */\n  marketplaceAddress: string;\n\n  /** The NFT contract address. */\n  contractAddress: string;\n\n  /** The decimal token ID of the NFT being sold. */\n  tokenId: string;\n\n  /** The number of tokens sold in the sale as a decimal integer string. */\n  quantity: string;\n\n  /** The address of the buyer in the NFT sale. */\n  buyerAddress: string;\n\n  /** The address of the seller in the NFT sale. */\n  sellerAddress: string;\n\n  /** Whether the price taker in the trade was the buyer or the seller. */\n  taker: NftSaleTakerType;\n\n  /** The payment from buyer to the seller. */\n  sellerFee: NftSaleFeeData;\n\n  /** The payment from buyer to the marketplace. */\n  protocolFee: NftSaleFeeData;\n\n  /** The payment from buyer to the royalty address of the NFT collection. */\n  royaltyFee: NftSaleFeeData;\n\n  /** The block number the NFT sale took place in. */\n  blockNumber: number;\n\n  /** The log number of the sale event emitted within the block. */\n  logIndex: number;\n\n  /** The index of the token within the bundle of NFTs sold in the sale. */\n  bundleIndex: number;\n\n  /** The transactionHash of the NFT sale. */\n  transactionHash: string;\n}\n\n/** The block information at which the NFT sale information is valid at. */\nexport interface NftSaleValidAt {\n  /** The block number the sale information is valid at. */\n  blockNumber: number;\n  /** The block hash. Used to detect reorgs. */\n  blockHash?: string;\n  /** The timestamp for the block. */\n  blockTimestamp?: string;\n}\n\n/**\n * Fee detail for an NFT sale.\n *\n * @public\n */\nexport interface NftSaleFeeData {\n  /** The fee payment amount as a decimal integer string. */\n  amount?: string;\n\n  tokenAddress?: string;\n\n  /** The symbol of the token used for the payment. */\n  symbol?: string;\n\n  /** The number of decimals of the token used for the payment. */\n  decimals?: number;\n}\n\n/**\n * Enum representing the supported NFT marketplaces by the\n * {@link NftNamespace.getNftSales} method.\n *\n * @public\n */\nexport enum NftSaleMarketplace {\n  SEAPORT = 'seaport',\n  LOOKSRARE = 'looksrare',\n  X2Y2 = 'x2y2',\n  WYVERN = 'wyvern',\n  CRYPTOPUNKS = 'cryptopunks',\n  BLUR = 'blur',\n  UNKNOWN = 'unknown'\n}\n\n/**\n * Mint information for the NFT.\n */\nexport interface NftMint {\n  /** The address that the NFT was minted to. */\n  mintAddress?: string;\n  /** The block number that the NFT was minted on. */\n  blockNumber?: number;\n  /** The timestamp the NFT was minted on. */\n  timestamp?: string;\n  /** The transaction hash of the transaction that minted the NFT. */\n  transactionHash?: string;\n}\n\n/**\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\n * method.\n *\n * @public\n */\nexport enum NftSaleTakerType {\n  BUYER = 'buyer',\n  SELLER = 'seller'\n}\n\nexport interface SearchContractMetadataResponse {\n  contracts: NftContract[];\n}\n\n/**\n * Response object for the {@link NftNamespace.computeRarity} method.\n */\nexport interface ComputeRarityResponse {\n  rarities: NftAttributeRarity[];\n}\n\n/**\n * Information about the rarity of an NFT's attribute in the specified collection.\n *\n * @public\n */\nexport interface NftAttributeRarity {\n  /** Name of the NFT's attribute. */\n  value: string;\n\n  /** The type of NFT attribute. */\n  traitType: string;\n\n  /**\n   * A number from 0 to 1 representing the prevalence of this value for this\n   * trait type in the current collection.\n   */\n  prevalence: number;\n}\n\n/**\n * Summary of the attribute prevalence for the specified NFT contract.\n *\n * @public\n */\nexport interface NftAttributesResponse {\n  /** The specified NFT contract's address. */\n  contractAddress: string;\n\n  /** The specified NFT contract's total supply. */\n  totalSupply: string;\n\n  /**\n   * The attribute prevalence of each trait grouped by the trait type for the\n   * provided NFT.\n   */\n  summary: Record<string, Record<string, number>>;\n}\n\n/** The current state of the NFT contract refresh process. */\nexport enum NftRefreshState {\n  /** The provided contract is not an NFT or does not contain metadata. */\n  DOES_NOT_EXIST = 'does_not_exist',\n\n  /** The contract has already been queued for refresh. */\n  ALREADY_QUEUED = 'already_queued',\n\n  /** The contract is currently being refreshed. */\n  IN_PROGRESS = 'in_progress',\n\n  /** The contract refresh is complete. */\n  FINISHED = 'finished',\n\n  /** The contract refresh has been queued and await execution. */\n  QUEUED = 'queued',\n\n  /** The contract was unable to be queued due to an internal error. */\n  QUEUE_FAILED = 'queue_failed'\n}\n\n/**\n * Metadata object returned in a {@link AssetTransfersResult} object if the asset\n * transferred is an ERC1155.\n *\n * @public\n */\nexport interface ERC1155Metadata {\n  tokenId: string;\n  value: string;\n}\n\n/**\n * Information about the underlying contract for the asset that was transferred\n * in a {@link AssetTransfersResult} object.\n *\n * @public\n */\nexport interface RawContract {\n  /**\n   * The raw transfer value as a hex string. `null` if the transfer was for an\n   * ERC721 or ERC1155 token.\n   */\n  value: string | null;\n\n  /** The contract address. `null` if it was an internal or external transfer. */\n  address: string | null;\n\n  /**\n   * The number of decimals in the contract as a hex string. `null` if the value\n   * is not in the contract and not available from other sources.\n   */\n  decimal: string | null;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata: false;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances?: boolean;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n\n  /**\n   * If true, include total count of owners in the response. Only applicable\n   * when `withTokenBalances` is not set to `true`.\n   */\n  includeCount?: boolean;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances: true;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link getOwnersForNft} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided NFT contract.\n *\n * @public\n */\nexport interface GetOwnersForNftOptions {\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n\n  /**\n   * Sets the total number of owners to return in the response.\n   */\n  pageSize?: number;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs without metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractBaseNftsResponse {\n  /** An array of NFTs without metadata. */\n  nfts: BaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs with metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractNftsResponse {\n  /** An array of NFTs with metadata. */\n  nfts: Nft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/** OpenSea's metadata for an NFT collection. */\nexport interface OpenSeaCollectionMetadata {\n  /** The floor price of the collection. */\n  floorPrice?: number;\n  /** The name of the collection on OpenSea. */\n  collectionName?: string;\n  /** The slug of the collection on OpenSea. */\n  collectionSlug?: string;\n  /** The approval status of the collection on OpenSea. */\n  safelistRequestStatus?: OpenSeaSafelistRequestStatus;\n  /** The image URL determined by OpenSea. */\n  imageUrl?: string;\n  /**\n   * The banner image URL determined by OpenSea.\n   * @deprecated Use {@link bannerImageUrl} instead.\n   */\n  imageBannerUrl?: string;\n  /** The banner image URL determined by OpenSea. */\n  bannerImageUrl?: string;\n  /** The description of the collection on OpenSea. */\n  description?: string;\n  /** The homepage of the collection as determined by OpenSea. */\n  externalUrl?: string;\n  /** The Twitter handle of the collection. */\n  twitterUsername?: string;\n  /** The Discord URL of the collection. */\n  discordUrl?: string;\n  /** Timestamp of when the OpenSea metadata was last ingested by Alchemy. */\n  lastIngestedAt: string;\n}\n\n/**\n * Alchemy representation of an NFT contract.\n *\n * The BaseNftContract does not hold any metadata information and only contains\n * the address. The NftContract additionally contains the tokenType, name,\n * symbol, and more.\n *\n * @public\n */\nexport interface NftContract {\n  /** The address of the NFT contract. */\n  address: string;\n  /** The type of the token in the contract. */\n  tokenType: NftTokenType;\n  /** The name of the contract. */\n  name?: string;\n  /** The symbol of the contract. */\n  symbol?: string;\n  /**\n   * The number of NFTs in the contract as an integer string. This field is only\n   * available on ERC-721 contracts.\n   */\n  totalSupply?: string;\n  /** OpenSea's metadata for the contract. */\n  openSeaMetadata: OpenSeaCollectionMetadata;\n  /** The address that deployed the NFT contract. */\n  contractDeployer?: string;\n  /** The block number the NFT contract deployed in. */\n  deployedBlockNumber?: number;\n}\n\n/** NFT contract metadata with spam information. */\nexport interface NftContractForNft extends NftContract {\n  /** Whether the NFT contract is marked as spam. */\n  isSpam?: boolean;\n  /** Potential reasons why an NFT Contract was classified as spam. */\n  spamClassifications: NftSpamClassification[];\n}\n\n/**\n * Alchemy representation of an NFT collection\n *\n * @public\n */\nexport interface NftCollection {\n  /** The name of the collection. */\n  name: string;\n  /** The OpenSea human-readable slug of the collection. */\n  slug?: string;\n  /** The floor price of the collection*/\n  floorPrice?: NftCollectionFloorPrice;\n  /** The description of the collection. */\n  description?: string;\n  /** The homepage of the collection as determined by OpenSea. */\n  externalUrl?: string;\n  /** The Twitter handle of the collection. */\n  twitterUsername?: string;\n  /** The Discord URL of the collection. */\n  discordUrl?: string;\n}\n\n/**\n * Floor price object for an NFT collection.\n */\nexport interface NftCollectionFloorPrice {\n  /** The marketplace where the floor price was determined. */\n  marketplace?: NftCollectionMarketplace;\n  /** The floor price of the collection. */\n  floorPrice?: number;\n  /** The currency of the floor price. */\n  priceCurrency?: string;\n}\n\n/**\n * Enum representing the supported NFT marketplaces on a\n * {@link NftCollectionFloorPrice} object.\n */\nexport enum NftCollectionMarketplace {\n  OPENSEA = 'OpenSea'\n}\n\n/**\n * Alchemy representation of an NFT that doesn't contain metadata.\n *\n * The BaseNft object does not hold any metadata information and only contains\n * the NFT contract and token ID. The Nft object additionally contains the NFT\n * metadata, token URI information, and media.\n *\n * @public\n */\nexport interface BaseNft {\n  /** The contract address of the NFT. */\n  contractAddress: string;\n  /** The NFT token ID as an integer string. */\n  tokenId: string;\n}\n\n/**\n * Alchemy representation of an NFT.\n *\n * The BaseNft object does not hold any metadata information and only contains\n * the NFT contract and token ID. The Nft object additionally contains the NFT\n * metadata, token URI information, and media.\n *\n * @public\n */\nexport interface Nft {\n  /** The NFT's underlying contract and relevant contract metadata. */\n  contract: NftContractForNft;\n  /** The NFT token ID as an integer string. */\n  tokenId: string;\n  /** The type of NFT.*/\n  tokenType: NftTokenType;\n  /** The NFT name. */\n  name?: string;\n  /** The NFT description. */\n  description?: string;\n  /** Media URLs and information for the NFT */\n  image: NftImage;\n  /** The raw metadata for the NFT based on the metadata URI on the NFT contract. */\n  raw: NftRawMetadata;\n  /** URIs for accessing the NFT's metadata blob. */\n  tokenUri?: string;\n  /** When the NFT was last updated in the blockchain. Represented in ISO-8601 format. */\n  timeLastUpdated: string;\n  /**\n   * Time at which the NFT was most recently acquired by the user. Only\n   * available when specifying `orderBy: NftOrdering.TRANSFERTIME` in the\n   * request.\n   */\n  acquiredAt?: AcquiredAt;\n  /** Collection metadata for the NFT, if available. */\n  collection?: BaseNftCollection;\n  /** Mint information for the NFT. */\n  mint?: NftMint;\n}\n\n/**\n * A base collection object as part of an {@link Nft}.\n */\nexport interface BaseNftCollection {\n  /** The name of the collection. */\n  name: string;\n  /** The OpenSea human-readable slug of the collection. */\n  slug?: string;\n  /** The external URL for the collection. */\n  externalUrl?: string;\n  /** The banner image URL for the collection. */\n  bannerImageUrl?: string;\n}\n\n/**\n * The raw metadata for the NFT based on the metadata URI on the NFT contract.\n */\nexport interface NftRawMetadata {\n  /** The raw token URI on the NFT contract. */\n  tokenUri?: string;\n  /** The raw metadata parsed from the raw token URI. */\n  metadata: Record<string, any>;\n  /** Error message if the raw metadata could not be fetched. */\n  error?: string;\n}\n","import { Network } from './types';\n\n/**\n * The parameter field of {@link PricesNamespace.getTokenPriceByAddress}.\n * Represents a network and address pair for getting token prices.\n *\n * @public\n */\nexport interface TokenAddressRequest {\n  /** The network to get prices for. */\n  network: Network;\n  /** The contract address to get prices for. */\n  address: string;\n}\n\n/**\n * The parameter field of {@link PricesNamespace.getTokenPriceBySymbol}.\n * Contains the list of token symbols to get prices for.\n *\n * @public\n */\nexport interface GetTokenPriceBySymbolRequest {\n  /** The token symbols to get prices for. */\n  symbols: string[];\n}\n\n/**\n * The response type of {@link PricesNamespace.getTokenPriceByAddress}.\n * Contains an array of token price results for each requested address.\n *\n * @public\n */\nexport interface GetTokenPriceByAddressResponse {\n  /** The token price data for each requested address. */\n  data: TokenPriceByAddressResult[];\n}\n\n/**\n * The response type of {@link PricesNamespace.getTokenPriceBySymbol}.\n * Contains an array of token price results for each requested symbol.\n *\n * @public\n */\nexport interface GetTokenPriceBySymbolResponse {\n  /** The token price data for each requested symbol. */\n  data: TokenPriceBySymbolResult[];\n}\n\n/**\n * Represents a token's price information at a specific point in time.\n *\n * @public\n */\nexport interface TokenPrice {\n  /** The currency the price is denominated in (e.g. 'usd'). */\n  currency: string;\n  /** The price value as a string to preserve precision. */\n  value: string;\n  /** ISO timestamp of when the price was last updated. */\n  lastUpdatedAt: string;\n}\n\n/**\n * Error information returned when a token price request fails.\n *\n * @public\n */\nexport interface TokenPriceError {\n  /** The error message describing why the request failed. */\n  message: string;\n}\n\n/**\n * The result object returned for each address in a\n * {@link GetTokenPriceByAddressResponse}.\n *\n * @public\n */\nexport interface TokenPriceByAddressResult {\n  /** The network the token is on. */\n  network: string;\n  /** The token's contract address. */\n  address: string;\n  /** Array of price data for the token. Empty if there was an error. */\n  prices: TokenPrice[];\n  /** Error information if the request failed, null otherwise. */\n  error: TokenPriceError | null;\n}\n\n/**\n * The result object returned for each symbol in a\n * {@link GetTokenPriceBySymbolResponse}.\n *\n * @public\n */\nexport interface TokenPriceBySymbolResult {\n  /** The token symbol that was queried. */\n  symbol: string;\n  /** Array of price data for the token. Empty if there was an error. */\n  prices: TokenPrice[];\n  /** Error information if the request failed, null otherwise. */\n  error: TokenPriceError | null;\n}\n\n/**\n * Valid time intervals for historical price data.\n *\n * @public\n */\nexport enum HistoricalPriceInterval {\n  /** 5-minute intervals */\n  FIVE_MINUTE = '5m',\n  /** 1-hour intervals */\n  ONE_HOUR = '1h',\n  /** 1-day intervals */\n  ONE_DAY = '1d'\n}\n\n/**\n * Historical price data point.\n *\n * @public\n */\nexport interface HistoricalPriceDataPoint {\n  /** Price value as a string to preserve precision */\n  value: string;\n  /** ISO timestamp for the price data point */\n  timestamp: string;\n}\n\n/**\n * Base interface for historical price responses.\n *\n * @public\n */\ninterface BaseHistoricalPriceResponse {\n  /** Currency the prices are denominated in */\n  currency: string;\n  /** Array of historical price data points */\n  data: HistoricalPriceDataPoint[];\n}\n\n/**\n * Response type for historical prices by symbol requests.\n *\n * @public\n */\nexport interface HistoricalPriceBySymbolResponse\n  extends BaseHistoricalPriceResponse {\n  /** Token symbol that was queried */\n  symbol: string;\n}\n\n/**\n * Response type for historical prices by network/address requests.\n *\n * @public\n */\nexport interface HistoricalPriceByAddressResponse\n  extends BaseHistoricalPriceResponse {\n  /** Network that was queried */\n  network: string;\n  /** Contract address that was queried */\n  address: string;\n}\n\n/**\n * Type helper to infer the correct response type based on the request type.\n *\n * @public\n */\nexport type HistoricalPriceResponse =\n  | HistoricalPriceBySymbolResponse\n  | HistoricalPriceByAddressResponse;\n","import { Network as NetworkFromEthers } from '@ethersproject/networks';\n\nimport { Network } from '../types/types';\n\nexport const DEFAULT_ALCHEMY_API_KEY = 'demo';\nexport const DEFAULT_NETWORK = Network.ETH_MAINNET;\nexport const DEFAULT_MAX_RETRIES = 5;\nexport const DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\n\n/**\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\n * endpoints only work with non eth json-rpc requests.\n *\n * @internal\n */\nexport function getAlchemyHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyNftHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/nft/v3/${apiKey}`;\n}\n\nexport function getAlchemyWsUrl(network: Network, apiKey: string): string {\n  return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyWebhookHttpUrl(): string {\n  return 'https://dashboard.alchemy.com/api';\n}\n\nexport function getPricesBaseUrl(apiKey: string): string {\n  return `https://api.g.alchemy.com/prices/v1/${apiKey}`;\n}\n\nexport enum AlchemyApiType {\n  BASE,\n  NFT,\n  WEBHOOK,\n  PRICES\n}\n\n/**\n * Mapping of network names to their corresponding Network strings used to\n * create an Ethers.js Provider instance.\n */\nexport const EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_GOERLI]: 'goerli',\n  [Network.ETH_SEPOLIA]: 'sepolia',\n  [Network.OPT_MAINNET]: 'optimism',\n  [Network.OPT_GOERLI]: 'optimism-goerli',\n  [Network.OPT_SEPOLIA]: 'optimism-sepolia',\n  [Network.ARB_MAINNET]: 'arbitrum',\n  [Network.ARB_GOERLI]: 'arbitrum-goerli',\n  [Network.ARB_SEPOLIA]: 'arbitrum-sepolia',\n  [Network.MATIC_MAINNET]: 'matic',\n  [Network.MATIC_MUMBAI]: 'maticmum',\n  [Network.MATIC_AMOY]: 'maticamoy',\n  [Network.ASTAR_MAINNET]: 'astar-mainnet',\n  [Network.POLYGONZKEVM_MAINNET]: 'polygonzkevm-mainnet',\n  [Network.POLYGONZKEVM_TESTNET]: 'polygonzkevm-testnet',\n  [Network.POLYGONZKEVM_CARDONA]: 'polygonzkevm-cardona',\n  [Network.BASE_MAINNET]: 'base-mainnet',\n  [Network.BASE_GOERLI]: 'base-goerli',\n  [Network.BASE_SEPOLIA]: 'base-sepolia',\n  [Network.ZKSYNC_MAINNET]: 'zksync-mainnet',\n  [Network.ZKSYNC_SEPOLIA]: 'zksync-sepolia',\n  [Network.SHAPE_MAINNET]: 'shape-mainnet',\n  [Network.SHAPE_SEPOLIA]: 'shape-sepolia',\n  [Network.LINEA_MAINNET]: 'linea-mainnet',\n  [Network.LINEA_SEPOLIA]: 'linea-sepolia',\n  [Network.FANTOM_MAINNET]: 'fantom-mainnet',\n  [Network.FANTOM_TESTNET]: 'fantom-testnet',\n  [Network.ZETACHAIN_MAINNET]: 'zetachain-mainnet',\n  [Network.ZETACHAIN_TESTNET]: 'zetachain-testnet',\n  [Network.ARBNOVA_MAINNET]: 'arbnova-mainnet',\n  [Network.BLAST_MAINNET]: 'blast-mainnet',\n  [Network.BLAST_SEPOLIA]: 'blast-sepolia',\n  [Network.MANTLE_MAINNET]: 'mantle-mainnet',\n  [Network.MANTLE_SEPOLIA]: 'mantle-sepolia',\n  [Network.SCROLL_MAINNET]: 'scroll-mainnet',\n  [Network.SCROLL_SEPOLIA]: 'scroll-sepolia',\n  [Network.GNOSIS_MAINNET]: 'gnosis-mainnet',\n  [Network.GNOSIS_CHIADO]: 'gnosis-chiado',\n  [Network.BNB_MAINNET]: 'bnb-mainnet',\n  [Network.BNB_TESTNET]: 'bnb-testnet',\n  [Network.AVAX_MAINNET]: 'avax-mainnet',\n  [Network.AVAX_FUJI]: 'avax-fuji',\n  [Network.CELO_MAINNET]: 'celo-mainnet',\n  [Network.CELO_ALFAJORES]: 'celo-alfajores',\n  [Network.METIS_MAINNET]: 'metis-mainnet',\n  [Network.OPBNB_MAINNET]: 'opbnb-mainnet',\n  [Network.OPBNB_TESTNET]: 'opbnb-testnet',\n  [Network.BERACHAIN_BARTIO]: 'berachain-bartio',\n  [Network.SONEIUM_MINATO]: 'soneium-minato',\n  [Network.WORLDCHAIN_MAINNET]: 'worldchain-mainnet',\n  [Network.WORLDCHAIN_SEPOLIA]: 'worldchain-sepolia',\n  [Network.ROOTSTOCK_MAINNET]: 'rootstock-mainnet',\n  [Network.ROOTSTOCK_TESTNET]: 'rootstock-testnet',\n  [Network.FLOW_MAINNET]: 'flow-mainnet',\n  [Network.FLOW_TESTNET]: 'flow-testnet'\n};\n\n/**\n * Mapping of network names to their corresponding Ethers Network objects. These\n * networks are not yet supported by Ethers and are listed here to be overriden\n * in the provider.\n */\nexport const CustomNetworks: { [key: string]: NetworkFromEthers } = {\n  'arbitrum-goerli': {\n    chainId: 421613,\n    name: 'arbitrum-goerli'\n  },\n  'arbitrum-sepolia': {\n    chainId: 421614,\n    name: 'arbitrum-sepolia'\n  },\n  'astar-mainnet': {\n    chainId: 592,\n    name: 'astar-mainnet'\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: 'sepolia'\n  },\n  'optimism-sepolia': {\n    chainId: 11155420,\n    name: 'optimism-sepolia'\n  },\n  'polygonzkevm-mainnet': {\n    chainId: 1101,\n    name: 'polygonzkevm-mainnet'\n  },\n  'polygonzkevm-testnet': {\n    chainId: 1442,\n    name: 'polygonzkevm-testnet'\n  },\n  'polygonzkevm-cardona': {\n    chainId: 2442,\n    name: 'polygonzkevm-cardona'\n  },\n  'base-mainnet': {\n    chainId: 8453,\n    name: 'base-mainnet'\n  },\n  'base-goerli': {\n    chainId: 84531,\n    name: 'base-goerli'\n  },\n  'base-sepolia': {\n    chainId: 84532,\n    name: 'base-sepolia'\n  },\n  maticamoy: {\n    chainId: 80002,\n    name: 'maticamoy'\n  },\n  'zksync-mainnet': {\n    chainId: 324,\n    name: 'zksync-mainnet'\n  },\n  'zksync-sepolia': {\n    chainId: 300,\n    name: 'zksync-sepolia'\n  },\n  'shape-mainnet': {\n    chainId: 360,\n    name: 'shape-mainnet'\n  },\n  'shape-sepolia': {\n    chainId: 11011,\n    name: 'shape-sepolia'\n  },\n  'linea-mainnet': {\n    chainId: 59144,\n    name: 'linea-mainnet'\n  },\n  'linea-sepolia': {\n    chainId: 59141,\n    name: 'linea-sepolia'\n  },\n  'fantom-mainnet': {\n    chainId: 250,\n    name: 'fantom-mainnet'\n  },\n  'fantom-testnet': {\n    chainId: 4002,\n    name: 'fantom-testnet'\n  },\n  'zetachain-mainnet': {\n    chainId: 7000,\n    name: 'zetachain-mainnet'\n  },\n  'zetachain-testnet': {\n    chainId: 7001,\n    name: 'zetachain-testnet'\n  },\n  'arbnova-mainnet': {\n    chainId: 42170,\n    name: 'arbnova-mainnet'\n  },\n  'blast-mainnet': {\n    chainId: 81457,\n    name: 'blast-mainnet'\n  },\n  'blast-sepolia': {\n    chainId: 168587773,\n    name: 'blast-sepolia'\n  },\n  'mantle-mainnet': {\n    chainId: 5000,\n    name: 'mantle-mainnet'\n  },\n  'mantle-sepolia': {\n    chainId: 5003,\n    name: 'mantle-sepolia'\n  },\n  'scroll-mainnet': {\n    chainId: 534352,\n    name: 'scroll-mainnet'\n  },\n  'scroll-sepolia': {\n    chainId: 534351,\n    name: 'scroll-sepolia'\n  },\n  'gnosis-mainnet': {\n    chainId: 100,\n    name: 'gnosis-mainnet'\n  },\n  'gnosis-chiado': {\n    chainId: 10200,\n    name: 'gnosis-chiado'\n  },\n  'bnb-mainnet': {\n    chainId: 56,\n    name: 'bnb-mainnet'\n  },\n  'bnb-testnet': {\n    chainId: 97,\n    name: 'bnb-testnet'\n  },\n  'avax-mainnet': {\n    chainId: 43114,\n    name: 'avax-mainnet'\n  },\n  'avax-fuji': {\n    chainId: 43113,\n    name: 'avax-fuji'\n  },\n  'celo-mainnet': {\n    chainId: 42220,\n    name: 'celo-mainnet'\n  },\n  'celo-alfajores': {\n    chainId: 44787,\n    name: 'celo-alfajores'\n  },\n  'metis-mainnet': {\n    chainId: 1088,\n    name: 'metis-mainnet'\n  },\n  'opbnb-mainnet': {\n    chainId: 204,\n    name: 'opbnb-mainnet'\n  },\n  'opbnb-testnet': {\n    chainId: 5611,\n    name: 'opbnb-testnet'\n  },\n  'berachain-bartio': {\n    chainId: 80084,\n    name: 'berachain-bartio'\n  },\n  'soneium-minato': {\n    chainId: 0x79a,\n    name: 'soneium-minato'\n  },\n  'worldchain-mainnet': {\n    chainId: 0x1e0,\n    name: 'worldchain-mainnet'\n  },\n  'worldchain-sepolia': {\n    chainId: 0x12c1,\n    name: 'worldchain-sepolia'\n  },\n  'rootstock-mainnet': {\n    chainId: 0x1e,\n    name: 'rootstock-mainnet'\n  },\n  'rootstock-testnet': {\n    chainId: 0x1f,\n    name: 'rootstock-testnet'\n  },\n  'flow-mainnet': {\n    chainId: 747,\n    name: 'flow-mainnet'\n  },\n  'flow-testnet': {\n    chainId: 545,\n    name: 'flow-testnet'\n  }\n};\n\nexport function noop(): void {\n  // It's a no-op\n}\n\nexport const ETH_NULL_VALUE = '0x';\n\nexport const ETH_NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n","import { ConnectionInfo } from '@ethersproject/web';\n\nimport { AlchemySettings, Network } from '../types/types';\nimport {\n  AlchemyApiType,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_MAX_RETRIES,\n  DEFAULT_NETWORK,\n  DEFAULT_REQUEST_TIMEOUT,\n  getAlchemyHttpUrl,\n  getAlchemyNftHttpUrl,\n  getAlchemyWebhookHttpUrl,\n  getPricesBaseUrl\n} from '../util/const';\nimport type { AlchemyProvider } from './alchemy-provider';\nimport type { AlchemyWebSocketProvider } from './alchemy-websocket-provider';\n\n/**\n * This class holds the config information for the SDK client instance and\n * exposes the underlying providers for more advanced use cases.\n *\n * @public\n */\nexport class AlchemyConfig {\n  /** The Alchemy API key. */\n  readonly apiKey: string;\n\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /** The maximum number of retries to perform. */\n  readonly maxRetries: number;\n\n  /** Setting to enable automatic batching on json-rpc requests. Defaults to false.*/\n  readonly batchRequests: boolean;\n\n  readonly connectionInfoOverrides?: Partial<ConnectionInfo>;\n\n  /**\n   * The optional hardcoded URL to send requests to instead of using the network\n   * and apiKey.\n   */\n  readonly url?: string;\n\n  /** The optional Alchemy auth token to use when sending requests with the Notify API. */\n  readonly authToken?: string;\n\n  /**\n   * The optional Request timeout provided in `ms` for NFT and NOTIFY API. Defaults to 0.\n   */\n  readonly requestTimeout?: number;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyProvider: Promise<AlchemyProvider> | undefined;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyWssProvider:\n    | Promise<AlchemyWebSocketProvider>\n    | undefined;\n\n  constructor(config?: AlchemySettings) {\n    this.apiKey = config?.apiKey || DEFAULT_ALCHEMY_API_KEY;\n    this.network = config?.network || DEFAULT_NETWORK;\n    this.maxRetries = config?.maxRetries || DEFAULT_MAX_RETRIES;\n    this.url = config?.url;\n    this.authToken = config?.authToken;\n    this.batchRequests = config?.batchRequests || false;\n    this.requestTimeout = config?.requestTimeout || DEFAULT_REQUEST_TIMEOUT;\n    this.connectionInfoOverrides = config?.connectionInfoOverrides;\n  }\n\n  /**\n   * Returns the URL endpoint to send the HTTP request to. If a custom URL was\n   * provided in the config, that URL is returned. Otherwise, the default URL is\n   * from the network and API key.\n   *\n   * @param apiType - The type of API to get the URL for.\n   * @internal\n   */\n  _getRequestUrl(apiType: AlchemyApiType): string {\n    if (this.url !== undefined) {\n      return this.url;\n    } else if (apiType === AlchemyApiType.NFT) {\n      return getAlchemyNftHttpUrl(this.network, this.apiKey);\n    } else if (apiType === AlchemyApiType.WEBHOOK) {\n      return getAlchemyWebhookHttpUrl();\n    } else if (apiType === AlchemyApiType.PRICES) {\n      return getPricesBaseUrl(this.apiKey);\n    } else {\n      return getAlchemyHttpUrl(this.network, this.apiKey);\n    }\n  }\n\n  /**\n   * Returns an AlchemyProvider instance. Only one provider is created per\n   * Alchemy instance.\n   *\n   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\n   * has been expanded to support Alchemy's Enhanced APIs.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   *\n   * @public\n   */\n  getProvider(): Promise<AlchemyProvider> {\n    if (!this._baseAlchemyProvider) {\n      this._baseAlchemyProvider = (async () => {\n        const { AlchemyProvider } = await import('./alchemy-provider');\n        return new AlchemyProvider(this);\n      })();\n    }\n    return this._baseAlchemyProvider;\n  }\n\n  /**\n   * Returns an AlchemyWebsocketProvider instance. Only one provider is created\n   * per Alchemy instance.\n   *\n   * The AlchemyWebSocketProvider is a wrapper around ether's\n   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\n   * Subscription APIs, automatic backfilling, and other performance improvements.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   */\n  getWebSocketProvider(): Promise<AlchemyWebSocketProvider> {\n    if (!this._baseAlchemyWssProvider) {\n      this._baseAlchemyWssProvider = (async () => {\n        const { AlchemyWebSocketProvider } = await import(\n          './alchemy-websocket-provider'\n        );\n        return new AlchemyWebSocketProvider(this);\n      })();\n    }\n    return this._baseAlchemyWssProvider;\n  }\n}\n","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Converts a hex string to a decimal number.\n *\n * @param hexString - The hex string to convert.\n * @public\n */\nexport function fromHex(hexString: string): number {\n  return BigNumber.from(hexString).toNumber();\n}\n\n/**\n * Converts a number to a hex string.\n *\n * @param num - The number to convert to hex.\n * @public\n */\nexport function toHex(num: number): string {\n  return BigNumber.from(num).toHexString();\n}\n\n/**\n * Checks if a value is a hex string.\n *\n * @param possibleHexString - The value to check.\n * @public\n */\nexport function isHex(possibleHexString: string): boolean {\n  return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\n","import { toHex } from '../api/util';\nimport {\n  RawContractBaseNft,\n  RawGetNftSalesResponse,\n  RawNft,\n  RawNftCollection,\n  RawNftContract,\n  RawNftContractForNft,\n  RawNftContractForOwner,\n  RawOwnedBaseNft\n} from '../internal/raw-interfaces';\nimport {\n  BaseNft,\n  GetNftSalesResponse,\n  Nft,\n  NftCollection,\n  NftCollectionMarketplace,\n  NftContract,\n  NftContractForNft,\n  NftContractForOwner,\n  NftSaleMarketplace,\n  NftSaleTakerType,\n  NftSpamClassification,\n  NftTokenType\n} from '../types/nft-types';\nimport { OpenSeaSafelistRequestStatus } from '../types/types';\n\nexport function formatBlock(block: string | number): string {\n  if (typeof block === 'string') {\n    return block;\n  } else if (Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\n\nfunction stringToEnum<T extends string>(\n  x: string,\n  enumb: Record<string, T>\n): T | null {\n  return Object.values(enumb).includes(x as T) ? (x as T) : null;\n}\n\nexport function getNftContractForNftFromRaw(\n  rawNftContract: RawNftContractForNft\n): NftContractForNft {\n  return nullsToUndefined<NftContractForNft>({\n    ...getNftContractFromRaw(rawNftContract),\n    spamClassifications: rawNftContract.spamClassifications.map(\n      parseNftSpamClassification\n    )\n  });\n}\n\nexport function getNftContractsForOwnerFromRaw(\n  rawNftContract: RawNftContractForOwner\n): NftContractForOwner {\n  return nullsToUndefined<NftContractForOwner>({\n    ...getNftContractFromRaw(rawNftContract),\n    displayNft: rawNftContract.displayNft,\n    image: rawNftContract.image,\n    totalBalance: rawNftContract.totalBalance,\n    numDistinctTokensOwned: rawNftContract.numDistinctTokensOwned,\n    isSpam: rawNftContract.isSpam\n  });\n}\n\nexport function getNftContractFromRaw(\n  rawNftContract: RawNftContract\n): NftContract {\n  return nullsToUndefined<NftContract>({\n    ...rawNftContract,\n    tokenType: parseNftTokenType(rawNftContract.tokenType),\n    openSeaMetadata: {\n      ...rawNftContract.openSeaMetadata,\n      safelistRequestStatus: rawNftContract.openSeaMetadata\n        ?.safelistRequestStatus\n        ? stringToEnum(\n            rawNftContract.openSeaMetadata.safelistRequestStatus,\n            OpenSeaSafelistRequestStatus\n          )\n        : null\n    }\n  });\n}\n\nexport function getNftCollectionFromRaw(\n  rawNftCollection: RawNftCollection\n): NftCollection {\n  return nullsToUndefined<NftCollection>({\n    ...rawNftCollection,\n    floorPrice: {\n      ...rawNftCollection.floorPrice,\n      marketplace: parseNftCollectionMarketplace(\n        rawNftCollection.floorPrice.marketplace\n      )\n    }\n  });\n}\n\nexport function getBaseNftFromRaw(rawBaseNft: RawOwnedBaseNft): BaseNft;\nexport function getBaseNftFromRaw(\n  rawContractBaseNft: RawContractBaseNft,\n  contractAddress: string\n): BaseNft;\nexport function getBaseNftFromRaw(\n  rawBaseNft: RawOwnedBaseNft | RawContractBaseNft,\n  contractAddress?: string\n): BaseNft {\n  return {\n    contractAddress: contractAddress\n      ? contractAddress\n      : (rawBaseNft as RawOwnedBaseNft).contractAddress,\n    tokenId: rawBaseNft.tokenId\n  };\n}\n\nexport function getNftFromRaw(rawNft: RawNft): Nft {\n  return nullsToUndefined<Nft>({\n    ...rawNft,\n    contract: getNftContractForNftFromRaw(rawNft.contract),\n    tokenType: parseNftTokenType(rawNft.tokenType),\n    acquiredAt: rawNft.acquiredAt,\n    collection: rawNft.collection,\n    mint: rawNft.mint\n  });\n}\n\nexport function getNftSalesFromRaw(\n  rawNftSales: RawGetNftSalesResponse\n): GetNftSalesResponse {\n  return nullsToUndefined<GetNftSalesResponse>({\n    nftSales: rawNftSales.nftSales.map(rawNftSale => ({\n      ...rawNftSale,\n      marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\n      taker: parseNftTaker(rawNftSale.taker)\n    })),\n    validAt: rawNftSales.validAt,\n    pageKey: rawNftSales.pageKey\n  });\n}\n\nfunction parseNftSaleMarketplace(marketplace: string): NftSaleMarketplace {\n  switch (marketplace) {\n    case 'looksrare':\n      return NftSaleMarketplace.LOOKSRARE;\n    case 'seaport':\n      return NftSaleMarketplace.SEAPORT;\n    case 'x2y2':\n      return NftSaleMarketplace.X2Y2;\n    case 'wyvern':\n      return NftSaleMarketplace.WYVERN;\n    case 'cryptopunks':\n      return NftSaleMarketplace.CRYPTOPUNKS;\n    case 'blur':\n      return NftSaleMarketplace.BLUR;\n    default:\n      return NftSaleMarketplace.UNKNOWN;\n  }\n}\n\nfunction parseNftCollectionMarketplace(\n  marketplace: string | null\n): NftCollectionMarketplace | undefined {\n  switch (marketplace) {\n    case 'OpenSea':\n      return NftCollectionMarketplace.OPENSEA;\n    default:\n      return undefined;\n  }\n}\n\nfunction parseNftTaker(taker: string): NftSaleTakerType {\n  // The `.toLowerCase()` call is needed because the API returns the capitalized values\n  switch (taker.toLowerCase()) {\n    case 'buyer':\n      return NftSaleTakerType.BUYER;\n    case 'seller':\n      return NftSaleTakerType.SELLER;\n    default:\n      throw new Error(`Unsupported NftSaleTakerType ${taker}`);\n  }\n}\n\nfunction parseNftSpamClassification(s: string): NftSpamClassification {\n  const res = stringToEnum(s, NftSpamClassification);\n  if (res == null) {\n    return NftSpamClassification.Unknown;\n  }\n\n  return res;\n}\n\nfunction parseNftTokenType(tokenType: string | undefined): NftTokenType {\n  switch (tokenType) {\n    case 'erc721':\n    case 'ERC721':\n      return NftTokenType.ERC721;\n    case 'erc1155':\n    case 'ERC1155':\n      return NftTokenType.ERC1155;\n    case 'no_supported_nft_standard':\n    case 'NO_SUPPORTED_NFT_STANDARD':\n      return NftTokenType.NO_SUPPORTED_NFT_STANDARD;\n    case 'not_a_contract':\n    case 'NOT_A_CONTRACT':\n      return NftTokenType.NOT_A_CONTRACT;\n    default:\n      return NftTokenType.UNKNOWN;\n  }\n}\n\nexport const IS_BROWSER = typeof window !== 'undefined' && window !== null;\n\ntype WithNullableFields<T> = T extends undefined\n  ? null | undefined\n  : T extends (infer U)[]\n  ? WithNullableFields<U>[]\n  : T extends object\n  ? {\n      [K in keyof T]: WithNullableFields<T[K]>;\n    }\n  : T;\n\nexport function nullsToUndefined<U>(obj: WithNullableFields<U>): U {\n  if (obj === null || obj === undefined) {\n    return undefined as any;\n  }\n\n  if ((obj as any).constructor.name === 'Object' || Array.isArray(obj)) {\n    for (const key in obj) {\n      (obj as any)[key] = nullsToUndefined((obj as any)[key]);\n    }\n  }\n  return obj as any;\n}\n","import type { Log } from '@ethersproject/abstract-provider';\nimport { resolveProperties } from '@ethersproject/properties';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { toHex } from '../api/util';\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersWithMetadataParams,\n  AssetTransfersWithMetadataResponse,\n  Filter,\n  FilterByBlockHash,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse\n} from '../types/types';\nimport { formatBlock } from '../util/util';\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\n * other namespaces can access these methods without depending on the entire\n * CoreNamespace, or override the `srcMethod` param used for logging.\n */\n\n/**\n * Gets the asset transfers for the provided params.\n */\nexport async function getAssetTransfers(\n  config: AlchemyConfig,\n  params: AssetTransfersWithMetadataParams | AssetTransfersParams,\n  srcMethod = 'getAssetTransfers'\n): Promise<AssetTransfersResponse | AssetTransfersWithMetadataResponse> {\n  const provider = await config.getProvider();\n  if (params.fromAddress) {\n    params.fromAddress = await provider._getAddress(params.fromAddress);\n  }\n  if (params.toAddress) {\n    params.toAddress = await provider._getAddress(params.toAddress);\n  }\n  return provider._send(\n    'alchemy_getAssetTransfers',\n    [\n      {\n        ...params,\n        fromBlock:\n          params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n        toBlock:\n          params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n        maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n      }\n    ],\n    srcMethod\n  );\n}\n\nexport async function getTransactionReceipts(\n  config: AlchemyConfig,\n  params: TransactionReceiptsParams,\n  srcMethod = 'getTransactionReceipts'\n): Promise<TransactionReceiptsResponse> {\n  const provider = await config.getProvider();\n  return provider._send('alchemy_getTransactionReceipts', [params], srcMethod);\n}\n\n/**\n * This method is based on the ethers implementation of getLogs, but is expanded\n * to support specifying an address array in the filter.\n *\n * The main modifications made to support an address array are:\n * - Custom `getFilter()` method that supports an address array\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\n */\nexport async function getLogs(\n  config: AlchemyConfig,\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n): Promise<Array<Log>> {\n  const provider = await config.getProvider();\n  await provider.getNetwork();\n  const params = await resolveProperties({\n    filter: getFilter(config, filter)\n  });\n\n  const logs: Array<Log> = await provider.send('eth_getLogs', [params.filter]);\n  logs.forEach(log => {\n    if (log.removed == null) {\n      log.removed = false;\n    }\n  });\n  return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\n}\n\n/**\n * This method is based on and copied from the ethers implementation of\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\n *\n * This implementation is a hacky way to get around the ethers formatter. The\n * formatter is used to check the types of the `filter` params, but ethers does\n * not allow an array in the `address` field. To preserve the ethers formatter\n * on the other fields, we use the formatter to check the types of those other\n * fields, and then manually check the `address` field last.\n */\nasync function getFilter(\n  config: AlchemyConfig,\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n): Promise<Filter | FilterByBlockHash> {\n  // START MODIFIED CODE\n  const provider = await config.getProvider();\n  const resolvedFilter = await filter;\n  let result: any = {};\n  // END MODIFIED CODE\n\n  ['blockHash', 'topics'].forEach(key => {\n    if ((resolvedFilter as any)[key] == null) {\n      return;\n    }\n    result[key] = (resolvedFilter as any)[key];\n  });\n\n  ['fromBlock', 'toBlock'].forEach(key => {\n    if ((resolvedFilter as any)[key] == null) {\n      return;\n    }\n    result[key] = provider._getBlockTag((resolvedFilter as any)[key]);\n  });\n\n  // BEGIN MODIFIED CODE\n  // Format the `result` object using the ethers formatter without the `address`\n  // field.\n  result = provider.formatter.filter(await resolveProperties(result));\n\n  // After formatting the other fields, manually format the `address` field\n  // before adding it to the `result` object.\n  if (Array.isArray(resolvedFilter.address)) {\n    result.address = await Promise.all(\n      resolvedFilter.address.map(async (address: string) =>\n        provider._getAddress(address)\n      )\n    );\n  } else if (resolvedFilter.address != null) {\n    result.address = await provider._getAddress(resolvedFilter.address);\n  }\n\n  return result;\n  // END MODIFIED CODE\n}\n\n/**\n * DO NOT MODIFY.\n *\n * This function is directly copied over from ethers implementation of\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\n * the default export.\n *\n * This function returns a function that applies the formatter to an array of\n * values, and is used to format the logs returned by `getLogs()`.\n */\nfunction arrayOf(format: any): any {\n  return function (array: any): Array<any> {\n    if (!Array.isArray(array)) {\n      throw new Error('not an array');\n    }\n\n    const result: any = [];\n\n    array.forEach(value => {\n      result.push(format(value));\n    });\n\n    return result;\n  };\n}\n","import type {\n  Block,\n  BlockTag,\n  BlockWithTransactions,\n  FeeData,\n  Log,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport type { Network as EthersNetworkAlias } from '@ethersproject/networks/lib/types';\nimport type { Deferrable } from '@ethersproject/properties';\n\nimport {\n  getAssetTransfers,\n  getLogs,\n  getTransactionReceipts\n} from '../internal/core-api';\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersWithMetadataParams,\n  AssetTransfersWithMetadataResponse,\n  DeployResult,\n  Filter,\n  FilterByBlockHash,\n  GetTokensForOwnerOptions,\n  GetTokensForOwnerResponse,\n  OwnedToken,\n  TokenBalanceType,\n  TokenBalancesOptionsDefaultTokens,\n  TokenBalancesOptionsErc20,\n  TokenBalancesResponse,\n  TokenBalancesResponseErc20,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse\n} from '../types/types';\nimport { ETH_NULL_VALUE } from '../util/const';\nimport { nullsToUndefined } from '../util/util';\nimport { AlchemyConfig } from './alchemy-config';\nimport { toHex } from './util';\nimport { formatUnits } from './utils';\n\n/**\n * The core namespace contains all commonly-used [Ethers.js\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\n * methods. If you are already using Ethers.js, you should be simply able to\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\n * provider methods and it should just work.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.core`.\n */\nexport class CoreNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Returns the balance of a given address as of the provided block.\n   *\n   * @param addressOrName The address or name of the account to get the balance for.\n   * @param blockTag The optional block number or hash to get the balance for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getBalance(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getBalance(addressOrName, blockTag);\n  }\n\n  /**\n   * Checks if the provided address is a smart contract.\n   *\n   * @param address The address to check type for.\n   * @public\n   */\n  async isContractAddress(address: string): Promise<boolean> {\n    const provider = await this.config.getProvider();\n    const code = await provider.getCode(address);\n    return code !== '0x';\n  }\n\n  /**\n   * Returns the contract code of the provided address at the block. If there is\n   * no contract deployed, the result is `0x`.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getCode(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getCode(addressOrName, blockTag);\n  }\n\n  /**\n   * Return the value of the provided position at the provided address, at the\n   * provided block in `Bytes32` format.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param position The position of the storage slot to get.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getStorageAt(\n    addressOrName: string | Promise<string>,\n    position: BigNumberish | Promise<BigNumberish>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getStorageAt(addressOrName, position, blockTag);\n  }\n\n  /**\n   * Returns the number of transactions ever sent from the provided address, as\n   * of the provided block tag. This value is used as the nonce for the next\n   * transaction from the address sent to the network.\n   *\n   * @param addressOrName The address or name of the account to get the nonce for.\n   * @param blockTag The optional block number or hash to get the nonce for.\n   * @public\n   */\n  async getTransactionCount(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionCount(addressOrName, blockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of transaction\n   * hashes. To get the full transaction details on the block, use\n   * {@link getBlockWithTransactions} instead.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlock(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<Block> {\n    const provider = await this.config.getProvider();\n    return provider.getBlock(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of\n   * {@link TransactionResponse} objects.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlockWithTransactions(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<BlockWithTransactions> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockWithTransactions(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\n   *\n   * @public\n   */\n  async getNetwork(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.getNetwork();\n  }\n\n  /**\n   * Returns the block number of the most recently mined block.\n   *\n   * @public\n   */\n  async getBlockNumber(): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockNumber();\n  }\n\n  /**\n   * Returns the best guess of the current gas price to use in a transaction.\n   *\n   * @public\n   */\n  async getGasPrice(): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getGasPrice();\n  }\n\n  /**\n   * Returns the recommended fee data to use in a transaction.\n   *\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\n   * should be used.\n   *\n   * For legacy transactions and networks which do not support EIP-1559, the\n   * gasPrice should be used.\n   *\n   * @public\n   */\n  async getFeeData(): Promise<FeeData> {\n    const provider = await this.config.getProvider();\n    return provider.getFeeData();\n  }\n\n  /**\n   * Returns a Promise which will stall until the network has heen established,\n   * ignoring errors due to the target node not being active yet.\n   *\n   * This can be used for testing or attaching scripts to wait until the node is\n   * up and running smoothly.\n   *\n   * @public\n   */\n  async ready(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.ready;\n  }\n\n  /**\n   * Returns the result of executing the transaction, using call. A call does\n   * not require any ether, but cannot change any state. This is useful for\n   * calling getters on Contracts.\n   *\n   * @param transaction The transaction to execute.\n   * @param blockTag The optional block number or hash to get the call for.\n   * @public\n   */\n  async call(\n    transaction: Deferrable<TransactionRequest>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.call(transaction, blockTag);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link TransactNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Returns the transaction receipt for hash or null if the transaction has not\n   * been mined.\n   *\n   * To stall until the transaction has been mined, consider the\n   * waitForTransaction method below.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransactionReceipt(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionReceipt(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Returns an array of logs that match the provided filter.\n   *\n   * @param filter The filter object to use.\n   * @public\n   */\n  async getLogs(\n    filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n  ): Promise<Array<Log>> {\n    return getLogs(this.config, filter);\n  }\n\n  /**\n   * Allows sending a raw message to the Alchemy backend.\n   *\n   * @param method The method to call.\n   * @param params The parameters to pass to the method.\n   * @public\n   */\n  async send(method: string, params: Array<any>): Promise<any> {\n    const provider = await this.config.getProvider();\n    return provider.send(method, params);\n  }\n\n  /**\n   * Finds the address that deployed the provided contract and block number it\n   * was deployed in.\n   *\n   * NOTE: This method performs a binary search across all blocks since genesis\n   * and can take a long time to complete. This method is a convenience method\n   * that will eventually be replaced by a single call to an Alchemy endpoint\n   * with this information cached.\n   *\n   * @param contractAddress - The contract address to find the deployer for.\n   * @beta\n   */\n  async findContractDeployer(contractAddress: string): Promise<DeployResult> {\n    const provider = await this.config.getProvider();\n    const currentBlockNum = await provider.getBlockNumber();\n    if (\n      (await provider.getCode(contractAddress, currentBlockNum)) ===\n      ETH_NULL_VALUE\n    ) {\n      throw new Error(`Contract '${contractAddress}' does not exist`);\n    }\n\n    // Binary search for the block number that the contract was deployed in.\n    const firstBlock = await binarySearchFirstBlock(\n      0,\n      currentBlockNum + 1,\n      contractAddress,\n      this.config\n    );\n\n    // Find the first transaction in the block that matches the provided address.\n    const txReceipts = await getTransactionReceipts(\n      this.config,\n      {\n        blockNumber: toHex(firstBlock)\n      },\n      'findContractDeployer'\n    );\n    const matchingReceipt = txReceipts.receipts?.find(\n      receipt => receipt.contractAddress === contractAddress.toLowerCase()\n    );\n    return {\n      deployerAddress: matchingReceipt?.from,\n      blockNumber: firstBlock\n    };\n  }\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner address.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string\n  ): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner address given a list of contracts.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param contractAddresses A list of contract addresses to check. If omitted,\n   *   all ERC-20 tokens will be checked.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    contractAddresses?: string[]\n  ): Promise<TokenBalancesResponse>;\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner.\n   *\n   * This overload covers the erc-20 token type which includes a page key in the response.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    options: TokenBalancesOptionsErc20\n  ): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner, fetching from the top 100\n   * tokens by 24 hour volume.\n   *\n   * This overload covers the default token type which includes a page key in\n   * the response.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    options: TokenBalancesOptionsDefaultTokens\n  ): Promise<TokenBalancesResponse>;\n\n  async getTokenBalances(\n    addressOrName: string,\n    contractAddressesOrOptions?:\n      | string[]\n      | TokenBalancesOptionsDefaultTokens\n      | TokenBalancesOptionsErc20\n  ) {\n    const provider = await this.config.getProvider();\n    const address = await provider._getAddress(addressOrName);\n    if (Array.isArray(contractAddressesOrOptions)) {\n      if (contractAddressesOrOptions.length > 1500) {\n        throw new Error(\n          'You cannot pass in more than 1500 contract addresses to getTokenBalances()'\n        );\n      }\n      if (contractAddressesOrOptions.length === 0) {\n        throw new Error(\n          'getTokenBalances() requires at least one contractAddress when using an array'\n        );\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        [address, contractAddressesOrOptions],\n        'getTokenBalances'\n      );\n    } else {\n      const tokenType =\n        contractAddressesOrOptions === undefined\n          ? TokenBalanceType.ERC20\n          : contractAddressesOrOptions.type;\n      const params: Array<string | { pageKey: string }> = [address, tokenType];\n      if (\n        contractAddressesOrOptions?.type === TokenBalanceType.ERC20 &&\n        contractAddressesOrOptions.pageKey\n      ) {\n        params.push({ pageKey: contractAddressesOrOptions.pageKey });\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        params,\n        'getTokenBalances'\n      );\n    }\n  }\n\n  /**\n   * Returns the tokens that the specified address owns, along with the amount\n   * of each token and the relevant metadata.\n   *\n   * @param addressOrName The owner address to get the tokens with balances for.\n   * @param options Additional options to pass to the request.\n   * @public\n   */\n  async getTokensForOwner(\n    addressOrName: string,\n    options?: GetTokensForOwnerOptions\n  ): Promise<GetTokensForOwnerResponse> {\n    const provider = await this.config.getProvider();\n    const address = await provider._getAddress(addressOrName);\n    const params: any[] = [\n      address,\n      options?.contractAddresses ?? TokenBalanceType.ERC20\n    ];\n    if (options?.pageKey) {\n      params.push({ pageKey: options.pageKey });\n    }\n    const response = (await provider._send(\n      'alchemy_getTokenBalances',\n      params,\n      'getTokensForOwner'\n    )) as TokenBalancesResponseErc20;\n\n    const formattedBalances = response.tokenBalances.map(balance => ({\n      contractAddress: balance.contractAddress,\n      rawBalance: BigNumber.from(balance.tokenBalance!).toString()\n    }));\n\n    const metadataPromises = await Promise.allSettled(\n      response.tokenBalances.map(token =>\n        provider._send(\n          'alchemy_getTokenMetadata',\n          [token.contractAddress],\n          'getTokensForOwner',\n          /* forceBatch= */ true\n        )\n      )\n    );\n    const metadata: TokenMetadataResponse[] = metadataPromises.map(p =>\n      p.status === 'fulfilled'\n        ? p.value\n        : {\n            name: null,\n            symbol: null,\n            decimals: null,\n            logo: null\n          }\n    );\n    const ownedTokens = formattedBalances.map((balance, index) => ({\n      ...balance,\n      ...metadata[index],\n      balance:\n        metadata[index].decimals !== null\n          ? formatUnits(balance.rawBalance, metadata[index].decimals!)\n          : undefined\n    }));\n\n    return {\n      tokens: ownedTokens.map(t => nullsToUndefined<OwnedToken>(t)),\n      pageKey: response.pageKey\n    };\n  }\n\n  /**\n   * Returns metadata for a given token contract address.\n   *\n   * @param address The contract address to get metadata for.\n   * @public\n   */\n  async getTokenMetadata(address: string): Promise<TokenMetadataResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getTokenMetadata',\n      [address],\n      'getTokenMetadata'\n    );\n  }\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * This overload requires {@link AssetTransfersWithMetadataParams.withMetadata}\n   * to be set to `true`, which results in additional metadata returned in the\n   * response object.\n   *\n   * @param params An object containing fields for the asset transfer query\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams\n  ): Promise<AssetTransfersWithMetadataResponse>;\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * @param params An object containing fields for the asset transfer query.\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersParams\n  ): Promise<AssetTransfersResponse>;\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams | AssetTransfersParams\n  ): Promise<AssetTransfersResponse | AssetTransfersWithMetadataResponse> {\n    return getAssetTransfers(this.config, params);\n  }\n\n  /**\n   * Gets all transaction receipts for a given block by number or block hash.\n   *\n   * @param params An object containing fields for the transaction receipt query.\n   * @public\n   */\n  async getTransactionReceipts(\n    params: TransactionReceiptsParams\n  ): Promise<TransactionReceiptsResponse> {\n    return getTransactionReceipts(this.config, params);\n  }\n\n  /**\n   * Returns the underlying owner address for the provided ENS address, or `null`\n   * if the ENS name does not have an underlying address.\n   *\n   * @param name The ENS address name to resolve.\n   */\n  async resolveName(name: string): Promise<string | null> {\n    const provider = await this.config.getProvider();\n    return provider.resolveName(name);\n  }\n\n  /**\n   * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\n   *\n   * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\n   *\n   * @param address The address to look up the ENS domain name for.\n   */\n  async lookupAddress(address: string): Promise<string | null> {\n    const provider = await this.config.getProvider();\n    return provider.lookupAddress(address);\n  }\n}\n\n/**\n * Perform a binary search between an integer range of block numbers to find the\n * block number where the contract was deployed.\n *\n * @internal\n */\nasync function binarySearchFirstBlock(\n  start: number,\n  end: number,\n  address: string,\n  config: AlchemyConfig\n): Promise<number> {\n  if (start >= end) {\n    return end;\n  }\n\n  const mid = Math.floor((start + end) / 2);\n  const provider = await config.getProvider();\n  const code = await provider.getCode(address, mid);\n  if (code === ETH_NULL_VALUE) {\n    return binarySearchFirstBlock(mid + 1, end, address, config);\n  }\n  return binarySearchFirstBlock(start, mid, address, config);\n}\n","import {\n  BlockIdentifier,\n  DebugCallTrace,\n  DebugCallTracer,\n  DebugPrestateTrace,\n  DebugPrestateTracer,\n  DebugTransaction\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { hexStripZeros, hexValue, isHexString } from './utils';\n\n/**\n * The Debug namespace contains methods to access the non-standard RPC methods\n * for inspecting and debugging transactions.\n *\n * For more information on the different methods and use cases please read our\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\n * via `alchemy.debug`.\n */\nexport class DebugNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Runs an `eth_call` with the context of the provided block execution using the\n   * final state of the parent block as the base.\n   *\n   * @param transaction The transaction to debug trace.\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugCallTracer\n  ): Promise<DebugCallTrace>;\n\n  /**\n   * Runs an `eth_call` with the context of the provided block execution using the\n   * final state of the parent block as the base.\n   *\n   * @param transaction The transaction to debug trace.\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugPrestateTracer\n  ): Promise<DebugPrestateTrace>;\n  async traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugCallTracer | DebugPrestateTracer\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    const params = [transaction, blockIdentifier, parseTracerParams(tracer)];\n    return provider._send('debug_traceCall', params, 'traceCall');\n  }\n\n  /**\n   * Attempts to run the transaction in the exact same manner as it was executed\n   * on the network. It will replay any transaction that may have been executed\n   * prior to this one before it and will then attempt to execute the transaction\n   * that corresponds to the given hash.\n   *\n   * @param transactionHash The transaction hash of the transaction to trace.\n   * @param tracer Tracer type and configuration.\n   * @param timeout  A duration string of decimal numbers that overrides the\n   * default timeout of 5 seconds for JavaScript-based tracing calls. Max\n   * timeout is \"10s\". Valid time units are \"ns\", \"us\", \"ms\", \"s\" each with\n   * optional fraction, such as \"300ms\" or \"2s45ms\".\n   */\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugCallTracer,\n    timeout?: string\n  ): Promise<DebugCallTrace>;\n\n  /**\n   * Attempts to run the transaction in the exact same manner as it was executed\n   * on the network. It will replay any transaction that may have been executed\n   * prior to this one before it and will then attempt to execute the transaction\n   * that corresponds to the given hash.\n   *\n   * @param transactionHash The transaction hash of the transaction to trace.\n   * @param tracer Tracer type and configuration.\n   * @param timeout  A duration string of decimal numbers that overrides the\n   * default timeout of 5 seconds for JavaScript-based tracing calls. Max\n   * timeout is \"10s\". Valid time units are \"ns\", \"us\", \"ms\", \"s\" each with\n   * optional fraction, such as \"300ms\" or \"2s45ms\".\n   */\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugPrestateTracer,\n    timeout?: string\n  ): Promise<DebugPrestateTrace>;\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugCallTracer | DebugPrestateTracer,\n    timeout?: string\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    const params = [transactionHash, parseTracerParams(tracer, timeout)];\n    return provider._send('debug_traceTransaction', params, 'traceTransaction');\n  }\n\n  /**\n   * Replays a block that has already been mined.\n   *\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugCallTracer\n  ): Promise<DebugCallTrace>;\n  /**\n   * Replays a block that has already been mined.\n   *\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugPrestateTracer\n  ): Promise<DebugPrestateTrace>;\n  async traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugCallTracer | DebugPrestateTracer\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    let method: string;\n    let params: [string, RawTracer];\n    if (isHexString(blockIdentifier, 32)) {\n      method = 'debug_traceBlockByHash';\n      params = [blockIdentifier as string, parseTracerParams(tracer)];\n    } else {\n      method = 'debug_traceBlockByNumber';\n      const block =\n        typeof blockIdentifier === 'number'\n          ? hexStripZeros(hexValue(blockIdentifier))\n          : blockIdentifier;\n      params = [block as string, parseTracerParams(tracer)];\n    }\n    return provider._send(method, params, 'traceBlock');\n  }\n}\n\ninterface RawTracer {\n  tracer: string;\n  tracerConfig?: {\n    onlyTopCall?: boolean;\n    timeout?: string;\n  };\n}\n\nfunction parseTracerParams(\n  tracer: DebugCallTracer | DebugPrestateTracer,\n  timeout?: string\n): RawTracer {\n  return {\n    tracer: tracer.type,\n    ...(tracer.onlyTopCall !== undefined && {\n      tracerConfig: {\n        onlyTopCall: tracer.onlyTopCall,\n        timeout\n      }\n    })\n  };\n}\n","import { InputNftTokenType } from '../internal/nft-api';\nimport { NftTokenType } from '../types/nft-types';\n\nexport function sanitizeTokenType(tokenType?: NftTokenType): InputNftTokenType {\n  if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {\n    return tokenType;\n  }\n  return undefined;\n}\n","/**\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\n * default, the log level is set to INFO.\n *\n * The order is a follows: DEBUG < INFO < WARN < ERROR\n *\n * All log types above the current log level will be outputted.\n */\nexport enum LogLevel {\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The level of verbosity for the logger.\n *\n * @public\n */\nexport type LogLevelString = 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nconst logLevelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\n\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n\n/**\n * Configures the verbosity of logging. The default log level is `info`.\n *\n * @param logLevel - The verbosity of logging. Can be any of the following values:\n *\n *   - `debug`: The most verbose logging level.\n *   - `info`: The default logging level.\n *   - `warn`: A logging level for non-critical issues.\n *   - `error`: A logging level for critical issues.\n *   - `silent`: Turn off all logging.\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\n\nexport function logDebug(message: string, ...args: unknown[]): void {\n  loggerClient.debug(message, args);\n}\n\nexport function logInfo(message: string, ...args: unknown[]): void {\n  loggerClient.info(message, args);\n}\n\nexport function logWarn(message: string, ...args: unknown[]): void {\n  loggerClient.warn(message, args);\n}\n\nexport function logError(message: string, ...args: unknown[]): void {\n  loggerClient.error(message, args);\n}\n\nexport class Logger {\n  /** The log level of the given Logger instance. */\n  private _logLevel = DEFAULT_LOG_LEVEL;\n\n  constructor() {}\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  debug(...args: unknown[]): void {\n    this._log(LogLevel.DEBUG, ...args);\n  }\n\n  info(...args: unknown[]): void {\n    this._log(LogLevel.INFO, ...args);\n  }\n\n  warn(...args: unknown[]): void {\n    this._log(LogLevel.WARN, ...args);\n  }\n\n  error(...args: unknown[]): void {\n    this._log(LogLevel.ERROR, ...args);\n  }\n\n  /**\n   * Forwards log messages to their corresponding console counterparts if the\n   * log level allows it.\n   */\n  private _log(logLevel: LogLevel, ...args: unknown[]): void {\n    if (logLevel < this._logLevel) {\n      return;\n    }\n    const now = new Date().toISOString();\n    const method =\n      logLevelToConsoleFn[logLevel as keyof typeof logLevelToConsoleFn];\n    if (method) {\n      console[method as 'log' | 'info' | 'warn' | 'error'](\n        `[${now}] Alchemy:`,\n        ...args.map(stringify)\n      );\n    } else {\n      throw new Error(\n        `Logger received an invalid logLevel (value: ${logLevel})`\n      );\n    }\n  }\n}\n\nfunction stringify(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return JSON.stringify(obj);\n    } catch (e) {\n      // Failed to convert to JSON, log the object directly.\n      return obj;\n    }\n  }\n}\n\n// Instantiate default logger for the SDK.\nconst loggerClient: Logger = new Logger();\n","// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nexport const VERSION = '3.5.0';\n","/**\n * Given a REST endpoint, method, and params, sends the request with axios and\n * returns the response.\n */\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport { VERSION } from '../version';\nimport { IS_BROWSER } from './util';\n\n/**\n * Helper function to send http requests using Axis.\n *\n * @private\n */\nexport function sendAxiosRequest<Req, Res>(\n  baseUrl: string,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<AxiosResponse<Res>> {\n  const requestUrl = baseUrl + '/' + restApiName;\n  const config: AxiosRequestConfig = {\n    ...overrides,\n    headers: {\n      ...overrides?.headers,\n      ...(!IS_BROWSER && { 'Accept-Encoding': 'gzip' }),\n      'Alchemy-Ethers-Sdk-Version': VERSION,\n      'Alchemy-Ethers-Sdk-Method': methodName\n    },\n    method: overrides?.method ?? 'GET',\n    url: requestUrl,\n    params\n  };\n  return axios(config);\n}\n","import { logDebug } from '../util/logger';\n\nexport const DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nexport const DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nexport const DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nexport const DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n\n/**\n * Helper class for implementing exponential backoff and max retry attempts.\n *\n * @private\n * @internal\n */\nexport class ExponentialBackoff {\n  private readonly initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n  private readonly backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n  private readonly maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n\n  private numAttempts = 0;\n  private currentDelayMs = 0;\n  private isInBackoff = false;\n\n  constructor(private readonly maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {}\n\n  /**\n   * Returns a promise that resolves after the the backoff delay. The delay is\n   * increased for each attempt. The promise is rejected if the maximum number\n   * of attempts is exceeded.\n   */\n  // TODO: beautify this into an async iterator.\n  backoff(): Promise<void> {\n    if (this.numAttempts >= this.maxAttempts) {\n      return Promise.reject(\n        new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`)\n      );\n    }\n    if (this.isInBackoff) {\n      return Promise.reject(\n        new Error('A backoff operation is already in progress')\n      );\n    }\n\n    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n    if (backoffDelayWithJitterMs > 0) {\n      logDebug(\n        'ExponentialBackoff.backoff',\n        `Backing off for ${backoffDelayWithJitterMs}ms`\n      );\n    }\n\n    // Calculate the next delay.\n    this.currentDelayMs *= this.backoffMultiplier;\n    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n    this.numAttempts += 1;\n\n    return new Promise(resolve => {\n      this.isInBackoff = true;\n      setTimeout(() => {\n        this.isInBackoff = false;\n        resolve();\n      }, backoffDelayWithJitterMs);\n    });\n  }\n\n  /**\n   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\n   *\n   * @private\n   * @param delayMs\n   */\n  private withJitterMs(delayMs: number): number {\n    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n  }\n}\n","import axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { AlchemyApiType } from '../util/const';\nimport { logDebug, logInfo } from '../util/logger';\nimport { sendAxiosRequest } from '../util/sendRest';\nimport { ExponentialBackoff } from './backoff';\n\n/**\n * A wrapper function to make http requests and retry if the request fails.\n *\n * @internal\n */\n// TODO: Wrap Axios error in AlchemyError.\nexport async function requestHttpWithBackoff<Req, Res>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<Res> {\n  let lastError: Error | undefined = undefined;\n  const backoff = new ExponentialBackoff(config.maxRetries);\n  for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\n    try {\n      if (lastError !== undefined) {\n        logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\n      }\n\n      try {\n        await backoff.backoff();\n      } catch (err) {\n        // Backoff errors when the maximum number of attempts is reached. Break\n        // out of the loop to preserve the last error.\n        break;\n      }\n\n      const response = await sendAxiosRequest<Req, Res>(\n        config._getRequestUrl(apiType),\n        restApiName,\n        methodName,\n        params,\n        {\n          ...overrides,\n          timeout: config.requestTimeout\n        }\n      );\n\n      if (response.status === 200) {\n        logDebug(restApiName, `Successful request: ${restApiName}`);\n        return response.data;\n      } else {\n        logInfo(\n          restApiName,\n          `Request failed: ${restApiName}, ${response.status}, ${response.data}`\n        );\n        lastError = new Error(response.status + ': ' + response.data);\n      }\n    } catch (err) {\n      if (!axios.isAxiosError(err) || err.response === undefined) {\n        throw err;\n      }\n      // TODO: Standardize all errors into AlchemyError\n      lastError = new Error(\n        err.response.status + ': ' + JSON.stringify(err.response.data)\n      );\n      if (!isRetryableHttpError(err, apiType)) {\n        break;\n      }\n    }\n  }\n  return Promise.reject(lastError);\n}\n\nfunction isRetryableHttpError(\n  err: AxiosError,\n  apiType: AlchemyApiType\n): boolean {\n  // TODO: remove 500s after webhooks are more stable.\n  const retryableCodes =\n    apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\n  return (\n    err.response !== undefined && retryableCodes.includes(err.response.status)\n  );\n}\n\n/**\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\n * represents the property name containing the next page token.\n *\n * @internal\n */\nexport async function* paginateEndpoint<\n  ReqPageKey extends string,\n  ResPageKey extends string,\n  Req extends Partial<Record<string, any> & Record<ReqPageKey, string>>,\n  Res extends Partial<Record<string, any> & Record<ResPageKey, string>>\n>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  reqPageKey: ReqPageKey,\n  resPageKey: ResPageKey,\n  params: Req\n): AsyncIterable<Res> {\n  let hasNext = true;\n  const requestParams = { ...params };\n  while (hasNext) {\n    const response = await requestHttpWithBackoff<Req, Res>(\n      config,\n      apiType,\n      restApiName,\n      methodName,\n      requestParams\n    );\n    yield response;\n    if (response[resPageKey] !== null) {\n      requestParams[reqPageKey] = response[resPageKey] as any;\n    } else {\n      hasNext = false;\n    }\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport {\n  BaseNft,\n  ComputeRarityResponse,\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetContractMetadataBatchResponse,\n  GetContractsForOwnerOptions,\n  GetContractsForOwnerResponse,\n  GetFloorPriceResponse,\n  GetMintedNftsOptions,\n  GetNftMetadataBatchResponse,\n  GetNftMetadataOptions,\n  GetNftSalesOptions,\n  GetNftSalesOptionsByContractAddress,\n  GetNftSalesResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftResponse,\n  GetSpamContractsResponse,\n  GetTransfersForContractOptions,\n  IsAirdropNftResponse,\n  IsSpamContractResponse,\n  Nft,\n  NftAttributesResponse,\n  NftCollection,\n  NftContract,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftFilters,\n  NftMetadataBatchOptions,\n  NftMetadataBatchToken,\n  NftOrdering,\n  NftRefreshState,\n  NftSaleMarketplace,\n  NftSaleTakerType,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  SearchContractMetadataResponse,\n  TransfersNftResponse\n} from '../types/nft-types';\nimport {\n  AssetTransfersCategory,\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersResult,\n  GetTransfersForOwnerOptions,\n  GetTransfersForOwnerTransferType,\n  RefreshContractResult,\n  SortingOrder\n} from '../types/types';\nimport { AlchemyApiType, ETH_NULL_ADDRESS } from '../util/const';\nimport { sanitizeTokenType } from '../util/inputSanitization';\nimport {\n  getBaseNftFromRaw,\n  getNftCollectionFromRaw,\n  getNftContractFromRaw,\n  getNftContractsForOwnerFromRaw,\n  getNftFromRaw,\n  getNftSalesFromRaw,\n  nullsToUndefined\n} from '../util/util';\nimport { getAssetTransfers } from './core-api';\nimport { paginateEndpoint, requestHttpWithBackoff } from './dispatch';\nimport {\n  RawComputeRarityResponse,\n  RawContractBaseNft,\n  RawGetBaseNftsForContractResponse,\n  RawGetBaseNftsResponse,\n  RawGetContractMetadataBatchResponse,\n  RawGetContractsForOwnerResponse,\n  RawGetFloorPriceResponse,\n  RawGetNftMetadataBatchResponse,\n  RawGetNftSalesResponse,\n  RawGetNftsForContractResponse,\n  RawGetNftsForOwnerResponse,\n  RawGetOwnersForContractResponse,\n  RawGetOwnersForContractWithTokenBalancesResponse,\n  RawGetSpamContractsResponse,\n  RawIsAirdropNftResponse,\n  RawIsSpamContractResponse,\n  RawNft,\n  RawNftAttributesResponse,\n  RawNftCollection,\n  RawNftContractForNft,\n  RawOwnedBaseNft,\n  RawOwnedNft,\n  RawReingestContractResponse,\n  RawSearchContractMetadataResponse\n} from './raw-interfaces';\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link NftNamespace}. By moving the methods out into a separate file,\n * other namespaces can access these methods without depending on the entire\n * NftNamespace.\n */\n\n/**\n * Get the NFT metadata for the provided contract address.\n */\nexport async function getNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  options?: GetNftMetadataOptions,\n  srcMethod = 'getNftMetadata'\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      tokenType: sanitizeTokenType(options?.tokenType),\n      tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n      refreshCache: options?.refreshCache\n    }\n  );\n  return getNftFromRaw(response);\n}\n\nexport async function getNftMetadataBatch(\n  config: AlchemyConfig,\n  tokens: Array<NftMetadataBatchToken>,\n  options?: NftMetadataBatchOptions\n): Promise<GetNftMetadataBatchResponse> {\n  const data = {\n    tokens,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n    refreshCache: options?.refreshCache\n  };\n  const response = await requestHttpWithBackoff<\n    {},\n    RawGetNftMetadataBatchResponse\n  >(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadataBatch',\n    'getNftMetadataBatch',\n    {},\n    {\n      method: 'POST',\n      data\n    }\n  );\n  return {\n    nfts: response.nfts.map(nft => getNftFromRaw(nft))\n  };\n}\n\nexport async function getContractMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getContractMetadata'\n): Promise<NftContract> {\n  const response = await requestHttpWithBackoff<\n    GetContractMetadataParams,\n    RawNftContractForNft\n  >(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\n    contractAddress\n  });\n\n  return getNftContractFromRaw(response);\n}\n\nexport async function getContractMetadataBatch(\n  config: AlchemyConfig,\n  contractAddresses: string[]\n): Promise<GetContractMetadataBatchResponse> {\n  const response = await requestHttpWithBackoff<\n    {},\n    RawGetContractMetadataBatchResponse\n  >(\n    config,\n    AlchemyApiType.NFT,\n    'getContractMetadataBatch',\n    'getContractMetadataBatch',\n    {},\n    {\n      method: 'POST',\n      data: { contractAddresses }\n    }\n  );\n\n  return {\n    contracts: response.contracts.map(getNftContractFromRaw)\n  };\n}\n\nexport async function getCollectionMetadata(\n  config: AlchemyConfig,\n  collectionSlug: string,\n  srcMethod = 'getCollectionMetadata'\n): Promise<NftCollection> {\n  const response = await requestHttpWithBackoff<\n    GetCollectionMetadataParams,\n    RawNftCollection\n  >(config, AlchemyApiType.NFT, 'getCollectionMetadata', srcMethod, {\n    collectionSlug\n  });\n\n  return getNftCollectionFromRaw(response);\n}\n\nexport async function* getNftsForOwnerIterator(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwnerIterator'\n): AsyncIterable<OwnedBaseNft | OwnedNft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTsForOwner',\n    srcMethod,\n    'pageKey',\n    'pageKey',\n    {\n      contractAddresses: options?.contractAddresses,\n      pageKey: options?.pageKey,\n      excludeFilters: options?.excludeFilters,\n      includeFilters: options?.includeFilters,\n      owner,\n      withMetadata,\n      tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n      orderBy: options?.orderBy\n    }\n  )) {\n    for (const ownedNft of response.ownedNfts as\n      | RawOwnedNft[]\n      | RawOwnedBaseNft[]) {\n      yield {\n        ...nftFromGetNftResponse(ownedNft),\n        balance: ownedNft.balance\n      };\n    }\n  }\n}\n\nexport async function getNftsForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwner'\n): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsAlchemyParams,\n    RawGetBaseNftsResponse | RawGetNftsForOwnerResponse\n  >(config, AlchemyApiType.NFT, 'getNFTsForOwner', srcMethod, {\n    contractAddresses: options?.contractAddresses,\n    pageKey: options?.pageKey,\n    excludeFilters: options?.excludeFilters,\n    includeFilters: options?.includeFilters,\n    owner,\n    pageSize: options?.pageSize,\n    withMetadata,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n    orderBy: options?.orderBy\n  });\n  if (withMetadata) {\n    return nullsToUndefined<OwnedNftsResponse>({\n      ownedNfts: response.ownedNfts.map(res => ({\n        ...getNftFromRaw(res as RawOwnedNft),\n        balance: res.balance\n      })),\n      pageKey: response.pageKey,\n      totalCount: response.totalCount,\n      validAt: response.validAt\n    });\n  }\n\n  return nullsToUndefined<OwnedBaseNftsResponse>({\n    ownedNfts: response.ownedNfts.map(res => ({\n      ...getBaseNftFromRaw(res as RawOwnedBaseNft),\n      balance: res.balance\n    })),\n    pageKey: response.pageKey,\n    totalCount: response.totalCount,\n    validAt: response.validAt\n  });\n}\n\nexport async function getNftsForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContract'\n): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsForContractAlchemyParams,\n    RawGetBaseNftsForContractResponse | RawGetNftsForContractResponse\n  >(config, AlchemyApiType.NFT, 'getNFTsForContract', srcMethod, {\n    contractAddress,\n    pageKey: options?.pageKey,\n    withMetadata,\n    limit: options?.pageSize ?? undefined,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs\n  });\n\n  if (withMetadata) {\n    return nullsToUndefined<NftContractNftsResponse>({\n      nfts: response.nfts.map(res => getNftFromRaw(res as RawNft)),\n      pageKey: response.pageKey\n    });\n  }\n\n  return nullsToUndefined<NftContractBaseNftsResponse>({\n    nfts: response.nfts.map(res =>\n      getBaseNftFromRaw(res as RawContractBaseNft, contractAddress)\n    ),\n    pageKey: response.pageKey\n  });\n}\n\nexport async function* getNftsForContractIterator(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContractIterator'\n): AsyncIterable<BaseNft | Nft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTsForContract',\n    srcMethod,\n    'pageKey',\n    'pageKey',\n    {\n      contractAddress,\n      pageKey: options?.pageKey,\n      withMetadata\n    }\n  )) {\n    for (const nft of response.nfts as RawContractBaseNft[] | RawNft[]) {\n      yield nftFromGetNftContractResponse(nft, contractAddress);\n    }\n  }\n}\n\nexport async function getOwnersForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?:\n    | GetOwnersForContractWithTokenBalancesOptions\n    | GetOwnersForContractOptions,\n  srcMethod = 'getOwnersForContract'\n): Promise<\n  GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n> {\n  // Cast to `any` to avoid more type wrangling.\n  const response = await requestHttpWithBackoff<\n    GetOwnersForNftContractAlchemyParams,\n    | RawGetOwnersForContractResponse\n    | RawGetOwnersForContractWithTokenBalancesResponse\n  >(config, AlchemyApiType.NFT, 'getOwnersForContract', srcMethod, {\n    ...options,\n    contractAddress\n  });\n\n  if (options?.withTokenBalances) {\n    return nullsToUndefined<GetOwnersForContractWithTokenBalancesResponse>({\n      owners: (response as RawGetOwnersForContractWithTokenBalancesResponse)\n        .owners,\n      pageKey: response.pageKey\n    });\n  }\n  return nullsToUndefined<GetOwnersForContractResponse>({\n    owners: response.owners as string[],\n    pageKey: response.pageKey\n  });\n}\n\nexport async function getContractsForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetContractsForOwnerOptions,\n  srcMethod = 'getContractsForOwner'\n): Promise<GetContractsForOwnerResponse> {\n  const response = await requestHttpWithBackoff<\n    GetContractsForOwnerParams,\n    RawGetContractsForOwnerResponse\n  >(config, AlchemyApiType.NFT, 'getContractsForOwner', srcMethod, {\n    owner,\n    excludeFilters: options?.excludeFilters,\n    includeFilters: options?.includeFilters,\n    pageKey: options?.pageKey,\n    pageSize: options?.pageSize,\n    orderBy: options?.orderBy\n  });\n\n  return nullsToUndefined<GetContractsForOwnerResponse>({\n    contracts: response.contracts.map(getNftContractsForOwnerFromRaw),\n    pageKey: response.pageKey,\n    totalCount: response.totalCount\n  });\n}\n\nexport async function getOwnersForNft(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  options?: GetOwnersForContractOptions,\n  srcMethod = 'getOwnersForNft'\n): Promise<GetOwnersForNftResponse> {\n  return requestHttpWithBackoff(\n    config,\n    AlchemyApiType.NFT,\n    'getOwnersForNFT',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      ...options\n    }\n  );\n}\n\nexport async function getMintedNfts(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetMintedNftsOptions\n): Promise<TransfersNftResponse> {\n  const provider = await config.getProvider();\n  const ownerAddress = await provider._getAddress(owner);\n  const category = nftTokenTypeToCategory(options?.tokenType);\n  const params: AssetTransfersParams = {\n    fromBlock: '0x0',\n    fromAddress: ETH_NULL_ADDRESS,\n    toAddress: ownerAddress,\n    excludeZeroValue: true,\n    contractAddresses: options?.contractAddresses,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n  const response = await getAssetTransfers(config, params, 'getMintedNfts');\n  return getNftsForTransfers(config, response);\n}\n\nexport async function getTransfersForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  transferType: GetTransfersForOwnerTransferType,\n  options?: GetTransfersForOwnerOptions\n): Promise<TransfersNftResponse> {\n  const provider = await config.getProvider();\n  const ownerAddress = await provider._getAddress(owner);\n  const category = nftTokenTypeToCategory(options?.tokenType);\n  const params: AssetTransfersParams = {\n    fromBlock: '0x0',\n    excludeZeroValue: true,\n    contractAddresses: options?.contractAddresses,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n\n  if (transferType === GetTransfersForOwnerTransferType.TO) {\n    params.toAddress = ownerAddress;\n  } else {\n    params.fromAddress = ownerAddress;\n  }\n  const transfersResponse = await getAssetTransfers(\n    config,\n    params,\n    'getTransfersForOwner'\n  );\n\n  return getNftsForTransfers(config, transfersResponse);\n}\n\nexport async function getTransfersForContract(\n  config: AlchemyConfig,\n  contract: string,\n  options?: GetTransfersForContractOptions\n): Promise<TransfersNftResponse> {\n  const category = [\n    AssetTransfersCategory.ERC721,\n    AssetTransfersCategory.ERC1155,\n    AssetTransfersCategory.SPECIALNFT\n  ];\n  const provider = await config.getProvider();\n  const fromBlock = options?.fromBlock\n    ? provider.formatter.blockTag(\n        await provider._getBlockTag(options.fromBlock)\n      )\n    : '0x0';\n  const toBlock = options?.toBlock\n    ? provider.formatter.blockTag(await provider._getBlockTag(options.toBlock))\n    : undefined;\n  const params: AssetTransfersParams = {\n    fromBlock,\n    toBlock,\n    excludeZeroValue: true,\n    contractAddresses: [contract],\n    order: options?.order,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n\n  const transfersResponse = await getAssetTransfers(\n    config,\n    params,\n    'getTransfersForContract'\n  );\n\n  return getNftsForTransfers(config, transfersResponse);\n}\n\nfunction nftTokenTypeToCategory(\n  tokenType: NftTokenType | undefined\n): AssetTransfersCategory[] {\n  switch (tokenType) {\n    case NftTokenType.ERC721:\n      return [AssetTransfersCategory.ERC721];\n    case NftTokenType.ERC1155:\n      return [AssetTransfersCategory.ERC1155];\n    default:\n      return [\n        AssetTransfersCategory.ERC721,\n        AssetTransfersCategory.ERC1155,\n        AssetTransfersCategory.SPECIALNFT\n      ];\n  }\n}\n\nfunction parse1155Transfer(\n  transfer: AssetTransfersResult\n): NftMetadataBatchToken[] {\n  return transfer.erc1155Metadata!.map(metadata => ({\n    contractAddress: transfer.rawContract.address!,\n    tokenId: metadata.tokenId,\n    tokenType: NftTokenType.ERC1155\n  }));\n}\n\nexport async function verifyNftOwnership(\n  config: AlchemyConfig,\n  owner: string,\n  contractAddresses: string | string[],\n  srcMethod = 'verifyNftOwnership'\n): Promise<boolean | { [contractAddress: string]: boolean }> {\n  if (typeof contractAddresses === 'string') {\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses: [contractAddresses],\n        omitMetadata: true\n      },\n      srcMethod\n    );\n    return response.ownedNfts.length > 0;\n  } else {\n    if (contractAddresses.length === 0) {\n      throw new Error('Must provide at least one contract address');\n    }\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses,\n        omitMetadata: true\n      },\n      srcMethod\n    );\n\n    // Create map where all input contract addresses are set to false, then flip\n    // owned nfts to true.\n    const result = contractAddresses.reduce(\n      (acc: { [contractAddress: string]: boolean }, curr) => {\n        acc[curr] = false;\n        return acc;\n      },\n      {}\n    );\n    for (const nft of response.ownedNfts) {\n      result[(nft as OwnedBaseNft).contractAddress] = true;\n    }\n    return result;\n  }\n}\n\nexport async function isSpamContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'isSpamContract'\n): Promise<IsSpamContractResponse> {\n  return requestHttpWithBackoff<\n    IsSpamContractParams,\n    RawIsSpamContractResponse\n  >(config, AlchemyApiType.NFT, 'isSpamContract', srcMethod, {\n    contractAddress\n  });\n}\n\nexport async function getSpamContracts(\n  config: AlchemyConfig,\n  srcMethod = 'getSpamContracts'\n): Promise<GetSpamContractsResponse> {\n  return requestHttpWithBackoff<undefined, RawGetSpamContractsResponse>(\n    config,\n    AlchemyApiType.NFT,\n    'getSpamContracts',\n    srcMethod,\n    undefined\n  );\n}\n\nexport async function reportSpam(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'reportSpam'\n): Promise<void> {\n  void requestHttpWithBackoff<ReportSpamParams, void>(\n    config,\n    AlchemyApiType.NFT,\n    'reportSpam',\n    srcMethod,\n    {\n      contractAddress\n    }\n  );\n}\n\nexport async function isAirdropNft(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: string,\n  srcMethod = 'isAirdropNft'\n): Promise<IsAirdropNftResponse> {\n  return requestHttpWithBackoff<isAirdropNftParams, RawIsAirdropNftResponse>(\n    config,\n    AlchemyApiType.NFT,\n    'isAirdropNFT',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId\n    }\n  );\n}\n\nexport async function getFloorPrice(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getFloorPrice'\n): Promise<GetFloorPriceResponse> {\n  const response = await requestHttpWithBackoff<\n    GetFloorPriceParams,\n    RawGetFloorPriceResponse\n  >(config, AlchemyApiType.NFT, 'getFloorPrice', srcMethod, {\n    contractAddress\n  });\n  return nullsToUndefined<GetFloorPriceResponse>(response);\n}\n\nexport async function getNftSales(\n  config: AlchemyConfig,\n  options: GetNftSalesOptions | GetNftSalesOptionsByContractAddress = {},\n  srcMethod = 'getNftSales'\n): Promise<GetNftSalesResponse> {\n  // Avoid ts compiler complaining about the contractAddress field.\n  const params: Partial<GetNftSalesOptionsByContractAddress> = {\n    ...options\n  };\n\n  const response = await requestHttpWithBackoff<\n    GetNftSalesParams,\n    RawGetNftSalesResponse\n  >(config, AlchemyApiType.NFT, 'getNFTSales', srcMethod, {\n    fromBlock: params?.fromBlock,\n    toBlock: params?.toBlock,\n    order: params?.order,\n    marketplace: params?.marketplace,\n    contractAddress: params?.contractAddress,\n    tokenId: params?.tokenId\n      ? BigNumber.from(params?.tokenId).toString()\n      : undefined,\n    sellerAddress: params?.sellerAddress,\n    buyerAddress: params?.buyerAddress,\n    taker: params?.taker,\n    limit: params?.limit,\n    pageKey: params?.pageKey\n  });\n\n  return getNftSalesFromRaw(response);\n}\n\nexport async function computeRarity(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'computeRarity'\n): Promise<ComputeRarityResponse> {\n  const response = await requestHttpWithBackoff<\n    ComputeRarityParams,\n    RawComputeRarityResponse\n  >(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\n    contractAddress,\n    tokenId: BigNumber.from(tokenId).toString()\n  });\n\n  return nullsToUndefined(response);\n}\n\nexport async function searchContractMetadata(\n  config: AlchemyConfig,\n  query: string,\n  srcMethod = 'searchContractMetadata'\n): Promise<SearchContractMetadataResponse> {\n  const response = await requestHttpWithBackoff<\n    SearchContractMetadataParams,\n    RawSearchContractMetadataResponse\n  >(config, AlchemyApiType.NFT, 'searchContractMetadata', srcMethod, {\n    query\n  });\n\n  return {\n    contracts: response.contracts.map(getNftContractFromRaw)\n  };\n}\n\nexport async function summarizeNftAttributes(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'summarizeNftAttributes'\n): Promise<NftAttributesResponse> {\n  return requestHttpWithBackoff<\n    SummarizeNftAttributesParams,\n    RawNftAttributesResponse\n  >(config, AlchemyApiType.NFT, 'summarizeNFTAttributes', srcMethod, {\n    contractAddress\n  });\n}\n\nexport async function refreshNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'refreshNftMetadata'\n): Promise<boolean> {\n  const tokenIdString = BigNumber.from(tokenId!).toString();\n  const first = await getNftMetadata(\n    config,\n    contractAddress,\n    tokenIdString,\n    undefined,\n    srcMethod\n  );\n  const second = await refresh(\n    config,\n    contractAddress,\n    tokenIdString,\n    srcMethod\n  );\n  return first.timeLastUpdated !== second.timeLastUpdated;\n}\n\nexport async function refreshContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'refreshContract'\n): Promise<RefreshContractResult> {\n  const response = await requestHttpWithBackoff<\n    ReingestContractParams,\n    RawReingestContractResponse\n  >(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\n    contractAddress\n  });\n\n  return {\n    contractAddress: response.contractAddress,\n    refreshState: parseReingestionState(response.reingestionState),\n    progress: response.progress\n  };\n}\n\nasync function refresh(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod: string\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      refreshCache: true\n    }\n  );\n  return getNftFromRaw(response);\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftResponse(\n  ownedNft: RawOwnedBaseNft | RawOwnedNft\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft);\n  }\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftContractResponse(\n  ownedNft: RawContractBaseNft | RawNft,\n  contractAddress: string\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft, contractAddress);\n  }\n}\n\n/** @internal */\n// TODO: more comprehensive type check\nfunction isNftWithMetadata(\n  response: RawContractBaseNft | RawNft\n): response is RawNft {\n  return (response as RawNft).name !== undefined;\n}\n\n/**\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\n * transfers and collates them with transfer metadata.\n *\n * VISIBLE FOR TESTING\n */\nexport async function getNftsForTransfers(\n  config: AlchemyConfig,\n  response: AssetTransfersResponse\n): Promise<TransfersNftResponse> {\n  const metadataTransfers = response.transfers\n    .filter(transfer => transfer.rawContract.address !== null)\n    // Use flatMap to flatten 1155 transfers that contain multiple NFTs.\n    .flatMap(transfer => {\n      const tokens = getTokensFromTransfer(transfer);\n\n      const metadata = {\n        from: transfer.from,\n        to: transfer.to ?? undefined,\n        transactionHash: transfer.hash,\n        blockNumber: transfer.blockNum\n      };\n      return tokens.map(token => ({ metadata, token }));\n    });\n\n  if (metadataTransfers.length === 0) {\n    return { nfts: [] };\n  }\n\n  // If we have more than 100 elements after unrolling 1155 transfers, split\n  // transfers into batches of 100 to stay under endpoint batch size limit.\n  const batchSize = 100;\n  const requestBatches = [];\n  for (let i = 0; i < metadataTransfers.length; i += batchSize) {\n    requestBatches.push(metadataTransfers.slice(i, i + batchSize));\n  }\n  const responseBatches = await Promise.all(\n    requestBatches.map(batch =>\n      getNftMetadataBatch(\n        config,\n        batch.map(transfer => transfer.token)\n      )\n    )\n  );\n  const nfts = responseBatches.map(r => r.nfts).flat();\n\n  // The same NFT can be transferred multiple times in the same transfers response.\n  // We want to return one NFT for each transfer, so we create a mapping for\n  // each NFT to pair with the transfer metadata.\n  const nftsByTokenId = new Map<string, Nft>();\n  nfts.forEach(nft => {\n    const key = `${nft.contract.address.toLowerCase()}-${BigNumber.from(\n      nft.tokenId\n    ).toString()}`;\n    nftsByTokenId.set(key, nft);\n  });\n\n  const transferredNfts = metadataTransfers.map(t => {\n    const key = `${t.token.contractAddress.toLowerCase()}-${BigNumber.from(\n      t.token.tokenId\n    ).toString()}`;\n    return {\n      ...nftsByTokenId.get(key)!,\n      ...t.metadata\n    };\n  });\n\n  return {\n    nfts: transferredNfts,\n    pageKey: response.pageKey\n  };\n}\n\n/**\n * Returns the underlying NFT tokens from a transfer as the params for a\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\n * transferred in a single transaction.\n */\nfunction getTokensFromTransfer(\n  transfer: AssetTransfersResult\n): NftMetadataBatchToken[] {\n  // ERC1155 NFTs can contain multiple tokens in a single transfer, which\n  // requires special logic.\n  if (transfer.category === AssetTransfersCategory.ERC1155) {\n    return parse1155Transfer(transfer);\n  } else {\n    return [\n      {\n        contractAddress: transfer.rawContract.address!,\n        tokenId: transfer.tokenId!,\n        tokenType:\n          transfer.category === AssetTransfersCategory.ERC721\n            ? NftTokenType.ERC721\n            : undefined\n      }\n    ];\n  }\n}\n\n/**\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\n * to including metadata.\n *\n * @internal\n */\nfunction omitMetadataToWithMetadata(\n  omitMetadata: boolean | undefined\n): boolean {\n  return omitMetadata === undefined ? true : !omitMetadata;\n}\n\nfunction parseReingestionState(reingestionState: string): NftRefreshState {\n  switch (reingestionState) {\n    case 'does_not_exist':\n      return NftRefreshState.DOES_NOT_EXIST;\n    case 'already_queued':\n      return NftRefreshState.ALREADY_QUEUED;\n    case 'in_progress':\n      return NftRefreshState.IN_PROGRESS;\n    case 'finished':\n      return NftRefreshState.FINISHED;\n    case 'queued':\n      return NftRefreshState.QUEUED;\n    case 'queue_failed':\n      return NftRefreshState.QUEUE_FAILED;\n    default:\n      throw new Error('Unknown reingestion state: ' + reingestionState);\n  }\n}\n\n/**\n * Interface for the `getNftsForNftContract` endpoint.\n *\n * @internal\n */\ninterface GetNftsForContractAlchemyParams {\n  contractAddress: string;\n  pageKey?: string;\n  withMetadata: boolean;\n  limit?: number;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `getNfts` endpoint. The main difference is that the\n * endpoint has a `withMetadata` parameter, but the SDK exposes the parameter as\n * `omitMetadata`.\n *\n * @internal\n */\ninterface GetNftsAlchemyParams {\n  owner: string;\n  pageKey?: string;\n  contractAddresses?: string[];\n  excludeFilters?: NftFilters[];\n  includeFilters?: NftFilters[];\n  pageSize?: number;\n  withMetadata: boolean;\n  tokenUriTimeoutInMs?: number;\n  orderBy?: string;\n}\n\n/**\n * NftTokenTypes that are allowed as request inputs.\n *\n * @internal\n */\nexport type InputNftTokenType =\n  | NftTokenType.ERC1155\n  | NftTokenType.ERC721\n  | undefined;\n\n/**\n * Interface for the `getNftMetadata` endpoint.\n *\n * @internal\n */\ninterface GetNftMetadataParams {\n  contractAddress: string;\n  tokenId: string;\n  tokenType?: InputNftTokenType;\n  refreshCache?: boolean;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `isSpamContract` endpoint.\n *\n * @internal\n */\ninterface IsSpamContractParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `reportSpam` endpoint.\n *\n * @internal\n */\ninterface ReportSpamParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `isAirdropNft` endpoint.\n *\n * @internal\n */\ninterface isAirdropNftParams {\n  contractAddress: string;\n  tokenId: string;\n}\n\n/**\n * Interface for the `getContractMetadata` endpoint.\n *\n * @internal\n */\ninterface GetContractMetadataParams {\n  contractAddress: string;\n}\n/**\n * Interface for the `getCollectionMetadata` endpoint.\n *\n * @internal\n */\ninterface GetCollectionMetadataParams {\n  collectionSlug: string;\n}\n\n/**\n * Interface for the `getOwnersForNftContract` endpoint.\n *\n * @internal\n */\ninterface GetOwnersForNftContractAlchemyParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getOwnersForContract` endpoint.\n *\n * @internal\n */\ninterface GetContractsForOwnerParams {\n  owner: string;\n  pageKey?: string;\n  pageSize?: number;\n  includeFilters?: NftFilters[];\n  excludeFilters?: NftFilters[];\n  orderBy?: NftOrdering;\n}\n\n/**\n * Interface for the `getFloorPrice` endpoint.\n *\n * @internal\n */\ninterface GetFloorPriceParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getNftSales` endpoint.\n *\n * @internal\n */\ninterface GetNftSalesParams {\n  fromBlock?: number | 'latest';\n  toBlock?: number | 'latest';\n  order?: SortingOrder;\n  marketplace?: NftSaleMarketplace;\n  contractAddress?: string;\n  tokenId?: string;\n  sellerAddress?: string;\n  buyerAddress?: string;\n  taker?: NftSaleTakerType;\n  limit?: number;\n  pageKey?: string;\n}\n\n/**\n * Interface for the `computeRarity` endpoint.\n *\n * @internal\n */\ninterface ComputeRarityParams {\n  contractAddress: string;\n  tokenId: string;\n}\n\n/**\n * Interface for the `searchContractMetadata` endpoint.\n *\n * @internal\n */\ninterface SearchContractMetadataParams {\n  query: string;\n}\n\n/**\n * Interface for the `summarizeNFTAttributes` endpoint.\n *\n * @internal\n */\ninterface SummarizeNftAttributesParams {\n  contractAddress: string;\n}\n\ninterface ReingestContractParams {\n  contractAddress: string;\n}\n","import type { BigNumberish } from '@ethersproject/bignumber';\n\nimport {\n  computeRarity,\n  getCollectionMetadata,\n  getContractMetadata,\n  getContractMetadataBatch,\n  getContractsForOwner,\n  getFloorPrice,\n  getMintedNfts,\n  getNftMetadata,\n  getNftMetadataBatch,\n  getNftSales,\n  getNftsForContract,\n  getNftsForContractIterator,\n  getNftsForOwner,\n  getNftsForOwnerIterator,\n  getOwnersForContract,\n  getOwnersForNft,\n  getSpamContracts,\n  getTransfersForContract,\n  getTransfersForOwner,\n  isAirdropNft,\n  isSpamContract,\n  refreshContract,\n  refreshNftMetadata,\n  reportSpam,\n  searchContractMetadata,\n  summarizeNftAttributes,\n  verifyNftOwnership\n} from '../internal/nft-api';\nimport {\n  BaseNft,\n  ComputeRarityResponse,\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetContractMetadataBatchResponse,\n  GetContractsForOwnerOptions,\n  GetContractsForOwnerResponse,\n  GetFloorPriceResponse,\n  GetMintedNftsOptions,\n  GetNftMetadataBatchResponse,\n  GetNftMetadataOptions,\n  GetNftSalesOptions,\n  GetNftSalesOptionsByContractAddress,\n  GetNftSalesResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftOptions,\n  GetOwnersForNftResponse,\n  GetSpamContractsResponse,\n  GetTransfersForContractOptions,\n  IsAirdropNftResponse,\n  IsSpamContractResponse,\n  Nft,\n  NftAttributesResponse,\n  NftCollection,\n  NftContract,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftMetadataBatchOptions,\n  NftMetadataBatchToken,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  SearchContractMetadataResponse,\n  TransfersNftResponse\n} from '../types/nft-types';\nimport {\n  GetTransfersForOwnerOptions,\n  GetTransfersForOwnerTransferType,\n  RefreshContractResult\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The NFT namespace contains all the functionality related to NFTs.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.nft`.\n */\nexport class NftNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get the NFT metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - Token id of the NFT.\n   * @param options - Options for the request.\n   * @public\n   */\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    options?: GetNftMetadataOptions\n  ): Promise<Nft>;\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    optionsOrTokenType?: GetNftMetadataOptions | NftTokenType,\n    tokenUriTimeoutInMs?: number\n  ): Promise<Nft> {\n    let options: GetNftMetadataOptions;\n    if (typeof optionsOrTokenType === 'object') {\n      options = {\n        tokenType: optionsOrTokenType.tokenType,\n        tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\n        refreshCache: optionsOrTokenType.refreshCache\n      };\n    } else {\n      options = {\n        tokenType: optionsOrTokenType,\n        tokenUriTimeoutInMs\n      };\n    }\n    return getNftMetadata(this.config, contractAddress, tokenId, options);\n  }\n\n  /**\n   * Gets the NFT metadata for multiple NFT tokens.\n   *\n   * @param tokens An array of NFT tokens to fetch metadata for.\n   * @param options Configuration options for making the request.\n   */\n  getNftMetadataBatch(\n    tokens: Array<NftMetadataBatchToken>,\n    options?: NftMetadataBatchOptions\n  ): Promise<GetNftMetadataBatchResponse> {\n    return getNftMetadataBatch(this.config, tokens, options);\n  }\n\n  /**\n   * Get the NFT contract metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @public\n   */\n  getContractMetadata(contractAddress: string): Promise<NftContract> {\n    return getContractMetadata(this.config, contractAddress);\n  }\n\n  /**\n   * Get the NFT contract metadata for multiple NFT contracts in a single request.\n   *\n   * @param contractAddresses - An array of contract addresses to fetch metadata for.\n   */\n  getContractMetadataBatch(\n    contractAddresses: string[]\n  ): Promise<GetContractMetadataBatchResponse> {\n    return getContractMetadataBatch(this.config, contractAddresses);\n  }\n\n  /**\n   * Get the NFT collection metadata associated with the provided parameters.\n   *\n   * @param collectionSlug - The OpenSea collection slug of the NFT.\n   * @beta\n   */\n  getCollectionMetadata(collectionSlug: string): Promise<NftCollection> {\n    return getCollectionMetadata(this.config, collectionSlug);\n  }\n\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the full NFT for the owner and pages through all page\n   * keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): AsyncIterable<OwnedNft>;\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft>;\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft | OwnedNft> {\n    return getNftsForOwnerIterator(this.config, owner, options);\n  }\n\n  /**\n   * Get all base NFTs for an owner.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options: GetBaseNftsForOwnerOptions\n  ): Promise<OwnedBaseNftsResponse>;\n  /**\n   * Get all NFTs for an owner.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse>;\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n    return getNftsForOwner(this.config, owner, options);\n  }\n\n  /**\n   * Get all NFTs for a given contract address.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The parameters to use for the request. or\n   *   {@link NftContractNftsResponse} response.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse>;\n  /**\n   * Get all base NFTs for a given contract address.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): Promise<NftContractBaseNftsResponse>;\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n    return getNftsForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Fetches all NFTs for a given contract address and yields them in an async iterable.\n   *\n   * This method returns the full NFTs in the contract and pages through all\n   * page keys until all NFTs have been fetched. To get all NFTs without their\n   * associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): AsyncIterable<Nft>;\n  /**\n   * Fetches all base NFTs for a given contract address and yields them in an\n   * async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched. To get all\n   * NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): AsyncIterable<BaseNft>;\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): AsyncIterable<BaseNft | Nft> {\n    return getNftsForContractIterator(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract along with the token balance.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options: GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<GetOwnersForContractWithTokenBalancesResponse>;\n\n  /**\n   * Gets all the owners for a given NFT contract.\n   *\n   * Note that token balances are omitted by default. To include token balances\n   * for each owner, use {@link GetOwnersForContractWithTokenBalancesOptions},\n   * which has the `withTokenBalances` field set to `true`.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options?: GetOwnersForContractOptions\n  ): Promise<GetOwnersForContractResponse>;\n  getOwnersForContract(\n    contractAddress: string,\n    options?:\n      | GetOwnersForContractOptions\n      | GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<\n    GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n  > {\n    return getOwnersForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract address and token ID.\n   *\n   * @param contractAddress - The NFT contract address.\n   * @param tokenId - Token id of the NFT.\n   * @param options - Optional parameters to use for the request.\n   * @beta\n   */\n  getOwnersForNft(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    options?: GetOwnersForNftOptions\n  ): Promise<GetOwnersForNftResponse> {\n    return getOwnersForNft(this.config, contractAddress, tokenId, options);\n  }\n\n  /**\n   * Gets all NFT contracts held by the specified owner address.\n   *\n   * @param owner - Address for NFT owner (can be in ENS format!).\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  // TODO(v3): Add overload for withMetadata=false\n  getContractsForOwner(\n    owner: string,\n    options?: GetContractsForOwnerOptions\n  ): Promise<GetContractsForOwnerResponse> {\n    return getContractsForOwner(this.config, owner, options);\n  }\n\n  /**\n   * Gets all NFT transfers for a given owner's address.\n   *\n   * @param owner The owner to get transfers for.\n   * @param category Whether to get transfers to or from the owner address.\n   * @param options Additional options for the request.\n   */\n  getTransfersForOwner(\n    owner: string,\n    category: GetTransfersForOwnerTransferType,\n    options?: GetTransfersForOwnerOptions\n  ): Promise<TransfersNftResponse> {\n    return getTransfersForOwner(this.config, owner, category, options);\n  }\n\n  /**\n   * Gets all NFT transfers for a given NFT contract address.\n   *\n   * Defaults to all transfers for the contract. To get transfers for a specific\n   * block range, use {@link GetTransfersForContractOptions}.\n   *\n   * @param contract The NFT contract to get transfers for.\n   * @param options Additional options for the request.\n   */\n  getTransfersForContract(\n    contract: string,\n    options?: GetTransfersForContractOptions\n  ): Promise<TransfersNftResponse> {\n    return getTransfersForContract(this.config, contract, options);\n  }\n\n  /**\n   * Get all the NFTs minted by a specified owner address.\n   *\n   * @param owner - Address for the NFT owner (can be in ENS format).\n   * @param options - The optional parameters to use for the request.\n   */\n  async getMintedNfts(\n    owner: string,\n    options?: GetMintedNftsOptions\n  ): Promise<TransfersNftResponse> {\n    return getMintedNfts(this.config, owner, options);\n  }\n\n  /**\n   * Checks that the provided owner address owns one of more of the provided\n   * NFT. Returns a boolean indicating whether the owner address owns the provided NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddress - An NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(owner: string, contractAddress: string): Promise<boolean>;\n\n  /**\n   * Checks which of the provided NFTs the owner address owns. Returns a map of\n   * contract address to a boolean indicating whether the owner address owns the NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddresses - An array NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(\n    owner: string,\n    contractAddresses: string[]\n  ): Promise<{ [contractAddress: string]: boolean }>;\n  verifyNftOwnership(\n    owner: string,\n    contractAddress: string | string[]\n  ): Promise<boolean | { [contractAddress: string]: boolean }> {\n    return verifyNftOwnership(this.config, owner, contractAddress);\n  }\n\n  /**\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\n   * information on how we classify spam, go to our NFT API FAQ at\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @param contractAddress - The contract address to check.\n   */\n  isSpamContract(contractAddress: string): Promise<IsSpamContractResponse> {\n    return isSpamContract(this.config, contractAddress);\n  }\n\n  /**\n   * Returns a list of all spam contracts marked by Alchemy. For details on how\n   * Alchemy marks spam contracts, go to\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   */\n  getSpamContracts(): Promise<GetSpamContractsResponse> {\n    return getSpamContracts(this.config);\n  }\n\n  /**\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\n   * information on how we classify spam, go to our NFT API FAQ at\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @param contractAddress - The contract address to check.\n   */\n  reportSpam(contractAddress: string): Promise<void> {\n    return reportSpam(this.config, contractAddress);\n  }\n\n  /**\n   * Returns whether a token is marked as an airdrop or not.\n   * Airdrops are defined as NFTs that were minted to a user address in a transaction\n   * sent by a different address.\n   *\n   * @param contractAddress - The contract address to check.\n   * @param tokenId - Token id of the NFT.\n   */\n  isAirdropNft(\n    contractAddress: string,\n    tokenId: string\n  ): Promise<IsAirdropNftResponse> {\n    return isAirdropNft(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Returns the floor prices of a NFT contract by marketplace.\n   *\n   * @param contractAddress - The contract address for the NFT collection.\n   * @beta\n   */\n  getFloorPrice(contractAddress: string): Promise<GetFloorPriceResponse> {\n    return getFloorPrice(this.config, contractAddress);\n  }\n\n  /**\n   * Returns NFT sales that have happened through on-chain marketplaces.\n   *\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftSales(options?: GetNftSalesOptions): Promise<GetNftSalesResponse>;\n  getNftSales(\n    options?: GetNftSalesOptionsByContractAddress\n  ): Promise<GetNftSalesResponse>;\n  getNftSales(\n    options?: GetNftSalesOptions | GetNftSalesOptionsByContractAddress\n  ): Promise<GetNftSalesResponse> {\n    return getNftSales(this.config, options);\n  }\n\n  /**\n   * Get the rarity of each attribute of an NFT.\n   *\n   * @param contractAddress - Contract address for the NFT collection.\n   * @param tokenId - Token id of the NFT.\n   */\n  computeRarity(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<ComputeRarityResponse> {\n    return computeRarity(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\n   *\n   * @param query - The search string that you want to search for in contract metadata.\n   */\n  searchContractMetadata(\n    query: string\n  ): Promise<SearchContractMetadataResponse> {\n    return searchContractMetadata(this.config, query);\n  }\n\n  /**\n   * Get a summary of attribute prevalence for an NFT collection.\n   *\n   * @param contractAddress - Contract address for the NFT collection.\n   */\n  summarizeNftAttributes(\n    contractAddress: string\n  ): Promise<NftAttributesResponse> {\n    return summarizeNftAttributes(this.config, contractAddress);\n  }\n\n  /**\n   * Refreshes the cached metadata for a provided NFT contract address and token\n   * id. Returns a boolean value indicating whether the metadata was refreshed.\n   *\n   * This method is useful when you want to refresh the metadata for a NFT that\n   * has been updated since the last time it was fetched. Note that the backend\n   * only allows one refresh per token every 15 minutes, globally for all users.\n   * The last refresh time for an NFT can be accessed on the\n   * {@link Nft.timeLastUpdated} field.\n   *\n   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - The token id of the NFT.\n   */\n  refreshNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<boolean> {\n    return refreshNftMetadata(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Triggers a metadata refresh all NFTs in the provided contract address. This\n   * method is useful after an NFT collection is revealed.\n   *\n   * Refreshes are queued on the Alchemy backend and may take time to fully\n   * process. To refresh the metadata for a specific token, use the\n   * {@link refreshNftMetadata} method instead.\n   *\n   * @param contractAddress - The contract address of the NFT collection.\n   * @beta\n   */\n  refreshContract(contractAddress: string): Promise<RefreshContractResult> {\n    return refreshContract(this.config, contractAddress);\n  }\n}\n","import { AxiosRequestConfig, Method } from 'axios';\n\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { requestHttpWithBackoff } from '../internal/dispatch';\nimport {\n  RawAddressActivityResponse,\n  RawCreateWebhookResponse,\n  RawCustomGraphqlWebhookConfig,\n  RawGetAllWebhooksResponse,\n  RawNftFilterParam,\n  RawNftFiltersResponse,\n  RawWebhook\n} from '../internal/raw-interfaces';\nimport {\n  AddressActivityResponse,\n  AddressActivityWebhook,\n  AddressWebhookParams,\n  AddressWebhookUpdate,\n  CustomGraphqlWebhook,\n  CustomGraphqlWebhookConfig,\n  CustomGraphqlWebhookParams,\n  CustomGraphqlWebhookUpdate,\n  DroppedTransactionWebhook,\n  GetAddressesOptions,\n  GetAllWebhooksResponse,\n  MinedTransactionWebhook,\n  Network,\n  NftActivityWebhook,\n  NftFilter,\n  NftFiltersResponse,\n  NftMetadataUpdateWebhook,\n  NftMetadataWebhookUpdate,\n  NftWebhookParams,\n  NftWebhookUpdate,\n  TransactionWebhookParams,\n  Webhook,\n  WebhookType,\n  WebhookVersion\n} from '../types/types';\nimport { AlchemyApiType } from '../util/const';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Notify namespace contains methods used for creating, reading, updating,\n * and deleting webhooks in the Notify API.\n *\n * To use the methods in the API, you must provide your team's auth token in the\n * {@link AlchemySettings.authToken} field when configuring\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\n * on the Notify tab.\n *\n * Note that not all networks are supported in the Notify API. Please consult\n * the documentation for which networks are supported.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the notify\n * namespace via `alchemy.notify`.\n */\nexport class NotifyNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get all webhooks on your team.\n   *\n   * The team is determined by the `authToken` provided into the {@link AlchemySettings}\n   * object when creating a new {@link Alchemy} instance.\n   *\n   * This method returns a response object containing all the webhooks\n   */\n  async getAllWebhooks(): Promise<GetAllWebhooksResponse> {\n    this.verifyConfig();\n    const response = await this.sendWebhookRequest<RawGetAllWebhooksResponse>(\n      'team-webhooks',\n      'getAllWebhooks',\n      {}\n    );\n    return {\n      webhooks: parseRawWebhookResponse(response),\n      totalCount: response.data.length\n    };\n  }\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param addressWebhook The Address Activity webhook.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    addressWebhook: AddressActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param webhookId The id of the address activity webhook. Passing in an id\n   *   of a non-address-activity webhook will result in a response object with\n   *   no addresses.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n  async getAddresses(\n    webhookOrId: AddressActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawAddressActivityResponse>(\n      'webhook-addresses',\n      'getAddresses',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawAddressActivityResponse(response);\n  }\n\n  /**\n   * Get the graphql query used for the provided {@link CustomGraphqlWebhook}.\n   *\n   * @param customGraphqlWebhook The webhook to get the graphql query for.\n   */\n  getGraphqlQuery(\n    customGraphqlWebhook: CustomGraphqlWebhook\n  ): Promise<CustomGraphqlWebhookConfig>;\n\n  /**\n   * Get the graphql query used for the provided {@link CustomGraphqlWebhook}.\n   *\n   * @param webhookId The id of the custom webhook. Passing in an id\n   *   of a non-custom webhook will result in a response object with\n   *   no graphql query.\n   */\n  getGraphqlQuery(webhookId: string): Promise<CustomGraphqlWebhookConfig>;\n  async getGraphqlQuery(\n    webhookOrId: CustomGraphqlWebhook | string\n  ): Promise<CustomGraphqlWebhookConfig> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response =\n      await this.sendWebhookRequest<RawCustomGraphqlWebhookConfig>(\n        'dashboard-webhook-graphql-query',\n        'getGraphqlQuery',\n        {\n          webhook_id: webhookId\n        }\n      );\n    return parseRawCustomGraphqlWebhookResponse(response);\n  }\n\n  /**\n   * Get all NFTs tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param nftWebhook The NFT Activity webhook.\n   * @param options Pagination options when fetching NFT filters.\n   */\n  getNftFilters(\n    nftWebhook: NftActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n\n  /**\n   * Get all NFT filters tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param webhookId The id of the NFT activity webhook. Passing in an\n   *   incorrect id of a non-NFT webhook will result in a response object with\n   *   no filters.\n   * @param options Pagination options when fetching nft filters.\n   */\n  getNftFilters(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n  async getNftFilters(\n    webhookOrId: NftActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'webhook-nft-filters',\n      'getNftFilters',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawNftFiltersResponse(response);\n  }\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhook The NFT activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    nftWebhook: NftActivityWebhook,\n    update: NftWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhookId The id of the NFT activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(nftWebhookId: string, update: NftWebhookUpdate): Promise<void>;\n\n  /**\n   * Update a {@link NftMetadataUpdateWebhook}'s active status or NFT filters.\n   *\n   * @param nftMetadataWebhookId The id of the NFT activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    nftMetadataWebhookId: string,\n    update: NftMetadataWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link CustomGraphqlWebhook}'s active status.\n   * The graphql query associated with the webhook is immutable.\n   *\n   * @param customGraphqlWebhookId The id of the custom webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    customGraphqlWebhookId: string,\n    update: CustomGraphqlWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhook The address activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhook: AddressActivityWebhook,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhookId The id of the address activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhookId: string,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n  async updateWebhook(\n    webhookOrId: NftActivityWebhook | AddressActivityWebhook | string,\n    update:\n      | NftWebhookUpdate\n      | AddressWebhookUpdate\n      | NftMetadataWebhookUpdate\n      | CustomGraphqlWebhookUpdate\n  ): Promise<void> {\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    let restApiName;\n    let methodName;\n    let method: Method;\n    let data;\n    if ('isActive' in update) {\n      restApiName = 'update-webhook';\n      methodName = 'updateWebhook';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        is_active: update.isActive\n      };\n    } else if ('addFilters' in update || 'removeFilters' in update) {\n      restApiName = 'update-webhook-nft-filters';\n      methodName = 'updateWebhookNftFilters';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        nft_filters_to_add: update.addFilters\n          ? update.addFilters.map(nftFilterToParam)\n          : [],\n        nft_filters_to_remove: update.removeFilters\n          ? update.removeFilters.map(nftFilterToParam)\n          : []\n      };\n    } else if (\n      'addMetadataFilters' in update ||\n      'removeMetadataFilters' in update\n    ) {\n      restApiName = 'update-webhook-nft-metadata-filters';\n      methodName = 'updateWebhookNftMetadataFilters';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        nft_metadata_filters_to_add: update.addMetadataFilters\n          ? update.addMetadataFilters.map(nftFilterToParam)\n          : [],\n        nft_metadata_filters_to_remove: update.removeMetadataFilters\n          ? update.removeMetadataFilters.map(nftFilterToParam)\n          : []\n      };\n    } else if ('addAddresses' in update || 'removeAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddresses';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        addresses_to_add: await this.resolveAddresses(update.addAddresses),\n        addresses_to_remove: await this.resolveAddresses(update.removeAddresses)\n      };\n    } else if ('newAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddress';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        addresses: await this.resolveAddresses(update.newAddresses)\n      };\n    } else {\n      throw new Error('Invalid `update` param passed into `updateWebhook`');\n    }\n\n    await this.sendWebhookRequest(\n      restApiName,\n      methodName,\n      {},\n      {\n        method,\n        data\n      }\n    );\n  }\n  /**\n   * Create a new {@link CustomGraphqlWebhook} to track any event on every block.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the graphql query to be executed\n   * on every block\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.GRAPHQL,\n    params: CustomGraphqlWebhookParams\n  ): Promise<CustomGraphqlWebhook>;\n\n  /**\n   * Create a new {@link MinedTransactionWebhook} to track mined transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.MINED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<MinedTransactionWebhook>;\n\n  /**\n   * Create a new {@link DroppedTransactionWebhook} to track dropped transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.DROPPED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<DroppedTransactionWebhook>;\n\n  /**\n   * Create a new {@link NftActivityWebhook} to track NFT transfers.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the NFTs to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.NFT_ACTIVITY,\n    params: NftWebhookParams\n  ): Promise<NftActivityWebhook>;\n\n  createWebhook(\n    url: string,\n    type: WebhookType.NFT_METADATA_UPDATE,\n    params: NftWebhookParams\n  ): Promise<NftMetadataUpdateWebhook>;\n\n  /**\n   * Create a new {@link AddressActivityWebhook} to track address activity.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the addresses to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.ADDRESS_ACTIVITY,\n    params: AddressWebhookParams\n  ): Promise<AddressActivityWebhook>;\n  async createWebhook(\n    url: string,\n    type: WebhookType,\n    params:\n      | NftWebhookParams\n      | AddressWebhookParams\n      | TransactionWebhookParams\n      | CustomGraphqlWebhookParams\n  ): Promise<\n    | MinedTransactionWebhook\n    | DroppedTransactionWebhook\n    | NftActivityWebhook\n    | AddressActivityWebhook\n    | NftMetadataUpdateWebhook\n    | CustomGraphqlWebhook\n  > {\n    let appId;\n    if (\n      type === WebhookType.MINED_TRANSACTION ||\n      type === WebhookType.DROPPED_TRANSACTION ||\n      type === WebhookType.GRAPHQL\n    ) {\n      if (!('appId' in params)) {\n        throw new Error('Transaction and GraphQL Webhooks require an app id.');\n      }\n      appId = params.appId;\n    }\n\n    let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n    let nftFilterObj;\n    let addresses;\n    let graphqlQuery;\n    let skipEmptyMessages;\n    if (\n      type === WebhookType.NFT_ACTIVITY ||\n      type === WebhookType.NFT_METADATA_UPDATE\n    ) {\n      if (!('filters' in params) || params.filters.length === 0) {\n        throw new Error(\n          'Nft Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      const filters = (params.filters as NftFilter[]).map(filter =>\n        filter.tokenId\n          ? {\n              contract_address: filter.contractAddress,\n              token_id: BigNumber.from(filter.tokenId).toString()\n            }\n          : {\n              contract_address: filter.contractAddress\n            }\n      );\n      nftFilterObj =\n        type === WebhookType.NFT_ACTIVITY\n          ? { nft_filters: filters }\n          : { nft_metadata_filters: filters };\n    } else if (type === WebhookType.ADDRESS_ACTIVITY) {\n      if (\n        params === undefined ||\n        !('addresses' in params) ||\n        params.addresses.length === 0\n      ) {\n        throw new Error(\n          'Address Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      addresses = await this.resolveAddresses(params.addresses);\n    } else if (type == WebhookType.GRAPHQL) {\n      if (\n        params === undefined ||\n        !('graphqlQuery' in params) ||\n        params.graphqlQuery.length === 0\n      ) {\n        throw new Error('Custom Webhooks require a non-empty graphql query.');\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      graphqlQuery = params.graphqlQuery;\n      skipEmptyMessages = params.skipEmptyMessages;\n    }\n\n    const data = {\n      network,\n      webhook_type: type,\n      webhook_url: url,\n      ...(appId && { app_id: appId }),\n\n      // Only include the filters/addresses in the final response if they're defined\n      ...nftFilterObj,\n      ...(addresses && { addresses }),\n      ...(graphqlQuery && {\n        graphql_query: {\n          query: graphqlQuery,\n          skip_empty_messages: !!skipEmptyMessages\n        }\n      })\n    };\n\n    const response = await this.sendWebhookRequest<RawCreateWebhookResponse>(\n      'create-webhook',\n      'createWebhook',\n      {},\n      {\n        method: 'POST',\n        data\n      }\n    );\n\n    return parseRawWebhook(response.data);\n  }\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhook The webhook to delete.\n   */\n  deleteWebhook(webhook: Webhook): Promise<void>;\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhookId The id of the webhook to delete.\n   */\n  deleteWebhook(webhookId: string): Promise<void>;\n  async deleteWebhook(webhookOrId: Webhook | string): Promise<void> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'delete-webhook',\n      'deleteWebhook',\n      {\n        webhook_id: webhookId\n      },\n      {\n        method: 'DELETE'\n      }\n    );\n\n    if ('message' in response) {\n      throw new Error(\n        `Webhook not found. Failed to delete webhook: ${webhookId}`\n      );\n    }\n  }\n\n  private verifyConfig() {\n    if (this.config.authToken === undefined) {\n      throw new Error(\n        'Using the Notify API requires setting the Alchemy Auth Token in ' +\n          'the settings object when initializing Alchemy.'\n      );\n    }\n  }\n\n  private sendWebhookRequest<Response>(\n    restApiName: string,\n    methodName: string,\n    params: {},\n    overrides?: AxiosRequestConfig\n  ): Promise<Response> {\n    return requestHttpWithBackoff(\n      this.config,\n      AlchemyApiType.WEBHOOK,\n      restApiName,\n      methodName,\n      params,\n      {\n        ...overrides,\n        headers: {\n          'X-Alchemy-Token': this.config.authToken!,\n          ...overrides?.headers\n        }\n      }\n    );\n  }\n\n  /** Resolves ENS addresses to the raw address.\n   * @internal */\n  private async resolveAddresses(\n    addresses: string[] | undefined\n  ): Promise<string[]> {\n    if (addresses === undefined) {\n      return [];\n    }\n    const resolvedAddresses: string[] = [];\n    const provider = await this.config.getProvider();\n    for (const address of addresses) {\n      const rawAddress = await provider.resolveName(address);\n      if (rawAddress === null) {\n        throw new Error(`Unable to resolve the ENS address: ${address}`);\n      }\n      resolvedAddresses.push(rawAddress);\n    }\n\n    return resolvedAddresses;\n  }\n}\n\n/**\n * Mapping of webhook network representations to the SDK's network representation.\n *\n * @internal\n */\nconst WEBHOOK_NETWORK_TO_NETWORK: { [key: string]: Network } =\n  Object.fromEntries(Object.entries(Network));\n\n/** Mapping of the SDK's network representation the webhook API's network representation. */\nconst NETWORK_TO_WEBHOOK_NETWORK: Map<Network, string> = Object.keys(\n  Network\n).reduce((map: Map<Network, string>, key) => {\n  if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n  }\n  return map;\n}, new Map());\n\nfunction parseRawWebhookResponse(\n  response: RawGetAllWebhooksResponse\n): Webhook[] {\n  return response.data.map(parseRawWebhook);\n}\n\nfunction parseRawWebhook(rawWebhook: RawWebhook): Webhook {\n  return {\n    id: rawWebhook.id,\n    network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n    type: rawWebhook.webhook_type as WebhookType,\n    url: rawWebhook.webhook_url,\n    isActive: rawWebhook.is_active,\n    timeCreated: new Date(rawWebhook.time_created).toISOString(),\n    signingKey: rawWebhook.signing_key,\n    version: rawWebhook.version as WebhookVersion,\n    // Only include the appId in the final response if it's defined\n    ...(rawWebhook.app_id !== undefined && { appId: rawWebhook.app_id })\n  };\n}\n\nfunction parseRawAddressActivityResponse(\n  response: RawAddressActivityResponse\n): AddressActivityResponse {\n  return {\n    addresses: response.data,\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction parseRawCustomGraphqlWebhookResponse(\n  response: RawCustomGraphqlWebhookConfig\n): CustomGraphqlWebhookConfig {\n  return {\n    graphqlQuery: response.data.graphql_query\n  };\n}\n\nfunction parseRawNftFiltersResponse(\n  response: RawNftFiltersResponse\n): NftFiltersResponse {\n  return {\n    filters: response.data.map(f =>\n      f.token_id\n        ? {\n            contractAddress: f.contract_address,\n            tokenId: BigNumber.from(f.token_id).toString()\n          }\n        : {\n            contractAddress: f.contract_address\n          }\n    ),\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction nftFilterToParam(filter: NftFilter): RawNftFilterParam {\n  return filter.tokenId\n    ? {\n        contract_address: filter.contractAddress,\n        token_id: BigNumber.from(filter.tokenId).toString()\n      }\n    : {\n        contract_address: filter.contractAddress\n      };\n}\n","import { AlchemyConfig } from '../api/alchemy-config';\nimport {\n  GetTokenPriceByAddressResponse,\n  GetTokenPriceBySymbolRequest,\n  GetTokenPriceBySymbolResponse,\n  HistoricalPriceByAddressResponse,\n  HistoricalPriceBySymbolResponse,\n  HistoricalPriceInterval,\n  TokenAddressRequest\n} from '../types/prices-types';\nimport { Network } from '../types/types';\nimport { AlchemyApiType } from '../util/const';\nimport { nullsToUndefined } from '../util/util';\nimport { requestHttpWithBackoff } from './dispatch';\n\nconst PRICES_BASE_URL = 'https://api.g.alchemy.com/prices/v1/alch-demo';\n\nexport async function getTokenPriceByAddress(\n  config: AlchemyConfig,\n  addresses: TokenAddressRequest[],\n  srcMethod = 'getTokenPriceByAddress'\n): Promise<GetTokenPriceByAddressResponse> {\n  const response = await requestHttpWithBackoff<\n    {},\n    GetTokenPriceByAddressResponse\n  >(\n    config,\n    AlchemyApiType.PRICES,\n    'tokens/by-address',\n    srcMethod,\n    {},\n    {\n      method: 'POST',\n      data: { addresses },\n      baseURL: PRICES_BASE_URL\n    }\n  );\n  return nullsToUndefined<GetTokenPriceByAddressResponse>(response);\n}\n\nexport async function getTokenPriceBySymbol(\n  config: AlchemyConfig,\n  symbols: string[],\n  srcMethod = 'getTokenPriceBySymbol'\n): Promise<GetTokenPriceBySymbolResponse> {\n  const response = await requestHttpWithBackoff<\n    GetTokenPriceBySymbolRequest,\n    GetTokenPriceBySymbolResponse\n  >(\n    config,\n    AlchemyApiType.PRICES,\n    'tokens/by-symbol',\n    srcMethod,\n    {\n      symbols\n    },\n    {\n      // We need to serialize the symbols array as URLSearchParams since the\n      // Alchemy API expects a query parameter for each symbol. The axios default\n      // serializer will not work here because the symbols array is an array of\n      // strings.\n      // Axios default encoding: ?symbols[]=AAVE&symbols[]=UNI\n      // Alchemy requires: ?symbols=AAVE&symbols=UNI\n      paramsSerializer: params => {\n        const searchParams = new URLSearchParams();\n        Object.entries(params).forEach(([key, value]) => {\n          value.forEach((v: string) => searchParams.append(key, v));\n        });\n        return searchParams.toString();\n      }\n    }\n  );\n  return nullsToUndefined<GetTokenPriceBySymbolResponse>(response);\n}\n\nexport async function getHistoricalPriceBySymbol(\n  config: AlchemyConfig,\n  symbol: string,\n  startTime: string | number,\n  endTime: string | number,\n  interval: HistoricalPriceInterval,\n  srcMethod = 'getHistoricalPriceBySymbol'\n): Promise<HistoricalPriceBySymbolResponse> {\n  const response = await requestHttpWithBackoff<\n    {},\n    HistoricalPriceBySymbolResponse\n  >(\n    config,\n    AlchemyApiType.PRICES,\n    'tokens/historical',\n    srcMethod,\n    {},\n    {\n      method: 'POST',\n      data: {\n        symbol,\n        startTime,\n        endTime,\n        interval\n      },\n      baseURL: PRICES_BASE_URL\n    }\n  );\n  return nullsToUndefined<HistoricalPriceBySymbolResponse>(response);\n}\n\nexport async function getHistoricalPriceByAddress(\n  config: AlchemyConfig,\n  network: Network,\n  address: string,\n  startTime: string | number,\n  endTime: string | number,\n  interval: HistoricalPriceInterval,\n  srcMethod = 'getHistoricalPriceByAddress'\n): Promise<HistoricalPriceByAddressResponse> {\n  const response = await requestHttpWithBackoff<\n    {},\n    HistoricalPriceByAddressResponse\n  >(\n    config,\n    AlchemyApiType.PRICES,\n    'tokens/historical',\n    srcMethod,\n    {},\n    {\n      method: 'POST',\n      data: {\n        network,\n        address,\n        startTime,\n        endTime,\n        interval\n      },\n      baseURL: PRICES_BASE_URL\n    }\n  );\n  return nullsToUndefined<HistoricalPriceByAddressResponse>(response);\n}\n","import {\n  getHistoricalPriceByAddress,\n  getHistoricalPriceBySymbol,\n  getTokenPriceByAddress,\n  getTokenPriceBySymbol\n} from '../internal/prices-api';\nimport {\n  GetTokenPriceByAddressResponse,\n  GetTokenPriceBySymbolResponse,\n  HistoricalPriceByAddressResponse,\n  HistoricalPriceBySymbolResponse,\n  HistoricalPriceInterval,\n  TokenAddressRequest\n} from '../types/prices-types';\nimport { Network } from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Prices namespace contains methods for getting token price data.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the prices namespace\n * via `alchemy.prices`.\n */\nexport class PricesNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get token prices by network and contract address pairs.\n   *\n   * @param addresses - Array of network/address pairs to get prices for\n   * @returns Promise containing token price data\n   * @public\n   */\n  getTokenPriceByAddress(\n    addresses: TokenAddressRequest[]\n  ): Promise<GetTokenPriceByAddressResponse> {\n    return getTokenPriceByAddress(this.config, addresses);\n  }\n\n  /**\n   * Get token prices by token symbol.\n   *\n   * @param symbols - Array of token symbols to get prices for\n   * @returns Promise containing token price data\n   * @public\n   */\n  getTokenPriceBySymbol(\n    symbols: string[]\n  ): Promise<GetTokenPriceBySymbolResponse> {\n    return getTokenPriceBySymbol(this.config, symbols);\n  }\n\n  /**\n   * Get historical token prices by token symbol.\n   *\n   * @param symbol - The token symbol to get historical prices for\n   * @param startTime - Start time in ISO-8601 string format or Unix timestamp in seconds\n   * @param endTime - End time in ISO-8601 string format or Unix timestamp in seconds\n   * @param interval - Time interval between data points\n   * @returns Promise containing historical token price data\n   * @public\n   */\n  getHistoricalPriceBySymbol(\n    symbol: string,\n    startTime: string | number,\n    endTime: string | number,\n    interval: HistoricalPriceInterval\n  ): Promise<HistoricalPriceBySymbolResponse> {\n    return getHistoricalPriceBySymbol(\n      this.config,\n      symbol,\n      startTime,\n      endTime,\n      interval\n    );\n  }\n\n  /**\n   * Get historical token prices by network and contract address.\n   *\n   * @param network - The network where the token contract is deployed\n   * @param address - The token contract address\n   * @param startTime - Start time in ISO-8601 string format or Unix timestamp in seconds\n   * @param endTime - End time in ISO-8601 string format or Unix timestamp in seconds\n   * @param interval - Time interval between data points\n   * @returns Promise containing historical token price data\n   * @public\n   */\n  getHistoricalPriceByAddress(\n    network: Network,\n    address: string,\n    startTime: string | number,\n    endTime: string | number,\n    interval: HistoricalPriceInterval\n  ): Promise<HistoricalPriceByAddressResponse> {\n    return getHistoricalPriceByAddress(\n      this.config,\n      network,\n      address,\n      startTime,\n      endTime,\n      interval\n    );\n  }\n}\n","import {\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport type { BigNumber } from '@ethersproject/bignumber';\nimport { Deferrable } from '@ethersproject/properties';\n\nimport {\n  BlockIdentifier,\n  DebugTransaction,\n  GasOptimizedTransactionResponse,\n  GasOptimizedTransactionStatusResponse,\n  SendPrivateTransactionOptions,\n  SimulateAssetChangesResponse,\n  SimulateExecutionResponse\n} from '../types/types';\nimport { nullsToUndefined } from '../util/util';\nimport { AlchemyConfig } from './alchemy-config';\nimport { Wallet } from './alchemy-wallet';\nimport { fromHex, toHex } from './util';\n\n/**\n * Multiples to increment fee per gas when using\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\n *\n * @internal\n */\nexport const GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\n\n/**\n * The Transact namespace contains methods used for sending transactions and\n * checking on the state of submitted transactions.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the transact\n * namespace via `alchemy.transact`.\n */\nexport class TransactNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Used to send a single transaction to Flashbots. Flashbots will attempt to\n   * send the transaction to miners for the next 25 blocks.\n   *\n   * Returns the transaction hash of the submitted transaction.\n   *\n   * @param signedTransaction The raw, signed transaction as a hash.\n   * @param maxBlockNumber Optional highest block number in which the\n   *   transaction should be included.\n   * @param options Options to configure the request.\n   */\n  async sendPrivateTransaction(\n    signedTransaction: string,\n    maxBlockNumber?: number,\n    options?: SendPrivateTransactionOptions\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n    return provider._send(\n      'eth_sendPrivateTransaction',\n      [\n        {\n          tx: signedTransaction,\n          maxBlockNumber: hexBlockNumber,\n          preferences: options\n        }\n      ],\n      'sendPrivateTransaction'\n    );\n  }\n\n  /**\n   * Stops the provided private transaction from being submitted for future\n   * blocks. A transaction can only be cancelled if the request is signed by the\n   * same key as the {@link sendPrivateTransaction} call submitting the\n   * transaction in first place.\n   *\n   * Please note that fast mode transactions cannot be cancelled using this method.\n   *\n   * Returns a boolean indicating whether the cancellation was successful.\n   *\n   * @param transactionHash Transaction hash of private tx to be cancelled\n   */\n  async cancelPrivateTransaction(transactionHash: string): Promise<boolean> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'eth_cancelPrivateTransaction',\n      [\n        {\n          txHash: transactionHash\n        }\n      ],\n      'cancelPrivateTransaction'\n    );\n  }\n\n  /**\n   * Simulates the asset changes resulting from a list of transactions simulated\n   * in sequence.\n   *\n   * Returns a list of asset changes for each transaction during simulation.\n   *\n   * @param transactions Transactions list of max 3 transactions to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateAssetChangesBundle(\n    transactions: DebugTransaction[],\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateAssetChangesResponse[]> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transactions, blockIdentifier]\n        : [transactions];\n    const res = await provider._send(\n      'alchemy_simulateAssetChangesBundle',\n      params,\n      'simulateAssetChangesBundle'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates the asset changes resulting from a single transaction.\n   *\n   * Returns list of asset changes that occurred during the transaction\n   * simulation. Note that this method does not run the transaction on the\n   * blockchain.\n   *\n   * @param transaction The transaction to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateAssetChanges(\n    transaction: DebugTransaction,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateAssetChangesResponse> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transaction, blockIdentifier]\n        : [transaction];\n    const res = await provider._send(\n      'alchemy_simulateAssetChanges',\n      params,\n      'simulateAssetChanges'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates a list of transactions in sequence and returns list of decoded\n   * traces and logs that occurred for each transaction during simulation.\n   *\n   * Note that this method does not run any transactions on the blockchain.\n   *\n   * @param transactions Transactions list of max 3 transactions to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateExecutionBundle(\n    transactions: DebugTransaction[],\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateExecutionResponse[]> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transactions, blockIdentifier]\n        : [transactions];\n    const res = provider._send(\n      'alchemy_simulateExecutionBundle',\n      params,\n      'simulateExecutionBundle'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates a single transaction and the resulting and returns list of\n   * decoded traces and logs that occurred during the transaction simulation.\n   *\n   * Note that this method does not run the transaction on the blockchain.\n   *\n   * @param transaction The transaction to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateExecution(\n    transaction: DebugTransaction,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateExecutionResponse> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transaction, blockIdentifier]\n        : [transaction];\n    const res = provider._send(\n      'alchemy_simulateExecution',\n      params,\n      'simulateExecution'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link CoreNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns a fee per gas (in wei) that is an estimate of how much you can pay\n   * as a priority fee, or \"tip\", to get a transaction included in the current block.\n   *\n   * This number is generally used to set the `maxPriorityFeePerGas` field in a\n   * transaction request.\n   *\n   * @public\n   */\n  async getMaxPriorityFeePerGas(): Promise<number> {\n    const provider = await this.config.getProvider();\n    const feeHex = await provider._send(\n      'eth_maxPriorityFeePerGas',\n      [],\n      'getMaxPriorityFeePerGas'\n    );\n    return fromHex(feeHex);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method allows you to send the same transaction multiple times, with\n   * different gas prices and gas limits. This should result in lower fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To have Alchemy automatically generate a fee and gas spread, pass in a\n   * {@link TransactionRequest} object and a {@link Wallet} as a signer.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param signedTransactions An array of signed transactions to send. Each\n   *   transaction in the array must have the same values, but with different\n   *   gas and fee values.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    signedTransactions: string[]\n  ): Promise<GasOptimizedTransactionResponse>;\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method will generate a series of five EIP-1559 transactions with different\n   * gas prices in order to minimize the final fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To calculate the fee, gas, and gas spread for each transaction, this method\n   * first calculates the base fee from the latest block, estimates the gas for\n   * the transaction, and then calculates the fee and gas spread for the\n   * transaction. The five transactions will have 90%, 100%, 110%, 120%, and\n   * 130% of the max priority fee per gas.\n   *\n   * Note that you can also pass in an array of pre-signed transactions with set\n   * gas levels for more granular control over gas.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param transaction The raw transaction to send.\n   * @param wallet A wallet to use to sign the transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    transaction: TransactionRequest,\n    wallet: Wallet\n  ): Promise<GasOptimizedTransactionResponse>;\n  async sendGasOptimizedTransaction(\n    transactionOrSignedTxs: TransactionRequest | string[],\n    wallet?: Wallet\n  ): Promise<GasOptimizedTransactionResponse> {\n    if (Array.isArray(transactionOrSignedTxs)) {\n      return this._sendGasOptimizedTransaction(\n        transactionOrSignedTxs,\n        'sendGasOptimizedTransactionPreSigned'\n      );\n    }\n\n    let gasLimit;\n    let priorityFee;\n    let baseFee;\n    const provider = await this.config.getProvider();\n    try {\n      gasLimit = await this.estimateGas(transactionOrSignedTxs);\n      priorityFee = await this.getMaxPriorityFeePerGas();\n      const currentBlock = await provider.getBlock('latest');\n      baseFee = currentBlock.baseFeePerGas!.toNumber();\n    } catch (e) {\n      throw new Error(`Failed to estimate gas for transaction: ${e}`);\n    }\n\n    const gasSpreadTransactions = generateGasSpreadTransactions(\n      transactionOrSignedTxs,\n      gasLimit.toNumber(),\n      baseFee,\n      priorityFee\n    );\n    const signedTransactions = await Promise.all(\n      gasSpreadTransactions.map(tx => wallet!.signTransaction(tx))\n    );\n\n    return this._sendGasOptimizedTransaction(\n      signedTransactions,\n      'sendGasOptimizedTransactionGenerated'\n    );\n  }\n\n  /**\n   * Returns the state of the transaction job returned by the\n   * {@link sendGasOptimizedTransaction}.\n   *\n   * @param trackingId The tracking id from the response of the sent gas optimized transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async getGasOptimizedTransactionStatus(\n    trackingId: string\n  ): Promise<GasOptimizedTransactionStatusResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getGasOptimizedTransactionStatus',\n      [trackingId],\n      'getGasOptimizedTransactionStatus'\n    );\n  }\n\n  /** @internal */\n  private async _sendGasOptimizedTransaction(\n    signedTransactions: string[],\n    methodName: string\n  ): Promise<GasOptimizedTransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_sendGasOptimizedTransaction',\n      [\n        {\n          rawTransactions: signedTransactions\n        }\n      ],\n      methodName\n    );\n  }\n}\n\n/**\n * Helper method to generate the raw transaction with the given gas limit and\n * priority fee across a spread of different gas prices.\n *\n * @internal\n */\n// Visible for testing\nexport function generateGasSpreadTransactions(\n  transaction: TransactionRequest,\n  gasLimit: number,\n  baseFee: number,\n  priorityFee: number\n): TransactionRequest[] {\n  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\n    return {\n      ...transaction,\n      gasLimit,\n      maxFeePerGas: Math.round(\n        baseFee * feeMultiplier + priorityFee * feeMultiplier\n      ),\n      maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n    };\n  });\n}\n","/** This file contains internal types used by the SDK and are not exposed to the end user. */\n\ntype JsonRpcId = string | number | null;\n\n/**\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\n * ethers events.\n *\n * This tag is used internally by ethers to track different event filters.\n */\nexport const ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE =\n  'alchemy-pending-transactions';\n\n/**\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\n *\n * This tag is used internally by ethers to track different event filters.\n */\nexport const ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE =\n  'alchemy-mined-transactions';\n\n/**\n * Array containing all the custom event tags used internally by ethers to track\n * event filters.\n */\nexport const ALCHEMY_EVENT_TYPES = [\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE\n];\n\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params?: any[];\n  id?: JsonRpcId;\n}\n\nexport interface JsonRpcResponse<T = any> {\n  jsonrpc: '2.0';\n  result?: T;\n  error?: JsonRpcError;\n  id: JsonRpcId;\n}\n\ninterface JsonRpcError<T = any> {\n  code: number;\n  message: string;\n  data?: T;\n}\n\nexport type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;\nexport type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];\nexport interface SubscriptionEvent<T = any> {\n  jsonrpc: '2.0';\n  method: 'eth_subscription';\n  params: {\n    subscription: string;\n    result: T;\n  };\n}\n","import { EventType, Filter, Listener } from '@ethersproject/abstract-provider';\n\nimport {\n  AlchemyEventFilter,\n  AlchemyEventType,\n  AlchemyMinedTransactionsAddress,\n  AlchemyMinedTransactionsEventFilter,\n  AlchemyPendingTransactionsEventFilter,\n  AlchemySubscription,\n  NonEmptyArray\n} from '../types/types';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE\n} from './internal-types';\n\n/**\n * DO NOT MODIFY.\n *\n * Event class copied directly over from ethers.js's `BaseProvider` class.\n *\n * This class is used to represent events and their corresponding listeners. The\n * SDK needs to extend this class in order to support Alchemy's custom\n * Subscription API types. The original class is not exported by ethers. Minimal\n * changes have been made in order to get TS to compile.\n */\nclass Event {\n  readonly listener: Listener;\n  readonly once: boolean;\n  readonly tag: string;\n\n  _lastBlockNumber: number;\n  _inflight: boolean;\n\n  constructor(tag: string, listener: Listener, once: boolean) {\n    this.listener = listener;\n    this.tag = tag;\n    this.once = once;\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event(): EventType {\n    switch (this.type) {\n      case 'tx':\n        return this.hash!;\n      case 'filter':\n        return this.filter!;\n      default:\n        return this.tag;\n    }\n  }\n\n  get type(): string {\n    return this.tag.split(':')[0];\n  }\n\n  get hash(): string {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'tx') {\n      throw new Error('Not a transaction event');\n    }\n    return comps[1];\n  }\n\n  get filter(): Filter {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'filter') {\n      throw new Error('Not a transaction event');\n    }\n    const address = comps[1];\n\n    const topics = deserializeTopics(comps[2]);\n    const filter: Filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== '*') {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable(): boolean {\n    const PollableEvents = ['block', 'network', 'pending', 'poll'];\n    return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n\n/**\n * Wrapper class around the ethers `Event` class in order to add support for\n * Alchemy's custom subscriptions types.\n *\n * The serialization and deserialization mechanism requires the order of the\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\n * using a getter on a new event filter, make sure that the position of the\n * field in serialization is correct.\n *\n * The getters on this class deserialize the event tag generated by\n * {@link getAlchemyEventTag} into the original fields passed into the event.\n */\nexport class EthersEvent extends Event {\n  /**\n   * Converts the event tag into the original `fromAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get fromAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `toAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get toAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return deserializeAddressField(comps[2]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `hashesOnly` field in\n   * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\n   */\n  get hashesOnly(): boolean | undefined {\n    const comps = this.tag.split(':');\n    if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\n      return undefined;\n    }\n    if (comps[3] && comps[3] !== '*') {\n      return comps[3] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n\n  get includeRemoved(): boolean | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return comps[2] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n\n  get addresses(): NonEmptyArray<AlchemyMinedTransactionsAddress> | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressesField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n}\n\nexport function isAlchemyEvent(\n  event: AlchemyEventType\n): event is\n  | AlchemyMinedTransactionsEventFilter\n  | AlchemyPendingTransactionsEventFilter {\n  return typeof event === 'object' && 'method' in event;\n}\n\n/**\n * Creates a string representation of an `alchemy_pendingTransaction`\n * subscription filter that is compatible with the ethers implementation of\n * `getEventTag()`. The method is not an exported function in ethers, which is\n * why the SDK has its own implementation.\n *\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\n *\n * @example\n *   ```js\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\n *   const eventTag =  getAlchemyEventTag(\n *   {\n *     \"method\": \"alchemy_pendingTransactions\",\n *     \"fromAddress\": \"0xABC\",\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\n *     \"hashesOnly: true\n *   });\n *   ```;\n *\n * @param event\n * @internal\n */\nexport function getAlchemyEventTag(event: AlchemyEventType): string {\n  if (!isAlchemyEvent(event)) {\n    throw new Error('Event tag requires AlchemyEventType');\n  }\n\n  if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n    return serializePendingTransactionsEvent(event);\n  } else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {\n    return serializeMinedTransactionsEvent(event);\n  } else {\n    throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\n  }\n}\n\nexport function verifyAlchemyEventName(eventName: AlchemyEventFilter): void {\n  if (!Object.values(AlchemySubscription).includes(eventName.method)) {\n    throw new Error(\n      `Invalid method name ${\n        eventName.method\n      }. Accepted method names: ${Object.values(AlchemySubscription)}`\n    );\n  }\n}\n\n/**\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\n * compatible event tag.\n *\n * For the example event:\n * ```\n *  {\n *     \"method\": \"alchemy_pendingTransactions\",\n *     \"fromAddress\": \"0xABC\",\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\n *     \"hashesOnly: true\n *   }\n * ```\n *\n * The resulting serialization is:\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\n *\n * If a field is omitted, it is replaced with a `*`.\n */\nfunction serializePendingTransactionsEvent(\n  event: AlchemyPendingTransactionsEventFilter\n): string {\n  const fromAddress = serializeAddressField(event.fromAddress);\n  const toAddress = serializeAddressField(event.toAddress);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return (\n    ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE +\n    ':' +\n    fromAddress +\n    ':' +\n    toAddress +\n    ':' +\n    hashesOnly\n  );\n}\n\n/**\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\n * compatible event tag.\n *\n * For the example event:\n * ```\n *  {\n *     \"method\": \"alchemy_minedTransactions\",\n *     \"addresses\": [\n *       {\n *         from: \"0xABC\"\n *       },\n *       {\n *         to: \"0xDEF\",\n *         from: \"0x123\"\n *       }\n *     ]\n *     \"includeRemoved\": false\n *     \"hashesOnly: true\n *   }\n * ```\n *\n * The resulting serialization is:\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\n *\n * If a field is omitted, it is replaced with a `*`.\n *\n * The `addresses` array is split by the '|' character, and each to/from address\n * pair is separated by a ',' character.\n *\n */\nfunction serializeMinedTransactionsEvent(\n  event: AlchemyMinedTransactionsEventFilter\n): string {\n  const addresses = serializeAddressesField(event.addresses);\n  const includeRemoved = serializeBooleanField(event.includeRemoved);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return (\n    ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE +\n    ':' +\n    addresses +\n    ':' +\n    includeRemoved +\n    ':' +\n    hashesOnly\n  );\n}\n\nfunction serializeAddressesField(\n  addresses: AlchemyMinedTransactionsAddress[] | undefined\n): string {\n  if (addresses === undefined) {\n    return '*';\n  }\n\n  return addresses\n    .map(\n      filter =>\n        serializeAddressField(filter.to) +\n        ',' +\n        serializeAddressField(filter.from)\n    )\n    .join('|');\n}\n\nfunction serializeAddressField(\n  field: string | Array<string> | undefined\n): string {\n  if (field === undefined) {\n    return '*';\n  } else if (Array.isArray(field)) {\n    return field.join('|');\n  } else {\n    return field;\n  }\n}\n\nfunction serializeBooleanField(field: boolean | undefined): string | undefined {\n  if (field === undefined) {\n    return '*';\n  } else {\n    return field.toString();\n  }\n}\n\nexport function deserializeTopics(data: string): any {\n  if (data === '') {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === '') {\n      return [];\n    }\n\n    const comps = topic.split('|').map(topic => {\n      return topic === 'null' ? null : topic;\n    });\n\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction deserializeAddressField(data: string): string | string[] | undefined {\n  if (data === '') {\n    return undefined;\n  }\n\n  const addresses = data.split('|');\n  return addresses.length === 1 ? addresses[0] : addresses;\n}\n\nfunction deserializeAddressesField(\n  data: string\n): NonEmptyArray<AlchemyMinedTransactionsAddress> | undefined {\n  if (data === '') {\n    return undefined;\n  }\n\n  // Perform a cast here since TS doesn't know we're guaranteed a non-empty\n  // array from deserializing.\n  return data\n    .split('|')\n    .map(addressStr => addressStr.split(','))\n    .map(addressPair => ({\n      ...(addressPair[0] !== '*' && { to: addressPair[0] }),\n      ...(addressPair[1] !== '*' && { from: addressPair[1] })\n    })) as NonEmptyArray<AlchemyMinedTransactionsAddress>;\n}\n","import type { Listener } from '@ethersproject/abstract-provider';\n\nimport { isAlchemyEvent } from '../internal/ethers-event';\nimport {\n  AlchemyEventType,\n  AlchemyMinedTransactionsAddress,\n  AlchemySubscription,\n  NonEmptyArray\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Websocket namespace contains all subscription related functions that\n * allow you to subscribe to events and receive updates as they occur. The\n * underlying WebSocket provider has additional logic to handle reconnections\n * and automatically backfills missed events.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.ws`.\n */\nexport class WebSocketNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Adds a listener to be triggered for each {@link eventName} event. Also\n   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\n   * how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      provider.on(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Adds a listener to be triggered for only the next {@link eventName} event,\n   * after which it will be removed. Also includes Alchemy's Subscription API\n   * events. See {@link AlchemyEventType} for how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      provider.once(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName The event to unlisten to.\n   * @param listener The listener to remove.\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      return provider.off(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = eventName\n        ? await this._resolveEnsAlchemyEvent(eventName)\n        : undefined;\n      provider.removeAllListeners(processedEvent);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   */\n  async listenerCount(eventName?: AlchemyEventType): Promise<number> {\n    const provider = await this.config.getWebSocketProvider();\n    const processedEvent = eventName\n      ? await this._resolveEnsAlchemyEvent(eventName)\n      : undefined;\n    return provider.listenerCount(processedEvent);\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   */\n  async listeners(eventName?: AlchemyEventType): Promise<Listener[]> {\n    const provider = await this.config.getWebSocketProvider();\n    const processedEvent = eventName\n      ? await this._resolveEnsAlchemyEvent(eventName)\n      : undefined;\n    return provider.listeners(processedEvent);\n  }\n\n  /**\n   * Converts ENS addresses in an Alchemy Event to the underlying resolved\n   * address.\n   *\n   * VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  async _resolveEnsAlchemyEvent(\n    eventName: AlchemyEventType\n  ): Promise<AlchemyEventType> {\n    if (!isAlchemyEvent(eventName)) {\n      return eventName;\n    }\n\n    if (\n      eventName.method === AlchemySubscription.MINED_TRANSACTIONS &&\n      eventName.addresses\n    ) {\n      const processedAddresses: AlchemyMinedTransactionsAddress[] = [];\n      for (const address of eventName.addresses) {\n        if (address.to) {\n          address.to = await this._resolveNameOrError(address.to);\n        }\n        if (address.from) {\n          address.from = await this._resolveNameOrError(address.from);\n        }\n        processedAddresses.push(address);\n      }\n      eventName.addresses =\n        processedAddresses as NonEmptyArray<AlchemyMinedTransactionsAddress>;\n    } else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n      if (eventName.fromAddress) {\n        if (typeof eventName.fromAddress === 'string') {\n          eventName.fromAddress = await this._resolveNameOrError(\n            eventName.fromAddress\n          );\n        } else {\n          eventName.fromAddress = await Promise.all(\n            eventName.fromAddress.map(address =>\n              this._resolveNameOrError(address)\n            )\n          );\n        }\n      }\n      if (eventName.toAddress) {\n        if (typeof eventName.toAddress === 'string') {\n          eventName.toAddress = await this._resolveNameOrError(\n            eventName.toAddress\n          );\n        } else {\n          eventName.toAddress = await Promise.all(\n            eventName.toAddress.map(address =>\n              this._resolveNameOrError(address)\n            )\n          );\n        }\n      }\n    }\n\n    return eventName;\n  }\n\n  /**\n   * Converts the provided ENS address or throws an error. This improves code\n   * readability and type safety in other methods.\n   *\n   * VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  async _resolveNameOrError(name: string): Promise<string> {\n    const provider = await this.config.getProvider();\n    const resolved = await provider.resolveName(name);\n    if (resolved === null) {\n      throw new Error(`Unable to resolve the ENS address: ${name}`);\n    }\n    return resolved;\n  }\n}\n","import { AlchemySettings } from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { CoreNamespace } from './core-namespace';\nimport { DebugNamespace } from './debug-namespace';\nimport { NftNamespace } from './nft-namespace';\nimport { NotifyNamespace } from './notify-namespace';\nimport { PricesNamespace } from './prices-namespace';\nimport { TransactNamespace } from './transact-namespace';\nimport { WebSocketNamespace } from './websocket-namespace';\n\n/**\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\n * APIs and separates functionality into different namespaces.\n *\n * Each SDK instance is associated with a specific network and API key. To use a\n * different network or API key, create a new instance of {@link Alchemy}.\n *\n * @public\n */\nexport class Alchemy {\n  /**\n   * The `core` namespace contains the core eth json-rpc calls and Alchemy's\n   * Enhanced APIs.\n   */\n  readonly core: CoreNamespace;\n\n  /** The `nft` namespace contains methods for Alchemy's NFT API. */\n  readonly nft: NftNamespace;\n\n  /** The `ws` namespace contains methods for using WebSockets and creating subscriptions. */\n  readonly ws: WebSocketNamespace;\n\n  /**\n   * The `transact` namespace contains methods for sending transactions and\n   * checking on the state of submitted transasctions.\n   */\n  readonly transact: TransactNamespace;\n\n  /**\n   * Holds the setting information for the instance of the Alchemy SDK client\n   * and allows access to the underlying providers.\n   */\n  readonly config: AlchemyConfig;\n\n  /**\n   * The `notify` namespace contains methods for creating and managing webhooks\n   * as part of the Notify API.\n   */\n  readonly notify: NotifyNamespace;\n\n  /**\n   * The `debug` namespace contains methods for inspecting and debugging\n   * transactions.\n   */\n  readonly debug: DebugNamespace;\n\n  /** The `prices` namespace contains methods for getting token price data. */\n  readonly prices: PricesNamespace;\n\n  /**\n   * @param {string} [settings.apiKey] - The API key to use for Alchemy\n   * @param {Network} [settings.network] - The network to use for Alchemy\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\n   * @public\n   */\n  constructor(settings?: AlchemySettings) {\n    this.config = new AlchemyConfig(settings);\n\n    this.core = new CoreNamespace(this.config);\n    this.nft = new NftNamespace(this.config);\n    this.ws = new WebSocketNamespace(this.config);\n    this.transact = new TransactNamespace(this.config);\n    this.notify = new NotifyNamespace(this.config);\n    this.debug = new DebugNamespace(this.config);\n    this.prices = new PricesNamespace(this.config);\n  }\n}\n","import {\n  BlockTag,\n  FeeData,\n  Provider,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport { ExternallyOwnedAccount } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Deferrable } from '@ethersproject/properties';\nimport { SigningKey } from '@ethersproject/signing-key';\nimport { Wallet as EthersWallet } from '@ethersproject/wallet';\n\nimport { Alchemy } from './alchemy';\n\n/**\n * The Wallet class inherits Signer and can sign transactions and messages using\n * a private key as a standard Externally Owned Account (EOA).\n *\n * SDK's custom implementation of Ethers.js's 'Wallet'.\n *\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\n * Provider or an Alchemy object. This implementation will intelligently detect\n * the format and set the provider accordingly.\n *\n * @public\n * @override\n */\nexport class Wallet extends EthersWallet {\n  private alchemyProviderPromise?: Promise<Provider>;\n\n  /**\n   * Overload permits users to pass in either a standard Provider or an Alchemy\n   * object. The constructor will detect the object type and handle appropriately.\n   *\n   * @override\n   */\n  constructor(\n    privateKey: BytesLike | ExternallyOwnedAccount | SigningKey,\n    alchemyOrProvider?: Alchemy | Provider\n  ) {\n    // If object passed in is a provider, send to super\n    let superProvider: Provider | undefined;\n    if (alchemyOrProvider && Provider.isProvider(alchemyOrProvider)) {\n      superProvider = alchemyOrProvider;\n    }\n    super(privateKey, superProvider);\n\n    // If object passed in is an Alchemy object, just set Alchemy\n    if (alchemyOrProvider && !Provider.isProvider(alchemyOrProvider)) {\n      this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Set of overrides from Signer to handle async provider retrieval.\n  //////////////////////////////////////////////////////////////////\n\n  /**\n   * Returns the balance of this wallet at blockTag.\n   *\n   * @param blockTag The block to check the balance of\n   * @override\n   */\n  getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.getBalance(blockTag));\n  }\n\n  /**\n   * Returns the number of transactions this account has ever sent. This is the\n   * value required to be included in transactions as the nonce.\n   *\n   * @param blockTag The block to check the transaction count on\n   * @override\n   */\n  getTransactionCount(blockTag?: BlockTag): Promise<number> {\n    return this.getWallet().then(wallet =>\n      wallet.getTransactionCount(blockTag)\n    );\n  }\n\n  /**\n   * Returns the result of estimating the cost to send the transactionRequest,\n   * with this account address being used as the from field.\n   *\n   * @param transaction Transaction to estimate the gas on\n   * @override\n   */\n  estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.estimateGas(transaction));\n  }\n\n  /**\n   * Returns the result of calling using the transactionRequest, with this\n   * account address being used as the from field.\n   *\n   * @param transaction To make a call on\n   * @param blockTag The block to make the call on\n   * @override\n   */\n  call(\n    transaction: Deferrable<TransactionRequest>,\n    blockTag?: BlockTag\n  ): Promise<string> {\n    return this.getWallet().then(wallet => wallet.call(transaction, blockTag));\n  }\n\n  /**\n   * Populates ALL keys for a transaction and checks that `from` matches this\n   * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\n   * `nonce`, and `chainId` if they are not provided.\n   *\n   * @param transaction The transaction to populate.\n   * @override\n   */\n  populateTransaction(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<TransactionRequest> {\n    return this.getWallet().then(wallet =>\n      wallet.populateTransaction(transaction)\n    );\n  }\n\n  /**\n   * Populates all fields in a transaction, signs it and sends it to the network\n   *\n   * @param transaction The transaction to send.\n   * @override\n   */\n  sendTransaction(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<TransactionResponse> {\n    return this.getWallet().then(wallet => wallet.sendTransaction(transaction));\n  }\n\n  /**\n   * Returns the chain ID this wallet is connected to.\n   *\n   * @override\n   */\n  getChainId(): Promise<number> {\n    return this.getWallet().then(wallet => wallet.getChainId());\n  }\n\n  /**\n   * Returns the current gas price.\n   *\n   * @override\n   */\n  getGasPrice(): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.getGasPrice());\n  }\n\n  /**\n   * Returns the current recommended FeeData to use in a transaction.\n   *\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\n   * should be used.\n   *\n   * For legacy transactions and networks which do not support EIP-1559, the\n   * gasPrice should be used.\n   *\n   * @override\n   */\n  getFeeData(): Promise<FeeData> {\n    return this.getWallet().then(wallet => wallet.getFeeData());\n  }\n\n  /**\n   * Looks up the address of name. If the name is not owned, or does not have a\n   * Resolver configured, or the Resolver does not have an address configured,\n   * null is returned.\n   *\n   * @param name Name of the ENS address\n   * @override\n   */\n  resolveName(name: string): Promise<string> {\n    return this.getWallet().then(wallet => wallet.resolveName(name));\n  }\n\n  private async getWallet() {\n    if (!this.alchemyProviderPromise) {\n      return this.connect(this.provider);\n    }\n    return this.connect(await this.alchemyProviderPromise);\n  }\n}\n","import {\n  Contract as EthersContract,\n  ContractFactory as EthersContractFactory\n} from '@ethersproject/contracts';\n\n/**\n * The Contract class is a wrapper around the Contract class from ethers.js and\n * is exported here for convenience.\n *\n * @public\n */\n// TODO: support passing in Alchemy instance into the contract.\nexport class Contract extends EthersContract {}\n\n/**\n * The ContractFactory class is a wrapper around the ContractFactory class from\n * ethers.js and is exported here for convenience.\n *\n * @public\n */\nexport class ContractFactory extends EthersContractFactory {}\n"],"names":["Network","TokenBalanceType","AssetTransfersCategory","GetTransfersForOwnerTransferType","SortingOrder","OpenSeaSafelistRequestStatus","AlchemySubscription","SimulateAssetType","SimulateChangeType","DecodingAuthority","DebugCallType","GasOptimizedTransactionStatus","WebhookVersion","WebhookType","CommitmentLevel","DebugTracerType","NftTokenType","NftSpamClassification","NftFilters","NftOrdering","NftSaleMarketplace","NftSaleTakerType","NftRefreshState","NftCollectionMarketplace","HistoricalPriceInterval","__awaiter","version","LogLevel","Logger","this","BigNumber","formatUnits","isHexString","hexStripZeros","hexValue","axios","EthersWallet","Provider","EthersContract","EthersContractFactory"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}},
    {"offset": {"line": 6905, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6910, "column": 0}, "map": {"version":3,"file":"index.js","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 7106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}