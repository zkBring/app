{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"plugins-network.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/plugins-network.ts"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport type { FeeData, Provider } from \"./provider.js\";\nimport type { FetchRequest } from \"../utils/fetch.js\";\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name: string) {\n        defineProperties<NetworkPlugin>(this, { name });\n    }\n\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone(): NetworkPlugin {\n        return new NetworkPlugin(this.name);\n    }\n\n//    validate(network: Network): NetworkPlugin {\n//        return this;\n//    }\n}\n\n\n/**\n *  The gas cost parameters for a [[GasCostPlugin]].\n */\nexport type GasCostParameters = {\n    /**\n     *  The transactions base fee.\n     */\n    txBase?: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate?: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero?: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero?: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey?: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress?: number;\n};\n\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    readonly effectiveBlock!: number;\n\n    /**\n     *  The transactions base fee.\n     */\n    readonly txBase!: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    readonly txCreate!: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    readonly txDataZero!: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    readonly txDataNonzero!: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListStorageKey!: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListAddress!: number;\n\n\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\n        if (effectiveBlock == null) { effectiveBlock = 0; }\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\n\n        const props: Record<string, number> = { effectiveBlock };\n        function set(name: keyof GasCostParameters, nullish: number): void {\n            let value = (costs || { })[name];\n            if (value == null) { value = nullish; }\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\n            props[name] = value;\n        }\n\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n\n        defineProperties<GasCostPlugin>(this, props);\n    }\n\n    clone(): GasCostPlugin {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    readonly address!: string;\n\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    readonly targetNetwork!: number;\n\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address?: null | string, targetNetwork?: null | number) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties<EnsPlugin>(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\n        });\n    }\n\n    clone(): EnsPlugin {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\n\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\n        return this.#feeDataFunc;\n    }\n\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider: Provider): Promise<FeeData> {\n        return await this.#feeDataFunc(provider);\n    }\n\n    clone(): FeeDataNetworkPlugin {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #url: string;\n    readonly #processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>;\n\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */\n    get url(): string { return this.#url; }\n\n    /**\n     *  The callback to use when computing the FeeData.\n     */\n    get processFunc(): (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }> { return this.#processFunc; }\n\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */\n    constructor(url: string, processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>) {\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        this.#url = url;\n        this.#processFunc = processFunc;\n    }\n\n    // We are immutable, so we can serve as our own clone\n    clone(): FetchUrlFeeDataNetworkPlugin { return this; }\n}\n\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"file":"network.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/network.ts"],"sourcesContent":["/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\n\nimport {\n    EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin\n} from \"./plugins-network.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON(): any {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    /**\n     *  The network chain ID.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other: Networkish): boolean {\n        if (other == null) { return false; }\n\n        if (typeof(other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return (this.name === other);\n        }\n\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return false;\n        }\n\n        if (typeof(other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                } catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    /**\n     *  Create a copy of this Network.\n     */\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    altNames?: Array<string>;\n    plugins?: Array<NetworkPlugin>;\n};\n\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value: number | string, decimals: number): bigint {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) { comps.push(\"\"); }\n\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Pad the fraction to 9 decimalplaces\n    while (comps[1].length < decimals) { comps[1] += \"0\"; }\n\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) { frac++; }\n        comps[1] = frac.toString();\n    }\n\n    return BigInt(comps[0] + comps[1]);\n}\n\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url: string) {\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n\n        let response;\n        try {\n            const [ _response, _feeData ] = await Promise.all([\n                request.send(), fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\n            };\n            return feeData;\n        } catch (error: any) {\n            assert(false, `error encountered with polygon gas station (${ JSON.stringify(request.url) })`, \"SERVER_ERROR\", { request, response, error });\n        }\n    });\n}\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            network.attachPlugin(new GasCostPlugin());\n\n            (options.plugins || []).forEach((plugin) => {\n                network.attachPlugin(plugin);\n            });\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\n    registerEth(\"holesky\", 17000, { ensNetwork: 17000 });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n    });\n    registerEth(\"arbitrum-goerli\", 421613, { });\n    registerEth(\"arbitrum-sepolia\", 421614, { });\n\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\n    registerEth(\"base-goerli\", 84531, { });\n    registerEth(\"base-sepolia\", 84532, { });\n\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\n    registerEth(\"bnbt\", 97, { });\n\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\n    registerEth(\"linea-goerli\", 59140, { });\n    registerEth(\"linea-sepolia\", 59141, { });\n\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-amoy\", 80002, { });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: [ ]\n    });\n    registerEth(\"optimism-goerli\", 420, { });\n    registerEth(\"optimism-sepolia\", 11155420, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"file":"provider.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider.ts"],"sourcesContent":["//import { resolveAddress } from \"@ethersproject/address\";\nimport {\n    defineProperties, getBigInt, getNumber, hexlify, isBytesLike,\n    resolveProperties,\n    assert, assertArgument, isError, makeError\n} from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\n\nimport type { AddressLike, NameResolver } from \"../address/index.js\";\nimport type { BigNumberish, EventEmitterable } from \"../utils/index.js\";\nimport type { Signature } from \"../crypto/index.js\";\nimport type {\n    AccessList, AccessListish, BlobLike, KzgLibrary, TransactionLike\n} from \"../transaction/index.js\";\n\nimport type { ContractRunner } from \"./contracts.js\";\nimport type { Network } from \"./network.js\";\n\n\nconst BN_0 = BigInt(0);\n\n/**\n *  A **BlockTag** specifies a specific block.\n *\n *  **numeric value** - specifies the block height, where\n *  the genesis block is block 0; many operations accept a negative\n *  value which indicates the block number should be deducted from\n *  the most recent block. A numeric value may be a ``number``, ``bigint``,\n *  or a decimal of hex string.\n *\n *  **blockhash** - specifies a specific block by its blockhash; this allows\n *  potentially orphaned blocks to be specifed, without ambiguity, but many\n *  backends do not support this for some operations.\n */\nexport type BlockTag = BigNumberish | string;\n\nimport {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\n// -----------------------\n\nfunction getValue<T>(value: undefined | null | T): null | T {\n    if (value == null) { return null; }\n    return value;\n}\n\nfunction toJson(value: null | bigint): null | string {\n    if (value == null) { return null; }\n    return value.toString();\n}\n\n// @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    readonly gasPrice!: null | bigint;\n\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint) {\n        defineProperties<FeeData>(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            gasPrice, maxFeePerGas, maxPriorityFeePerGas\n        } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n\n\n/**\n *  A **TransactionRequest** is a transactions with potentially various\n *  properties not defined, or with less strict types for its values.\n *\n *  This is used to pass to various operations, which will internally\n *  coerce any types and populate any necessary values.\n */\nexport interface TransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: null | number;\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: null | AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: null | AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n    nonce?: null | number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consume.\n     */\n    gasLimit?: null | BigNumberish;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The transaction data.\n     */\n    data?: null | string;\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: null | BigNumberish;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: null | AccessListish;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n    // Only meaningful when used for call\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n\n    /**\n     *  The blob versioned hashes (see [[link-eip-4844]]).\n     */\n    blobVersionedHashes?: null | Array<string>\n\n    /**\n     *  The maximum fee per blob gas (see [[link-eip-4844]]).\n     */\n    maxFeePerBlobGas?: null | BigNumberish;\n\n    /**\n     *  Any blobs to include in the transaction (see [[link-eip-4844]]).\n     */\n    blobs?: null | Array<BlobLike>;\n\n    /**\n     *  An external library for computing the KZG commitments and\n     *  proofs necessary for EIP-4844 transactions (see [[link-eip-4844]]).\n     *\n     *  This is generally ``null``, unless you are creating BLOb\n     *  transactions.\n     */\n    kzg?: null | KzgLibrary;\n\n    // Todo?\n    //gasMultiplier?: number;\n};\n\n/**\n *  A **PreparedTransactionRequest** is identical to a [[TransactionRequest]]\n *  except all the property types are strictly enforced.\n */\nexport interface PreparedTransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: number;\n\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n\n    nonce?: number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consime.\n     */\n    gasLimit?: bigint;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: bigint;\n\n    /**\n     *  The transaction data.\n     */\n    data?: string;\n\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: bigint;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: bigint;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: AccessList;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n}\n\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req: TransactionRequest): PreparedTransactionRequest {\n    const result: any = { };\n\n    // These could be addresses, ENS names or Addressables\n    if (req.to) { result.to = req.to; }\n    if (req.from) { result.from = req.from; }\n\n    if (req.data) { result.data = hexlify(req.data); }\n\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getBigInt((<any>req)[key], `request.${ key }`);\n    }\n\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getNumber((<any>req)[key], `request.${ key }`);\n    }\n\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n\n    if (\"blockTag\" in req) { result.blockTag = req.blockTag; }\n\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead\n    }\n\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\n        result.blobVersionedHashes = req.blobVersionedHashes.slice();\n    }\n\n    if (\"kzg\" in req) { result.kzg = req.kzg; }\n\n    if (\"blobs\" in req && req.blobs) {\n        result.blobs = req.blobs.map((b) => {\n            if (isBytesLike(b)) { return hexlify(b); }\n            return Object.assign({ }, b);\n        });\n    }\n\n    return result;\n}\n\n//////////////////////\n// Block\n\n/**\n *  An Interface to indicate a [[Block]] has been included in the\n *  blockchain. This asserts a Type Guard that necessary properties\n *  are non-null.\n *\n *  Before a block is included, it is a //pending// block.\n */\nexport interface MinedBlock extends Block {\n    /**\n     *  The block number also known as the block height.\n     */\n    readonly number: number;\n\n    /**\n     *  The block hash.\n     */\n    readonly hash: string;\n\n    /**\n     *  The block timestamp, in seconds from epoch.\n     */\n    readonly timestamp: number;\n\n    /**\n     *  The block date, created from the [[timestamp]].\n     */\n    readonly date: Date;\n\n    /**\n     *  The miner of the block, also known as the ``author`` or\n     *  block ``producer``.\n     */\n    readonly miner: string;\n}\n\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block implements BlockParams, Iterable<string> {\n\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    readonly number!: number;\n\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    readonly timestamp!: number;\n\n    /**\n     *  The block hash of the parent block.\n     */\n    readonly parentHash!: string;\n\n    /**\n     *  The hash tree root of the parent beacon block for the given\n     *  execution block. See [[link-eip-4788]].\n     */\n    parentBeaconBlockRoot!: null | string;\n\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    readonly nonce!: string;\n\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    readonly difficulty!: bigint;\n\n\n    /**\n     *  The total gas limit for this block.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The total gas used in this block.\n     */\n    readonly gasUsed!: bigint;\n\n\n    /**\n     *  The root hash for the global state after applying changes\n     *  in this block.\n     */\n    readonly stateRoot!: null | string;\n\n    /**\n     *  The hash of the transaction receipts trie.\n     */\n    readonly receiptsRoot!: null | string;\n\n    /**\n     *  The total amount of blob gas consumed by the transactions\n     *  within the block. See [[link-eip-4844]].\n     */\n    readonly blobGasUsed!: null | bigint;\n\n    /**\n     *  The running total of blob gas consumed in excess of the\n     *  target, prior to the block. See [[link-eip-4844]].\n     */\n    readonly excessBlobGas!: null | bigint;\n\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    readonly miner!: string;\n\n    /**\n     *  The latest RANDAO mix of the post beacon state of\n     *  the previous block.\n     */\n    readonly prevRandao!: null | string;\n\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    readonly extraData!: string;\n\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    readonly baseFeePerGas!: null | bigint;\n\n    readonly #transactions: Array<string | TransactionResponse>;\n\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block: BlockParams, provider: Provider) {\n\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof(tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n\n        defineProperties<Block>(this, {\n            provider,\n\n            hash: getValue(block.hash),\n\n            number: block.number,\n            timestamp: block.timestamp,\n\n            parentHash: block.parentHash,\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            blobGasUsed: block.blobGasUsed,\n            excessBlobGas: block.excessBlobGas,\n            miner: block.miner,\n            prevRandao: getValue(block.prevRandao),\n            extraData: block.extraData,\n\n            baseFeePerGas: getValue(block.baseFeePerGas),\n\n            stateRoot: block.stateRoot,\n            receiptsRoot: block.receiptsRoot,\n        });\n    }\n\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */\n    get transactions(): ReadonlyArray<string> {\n        return this.#transactions.map((tx) => {\n            if (typeof(tx) === \"string\") { return tx; }\n            return tx.hash;\n        });\n    }\n\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions(): Array<TransactionResponse> {\n        const txs = this.#transactions.slice();\n\n        // Doesn't matter...\n        if (txs.length === 0) { return [ ]; }\n\n        // Make sure we prefetched the transactions\n        assert(typeof(txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n\n        return <Array<TransactionResponse>>txs;\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash,\n            miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot,\n            stateRoot, receiptsRoot, timestamp, transactions\n        } = this;\n\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            blobGasUsed: toJson(this.blobGasUsed),\n            excessBlobGas: toJson(this.excessBlobGas),\n            hash, miner, prevRandao, nonce, number, parentHash, timestamp,\n            parentBeaconBlockRoot, stateRoot, receiptsRoot,\n            transactions,\n        };\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The number of transactions in this block.\n     */\n    get length(): number { return this.#transactions.length; }\n\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date(): null | Date {\n        if (this.timestamp == null) { return null; }\n        return new Date(this.timestamp * 1000);\n    }\n\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash: number | string): Promise<TransactionResponse> {\n        // Find the internal value by its index or hash\n        let tx: string | TransactionResponse | undefined = undefined;\n        if (typeof(indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof(v) === \"string\") {\n                    if (v !== hash) { continue; }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) { continue; }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) { throw new Error(\"no such tx\"); }\n\n        if (typeof(tx) === \"string\") {\n            return <TransactionResponse>(await this.provider.getTransaction(tx));\n        } else {\n            return tx;\n        }\n    }\n\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash: number | string): TransactionResponse {\n        const txs = this.prefetchedTransactions;\n        if (typeof(indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) { return tx; }\n        }\n\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined(): this is MinedBlock { return !!this.hash; }\n\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon(): this is (Block & { baseFeePerGas: bigint }) {\n        return !!this.baseFeePerGas;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent(): OrphanFilter {\n        if (!this.isMined()) { throw new Error(\"\"); }\n        return createOrphanedBlockFilter(this);\n    }\n}\n\n//////////////////////\n// Log\n\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log implements LogParams {\n\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    readonly transactionHash!: string;\n\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    readonly removed!: boolean;\n\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    readonly address!: string;\n\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    readonly data!: string;\n\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    readonly topics!: ReadonlyArray<string>;\n\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    readonly index!: number;\n\n    /**\n     *  The index within the transaction of this log.\n     */\n    readonly transactionIndex!: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(log: LogParams, provider: Provider) {\n        this.provider = provider;\n\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties<Log>(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n\n            removed: log.removed,\n\n            address: log.address,\n            data: log.data,\n\n            topics,\n\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON(): any {\n        const {\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        } = this;\n\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return block;\n    }\n\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return tx;\n    }\n\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", { });\n        return receipt;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedLogFilter(this);\n    }\n}\n\n//////////////////////\n// Transaction Receipt\n\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt implements TransactionReceiptParams, Iterable<Log> {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The address the transaction was sent to.\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    readonly from!: string;\n\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    readonly contractAddress!: null | string;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    readonly index!: number;\n\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    readonly logsBloom!: string;\n\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The gas used for BLObs. See [[link-eip-4844]].\n     */\n    readonly blobGasUsed!: null | bigint;\n\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    readonly cumulativeGasUsed!: bigint;\n\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The price paid per BLOB in gas. See [[link-eip-4844]].\n     */\n    readonly blobGasPrice!: null | bigint;\n\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    readonly type!: number;\n    //readonly byzantium!: boolean;\n\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    readonly status!: null | number;\n\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    readonly root!: null | string;\n\n    readonly #logs: ReadonlyArray<Log>;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionReceiptParams, provider: Provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n\n        defineProperties<TransactionReceipt>(this, {\n            provider,\n\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n\n            hash: tx.hash,\n            index: tx.index,\n\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n\n            logsBloom: tx.logsBloom,\n\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            blobGasUsed: tx.blobGasUsed,\n            gasPrice,\n            blobGasPrice: tx.blobGasPrice,\n\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n\n    /**\n     *  The logs for this transaction.\n     */\n    get logs(): ReadonlyArray<Log> { return this.#logs; }\n\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON(): any {\n        const {\n            to, from, contractAddress, hash, index,\n            blockHash, blockNumber, logsBloom,\n            logs, //byzantium, \n            status, root\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            blobGasUsed: toJson(this.blobGasUsed),\n            blobGasPrice: toJson(this.blobGasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n\n    /**\n     *  @_ignore:\n     */\n    get length(): number { return this.logs.length; }\n\n    [Symbol.iterator](): Iterator<Log> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee(): bigint {\n        return this.gasUsed * this.gasPrice;\n    }\n\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) { throw new Error(\"TODO\"); }\n        return tx;\n    }\n\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult(): Promise<string> {\n        return <string>(await this.provider.getTransactionResult(this.hash));\n    }\n\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n\n\n//////////////////////\n// Transaction Response\n\n/**\n *  A **MinedTransactionResponse** is an interface representing a\n *  transaction which has been mined and allows for a type guard for its\n *  property values being defined.\n */\nexport interface MinedTransactionResponse extends TransactionResponse {\n    /**\n     *  The block number this transaction occurred in.\n     */\n    blockNumber: number;\n\n    /**\n     *  The block hash this transaction occurred in.\n     */\n    blockHash: string;\n\n    /**\n     *  The date this transaction occurred on.\n     */\n    date: Date;\n}\n\n\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse implements TransactionLike<string>, TransactionResponseParams {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockNumber: null | number;\n\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockHash: null | string;\n\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    readonly index!: number;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    readonly type!: number;\n\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    readonly from!: string;\n\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    readonly nonce!: number;\n\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The [[link-eip-4844]] max fee per BLOb gas.\n     */\n    readonly maxFeePerBlobGas!: null | bigint;\n\n    /**\n     *  The data.\n     */\n    readonly data!: string;\n\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  The chain ID.\n     */\n    readonly chainId!: bigint;\n\n    /**\n     *  The signature.\n     */\n    readonly signature!: Signature;\n\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    readonly accessList!: null | AccessList;\n\n    /**\n     *  The [[link-eip-4844]] BLOb versioned hashes.\n     */\n    readonly blobVersionedHashes!: null | Array<string>;\n\n    #startBlock: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionResponseParams, provider: Provider) {\n        this.provider = provider;\n\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber: null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash: null;\n\n        this.hash = tx.hash;\n        this.index = tx.index;\n\n        this.type = tx.type;\n\n        this.from = tx.from;\n        this.to = tx.to || null;\n\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas: null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas: null;\n        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas: null;\n\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n\n        this.accessList = (tx.accessList != null) ? tx.accessList: null;\n        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes: null;\n\n        this.#startBlock = -1;\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON(): any {\n        const {\n            blockNumber, blockHash, index, hash, type, to, from, nonce,\n            data, signature, accessList, blobVersionedHashes\n        } = this;\n\n        return {\n            _type: \"TransactionResponse\",\n            accessList, blockNumber, blockHash,\n            blobVersionedHashes,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock(): Promise<null | Block> {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) { blockNumber = tx.blockNumber; }\n        }\n        if (blockNumber == null) { return null; }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction(): Promise<null | TransactionResponse> {\n        return this.provider.getTransaction(this.hash);\n    }\n\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) { return 0; }\n\n            return blockNumber - tx.blockNumber + 1;\n        }\n\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms?: number, _timeout?: number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms == null) ? 1: _confirms;\n        const timeout = (_timeout == null) ? 0: _timeout;\n\n        let startBlock = this.#startBlock\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true: false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) { return null; }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n\n            // We were mined; no replacement\n            if (stopScanning) { return null; }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) { return; }\n\n            // We were replaced; start scanning for that transaction\n\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) { nextScan = this.#startBlock; }\n            }\n\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) { return null; }\n                const block = await this.provider.getBlock(nextScan, true);\n\n                // This should not happen; but we'll try again shortly\n                if (block == null) { return; }\n\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) { return; }\n                }\n\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx: TransactionResponse = await block.getTransaction(i);\n\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) { return null; }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) { return; }\n\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) { return; }\n\n                        // The reason we were replaced\n                        let reason: \"replaced\" | \"repriced\" | \"cancelled\" = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\"\n                        }\n\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n\n                nextScan++;\n            }\n            return;\n        };\n\n        const checkReceipt = (receipt: null | TransactionReceipt) => {\n            if (receipt == null || receipt.status !== 0) { return receipt; }\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null, reason: null, invocation: null, revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                }, receipt\n            });\n        };\n\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n        if (confirms === 0) { return checkReceipt(receipt); }\n\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return checkReceipt(receipt);\n            }\n\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n\n            // Allow null only when the confirms is 0\n            if (confirms === 0) { return null; }\n        }\n\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers: Array<() => void> = [ ];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n\n            const txListener = async (receipt: TransactionReceipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    } catch (error) { reject(error); }\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n\n        return await <Promise<TransactionReceipt>>waiter;\n    }\n\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined(): this is MinedTransactionResponse {\n        return (this.blockHash != null);\n    }\n\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy(): this is (TransactionResponse & { accessList: null, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 0)\n    }\n\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }){\n        return (this.type === 2);\n    }\n\n    /**\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\n     *  transaction. See [[link-eip-4844]].\n     */\n    isCancun(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint, maxFeePerBlobGas: bigint, blobVersionedHashes: Array<string> }){\n        return (this.type === 3);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent(): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        return createReorderedTransactionFilter(this, other);\n    }\n\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock: number): TransactionResponse {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\n\n\n//////////////////////\n// OrphanFilter\n\n/**\n *  An Orphan Filter allows detecting when an orphan block has\n *  resulted in dropping a block or transaction or has resulted\n *  in transactions changing order.\n *\n *  Not currently fully supported.\n */\nexport type OrphanFilter = {\n    orphan: \"drop-block\",\n    hash: string,\n    number: number\n} | {\n    orphan: \"drop-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"reorder-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"drop-log\",\n    log: {\n        transactionHash: string,\n        blockHash: string,\n        blockNumber: number,\n        address: string,\n        data: string,\n        topics: ReadonlyArray<string>,\n        index: number\n    }\n};\n\nfunction createOrphanedBlockFilter(block: { hash: string, number: number }): OrphanFilter {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\n\nfunction createReorderedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }, other?: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\n\nfunction createRemovedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"drop-transaction\", tx };\n}\n\nfunction createRemovedLogFilter(log: { blockHash: string, transactionHash: string, blockNumber: number, address: string, data: string, topics: ReadonlyArray<string>, index: number }): OrphanFilter {\n    return { orphan: \"drop-log\", log: {\n        transactionHash: log.transactionHash,\n        blockHash: log.blockHash,\n        blockNumber: log.blockNumber,\n        address: log.address,\n        data: log.data,\n        topics: Object.freeze(log.topics.slice()),\n        index: log.index\n    } };\n}\n\n//////////////////////\n// EventFilter\n\n/**\n *  A **TopicFilter** provides a struture to define bloom-filter\n *  queries.\n *\n *  Each field that is ``null`` matches **any** value, a field that is\n *  a ``string`` must match exactly that value and ``array`` is\n *  effectively an ``OR``-ed set, where any one of those values must\n *  match.\n */\nexport type TopicFilter = Array<null | string | Array<string>>;\n\n// @TODO:\n//export type DeferableTopicFilter = Array<null | string | Promise<string> | Array<string | Promise<string>>>;\n\n/**\n *  An **EventFilter** allows efficiently filtering logs (also known as\n *  events) using bloom filters included within blocks.\n */\nexport interface EventFilter {\n    address?: AddressLike | Array<AddressLike>;\n    topics?: TopicFilter;\n}\n\n/**\n *  A **Filter** allows searching a specific range of blocks for mathcing\n *  logs.\n */\nexport interface Filter extends EventFilter {\n\n    /**\n     *  The start block for the filter (inclusive).\n     */\n    fromBlock?: BlockTag;\n\n    /**\n     *  The end block for the filter (inclusive).\n     */\n    toBlock?: BlockTag;\n}\n\n/**\n *  A **FilterByBlockHash** allows searching a specific block for mathcing\n *  logs.\n */\nexport interface FilterByBlockHash extends EventFilter {\n    /**\n     *  The blockhash of the specific block for the filter.\n     */\n    blockHash?: string;\n}\n\n\n//////////////////////\n// ProviderEvent\n\n/**\n *  A **ProviderEvent** provides the types of events that can be subscribed\n *  to on a [[Provider]].\n *\n *  Each provider may include additional possible events it supports, but\n *  the most commonly supported are:\n *\n *  **``\"block\"``** - calls the listener with the current block number on each\n *  new block.\n *\n *  **``\"error\"``** - calls the listener on each async error that occurs during\n *  the event loop, with the error.\n *\n *  **``\"debug\"``** - calls the listener on debug events, which can be used to\n *  troubleshoot network errors, provider problems, etc.\n *\n *  **``transaction hash``** - calls the listener on each block after the\n *  transaction has been mined; generally ``.once`` is more appropriate for\n *  this event.\n *\n *  **``Array``** - calls the listener on each log that matches the filter.\n *\n *  [[EventFilter]] - calls the listener with each matching log\n */\nexport type ProviderEvent = string | Array<string | Array<string>> | EventFilter | OrphanFilter;\n\n\n//////////////////////\n// Provider\n\n/**\n *  A **Provider** is the primary method to interact with the read-only\n *  content on Ethereum.\n *\n *  It allows access to details about accounts, blocks and transactions\n *  and the ability to query event logs and simulate contract execution.\n *\n *  Account data includes the [balance](getBalance),\n *  [transaction count](getTransactionCount), [code](getCode) and\n *  [state trie storage](getStorage).\n *\n *  Simulating execution can be used to [call](call),\n *  [estimate gas](estimateGas) and\n *  [get transaction results](getTransactionResult).\n *\n *  The [[broadcastTransaction]] is the only method which allows updating\n *  the blockchain, but it is usually accessed by a [[Signer]], since a\n *  private key must be used to sign the transaction before it can be\n *  broadcast.\n */\nexport interface Provider extends ContractRunner, EventEmitterable<ProviderEvent>, NameResolver {\n\n    /**\n     *  The provider iteself.\n     *\n     *  This is part of the necessary API for executing a contract, as\n     *  it provides a common property on any [[ContractRunner]] that\n     *  can be used to access the read-only portion of the runner.\n     */\n    provider: this;\n\n    /**\n     *  Shutdown any resources this provider is using. No additional\n     *  calls should be made to this provider after calling this.\n     */\n    destroy(): void;\n\n    ////////////////////\n    // State\n\n    /**\n     *  Get the current block number.\n     */\n    getBlockNumber(): Promise<number>;\n\n    /**\n     *  Get the connected [[Network]].\n     */\n    getNetwork(): Promise<Network>;\n\n    /**\n     *  Get the best guess at the recommended [[FeeData]].\n     */\n    getFeeData(): Promise<FeeData>;\n\n\n    ////////////////////\n    // Account\n\n    /**\n     *  Get the account balance (in wei) of %%address%%. If %%blockTag%%\n     *  is specified and the node supports archive access for that\n     *  %%blockTag%%, the balance is as of that [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint>;\n\n    /**\n     *  Get the number of transactions ever sent for %%address%%, which\n     *  is used as the ``nonce`` when sending a transaction. If\n     *  %%blockTag%% is specified and the node supports archive access\n     *  for that %%blockTag%%, the transaction count is as of that\n     *  [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number>;\n\n    /**\n     *  Get the bytecode for %%address%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getCode(address: AddressLike, blockTag?: BlockTag): Promise<string>\n\n    /**\n     *  Get the storage slot value for %%address%% at slot %%position%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getStorage(address: AddressLike, position: BigNumberish, blockTag?: BlockTag): Promise<string>\n\n\n    ////////////////////\n    // Execution\n\n    /**\n     *  Estimates the amount of gas required to execute %%tx%%.\n     */\n    estimateGas(tx: TransactionRequest): Promise<bigint>;\n\n    /**\n     *  Simulate the execution of %%tx%%. If the call reverts, it will\n     *  throw a [[CallExceptionError]] which includes the revert data.\n     */\n    call(tx: TransactionRequest): Promise<string>\n\n    /**\n     *  Broadcasts the %%signedTx%% to the network, adding it to the\n     *  memory pool of any node for which the transaction meets the\n     *  rebroadcast requirements.\n     */\n    broadcastTransaction(signedTx: string): Promise<TransactionResponse>;\n\n\n    ////////////////////\n    // Queries\n\n    /**\n     *  Resolves to the block for %%blockHashOrBlockTag%%.\n     *\n     *  If %%prefetchTxs%%, and the backend supports including transactions\n     *  with block requests, all transactions will be included and the\n     *  [[Block]] object will not need to make remote calls for getting\n     *  transactions.\n     */\n    getBlock(blockHashOrBlockTag: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block>;\n\n    /**\n     *  Resolves to the transaction for %%hash%%.\n     *\n     *  If the transaction is unknown or on pruning nodes which\n     *  discard old transactions this resolves to ``null``.\n     */\n    getTransaction(hash: string): Promise<null | TransactionResponse>;\n\n    /**\n     *  Resolves to the transaction receipt for %%hash%%, if mined.\n     *\n     *  If the transaction has not been mined, is unknown or on\n     *  pruning nodes which discard old transactions this resolves to\n     *  ``null``.\n     */\n    getTransactionReceipt(hash: string): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the result returned by the executions of %%hash%%.\n     *\n     *  This is only supported on nodes with archive access and with\n     *  the necessary debug APIs enabled.\n     */\n    getTransactionResult(hash: string): Promise<null | string>;\n\n\n    ////////////////////\n    // Bloom-filter Queries\n\n    /**\n     *  Resolves to the list of Logs that match %%filter%%\n     */\n    getLogs(filter: Filter | FilterByBlockHash): Promise<Array<Log>>;\n\n\n    ////////////////////\n    // ENS\n\n    /**\n     *  Resolves to the address configured for the %%ensName%% or\n     *  ``null`` if unconfigured.\n     */\n    resolveName(ensName: string): Promise<null | string>;\n\n    /**\n     *  Resolves to the ENS name associated for the %%address%% or\n     *  ``null`` if the //primary name// is not configured.\n     *\n     *  Users must perform additional steps to configure a //primary name//,\n     *  which is not currently common.\n     */\n    lookupAddress(address: string): Promise<null | string>;\n\n    /**\n     *  Waits until the transaction %%hash%% is mined and has %%confirms%%\n     *  confirmations.\n     */\n    waitForTransaction(hash: string, confirms?: number, timeout?: number): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the block at %%blockTag%% once it has been mined.\n     *\n     *  This can be useful for waiting some number of blocks by using\n     *  the ``currentBlockNumber + N``.\n     */\n    waitForBlock(blockTag?: BlockTag): Promise<Block>;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1820, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1826, "column": 0}, "map": {"version":3,"file":"format.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/format.ts"],"sourcesContent":["/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\"\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    getBigInt, getNumber, hexlify, isHexString, zeroPadValue,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type {\n    BlockParams, LogParams,\n    TransactionReceiptParams, TransactionResponseParams,\n} from \"./formatting.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type FormatFunc = (value: any) => any;\n\nexport function allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n    return (function(value: any) {\n        if (value == null) { return nullValue; }\n        return format(value);\n    });\n}\n\nexport function arrayOf(format: FormatFunc, allowNull?: boolean): FormatFunc {\n    return ((array: any) => {\n        if (allowNull && array == null) { return null; }\n        if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n        return array.map((i) => format(i));\n    });\n}\n\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format: Record<string, FormatFunc>, altNames?: Record<string, Array<string>>): FormatFunc {\n    return ((value: any) => {\n        const result: any = { };\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) { result[key] = nv; }\n            } catch (error) {\n                const message = (error instanceof Error) ? error.message: \"not-an-error\";\n                assert(false, `invalid value for value.${ key } (${ message })`, \"BAD_DATA\", { value })\n            }\n        }\n        return result;\n    });\n}\n\nexport function formatBoolean(value: any): boolean {\n    switch (value) {\n        case true: case \"true\":\n            return true;\n        case false: case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${ JSON.stringify(value) }`, \"value\", value);\n}\n\nexport function formatData(value: string): string {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\n\nexport function formatHash(value: any): string {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\n\nexport function formatUint256(value: any): string {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\n\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatLog(value: any): LogParams {\n    return _formatLog(value);\n}\n\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    parentBeaconBlockRoot: allowNull(formatHash, null),\n\n    number: getNumber,\n\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n\n    stateRoot: allowNull(formatHash, null),\n    receiptsRoot: allowNull(formatHash, null),\n\n    blobGasUsed: allowNull(getBigInt, null),\n    excessBlobGas: allowNull(getBigInt, null),\n\n    miner: allowNull(getAddress),\n    prevRandao: allowNull(formatHash, null),\n    extraData: formatData,\n\n    baseFeePerGas: allowNull(getBigInt)\n}, {\n    prevRandao: [ \"mixHash\" ]\n});\n\nexport function formatBlock(value: any): BlockParams {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx: string | TransactionResponseParams) => {\n        if (typeof(tx) === \"string\") { return tx; }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\n\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatReceiptLog(value: any): LogParams {\n    return _formatReceiptLog(value);\n}\n\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    blobGasUsed: allowNull(getBigInt, null),\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    blobGasPrice: allowNull(getBigInt, null),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [ \"gasPrice\" ],\n    hash: [ \"transactionHash\" ],\n    index: [ \"transactionIndex\" ],\n});\n\nexport function formatTransactionReceipt(value: any): TransactionReceiptParams {\n    return _formatTransactionReceipt(value);\n}\n\nexport function formatTransactionResponse(value: any): TransactionResponseParams {\n\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n\n    const result = object({\n        hash: formatHash,\n\n        // Some nodes do not return this, usually test nodes (like Ganache)\n        index: allowNull(getNumber, undefined),\n\n        type: (value: any) => {\n            if (value === \"0x\" || value == null) { return 0; }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n\n        from: getAddress,\n\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n        maxFeePerBlobGas: allowNull(getBigInt, null),\n\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n\n        creates: allowNull(getAddress, null),\n\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [ \"input\" ],\n        gasLimit: [ \"gas\" ],\n        index: [ \"transactionIndex\" ]\n    })(value);\n\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n\n    // @TODO: Check fee data\n\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [ ];\n    }\n\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    } else {\n        result.signature = Signature.from(value);\n    }\n\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) { result.chainId = chainId; }\n    }\n\n\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n\n    return result;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2140, "column": 0}, "map": {"version":3,"file":"ens-resolver.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/ens-resolver.ts"],"sourcesContent":["/**\n *  ENS is a service which allows easy-to-remember names to map to\n *  network addresses.\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */\n\nimport { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport {\n    hexlify, isHexString, toBeHex,\n    defineProperties, encodeBase58,\n    assert, assertArgument, isError,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport type { FunctionFragment } from \"../abi/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { AbstractProvider, AbstractProviderPlugin } from \"./abstract-provider.js\";\nimport type { EnsPlugin } from \"./plugins-network.js\";\nimport type { Provider } from \"./provider.js\";\n\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\n/**\n *  The type of data found during a steip during avatar resolution.\n */\nexport type AvatarLinkageType = \"name\" | \"avatar\" | \"!avatar\" | \"url\" | \"data\" | \"ipfs\" |\n    \"erc721\" | \"erc1155\" | \"!erc721-caip\" | \"!erc1155-caip\" |\n    \"!owner\" | \"owner\" | \"!balance\" | \"balance\" |\n    \"metadata-url-base\" | \"metadata-url-expanded\" | \"metadata-url\" | \"!metadata-url\" |\n    \"!metadata\" | \"metadata\" |\n    \"!imageUrl\" | \"imageUrl-ipfs\" | \"imageUrl\" | \"!imageUrl-ipfs\";\n\n/**\n *  An individual record for each step during avatar resolution.\n */\nexport interface AvatarLinkage {\n    /**\n     *  The type of linkage.\n     */\n    type: AvatarLinkageType;\n\n    /**\n     *  The linkage value.\n     */\n    value: string;\n};\n\n/**\n *  When resolving an avatar for an ENS name, there are many\n *  steps involved, fetching metadata, validating results, et cetera.\n *\n *  Some applications may wish to analyse this data, or use this data\n *  to diagnose promblems, so an **AvatarResult** provides details of\n *  each completed step during avatar resolution.\n */\nexport interface AvatarResult {\n    /**\n     *  How the [[url]] was arrived at, resolving the many steps required\n     *  for an avatar URL.\n     */\n    linkage: Array<AvatarLinkage>;\n\n    /**\n     *  The avatar URL or null if the avatar was not set, or there was\n     *  an issue during validation (such as the address not owning the\n     *  avatar or a metadata error).\n     */\n    url: null | string;\n};\n\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */\nexport abstract class MulticoinProviderPlugin implements AbstractProviderPlugin {\n    /**\n     *  The name.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\n     */\n    constructor(name: string) {\n        defineProperties<MulticoinProviderPlugin>(this, { name });\n    }\n\n    connect(proivder: Provider): MulticoinProviderPlugin {\n        return this;\n    }\n\n    /**\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\n     */\n    supportsCoinType(coinType: number): boolean {\n        return false;\n    }\n\n    /**\n     *  Resolves to the encoded %%address%% for %%coinType%%.\n     */\n    async encodeAddress(coinType: number, address: string): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n\n    /**\n     *  Resolves to the decoded %%data%% for %%coinType%%.\n     */\n    async decodeAddress(coinType: number, data: BytesLike): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n}\n\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n\n/**\n *  A **BasicMulticoinProviderPlugin** provides service for common\n *  coin types, which do not require additional libraries to encode or\n *  decode.\n */\nexport class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    /**\n     *  Creates a new **BasicMulticoinProviderPlugin**.\n     */\n    constructor() {\n        super(BasicMulticoinPluginId);\n    }\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */\nexport class EnsResolver {\n    /**\n     *  The connected provider.\n     */\n    provider!: AbstractProvider;\n\n    /**\n     *  The address of the resolver.\n     */\n    address!: string;\n\n    /**\n     *  The name this resolver was resolved against.\n     */\n    name!: string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    #supports2544: null | Promise<boolean>;\n\n    #resolver: Contract;\n\n    constructor(provider: AbstractProvider, address: string, name: string) {\n        defineProperties<EnsResolver>(this, { provider, address, name });\n        this.#supports2544 = null;\n\n        this.#resolver = new Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\",\n        ], provider);\n\n    }\n\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */\n    async supportsWildcard(): Promise<boolean> {\n        if (this.#supports2544 == null) {\n            this.#supports2544 = (async () => {\n                try {\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\n                } catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if (isError(error, \"CALL_EXCEPTION\")) { return false; }\n\n                    // Let future attempts try again...\n                    this.#supports2544 = null;\n\n                    throw error;\n                }\n            })();\n        }\n\n        return await this.#supports2544;\n    }\n\n    async #fetch(funcName: string, params?: Array<any>): Promise<null | any> {\n        params = (params || []).slice();\n        const iface = this.#resolver.interface;\n\n        // The first parameters is always the nodehash\n        params.unshift(namehash(this.name))\n\n        let fragment: null | FunctionFragment = null;\n        if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n                info: { funcName }\n            });\n\n            params = [\n                dnsEncode(this.name, 255),\n                iface.encodeFunctionData(fragment, params)\n            ];\n\n            funcName = \"resolve(bytes,bytes)\";\n        }\n\n        params.push({\n            enableCcipRead: true\n        });\n\n        try {\n            const result = await this.#resolver[funcName](...params);\n\n            if (fragment) {\n                return iface.decodeFunctionResult(fragment, result)[0];\n            }\n\n            return result;\n        } catch (error: any) {\n            if (!isError(error, \"CALL_EXCEPTION\")) { throw error; }\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */\n    async getAddress(coinType?: number): Promise<null | string> {\n        if (coinType == null) { coinType = 60; }\n        if (coinType === 60) {\n            try {\n                const result = await this.#fetch(\"addr(bytes32)\");\n\n                // No address\n                if (result == null || result === ZeroAddress) { return null; }\n\n                return result;\n            } catch (error: any) {\n                if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n                throw error;\n            }\n        }\n\n        // Try decoding its EVM canonical chain as an EVM chain address first\n        if (coinType >= 0 && coinType < 0x80000000) {\n            let ethCoinType = coinType + 0x80000000;\n\n            const data = await this.#fetch(\"addr(bytes32,uint)\", [ ethCoinType ]);\n            if (isHexString(data, 20)) { return getAddress(data); }\n        }\n\n        let coinPlugin: null | MulticoinProviderPlugin = null;\n        for (const plugin of this.provider.plugins) {\n            if (!(plugin instanceof MulticoinProviderPlugin)) { continue; }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n\n        if (coinPlugin == null) { return null; }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [ coinType ]);\n\n        // No address\n        if (data == null || data === \"0x\") { return null; }\n\n        // Compute the address\n        const address = await coinPlugin.decodeAddress(coinType, data);\n\n        if (address != null) { return address; }\n\n        assert(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${ coinType })`,\n            info: { coinType, data }\n        });\n    }\n\n    /**\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */\n    async getText(key: string): Promise<null | string> {\n        const data = await this.#fetch(\"text(bytes32,string)\", [ key ]);\n        if (data == null || data === \"0x\") { return null; }\n        return data;\n    }\n\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */\n    async getContentHash(): Promise<null | string> {\n        // keccak256(\"contenthash()\")\n        const data = await this.#fetch(\"contenthash(bytes32)\");\n\n        // No contenthash\n        if (data == null || data === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = (ipfs[1] === \"e3010170\") ? \"ipfs\": \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return `${ scheme }:/\\/${ encodeBase58(\"0x\" + ipfs[2])}`;\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm && swarm[1].length === 64) {\n            return `bzz:/\\/${ swarm[1] }`;\n        }\n\n        assert(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: { data }\n        });\n    }\n\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */\n    async getAvatar(): Promise<null | string> {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */\n    async _getAvatar(): Promise<AvatarResult> {\n        const linkage: Array<AvatarLinkage> = [ { type: \"name\", value: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({ type: \"!avatar\", value: \"\" });\n                return { url: null, linkage };\n            }\n            linkage.push({ type: \"avatar\", value: avatar });\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({ type: \"url\", value: avatar });\n                        return { linkage, url: avatar };\n                    case \"ipfs\": {\n                        const url = getIpfsLink(avatar);\n                        linkage.push({ type: \"ipfs\", value: avatar });\n                        linkage.push({ type: \"url\", value: url });\n                        return { linkage, url };\n                    }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"tokenURI(uint256)\": \"uri(uint256)\";\n                        linkage.push({ type: scheme, value: avatar });\n\n                        // The owner of this name\n                        const owner = await this.getAddress();\n                        if (owner == null) {\n                            linkage.push({ type: \"!owner\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) {\n                            linkage.push({ type: <any>`!${ scheme }caip`, value: (match[2] || \"\") });\n                            return { url: null, linkage };\n                        }\n\n                        const tokenId = comps[1];\n\n                        const contract = new Contract(comps[0], [\n                            // ERC-721\n                            \"function tokenURI(uint) view returns (string)\",\n                            \"function ownerOf(uint) view returns (address)\",\n\n                            // ERC-1155\n                            \"function uri(uint) view returns (string)\",\n                            \"function balanceOf(address, uint256) view returns (uint)\"\n                        ], this.provider);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            const tokenOwner = await contract.ownerOf(tokenId);\n\n                            if (owner !== tokenOwner) {\n                                linkage.push({ type: \"!owner\", value: tokenOwner });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"owner\", value: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            const balance = await contract.balanceOf(owner, tokenId);\n                            if (!balance) {\n                                linkage.push({ type: \"!balance\", value: \"0\" });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"balance\", value: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        let metadataUrl = await contract[selector](tokenId);\n                        if (metadataUrl == null || metadataUrl === \"0x\") {\n                            linkage.push({ type: \"!metadata-url\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n                        linkage.push({ type: \"metadata-url\", value: metadataUrl });\n\n                        // Get the token metadata\n                        let metadata: any = { };\n                        const response = await (new FetchRequest(metadataUrl)).send();\n                        response.assertOk();\n\n                        try {\n                            metadata = response.bodyJson;\n                        } catch (error) {\n                            try {\n                                linkage.push({ type: \"!metadata\", value: response.bodyText });\n                            } catch (error) {\n                                const bytes = response.body;\n                                if (bytes) {\n                                    linkage.push({ type: \"!metadata\", value: hexlify(bytes) });\n                                }\n                                return { url: null, linkage };\n                            }\n                            return { url: null, linkage };\n                        }\n\n                        if (!metadata) {\n                            linkage.push({ type: \"!metadata\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") {\n                            linkage.push({ type: \"!imageUrl\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) {\n                                linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\n                                return { url: null, linkage };\n                            }\n\n                            linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", value: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return { linkage, url: null };\n    }\n\n    static async getEnsAddress(provider: Provider): Promise<string> {\n        const network = await provider.getNetwork();\n\n        const ensPlugin = network.getPlugin<EnsPlugin>(\"org.ethers.plugins.network.Ens\");\n\n        // No ENS...\n        assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\", info: { network } });\n\n        return ensPlugin.address;\n    }\n\n    static async #getResolver(provider: Provider, name: string): Promise<null | string> {\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\n\n        try {\n            const contract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n\n            const addr = await contract.resolver(namehash(name), {\n                enableCcipRead: true\n            });\n\n            if (addr === ZeroAddress) { return null; }\n            return addr;\n\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32),\n            // so probably a link error\n            throw error;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */\n    static async fromName(provider: AbstractProvider, name: string): Promise<null | EnsResolver> {\n\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await EnsResolver.#getResolver(provider, currentName);\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2762, "column": 0}, "map": {"version":3,"file":"subscriber-polling.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/subscriber-polling.ts"],"sourcesContent":["import { assert, isHexString } from \"../utils/index.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { EventFilter, OrphanFilter, ProviderEvent } from \"./provider.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport function getPollingSubscriber(provider: AbstractProvider, event: ProviderEvent): Subscriber {\n    if (event === \"block\") { return new PollingBlockSubscriber(provider); }\n    if (isHexString(event, 32)) { return new PollingTransactionSubscriber(provider, event); }\n\n    assert(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\", info: { event }\n    });\n}\n\n// @TODO: refactor this\n\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poller: null | number;\n\n    #interval: number;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    /**\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#poller = null;\n        this.#interval = 4000;\n\n        this.#blockNumber = -2;\n    }\n\n    /**\n     *  The polling interval.\n     */\n    get pollingInterval(): number { return this.#interval; }\n    set pollingInterval(value: number) { this.#interval = value; }\n\n    async #poll(): Promise<void> {\n        try {\n            const blockNumber = await this.#provider.getBlockNumber();\n\n            // Bootstrap poll to setup our initial block number\n            if (this.#blockNumber === -2) {\n                this.#blockNumber = blockNumber;\n                return;\n            }\n\n            // @TODO: Put a cap on the maximum number of events per loop?\n\n            if (blockNumber !== this.#blockNumber) {\n                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {\n                    // We have been stopped\n                    if (this.#poller == null) { return; }\n\n                    await this.#provider.emit(\"block\", b);\n                }\n\n                this.#blockNumber = blockNumber;\n            }\n\n        } catch (error) {\n            // @TODO: Minor bump, add an \"error\" event to let subscribers\n            //        know things went awry.\n            //console.log(error);\n        }\n\n        // We have been stopped\n        if (this.#poller == null) { return; }\n\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n    }\n\n    start(): void {\n        if (this.#poller) { return; }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        this.#poll();\n    }\n\n    stop(): void {\n        if (!this.#poller) { return; }\n        this.#provider._clearTimeout(this.#poller);\n        this.#poller = null;\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n\n\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class OnBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poll: (b: number) => void;\n    #running: boolean;\n\n    /**\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#running = false;\n        this.#poll = (blockNumber: number) => {\n            this._poll(blockNumber, this.#provider);\n        }\n    }\n\n    /**\n     *  Called on every new block.\n     */\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n        this.#provider.on(\"block\", this.#poll);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poll);\n    }\n\n    pause(dropWhilePaused?: boolean): void { this.stop(); }\n    resume(): void { this.start(); }\n}\n\nexport class PollingBlockTagSubscriber extends OnBlockSubscriber {\n    readonly #tag: string;\n    #lastBlock: number;\n\n    constructor(provider: AbstractProvider, tag: string) {\n        super(provider);\n        this.#tag = tag;\n        this.#lastBlock = -2;\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        if (dropWhilePaused) { this.#lastBlock = -2; }\n        super.pause(dropWhilePaused);\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        const block = await provider.getBlock(this.#tag);\n        if (block == null) { return; }\n\n        if (this.#lastBlock === -2) {\n            this.#lastBlock = block.number;\n        } else if (block.number > this.#lastBlock) {\n            provider.emit(this.#tag, block.number);\n            this.#lastBlock = block.number;\n        }\n    }\n}\n\n\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingOrphanSubscriber extends OnBlockSubscriber {\n    #filter: OrphanFilter;\n\n    constructor(provider: AbstractProvider, filter: OrphanFilter) {\n        super(provider);\n        this.#filter = copy(filter);\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"@TODO\");\n        console.log(this.#filter);\n    }\n}\n\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingTransactionSubscriber extends OnBlockSubscriber {\n    #hash: string;\n\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%hash%%.\n     */\n    constructor(provider: AbstractProvider, hash: string) {\n        super(provider);\n        this.#hash = hash;\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        const tx = await provider.getTransactionReceipt(this.#hash);\n        if (tx) { provider.emit(this.#hash, tx); }\n    }\n}\n\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingEventSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #filter: EventFilter;\n    #poller: (b: number) => void;\n\n    #running: boolean;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%filter%%.\n     */\n    constructor(provider: AbstractProvider, filter: EventFilter) {\n        this.#provider = provider;\n        this.#filter = copy(filter);\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#blockNumber = -2;\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        // The initial block hasn't been determined yet\n        if (this.#blockNumber === -2) { return; }\n\n        const filter = copy(this.#filter);\n        filter.fromBlock = this.#blockNumber + 1;\n        filter.toBlock = blockNumber;\n\n        const logs = await this.#provider.getLogs(filter);\n\n        // No logs could just mean the node has not indexed them yet,\n        // so we keep a sliding window of 60 blocks to keep scanning\n        if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n                this.#blockNumber = blockNumber - 60;\n            }\n            return;\n        }\n\n        for (const log of logs) {\n            this.#provider.emit(this.#filter, log);\n\n            // Only advance the block number when logs were found to\n            // account for networks (like BNB and Polygon) which may\n            // sacrifice event consistency for block event speed\n            this.#blockNumber = log.blockNumber;\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber) => {\n                this.#blockNumber = blockNumber;\n            });\n        }\n        this.#provider.on(\"block\", this.#poller);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3034, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3040, "column": 0}, "map": {"version":3,"file":"abstract-provider.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/abstract-provider.ts"],"sourcesContent":["/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\n\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    concat, dataLength, dataSlice, hexlify, isHexString,\n    getBigInt, getBytes, getNumber,\n    isCallException, isError, makeError, assert, assertArgument,\n    FetchRequest,\n    toBeArray, toQuantity,\n    defineProperties, EventPayload, resolveProperties,\n    toUtf8String\n} from \"../utils/index.js\";\n\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport {\n    formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse\n} from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport {\n    PollingBlockSubscriber, PollingBlockTagSubscriber, PollingEventSubscriber,\n    PollingOrphanSubscriber, PollingTransactionSubscriber\n} from \"./subscriber-polling.js\";\n\nimport type { Addressable, AddressLike } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { FetchResponse, Listener } from \"../utils/index.js\";\n\nimport type { Networkish } from \"./network.js\";\nimport type { FetchUrlFeeDataNetworkPlugin } from \"./plugins-network.js\";\n//import type { MaxPriorityFeePlugin } from \"./plugins-network.js\";\nimport type {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\nimport type {\n    BlockTag, EventFilter, Filter, FilterByBlockHash, OrphanFilter,\n    PreparedTransactionRequest, Provider, ProviderEvent,\n    TransactionRequest\n} from \"./provider.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\n// Constants\nconst BN_2 = BigInt(2);\n\nconst MAX_CCIP_REDIRECTS = 10;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\nfunction getTag(prefix: string, value: any): string {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) { return \"null\"; }\n        if (typeof(v) === \"bigint\") { return `bigint:${ v.toString() }`}\n        if (typeof(v) === \"string\") { return v.toLowerCase(); }\n\n        // Sort object keys\n        if (typeof(v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, <any>{ });\n        }\n\n        return v;\n    });\n}\n\n/**\n *  The types of additional event values that can be emitted for the\n *  ``\"debug\"`` event.\n */\nexport type DebugEventAbstractProvider = {\n    action: \"sendCcipReadFetchRequest\",\n    request: FetchRequest\n    index: number\n    urls: Array<string>\n} | {\n    action: \"receiveCcipReadFetchResult\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"receiveCcipReadFetchError\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"sendCcipReadCall\",\n    transaction: { to: string, data: string }\n} | {\n    action: \"receiveCcipReadCallResult\",\n    transaction: { to: string, data: string }\n    result: string\n} | {\n    action: \"receiveCcipReadCallError\",\n    transaction: { to: string, data: string }\n    error: Error\n};\n\n\n/**\n *  The value passed to the [[AbstractProvider-_getSubscriber]] method.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport type Subscription = {\n    type: \"block\" | \"close\" | \"debug\" | \"error\" | \"finalized\" | \"network\" | \"pending\" | \"safe\",\n    tag: string\n} | {\n    type: \"transaction\",\n    tag: string,\n    hash: string\n} | {\n    type: \"event\",\n    tag: string,\n    filter: EventFilter\n} | {\n    type: \"orphan\",\n    tag: string,\n    filter: OrphanFilter\n};\n\n/**\n *  A **Subscriber** manages a subscription.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport interface Subscriber {\n    /**\n     *  Called initially when a subscriber is added the first time.\n     */\n    start(): void;\n\n    /**\n     *  Called when there are no more subscribers to the event.\n     */\n    stop(): void;\n\n    /**\n     *  Called when the subscription should pause.\n     *\n     *  If %%dropWhilePaused%%, events that occur while paused should not\n     *  be emitted [[resume]].\n     */\n    pause(dropWhilePaused?: boolean): void;\n\n    /**\n     *  Resume a paused subscriber.\n     */\n    resume(): void;\n\n    /**\n     *  The frequency (in ms) to poll for events, if polling is used by\n     *  the subscriber.\n     *\n     *  For non-polling subscribers, this must return ``undefined``.\n     */\n    pollingInterval?: number;\n}\n\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber implements Subscriber {\n    /**\n     *  The name fof the event.\n     */\n    name!: string;\n\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */\n    constructor(name: string) { defineProperties<UnmanagedSubscriber>(this, { name }); }\n\n    start(): void { }\n    stop(): void { }\n\n    pause(dropWhilePaused?: boolean): void { }\n    resume(): void { }\n}\n\ntype Sub = {\n    tag: string;\n    nameMap: Map<string, string>\n    addressableMap: WeakMap<Addressable, string>;\n    listeners: Array<{ listener: Listener, once: boolean }>;\n    // @TODO: get rid of this, as it is (and has to be)\n    // tracked in subscriber\n    started: boolean;\n    subscriber: Subscriber;\n};\n\nfunction copy<T = any>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n}\n\nfunction concisify(items: Array<string>): Array<string> {\n    items = Array.from((new Set(items)).values())\n    items.sort();\n    return items;\n}\n\n\nasync function getSubscription(_event: ProviderEvent, provider: AbstractProvider): Promise<Subscription> {\n    if (_event == null) { throw new Error(\"invalid event\"); }\n\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) { _event = { topics: _event }; }\n\n    if (typeof(_event) === \"string\") {\n        switch (_event) {\n            case \"block\":\n            case \"debug\":\n            case \"error\":\n            case \"finalized\":\n            case \"network\":\n            case \"pending\":\n            case \"safe\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n\n    if ((<any>_event).orphan) {\n        const event = <OrphanFilter>_event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n\n    if (((<any>_event).address || (<any>_event).topics)) {\n        const event = <EventFilter>_event;\n\n        const filter: any = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) { return null; }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n\n        if (event.address) {\n            const addresses: Array<string> = [ ];\n            const promises: Array<Promise<void>> = [ ];\n\n            const addAddress = (addr: AddressLike) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            }\n\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) { await Promise.all(promises); }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\n/**\n *  An **AbstractPlugin** is used to provide additional internal services\n *  to an [[AbstractProvider]] without adding backwards-incompatible changes\n *  to method signatures or other internal and complex logic.\n */\nexport interface AbstractProviderPlugin {\n    /**\n     *  The reverse domain notation of the plugin.\n     */\n    readonly name: string;\n\n    /**\n     *  Creates a new instance of the plugin, connected to %%provider%%.\n     */\n    connect(provider: AbstractProvider): AbstractProviderPlugin;\n}\n\n/**\n *  A normalized filter used for [[PerformActionRequest]] objects.\n */\nexport type PerformActionFilter = {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n} | {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    blockHash?: string;\n};\n\n/**\n *  A normalized transactions used for [[PerformActionRequest]] objects.\n */\nexport interface PerformActionTransaction extends PreparedTransactionRequest {\n    /**\n     *  The ``to`` address of the transaction.\n     */\n    to?: string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: string;\n}\n\n/**\n *  The [[AbstractProvider]] methods will normalize all values and pass this\n *  type to [[AbstractProvider-_perform]].\n */\nexport type PerformActionRequest = {\n    method: \"broadcastTransaction\",\n    signedTransaction: string\n} | {\n    method: \"call\",\n    transaction: PerformActionTransaction, blockTag: BlockTag\n} | {\n    method: \"chainId\"\n} | {\n    method: \"estimateGas\",\n    transaction: PerformActionTransaction\n} | {\n    method: \"getBalance\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getBlock\",\n    blockTag: BlockTag, includeTransactions: boolean\n} | {\n    method: \"getBlock\",\n    blockHash: string, includeTransactions: boolean\n} | {\n    method: \"getBlockNumber\"\n} | {\n    method: \"getCode\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getGasPrice\"\n} | {\n    method: \"getLogs\",\n    filter: PerformActionFilter\n} | {\n    method: \"getPriorityFee\"\n} | {\n    method: \"getStorage\",\n    address: string, position: bigint, blockTag: BlockTag\n} | {\n    method: \"getTransaction\",\n    hash: string\n} | {\n    method: \"getTransactionCount\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getTransactionReceipt\",\n    hash: string\n} | {\n    method: \"getTransactionResult\",\n    hash: string\n};\n\ntype _PerformAccountRequest = {\n    method: \"getBalance\" | \"getTransactionCount\" | \"getCode\"\n} | {\n    method: \"getStorage\", position: bigint\n}\n\n/**\n *  Options for configuring some internal aspects of an [[AbstractProvider]].\n *\n *  **``cacheTimeout``** - how long to cache a low-level ``_perform``\n *  for, based on input parameters. This reduces the number of calls\n *  to getChainId and getBlockNumber, but may break test chains which\n *  can perform operations (internally) synchronously. Use ``-1`` to\n *  disable, ``0`` will only buffer within the same event loop and\n *  any other value is in ms. (default: ``250``)\n */\nexport type AbstractProviderOptions = {\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n\ntype CcipArgs = {\n    sender: string;\n    urls: Array<string>;\n    calldata: string;\n    selector: string;\n    extraData: string;\n    errorArgs: Array<any>\n};\n\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider implements Provider {\n\n    #subs: Map<string, Sub>;\n    #plugins: Map<string, AbstractProviderPlugin>;\n\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState: null | boolean;\n\n    #destroyed: boolean;\n\n    #networkPromise: null | Promise<Network>;\n    readonly #anyNetwork: boolean;\n\n    #performCache: Map<string, Promise<any>>;\n\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber: number;\n\n    #nextTimer: number;\n    #timers: Map<number, { timer: null | Timer, func: () => void, time: number }>;\n\n    #disableCcipRead: boolean;\n\n    #options: Required<AbstractProviderOptions>;\n\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */\n    constructor(_network?: \"any\" | Networkish, options?: AbstractProviderOptions) {\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        } else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n\n        this.#lastBlockNumber = -1;\n\n        this.#performCache = new Map();\n\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n\n        this.#destroyed = false;\n\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n\n        this.#disableCcipRead = false;\n    }\n\n    get pollingInterval(): number { return this.#options.pollingInterval; }\n\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */\n    get provider(): this { return this; }\n\n    /**\n     *  Returns all the registered plug-ins.\n     */\n    get plugins(): Array<AbstractProviderPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new plug-in.\n     */\n    attachPlugin(plugin: AbstractProviderPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name,  plugin.connect(this));\n        return this;\n    }\n\n    /**\n     *  Get a plugin by name.\n     */\n    getPlugin<T extends AbstractProviderPlugin = AbstractProviderPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n    get disableCcipRead(): boolean { return this.#disableCcipRead; }\n    set disableCcipRead(value: boolean) { this.#disableCcipRead = !!value; }\n\n    // Shares multiple identical requests made during the same 250ms\n    async #perform<T = any>(req: PerformActionRequest): Promise<T> {\n        const timeout = this.#options.cacheTimeout;\n\n        // Caching disabled\n        if (timeout < 0) { return await this._perform(req); }\n\n        // Create a tag\n        const tag = getTag(req.method, req);\n\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n\n            this.#performCache.set(tag, perform);\n\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n\n        return await perform;\n    }\n\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    async ccipReadFetch(tx: PerformActionTransaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n\n            let errorMessage = \"unknown error\";\n\n            // Fetch the resource...\n            let resp: FetchResponse;\n            try {\n                resp = await request.send();\n            } catch (error: any) {\n                // ...low-level fetch error (missing host, bad SSL, etc.),\n                // so try next URL\n                errorMessages.push(error.message);\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result: { error } });\n                continue;\n            }\n\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                    return result.data;\n                }\n                if (result.message) { errorMessage = result.message; }\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            } catch (error) { }\n\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${ errorMessage }`,\n                \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        assert(false, `error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n    _wrapBlock(value: BlockParams, network: Network): Block {\n        return new Block(formatBlock(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n    _wrapLog(value: LogParams, network: Network): Log {\n        return new Log(formatLog(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n    _wrapTransactionReceipt(value: TransactionReceiptParams, network: Network): TransactionReceipt {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n    _wrapTransactionResponse(tx: TransactionResponseParams, network: Network): TransactionResponse {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n    _detectNetwork(): Promise<Network> {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        assert(false, `unsupported method: ${ req.method }`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n\n    // State\n\n    async getBlockNumber(): Promise<number> {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) { this.#lastBlockNumber = blockNumber; }\n        return blockNumber;\n    }\n\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n    _getAddress(address: AddressLike): string | Promise<string> {\n        return resolveAddress(address, this);\n    }\n\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n    _getBlockTag(blockTag?: BlockTag): string | Promise<string> {\n        if (blockTag == null) { return \"latest\"; }\n\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"finalized\":\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n                return blockTag;\n        }\n\n\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) { return blockTag; }\n            return toQuantity(blockTag);\n        }\n\n        if (typeof(blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n\n        if (typeof(blockTag) === \"number\") {\n            if (blockTag >= 0) { return toQuantity(blockTag); }\n            if (this.#lastBlockNumber >= 0) { return toQuantity(this.#lastBlockNumber + blockTag); }\n            return this.getBlockNumber().then((b) => toQuantity(b + <number>blockTag));\n        }\n\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n    _getFilter(filter: Filter | FilterByBlockHash): PerformActionFilter | Promise<PerformActionFilter> {\n\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || [ ]).map((t) => {\n            if (t == null) { return null; }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash: undefined;\n\n        const resolve = (_address: Array<string>, fromBlock?: string, toBlock?: string) => {\n            let address: undefined | string | Array<string> = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n\n            const filter = <any>{ };\n            if (address) { filter.address = address; }\n            if (topics.length) { filter.topics = topics; }\n            if (fromBlock) { filter.fromBlock = fromBlock; }\n            if (toBlock) { filter.toBlock = toBlock; }\n            if (blockHash) { filter.blockHash = blockHash; }\n\n            return filter;\n        };\n\n        // Addresses could be async (ENS names or Addressables)\n        let address: Array<string | Promise<string>> = [ ];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) { address.push(this._getAddress(addr)); }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n\n        let fromBlock: undefined | string | Promise<string> = undefined;\n        if (\"fromBlock\" in filter) { fromBlock = this._getBlockTag(filter.fromBlock); }\n\n        let toBlock: undefined | string | Promise<string> = undefined;\n        if (\"toBlock\" in filter) { toBlock = this._getBlockTag(filter.toBlock); }\n\n        if (address.filter((a) => (typeof(a) !== \"string\")).length ||\n            (fromBlock != null && typeof(fromBlock) !== \"string\") ||\n            (toBlock != null && typeof(toBlock) !== \"string\")) {\n\n            return Promise.all([ Promise.all(address), fromBlock, toBlock ]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n\n        return resolve(<Array<string>>address, fromBlock, toBlock);\n    }\n\n    /**\n     *  Returns or resolves to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n    _getTransactionRequest(_request: TransactionRequest): PerformActionTransaction | Promise<PerformActionTransaction> {\n        const request = <PerformActionTransaction>copyRequest(_request);\n\n        const promises: Array<Promise<void>> = [ ];\n        [ \"to\", \"from\" ].forEach((key) => {\n            if ((<any>request)[key] == null) { return; }\n\n            const addr = resolveAddress((<any>request)[key], this);\n            if (isPromise(addr)) {\n                promises.push((async function() { (<any>request)[key] = await addr; })());\n            } else {\n                (<any>request)[key] = addr;\n            }\n        });\n\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function() { request.blockTag = await blockTag; })());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n\n        if (promises.length) {\n            return (async function() {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n\n        return request;\n    }\n\n    async getNetwork(): Promise<Network> {\n\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n\n            // Detect the current network (shared with all calls)\n            const detectNetwork = (async () => {\n                try {\n                    const network = await this._detectNetwork();\n                    this.emit(\"network\", network, null);\n                    return network;\n                } catch (error) {\n                    if (this.#networkPromise === detectNetwork!) {\n                        this.#networkPromise = null;\n                    }\n                    throw error;\n                }\n            })();\n\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n\n        const networkPromise = this.#networkPromise;\n\n        const [ expected, actual ] = await Promise.all([\n            networkPromise,          // Possibly an explicit Network\n            this._detectNetwork()    // The actual connected network\n        ]);\n\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${ expected.chainId } => ${ actual.chainId } `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n\n        return expected.clone();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        const network = await this.getNetwork();\n\n        const getFeeDataFunc = async () => {\n            const { _block, gasPrice, priorityFee } = await resolveProperties({\n                _block: this.#getBlock(\"latest\", false),\n                gasPrice: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getGasPrice\" });\n                        return getBigInt(value, \"%response\");\n                    } catch (error) { }\n                    return null\n                })()),\n                priorityFee: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getPriorityFee\" });\n                        return getBigInt(value, \"%response\");\n                    } catch (error) { }\n                    return null;\n                })())\n            });\n\n            let maxFeePerGas: null | bigint = null;\n            let maxPriorityFeePerGas: null | bigint = null;\n\n            // These are the recommended EIP-1559 heuristics for fee data\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n                maxPriorityFeePerGas = (priorityFee != null) ? priorityFee: BigInt(\"1000000000\");\n                maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n            }\n\n            return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n        };\n\n        // Check for a FeeDataNetWorkPlugin\n        const plugin = <FetchUrlFeeDataNetworkPlugin>network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        if (plugin) {\n            const req = new FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n        }\n\n        return await getFeeDataFunc();\n    }\n\n\n    async estimateGas(_tx: TransactionRequest): Promise<bigint> {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) { tx = await tx; }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n\n    async #call(tx: PerformActionTransaction, blockTag: string, attempt: number): Promise<string> {\n        assert (attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n             reason: \"TOO_MANY_REDIRECTS\",\n             transaction: Object.assign({ }, tx, { blockTag, enableCcipRead: true })\n         });\n\n         // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n         const transaction = <PerformActionTransaction>copyRequest(tx);\n\n         try {\n             return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n\n         } catch (error: any) {\n             // CCIP Read OffchainLookup\n             if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                 const data = error.data;\n\n                 const txSender = await resolveAddress(transaction.to, this);\n\n                 // Parse the CCIP Read Arguments\n                 let ccipArgs: CcipArgs;\n                 try {\n                     ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                 } catch (error: any) {\n                     assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                         reason: \"BAD_DATA\", transaction, info: { data } });\n                 }\n\n                 // Check the sender of the OffchainLookup matches the transaction\n                 assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(),\n                     \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                         action: \"call\",\n                         data,\n                         reason: \"OffchainLookup\",\n                         transaction: <any>transaction, // @TODO: populate data?\n                         invocation: null,\n                         revert: {\n                             signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                             name: \"OffchainLookup\",\n                             args: ccipArgs.errorArgs\n                         }\n                     });\n\n                 const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                 assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                     reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs } });\n\n                 const tx = {\n                     to: txSender,\n                     data: concat([ ccipArgs.selector, encodeBytes([ ccipResult, ccipArgs.extraData ]) ])\n                 };\n\n                 this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                 try {\n                     const result = await this.#call(tx, blockTag, attempt + 1);\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({ }, tx), result });\n                     return result;\n                 } catch (error) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({ }, tx), error });\n                     throw error;\n                 }\n             }\n\n             throw error;\n         }\n    }\n\n    async #checkNetwork<T>(promise: Promise<T>): Promise<T> {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n\n    async call(_tx: TransactionRequest): Promise<string> {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0: -1));\n    }\n\n    // Account\n    async #getAccountValue(request: _PerformAccountRequest, _address: AddressLike, _blockTag?: BlockTag): Promise<any> {\n        let address: string | Promise<string> = this._getAddress(_address);\n        let blockTag: string | Promise<string> = this._getBlockTag(_blockTag);\n\n        if (typeof(address) !== \"string\" || typeof(blockTag) !== \"string\") {\n            [ address, blockTag ] = await Promise.all([ address, blockTag ]);\n        }\n\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n\n    async getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint> {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n\n    async getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number> {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n\n    async getCode(address: AddressLike, blockTag?: BlockTag): Promise<string> {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n\n    async getStorage(address: AddressLike, _position: BigNumberish, blockTag?: BlockTag): Promise<string> {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n\n    // Write\n    async broadcastTransaction(signedTx: string): Promise<TransactionResponse> {\n        const { blockNumber, hash, network } = await resolveProperties({\n             blockNumber: this.getBlockNumber(),\n             hash: this._perform({\n                 method: \"broadcastTransaction\",\n                 signedTransaction: signedTx\n             }),\n             network: this.getNetwork()\n        });\n\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n\n        return this._wrapTransactionResponse(<any>tx, network).replaceableTransaction(blockNumber);\n    }\n\n    async #getBlock(block: BlockTag | string, includeTransactions: boolean): Promise<any> {\n        // @TODO: Add CustomBlockPlugin check\n\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n\n        let blockTag = this._getBlockTag(block);\n        if (typeof(blockTag) !== \"string\") { blockTag = await blockTag; }\n\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n\n    // Queries\n    async getBlock(block: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) { return null; }\n\n        return this._wrapBlock(params, network);\n    }\n\n    async getTransaction(hash: string): Promise<null | TransactionResponse> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) { return null; }\n\n        return this._wrapTransactionResponse(params, network);\n    }\n\n    async getTransactionReceipt(hash: string): Promise<null | TransactionReceipt> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) { return null; }\n\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) { throw new Error(\"report this; could not find tx or effectiveGasPrice\"); }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n\n        return this._wrapTransactionReceipt(params, network);\n    }\n\n    async getTransactionResult(hash: string): Promise<null | string> {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) { return null; }\n        return hexlify(result);\n    }\n\n    // Bloom-filter Queries\n    async getLogs(_filter: Filter | FilterByBlockHash): Promise<Array<Log>> {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) { filter = await filter; }\n\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform<Array<LogParams>>({ method: \"getLogs\", filter })\n        });\n\n        return params.map((p) => this._wrapLog(p, network));\n    }\n\n    // ENS\n    _getProvider(chainId: number): AbstractProvider {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n\n    async getResolver(name: string): Promise<null | EnsResolver> {\n        return await EnsResolver.fromName(this, name);\n    }\n\n    async getAvatar(name: string): Promise<null | string> {\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAvatar(); }\n        return null;\n    }\n\n    async resolveName(name: string): Promise<null | string>{\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAddress(); }\n        return null;\n    }\n\n    async lookupAddress(address: string): Promise<null | string> {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n\n        try {\n\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) { return null; }\n\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) { return null; }\n\n            return name;\n\n        } catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n\n            throw error;\n        }\n\n        return null;\n    }\n\n    async waitForTransaction(hash: string, _confirms?: null | number, timeout?: null | number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms != null) ? _confirms: 1;\n        if (confirms === 0) { return this.getTransactionReceipt(hash); }\n\n        return new Promise(async (resolve, reject) => {\n            let timer: null | Timer = null;\n\n            const listener = (async (blockNumber: number) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n\n            listener(await this.getBlockNumber());\n        });\n    }\n\n    async waitForBlock(blockTag?: BlockTag): Promise<Block> {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n    _clearTimeout(timerId: number): void {\n        const timer = this.#timers.get(timerId);\n        if (!timer) { return; }\n        if (timer.timer) { clearTimeout(timer.timer); }\n        this.#timers.delete(timerId);\n    }\n\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n    _setTimeout(_func: () => void, timeout?: number): number {\n        if (timeout == null) { timeout = 0; }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        } else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n\n        return timerId;\n    }\n\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n    _forEachSubscriber(func: (s: Subscriber) => void): void {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\": {\n                const subscriber = new PollingBlockSubscriber(this);\n                subscriber.pollingInterval = this.pollingInterval;\n                return subscriber;\n            }\n            case \"safe\": case \"finalized\":\n                return new PollingBlockTagSubscriber(this, sub.type);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n\n        throw new Error(`unsupported event: ${ sub.type }`);\n    }\n\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n    _recoverSubscriber(oldSub: Subscriber, newSub: Subscriber): void {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) { sub.subscriber.stop(); }\n                sub.subscriber = newSub;\n                if (sub.started) { newSub.start(); }\n                if (this.#pausedState != null) { newSub.pause(this.#pausedState); }\n                break;\n            }\n        }\n    }\n\n    async #hasSub(event: ProviderEvent, emitArgs?: Array<any>): Promise<null | Sub> {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n\n    async #getSub(event: ProviderEvent): Promise<Sub> {\n        const subscription = await getSubscription(event, this);\n\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [ ] };\n            this.#subs.set(tag, sub);\n        }\n\n        return sub;\n    }\n\n    async on(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async once(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async emit(event: ProviderEvent, ...args: Array<any>): Promise<boolean> {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) { return false; };\n\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null: listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch(error) { }\n            return !once;\n        });\n\n        if (sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return (count > 0);\n    }\n\n    async listenerCount(event?: ProviderEvent): Promise<number> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ProviderEvent): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return  [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ProviderEvent, listener?: Listener): Promise<this> {\n        const sub = await this.#hasSub(event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ProviderEvent): Promise<this> {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) { subscriber.stop(); }\n            this.#subs.delete(tag);\n        } else {\n            for (const [ tag, { started, subscriber } ] of this.#subs) {\n                if (started) { subscriber.stop(); }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return this.off(event, listener);\n    }\n\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n    get destroyed(): boolean {\n        return this.#destroyed;\n    }\n\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n    destroy(): void {\n        // Stop all listeners\n        this.removeAllListeners();\n\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n\n        this.#destroyed = true;\n    }\n\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n    get paused(): boolean { return (this.#pausedState != null); }\n    set paused(pause: boolean) {\n        if (!!pause === this.paused) { return; }\n\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n    pause(dropWhilePaused?: boolean): void {\n        this.#lastBlockNumber = -1;\n\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) { return; }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) { clearTimeout(timer.timer); }\n\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n\n    /**\n     *  Resume the provider.\n     */\n    resume(): void {\n        if (this.#pausedState == null) { return; }\n\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) { timeout = 0; }\n\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\n\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) { return toUtf8String(bytes); }\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    } catch (error) { }\n    return null;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = toBeArray(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\nconst empty: Uint8Array = new Uint8Array([ ]);\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>): string {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return concat(result);\n}\n\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\"\nfunction parseOffchainLookup(data: string): CcipArgs {\n    const result: CcipArgs = {\n        sender: \"\", urls: [ ], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: [ ]\n    };\n\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n\n    // Read the URLs from the response\n    try {\n        const urls: Array<string> = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) { throw new Error(\"abort\"); }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) { throw new Error(\"abort\"); }\n        result.calldata = calldata;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) { throw new Error(\"abort\"); }\n        result.extraData = extraData;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => (<any>result)[k])\n\n    return result;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4584, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4590, "column": 0}, "map": {"version":3,"file":"abstract-signer.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/abstract-signer.ts"],"sourcesContent":["/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { copyRequest } from \"./provider.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\nfunction checkProvider(signer: AbstractSigner, operation: string): Provider {\n    if (signer.provider) { return signer.provider; }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\n\nasync function populate(signer: AbstractSigner, tx: TransactionRequest): Promise<TransactionLike<string>> {\n    let pop: any = copyRequest(tx);\n\n    if (pop.to != null) { pop.to = resolveAddress(pop.to, signer); }\n\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([ address, from ]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(),\n                \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n\n    return await resolveProperties(pop);\n}\n\n\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport abstract class AbstractSigner<P extends null | Provider = null | Provider> implements Signer {\n    /**\n     *  The provider this signer is connected to.\n     */\n    readonly provider!: P;\n\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider?: P) {\n        defineProperties<AbstractSigner>(this, { provider: (provider || null) });\n    }\n\n    /**\n     *  Resolves to the Signer address.\n     */\n    abstract getAddress(): Promise<string>;\n\n    /**\n     *  Returns the signer connected to %%provider%%.\n     *\n     *  This may throw, for example, a Signer connected over a Socket or\n     *  to a specific instance of a node may not be transferrable.\n     */\n    abstract connect(provider: null | Provider): Signer;\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n\n    async populateCall(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const provider = checkProvider(this, \"populateTransaction\");\n\n        const pop = await populate(this, tx);\n\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n\n        // Populate the chain ID\n        const network = await (<Provider>(this.provider)).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\" });\n\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) { pop.gasPrice = feeData.gasPrice; }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"populateTransaction\" });\n\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n\n               } else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\" });\n                }\n\n            } else if (pop.type === 2 || pop.type === 3) {\n                // Explicitly using EIP-1559 or EIP-4844\n\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n\n//@TOOD: Don't await all over the place; save them up for\n// the end for better batching\n        return await resolveProperties(pop);\n    }\n\n    async estimateGas(tx: TransactionRequest): Promise<bigint> {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n\n    async call(tx: TransactionRequest): Promise<string> {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n\n    async resolveName(name: string): Promise<null | string> {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const provider = checkProvider(this, \"sendTransaction\");\n\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n\n    abstract signTransaction(tx: TransactionRequest): Promise<string>;\n    abstract signMessage(message: string | Uint8Array): Promise<string>;\n    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    readonly address!: string;\n\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address: string, provider?: null | Provider) {\n        super(provider);\n        defineProperties<VoidSigner>(this, { address });\n    }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n\n    #throwUnsupported(suffix: string, operation: string): never {\n        assert(false, `VoidSigner cannot sign ${ suffix }`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4810, "column": 0}, "map": {"version":3,"file":"community.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/community.ts"],"sourcesContent":["/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */\n\n/**\n *  Providers which offer community credentials should extend this\n *  to notify any interested consumers whether community credentials\n *  are in-use.\n */\nexport interface CommunityResourcable {\n    /**\n     *  Returns true of the instance is connected using the community\n     *  credentials.\n     */\n    isCommunityResource(): boolean;\n}\n\n// Show the throttle message only once per service\nconst shown: Set<string> = new Set();\n\n/**\n *  Displays a warning in tht console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */\nexport function showThrottleMessage(service: string): void {\n    if (shown.has(service)) { return; }\n    shown.add(service);\n\n    console.log(\"========= NOTICE =========\")\n    console.log(`Request-Rate Exceeded for ${ service } (this message will not be repeated)`);\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n}\n"],"names":[],"mappings":"AAAA;;;;;;GAMG,CAeH,kDAAkD;;;;AAClD,MAAM,KAAK,GAAgB,IAAI,GAAG,EAAE,CAAC;AAU/B,SAAU,mBAAmB,CAAC,OAAe;IAC/C,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QAAE,OAAO;KAAE;IACnC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAEnB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;IACzC,OAAO,CAAC,GAAG,CAAC,CAAA,0BAAA,EAA8B,OAAQ,CAAA,oCAAA,CAAsC,CAAC,CAAC;IAC1F,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChB,OAAO,CAAC,GAAG,CAAC,2EAA2E,CAAC,CAAC;IACzF,OAAO,CAAC,GAAG,CAAC,oEAAoE,CAAC,CAAC;IAClF,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChB,OAAO,CAAC,GAAG,CAAC,yEAAyE,CAAC,CAAC;IACvF,OAAO,CAAC,GAAG,CAAC,wEAAwE,CAAC,CAAC;IACtF,OAAO,CAAC,GAAG,CAAC,+EAA+E,CAAC,CAAC;IAC7F,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChB,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAC9C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 4839, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4845, "column": 0}, "map": {"version":3,"file":"subscriber-filterid.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/subscriber-filterid.ts"],"sourcesContent":["import { isError } from \"../utils/index.js\";\n\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { Network } from \"./network.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdSubscriber implements Subscriber {\n    #provider: JsonRpcApiProvider;\n\n    #filterIdPromise: null | Promise<string>;\n    #poller: (b: number) => Promise<void>;\n\n    #running: boolean;\n\n    #network: null | Network;\n\n    #hault: boolean;\n\n    /**\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n     *  and [[_emitResults]] to setup the subscription and provide the event\n     *  to the %%provider%%.\n     */\n    constructor(provider: JsonRpcApiProvider) {\n        this.#provider = provider;\n\n        this.#filterIdPromise = null;\n        this.#poller = this.#poll.bind(this);\n\n        this.#running = false;\n\n        this.#network = null;\n\n        this.#hault = false;\n    }\n\n    /**\n     *  Sub-classes **must** override this to begin the subscription.\n     */\n    _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    /**\n     *  Sub-classes **must** override this handle the events.\n     */\n    _emitResults(provider: AbstractProvider, result: Array<any>): Promise<void> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    /**\n     *  Sub-classes **must** override this handle recovery on errors.\n     */\n    _recover(provider: AbstractProvider): Subscriber {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        try {\n            // Subscribe if necessary\n            if (this.#filterIdPromise == null) {\n                this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n\n            // Get the Filter ID\n            let filterId: null | string = null;\n            try {\n                filterId = await this.#filterIdPromise;\n            } catch (error) {\n                if (!isError(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                    throw error;\n                }\n            }\n\n            // The backend does not support Filter ID; downgrade to\n            // polling\n            if (filterId == null) {\n                this.#filterIdPromise = null;\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n                return;\n            }\n\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) { this.#network = network; }\n\n            if ((this.#network as Network).chainId !== network.chainId) {\n                throw new Error(\"chaid changed\");\n            }\n\n            if (this.#hault) { return; }\n\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [ filterId ]);\n            await this._emitResults(this.#provider, result);\n        } catch (error) { console.log(\"@TODO\", error); }\n\n        this.#provider.once(\"block\", this.#poller);\n    }\n\n    #teardown(): void {\n        const filterIdPromise = this.#filterIdPromise;\n        if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId) => {\n                if (this.#provider.destroyed) { return; }\n                this.#provider.send(\"eth_uninstallFilter\", [ filterId ]);\n            });\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#hault = true;\n        this.#teardown();\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        if (dropWhilePaused){ this.#teardown(); }\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    resume(): void { this.start(); }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdEventSubscriber extends FilterIdSubscriber {\n    #event: EventFilter;\n\n    /**\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n     *  listening for %%filter%%.\n     */\n    constructor(provider: JsonRpcApiProvider, filter: EventFilter) {\n        super(provider);\n        this.#event = copy(filter);\n    }\n\n    _recover(provider: AbstractProvider): Subscriber {\n        return new PollingEventSubscriber(provider, this.#event);\n    }\n\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        const filterId = await provider.send(\"eth_newFilter\", [ this.#event ]);\n        return filterId;\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n        }\n    }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        return await provider.send(\"eth_newPendingTransactionFilter\", [ ]);\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(\"pending\", result);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5006, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5012, "column": 0}, "map": {"version":3,"file":"provider-jsonrpc.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts"],"sourcesContent":["/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n\n// @TODO:\n// - Add the batching API\n\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes,\n    isError, makeError, assert, assertArgument,\n    FetchRequest, resolveProperties\n} from \"../utils/index.js\";\n\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { PerformActionRequest, Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { Provider, TransactionRequest, TransactionResponse } from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy<T = any>(value: T): T {\n    if (value == null || Primitive.indexOf(typeof(value)) >= 0) {\n        return value;\n    }\n\n    // Keep any Addressable\n    if (typeof((<any>value).getAddress) === \"function\") {\n        return value;\n    }\n\n    if (Array.isArray(value)) { return <any>(value.map(deepCopy)); }\n\n    if (typeof(value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = (<any>value)[key];\n            return accum;\n        }, <any>{ });\n    }\n\n    throw new Error(`should not happen: ${ value } (${ typeof(value) })`);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\ninterface Pollable {\n    pollingInterval: number;\n}\n\nfunction isPollable(value: any): value is Pollable {\n    return (value && typeof(value.pollingInterval) === \"number\");\n}\n\n/**\n *  A JSON-RPC payload, which are sent to a JSON-RPC server.\n */\nexport type JsonRpcPayload = {\n    /**\n     *  The JSON-RPC request ID.\n     */\n    id: number;\n\n    /**\n     *  The JSON-RPC request method.\n     */\n    method: string;\n\n    /**\n     *  The JSON-RPC request parameters.\n     */\n    params: Array<any> | Record<string, any>;\n\n    /**\n     *  A required constant in the JSON-RPC specification.\n     */\n    jsonrpc: \"2.0\";\n};\n\n/**\n *  A JSON-RPC result, which are returned on success from a JSON-RPC server.\n */\nexport type JsonRpcResult = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response result.\n     */\n    result: any;\n};\n\n/**\n *  A JSON-RPC error, which are returned on failure from a JSON-RPC server.\n */\nexport type JsonRpcError = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response error.\n     */\n    error: {\n        code: number;\n        message?: string;\n        data?: any;\n    }\n};\n\n/**\n *  When subscribing to the ``\"debug\"`` event, the [[Listener]] will\n *  receive this object as the first parameter.\n */\nexport type DebugEventJsonRpcApiProvider = {\n    action: \"sendRpcPayload\",\n    payload: JsonRpcPayload | Array<JsonRpcPayload>\n} | {\n    action: \"receiveRpcResult\",\n    result: Array<JsonRpcResult | JsonRpcError>\n} | {\n    action: \"receiveRpcError\",\n    error: Error\n};\n\n/**\n *  Options for configuring a [[JsonRpcApiProvider]]. Much of this\n *  is targetted towards sub-classes, which often will not expose\n *  any of these options to their consumers.\n *\n *  **``polling``** - use the polling strategy is used immediately\n *  for events; otherwise, attempt to use filters and fall back onto\n *  polling (default: ``false``)\n *\n *  **``staticNetwork``** - do not request chain ID on requests to\n *  validate the underlying chain has not changed (default: ``null``)\n *\n *  This should **ONLY** be used if it is **certain** that the network\n *  cannot change, such as when using INFURA (since the URL dictates the\n *  network). If the network is assumed static and it does change, this\n *  can have tragic consequences. For example, this **CANNOT** be used\n *  with MetaMask, since the user can select a new network from the\n *  drop-down at any time.\n *\n *  **``batchStallTime``** - how long (ms) to aggregate requests into a\n *  single batch. ``0`` indicates batching will only encompass the current\n *  event loop. If ``batchMaxCount = 1``, this is ignored. (default: ``10``)\n *\n *  **``batchMaxSize``** - target maximum size (bytes) to allow per batch\n *  request (default: 1Mb)\n *\n *  **``batchMaxCount``** - maximum number of requests to allow in a batch.\n *  If ``batchMaxCount = 1``, then batching is disabled. (default: ``100``)\n *\n *  **``cacheTimeout``** - passed as [[AbstractProviderOptions]].\n */\nexport type JsonRpcApiProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | boolean | Network;\n    batchStallTime?: number;\n    batchMaxSize?: number;\n    batchMaxCount?: number;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n\n    batchStallTime: 10,      // 10ms\n    batchMaxSize: (1 << 20), // 1Mb\n    batchMaxCount: 100,      // 100 requests\n\n    cacheTimeout: 250,\n    pollingInterval: 4000\n}\n\n/**\n *  A **JsonRpcTransactionRequest** is formatted as needed by the JSON-RPC\n *  Ethereum API specification.\n */\nexport interface JsonRpcTransactionRequest {\n     /**\n      *  The sender address to use when signing.\n      */\n     from?: string;\n\n     /**\n      *  The target address.\n      */\n     to?: string;\n\n     /**\n      *  The transaction data.\n      */\n     data?: string;\n\n     /**\n      *  The chain ID the transaction is valid on.\n      */\n     chainId?: string;\n\n     /**\n      *  The [[link-eip-2718]] transaction type.\n      */\n     type?: string;\n\n     /**\n      *  The maximum amount of gas to allow a transaction to consume.\n      *\n      *  In most other places in ethers, this is called ``gasLimit`` which\n      *  differs from the JSON-RPC Ethereum API specification.\n      */\n     gas?: string;\n\n     /**\n      *  The gas price per wei for transactions prior to [[link-eip-1559]].\n      */\n     gasPrice?: string;\n\n     /**\n      *  The maximum fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxFeePerGas?: string;\n\n     /**\n      *  The maximum priority fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxPriorityFeePerGas?: string;\n\n     /**\n      *  The nonce for the transaction.\n      */\n     nonce?: string;\n\n     /**\n      *  The transaction value (in wei).\n      */\n     value?: string;\n\n     /**\n      *  The transaction access list.\n      */\n     accessList?: Array<{ address: string, storageKeys: Array<string> }>;\n}\n\n// @TODO: Unchecked Signers\n\nexport class JsonRpcSigner extends AbstractSigner<JsonRpcApiProvider> {\n    address!: string;\n\n    constructor(provider: JsonRpcApiProvider, address: string) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties<JsonRpcSigner>(this, { address });\n    }\n\n    connect(provider: null | Provider): Signer {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n\n    async getAddress(): Promise<string> {\n        return this.address;\n    }\n\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        return await this.populateCall(tx);\n    }\n\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        const promises: Array<Promise<void>> = [];\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                    \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address});\n            })());\n        }\n\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n\n        // Wait until all of our properties are filled in\n        if (promises.length) { await Promise.all(promises); }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n\n        return this.provider.send(\"eth_sendTransaction\", [ hexTx ]);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [ 1000, 100 ];\n            let invalids = 0;\n\n            const checkTx = async () => {\n\n                try {\n                    // Try getting the transaction\n                    const tx = await this.provider.getTransaction(hash);\n\n                    if (tx != null) {\n                        resolve(tx.replaceableTransaction(blockNumber));\n                        return;\n                    }\n\n                } catch (error) {\n\n                    // If we were cancelled: stop polling.\n                    // If the data is bad: the node returns bad transactions\n                    // If the network changed: calling again will also fail\n                    // If unsupported: likely destroyed\n                    if (isError(error, \"CANCELLED\") || isError(error, \"BAD_DATA\") ||\n                        isError(error, \"NETWORK_ERROR\") || isError(error, \"UNSUPPORTED_OPERATION\")) {\n\n                        if (error.info == null) { error.info = { }; }\n                        error.info.sendTransactionHash = hash;\n\n                        reject(error);\n                        return;\n                    }\n\n                    // Stop-gap for misbehaving backends; see #4513\n                    if (isError(error, \"INVALID_ARGUMENT\")) {\n                        invalids++;\n                        if (error.info == null) { error.info = { }; }\n                        error.info.sendTransactionHash = hash;\n                        if (invalids > 10) {\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Notify anyone that cares; but we will try again, since\n                    // it is likely an intermittent service error\n                    this.provider.emit(\"error\", makeError(\"failed to fetch transation after sending (will try again)\", \"UNKNOWN_ERROR\", { error }));\n                }\n\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n\n    async signTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [ hexTx ]);\n    }\n\n\n    async signMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase() ]);\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, _value: Record<string, any>): Promise<string> {\n        const value = deepCopy(_value);\n\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value: string) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null ]);\n    }\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message) ]);\n    }\n}\n\ntype ResolveFunc = (result: JsonRpcResult) => void;\ntype RejectFunc = (error: Error) => void;\n\ntype Payload = { payload: JsonRpcPayload, resolve: ResolveFunc, reject: RejectFunc };\n\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport abstract class JsonRpcApiProvider extends AbstractProvider {\n\n    #options: Required<JsonRpcApiProviderOptions>;\n\n    // The next ID to use for the JSON-RPC ID field\n    #nextId: number;\n\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads: Array<Payload>;\n    #drainTimer: null | Timer;\n\n    #notReady: null | {\n        promise: Promise<void>,\n        resolve: null | ((v: void) => void)\n    };\n\n    #network: null | Network;\n    #pendingDetectNetwork: null | Promise<Network>;\n\n    #scheduleDrain(): void {\n        if (this.#drainTimer) { return; }\n\n        // If we aren't using batching, no harm in sending it immediately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0: this._getOption(\"batchStallTime\");\n\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n\n            const payloads = this.#payloads;\n            this.#payloads = [ ];\n\n            while (payloads.length) {\n\n                // Create payload batches that satisfy our batch constraints\n                const batch = [ <Payload>(payloads.shift()) ];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) { break; }\n                    batch.push(<Payload>(payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift(<Payload>(batch.pop()));\n                        break;\n                    }\n                }\n\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload: batch.map((p) => p.payload));\n\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n\n                    } catch (error: any) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#nextId = 1;\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        this.#payloads = [ ];\n        this.#drainTimer = null;\n\n        this.#network = null;\n        this.#pendingDetectNetwork = null;\n\n        {\n            let resolve: null | ((value: void) => void) = null;\n            const promise = new Promise((_resolve: (value: void) => void) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (typeof(staticNetwork) === \"boolean\") {\n            assertArgument(!staticNetwork || network !== \"any\", \"staticNetwork cannot be used on special network 'any'\", \"options\", options);\n            if (staticNetwork && network != null) {\n                this.#network = Network.from(network);\n            }\n\n        } else if (staticNetwork) {\n            // Make sure any static network is compatbile with the provided netwrok\n            assertArgument(network == null || staticNetwork.matches(network),\n                \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption<K extends keyof JsonRpcApiProviderOptions>(key: K): JsonRpcApiProviderOptions[K] {\n        return this.#options[key];\n    }\n\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network(): Network {\n        assert (this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n\n    /**\n     *  Sends a JSON-RPC %%payload%% (or a batch) to the underlying channel.\n     *\n     *  Sub-classes **MUST** override this.\n     */\n    abstract _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>>;\n\n\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 or newer properties, it might be pre-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({ }, req, {\n                            transaction: Object.assign({ }, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n\n        const request = this.getRpcRequest(req);\n\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n\n        return super._perform(req);\n    }\n\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork(): Promise<Network> {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            if (network === true) {\n                if (this.#network) { return this.#network; }\n            } else {\n                return network;\n            }\n        }\n\n        if (this.#pendingDetectNetwork) {\n            return await this.#pendingDetectNetwork;\n        }\n\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            this.#pendingDetectNetwork = (async () => {\n                try {\n                    const result = Network.from(getBigInt(await this.send(\"eth_chainId\", [ ])));\n                    this.#pendingDetectNetwork = null;\n                    return result;\n                } catch (error) {\n                    this.#pendingDetectNetwork = null;\n                    throw error;\n                }\n            })();\n            return await this.#pendingDetectNetwork;\n        }\n\n        // We are not ready yet; use the primitive _send\n        this.#pendingDetectNetwork = (async () => {\n            const payload: JsonRpcPayload = {\n                id: this.#nextId++, method: \"eth_chainId\", params: [ ], jsonrpc: \"2.0\"\n            };\n\n            this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n            let result: JsonRpcResult | JsonRpcError;\n            try {\n                result = (await this._send(payload))[0];\n                this.#pendingDetectNetwork = null;\n            } catch (error) {\n                this.#pendingDetectNetwork = null;\n                this.emit(\"debug\", { action: \"receiveRpcError\", error });\n                throw error;\n            }\n\n            this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n            if (\"result\" in result) {\n                return Network.from(getBigInt(result.result));\n            }\n\n            throw this.getRpcError(payload, result);\n        })();\n\n        return await this.#pendingDetectNetwork;\n    }\n\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start(): void {\n        if (this.#notReady == null || this.#notReady.resolve == null) { return; }\n\n        this.#notReady.resolve();\n        this.#notReady = null;\n\n        (async () => {\n\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                } catch (error) {\n                    if (this.destroyed) { break; }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady(): Promise<void> {\n        if (this.#notReady == null) { return; }\n        return await this.#notReady.promise;\n    }\n\n\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") { return new FilterIdPendingSubscriber(this); }\n\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready(): boolean { return this.#notReady == null; }\n\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx: TransactionRequest): JsonRpcTransactionRequest {\n        const result: JsonRpcTransactionRequest = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            let dstKey = key;\n            if (key === \"gasLimit\") { dstKey = \"gas\"; }\n            (<any>result)[dstKey] = toQuantity(getBigInt((<any>tx)[key], `tx.${ key }`));\n        });\n\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            (<any>result)[key] = hexlify((<any>tx)[key]);\n        });\n\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n\n        if (tx.blobVersionedHashes) {\n            // @TODO: Remove this <any> case once EIP-4844 added to prepared tx\n            (<any>result)[\"blobVersionedHashes\"] = tx.blobVersionedHashes.map(h => h.toLowerCase());\n        }\n\n        // @TODO: blobs should probably also be copied over, optionally\n        // accounting for the kzg property to backfill blobVersionedHashes\n        // using the commitment. Or should that be left as an exercise to\n        // the caller?\n\n        return result;\n    }\n\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req: PerformActionRequest): null | { method: string, args: Array<any> } {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [ ] };\n\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [ ] };\n\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n\n            case \"getPriorityFee\":\n                return { method: \"eth_maxPriorityFeePerGas\", args: [ ] };\n\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [ req.signedTransaction ]\n                };\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [ req.blockTag, !!req.includeTransactions ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [ req.blockHash, !!req.includeTransactions ]\n                    };\n                }\n                break;\n\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [ req.hash ]\n                };\n\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [ req.hash ]\n                };\n\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [ this.getRpcTransaction(req.transaction), req.blockTag ]\n                };\n\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [ this.getRpcTransaction(req.transaction) ]\n                };\n            }\n\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [ req.filter ] };\n        }\n\n        return null;\n    }\n\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload: JsonRpcPayload, _error: JsonRpcError): Error {\n        const { method } = payload;\n        const { error } = _error;\n\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: ((<any>payload).params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n\n            const e = AbiCoder.getBuiltinCallException(\n                (method === \"eth_call\") ? \"call\": \"estimateGas\",\n                ((<any>payload).params[0]),\n                (result ? result.data: null)\n            );\n            e.info = { error, payload };\n            return e;\n        }\n\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n\n        const message = JSON.stringify(spelunkMessage(error));\n\n        if (typeof(error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap: Record<string, \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\"> = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\") ,\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = <TransactionLike<string>>((<any>payload).params[0]);\n\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && (<any>error).details && (<any>error).details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n\n\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // @TODO: cache chainId?? purge on switch_networks\n\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n\n        return <Promise<JsonRpcResult>>promise;\n    }\n\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        const accountsPromise = this.send(\"eth_accounts\", [ ]);\n\n        // Account index\n        if (typeof(address) === \"number\") {\n            const accounts = <Array<string>>(await accountsPromise);\n            if (address >= accounts.length) { throw new Error(\"no such account\"); }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n\n        throw new Error(\"invalid account\");\n    }\n\n    async listAccounts(): Promise<Array<JsonRpcSigner>> {\n        const accounts: Array<string> = await this.send(\"eth_accounts\", [ ]);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n\n    destroy(): void {\n\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n\n        this.#payloads = [ ];\n\n        // Parent clean-up\n        super.destroy();\n\n    }\n}\n\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport abstract class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval: number;\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        let pollingInterval = this._getOption(\"pollingInterval\");\n        if (pollingInterval == null) { pollingInterval = defaultOptions.pollingInterval; }\n\n        this.#pollingInterval = pollingInterval;\n    }\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval(): number { return this.#pollingInterval; }\n    set pollingInterval(value: number) {\n        if (!Number.isInteger(value) || value < 0) { throw new Error(\"invalid interval\"); }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect: FetchRequest;\n\n    constructor(url?: string | FetchRequest, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        if (url == null) { url = \"http:/\\/localhost:8545\"; }\n        super(network, options);\n\n        if (typeof(url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        } else {\n            this.#connect = url.clone();\n        }\n    }\n\n    _getConnection(): FetchRequest {\n        return this.#connect.clone();\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult>> {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) { resp = [ resp ]; }\n\n        return resp;\n    }\n}\n\nfunction spelunkData(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction _spelunkMessage(value: any, result: Array<string>): void {\n    if (value == null) { return; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\") {\n        result.push(value.message);\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) { }\n    }\n}\n\nfunction spelunkMessage(value: any): Array<string> {\n    const result: Array<string> = [ ];\n    _spelunkMessage(value, result);\n    return result;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG,CAEH,SAAS;AACT,yBAAyB;AAEzB,yQAAyQ;;;;;;;;;;AAGzQ,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;;;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AASpD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AARvC,OAAO,EACH,gBAAgB,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAC1E,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,cAAc,EAC1C,YAAY,EAAE,iBAAiB,EAClC,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAG/E,OAAO,EAAE,uBAAuB,EAAE,yBAAyB,EAAE,MAAM,0BAA0B,CAAC;AAC9F,OAAO,EAAE,sBAAsB,EAAE,MAAM,yBAAyB,CAAC;AAXjE,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAHxD,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;AA0B3C,MAAM,SAAS,GAAG,8CAA8C,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7E,gDAAgD;AAChD,SAAS,QAAQ,CAAU,KAAQ;IAC/B,IAAI,KAAK,IAAI,IAAI,IAAI,SAAS,CAAC,OAAO,CAAC,OAAM,AAAC,KAAK,CAAC,CAAC,GAAI,CAAC,EAAE;QACxD,OAAO,KAAK,CAAC;KAChB;IAED,uBAAuB;IACvB,IAAI,OAAM,AAAO,KAAM,CAAC,UAAU,CAAC,IAAK,UAAU,EAAE;QAChD,OAAO,KAAK,CAAC;KAChB;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAAE,OAAa,AAAD,KAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;KAAE;IAEhE,IAAI,OAAM,AAAC,KAAK,CAAC,IAAK,QAAQ,EAAE;QAC5B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC5C,KAAK,CAAC,GAAG,CAAC,GAAS,KAAM,CAAC,GAAG,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC;QACjB,CAAC,EAAO,CAAA,CAAG,CAAC,CAAC;KAChB;IAED,MAAM,IAAI,KAAK,CAAC,CAAA,mBAAA,EAAuB,KAAM,CAAA,EAAA,EAAM,OAAM,AAAC,KAAK,CAAE,CAAA,CAAG,CAAC,CAAC;AAC1E,CAAC;AAED,SAAS,KAAK,CAAC,QAAgB;IAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAAG,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AAED,SAAS,YAAY,CAAC,KAAa;IAC/B,IAAI,KAAK,EAAE;QAAE,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC;KAAE;IAC1C,OAAO,KAAK,CAAC;AACjB,CAAC;AAMD,SAAS,UAAU,CAAC,KAAU;IAC1B,OAAO,AAAC,KAAK,IAAI,OAAM,AAAC,KAAK,CAAC,eAAe,CAAC,IAAK,QAAQ,CAAC,CAAC;AACjE,CAAC;AAsHD,MAAM,cAAc,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,aAAa,EAAE,IAAI;IAEnB,cAAc,EAAE,EAAE;IAClB,YAAY,EAAE,AAAC,CAAC,IAAI,EAAE,CAAC;IACvB,aAAa,EAAE,GAAG;IAElB,YAAY,EAAE,GAAG;IACjB,eAAe,EAAE,IAAI;CACxB,CAAA;AAyEK,MAAO,aAAc,oLAAQ,iBAAkC;IACjE,OAAO,CAAU;IAEjB,YAAY,QAA4B,EAAE,OAAe,CAAA;QACrD,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChB,OAAO,qKAAG,aAAA,AAAU,EAAC,OAAO,CAAC,CAAC;QAC9B,sLAAA,AAAgB,EAAgB,IAAI,EAAE;YAAE,OAAO;QAAA,CAAE,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,CAAC,QAAyB,EAAA;sKAC7B,UAAA,AAAM,EAAC,KAAK,EAAE,gCAAgC,EAAE,uBAAuB,EAAE;YACrE,SAAS,EAAE,gBAAgB;SAC9B,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,uEAAuE;IACvE,KAAK,CAAC,mBAAmB,CAAC,EAAsB,EAAA;QAC5C,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,qEAAqE;IACrE,8BAA8B;IAC9B,KAAK,CAAC,wBAAwB,CAAC,GAAuB,EAAA;QAClD,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,QAAQ,GAAyB,EAAE,CAAC;QAE1C,wCAAwC;QACxC,IAAI,EAAE,CAAC,IAAI,EAAE;YACT,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC;YACtB,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE;gBACtB,MAAM,IAAI,GAAG,MAAM,kLAAA,AAAc,EAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;+KACxD,iBAAA,AAAc,EAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAC5E,uBAAuB,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;gBACjD,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,CAAC,CAAC,EAAE,CAAC,CAAC;SACT,MAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;SAC1B;QAED,mEAAmE;QACnE,kEAAkE;QAClE,0BAA0B;QAC1B,IAAI,EAAE,CAAC,QAAQ,IAAI,IAAI,EAAE;YACrB,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE;gBACtB,EAAE,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;oBAAE,GAAG,EAAE;oBAAE,IAAI,EAAE,IAAI,CAAC,OAAO;gBAAA,CAAC,CAAC,CAAC;YAChF,CAAC,CAAC,EAAE,CAAC,CAAC;SACT;QAED,gDAAgD;QAChD,IAAI,EAAE,CAAC,EAAE,IAAI,IAAI,EAAE;YACf,MAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC;YAClB,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE;gBACtB,EAAE,CAAC,EAAE,GAAG,MAAM,kLAAA,AAAc,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC,CAAC,EAAE,CAAC,CAAC;SACT;QAED,iDAAiD;QACjD,IAAI,QAAQ,CAAC,MAAM,EAAE;YAAE,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAAE;QAErD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAElD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAAE,KAAK;SAAE,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAsB,EAAA;QACxC,yDAAyD;QACzD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;QAEzD,uBAAuB;QACvB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QAErD,oEAAoE;QACpE,iEAAiE;QACjE,yCAAyC;QACzC,OAAO,MAAM,AAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,MAAM,QAAQ,GAAG;gBAAE,IAAI;gBAAE,GAAG;aAAE,CAAC;YAC/B,IAAI,QAAQ,GAAG,CAAC,CAAC;YAEjB,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;gBAEvB,IAAI;oBACA,8BAA8B;oBAC9B,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oBAEpD,IAAI,EAAE,IAAI,IAAI,EAAE;wBACZ,OAAO,CAAC,EAAE,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChD,OAAO;qBACV;iBAEJ,CAAC,OAAO,KAAK,EAAE;oBAEZ,sCAAsC;oBACtC,wDAAwD;oBACxD,uDAAuD;oBACvD,mCAAmC;oBACnC,mKAAI,UAAA,AAAO,EAAC,KAAK,EAAE,WAAW,CAAC,mKAAI,UAAA,AAAO,EAAC,KAAK,EAAE,UAAU,CAAC,IACzD,yKAAA,AAAO,EAAC,KAAK,EAAE,eAAe,CAAC,mKAAI,UAAA,AAAO,EAAC,KAAK,EAAE,uBAAuB,CAAC,EAAE;wBAE5E,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;4BAAE,KAAK,CAAC,IAAI,GAAG,CAAA,CAAG,CAAC;yBAAE;wBAC7C,KAAK,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;wBAEtC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACV;oBAED,+CAA+C;oBAC/C,QAAI,qKAAA,AAAO,EAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;wBACpC,QAAQ,EAAE,CAAC;wBACX,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;4BAAE,KAAK,CAAC,IAAI,GAAG,CAAA,CAAG,CAAC;yBAAE;wBAC7C,KAAK,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;wBACtC,IAAI,QAAQ,GAAG,EAAE,EAAE;4BACf,MAAM,CAAC,KAAK,CAAC,CAAC;4BACd,OAAO;yBACV;qBACJ;oBAED,yDAAyD;oBACzD,6CAA6C;oBAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,iKAAE,YAAA,AAAS,EAAC,2DAA2D,EAAE,eAAe,EAAE;wBAAE,KAAK;oBAAA,CAAE,CAAC,CAAC,CAAC;iBACnI;gBAED,yBAAyB;gBACzB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE;oBAAG,OAAO,EAAE,CAAC;gBAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC;YAC5E,CAAC,CAAC;YACF,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAuB,EAAA;QACzC,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEzB,wCAAwC;QACxC,IAAI,EAAE,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,GAAG,uKAAM,iBAAA,AAAc,EAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1D,gLAAA,AAAc,EAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAC5E,uBAAuB,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;YACjD,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB,MAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;SAC1B;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAClD,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAAE,KAAK;SAAE,CAAC,CAAC;IACtE,CAAC;IAGD,KAAK,CAAC,WAAW,CAAC,QAA6B,EAAA;QAC3C,MAAM,OAAO,GAAG,AAAC,AAAC,OAAO,AAAD,QAAS,CAAC,IAAK,QAAQ,CAAC,CAAC,CAAC,IAAC,uKAAA,AAAW,EAAC,QAAQ,CAAC,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE;yKAC7C,UAAA,AAAO,EAAC,OAAO,CAAC;YAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;SAAE,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAuB,EAAE,KAA4C,EAAE,MAA2B,EAAA;QAClH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE/B,oCAAoC;QACpC,MAAM,SAAS,GAAG,uKAAM,mBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;YAChG,MAAM,OAAO,GAAG,uKAAM,iBAAA,AAAc,EAAC,KAAK,CAAC,CAAC;YAC5C,gLAAA,AAAc,EAAC,OAAO,IAAI,IAAI,EAAE,yCAAyC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAC3F,OAAO,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE;YACpD,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,SAAS,kKAAC,mBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SACxF,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAA;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAChD,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAAE,QAAQ;YAAE,IAAI;SAAE,CAAC,CAAC;IACtD,CAAC;IAED,0DAA0D;IAC1D,KAAK,CAAC,kBAAkB,CAAC,QAA6B,EAAA;QAClD,MAAM,OAAO,GAAI,AAAC,AAAF,OAAQ,AAAC,QAAQ,CAAC,IAAK,QAAQ,CAAC,CAAC,CAAC,6JAAC,cAAA,AAAW,EAAC,QAAQ,CAAC,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE;YACxC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;yKAAE,UAAA,AAAO,EAAC,OAAO,CAAC;SAAE,CAAC,CAAC;IACxD,CAAC;CACJ;AAiBK,MAAgB,kBAAmB,sLAAQ,mBAAgB;IAE7D,QAAQ,CAAsC;IAE9C,+CAA+C;KAC/C,MAAO,CAAS;IAEhB,oEAAoE;IACpE,SAAS,CAAiB;KAC1B,UAAW,CAAe;KAE1B,QAAS,CAGP;KAEF,OAAQ,CAAiB;KACzB,oBAAqB,CAA0B;KAE/C,aAAc;QACV,IAAI,IAAI,EAAC,UAAW,EAAE;YAAE,OAAO;SAAE;QAEjC,iEAAiE;QACjE,MAAM,SAAS,GAAG,AAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,AAAC,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAElG,IAAI,EAAC,UAAW,GAAG,UAAU,CAAC,GAAG,EAAE;YAC/B,IAAI,EAAC,UAAW,GAAG,IAAI,CAAC;YAExB,MAAM,QAAQ,GAAG,IAAI,EAAC,QAAS,CAAC;YAChC,IAAI,EAAC,QAAS,GAAG,EAAG,CAAC;YAErB,MAAO,QAAQ,CAAC,MAAM,CAAE;gBAEpB,4DAA4D;gBAC5D,MAAM,KAAK,GAAG,CAAW;oBAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;iBAAE,CAAC;gBAC9C,MAAO,QAAQ,CAAC,MAAM,CAAE;oBACpB,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,EAAC,OAAQ,CAAC,aAAa,EAAE;wBAAE,MAAM;qBAAE;oBAC5D,KAAK,CAAC,IAAI,CAAU,AAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACxC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC1D,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,EAAC,OAAQ,CAAC,YAAY,EAAE;wBAC3C,QAAQ,CAAC,OAAO,CAAW,AAAD,KAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBACzC,MAAM;qBACT;iBACJ;gBAED,qCAAqC;gBACrC,CAAC,KAAK,IAAI,EAAE;oBACR,MAAM,OAAO,GAAG,AAAC,AAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,AAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,OAAO,CAAC,CAAC,CAAC;oBAEvF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;wBAAE,MAAM,EAAE,gBAAgB;wBAAE,OAAO;oBAAA,CAAE,CAAC,CAAC;oBAE1D,IAAI;wBACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBACzC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;4BAAE,MAAM,EAAE,kBAAkB;4BAAE,MAAM;wBAAA,CAAE,CAAC,CAAC;wBAE3D,iCAAiC;wBACjC,KAAK,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,KAAK,CAAE;4BAE9C,IAAI,IAAI,CAAC,SAAS,EAAE;gCAChB,MAAM,gKAAC,YAAA,AAAS,EAAC,uCAAuC,EAAE,uBAAuB,EAAE;oCAAE,SAAS,EAAE,OAAO,CAAC,MAAM;gCAAA,CAAE,CAAC,CAAC,CAAC;gCACnH,SAAS;6BACZ;4BAED,2BAA2B;4BAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAI,CAAC,AAAH,CAAC,AAAG,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,AAAC,CAAC,CAAC,CAAC,CAAC;4BAE5D,mDAAmD;4BACnD,IAAI,IAAI,IAAI,IAAI,EAAE;gCACd,MAAM,KAAK,kKAAG,YAAA,AAAS,EAAC,8BAA8B,EAAE,UAAU,EAAE;oCAChE,KAAK,EAAE,MAAM;oCAAE,IAAI,EAAE;wCAAE,OAAO;oCAAA,CAAE;iCACnC,CAAC,CAAC;gCACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gCAC1B,MAAM,CAAC,KAAK,CAAC,CAAC;gCACd,SAAS;6BACZ;4BAED,2BAA2B;4BAC3B,IAAI,OAAO,IAAI,IAAI,EAAE;gCACjB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;gCACxC,SAAS;6BACZ;4BAED,4BAA4B;4BAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBACxB;qBAEJ,CAAC,OAAO,KAAU,EAAE;wBACjB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;4BAAE,MAAM,EAAE,iBAAiB;4BAAE,KAAK;wBAAA,CAAE,CAAC,CAAC;wBAEzD,KAAK,MAAM,EAAE,MAAM,EAAE,IAAI,KAAK,CAAE;4BAC5B,4CAA4C;4BAC5C,MAAM,CAAC,KAAK,CAAC,CAAC;yBACjB;qBACJ;gBACL,CAAC,CAAC,EAAE,CAAC;aACR;QACL,CAAC,EAAE,SAAS,CAAC,CAAC;IAClB,CAAC;IAED,YAAY,OAAoB,EAAE,OAAmC,CAAA;QACjE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAExB,IAAI,EAAC,MAAO,GAAG,CAAC,CAAC;QACjB,IAAI,EAAC,OAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAG,EAAE,cAAc,EAAE,OAAO,IAAI,CAAA,CAAG,CAAC,CAAC;QAEnE,IAAI,EAAC,QAAS,GAAG,EAAG,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,EAAC,OAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,EAAC,oBAAqB,GAAG,IAAI,CAAC;QAElC;YACI,IAAI,OAAO,GAAmC,IAAI,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,QAA+B,EAAE,EAAE;gBAC5D,OAAO,GAAG,QAAQ,CAAC;YACvB,CAAC,CAAC,CAAC;YACH,IAAI,EAAC,QAAS,GAAG;gBAAE,OAAO;gBAAE,OAAO;YAAA,CAAE,CAAC;SACzC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,OAAM,AAAC,aAAa,CAAC,IAAK,SAAS,EAAE;2KACrC,iBAAA,AAAc,EAAC,CAAC,aAAa,IAAI,OAAO,KAAK,KAAK,EAAE,uDAAuD,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACjI,IAAI,aAAa,IAAI,OAAO,IAAI,IAAI,EAAE;gBAClC,IAAI,EAAC,OAAQ,GAAG,0KAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACzC;SAEJ,MAAM,IAAI,aAAa,EAAE;YACtB,uEAAuE;2KACvE,iBAAA,AAAc,EAAC,OAAO,IAAI,IAAI,IAAI,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,EAC5D,yCAAyC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACnE,IAAI,EAAC,OAAQ,GAAG,aAAa,CAAC;SACjC;IACL,CAAC;IAED;;;;OAIG,CACH,UAAU,CAA4C,GAAM,EAAA;QACxD,OAAO,IAAI,EAAC,OAAQ,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG,CACH,IAAI,QAAQ,GAAA;uKACR,SAAA,AAAM,EAAE,IAAI,EAAC,OAAQ,EAAE,8BAA8B,EAAE,eAAe,CAAC,CAAC;QACxE,OAAO,IAAI,EAAC,OAAQ,CAAC;IACzB,CAAC;IAUD;;;;;OAKG,CACH,KAAK,CAAC,QAAQ,CAAC,GAAyB,EAAA;QAEpC,uEAAuE;QACvE,oEAAoE;QACpE,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,aAAa,EAAE;YACvD,IAAI,EAAE,GAAG,GAAG,CAAC,WAAW,CAAC;YACzB,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,kKAAI,YAAA,AAAS,EAAC,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC7C,yEAAyE;gBACzE,IAAI,EAAE,CAAC,YAAY,IAAI,IAAI,IAAI,EAAE,CAAC,oBAAoB,IAAI,IAAI,EAAE;oBAC5D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;oBACxC,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,IAAI,OAAO,CAAC,oBAAoB,IAAI,IAAI,EAAE;wBACtE,uDAAuD;wBACvD,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAG,EAAE,GAAG,EAAE;4BAC1B,WAAW,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA,CAAG,EAAE,EAAE,EAAE;gCAAE,IAAI,EAAE,SAAS;4BAAA,CAAE,CAAC;yBAC3D,CAAC,CAAC;qBACN;iBACJ;aACJ;SACJ;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAExC,IAAI,OAAO,IAAI,IAAI,EAAE;YACjB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;SACxD;QAED,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG,CACH,KAAK,CAAC,cAAc,GAAA;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACjD,IAAI,OAAO,EAAE;YACT,IAAI,OAAO,KAAK,IAAI,EAAE;gBAClB,IAAI,IAAI,EAAC,OAAQ,EAAE;oBAAE,OAAO,IAAI,CAAC,QAAQ,CAAC;iBAAE;aAC/C,MAAM;gBACH,OAAO,OAAO,CAAC;aAClB;SACJ;QAED,IAAI,IAAI,EAAC,oBAAqB,EAAE;YAC5B,OAAO,MAAM,IAAI,EAAC,oBAAqB,CAAC;SAC3C;QAED,sEAAsE;QACtE,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,EAAC,oBAAqB,GAAG,CAAC,KAAK,IAAI,EAAE;gBACrC,IAAI;oBACA,MAAM,MAAM,GAAG,0KAAO,CAAC,IAAI,+JAAC,YAAA,AAAS,EAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAG,CAAC,CAAC,CAAC,CAAC;oBAC5E,IAAI,EAAC,oBAAqB,GAAG,IAAI,CAAC;oBAClC,OAAO,MAAM,CAAC;iBACjB,CAAC,OAAO,KAAK,EAAE;oBACZ,IAAI,EAAC,oBAAqB,GAAG,IAAI,CAAC;oBAClC,MAAM,KAAK,CAAC;iBACf;YACL,CAAC,CAAC,EAAE,CAAC;YACL,OAAO,MAAM,IAAI,EAAC,oBAAqB,CAAC;SAC3C;QAED,gDAAgD;QAChD,IAAI,EAAC,oBAAqB,GAAG,CAAC,KAAK,IAAI,EAAE;YACrC,MAAM,OAAO,GAAmB;gBAC5B,EAAE,EAAE,IAAI,EAAC,MAAO,EAAE;gBAAE,MAAM,EAAE,aAAa;gBAAE,MAAM,EAAE,EAAG;gBAAE,OAAO,EAAE,KAAK;aACzE,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAAE,MAAM,EAAE,gBAAgB;gBAAE,OAAO;YAAA,CAAE,CAAC,CAAC;YAE1D,IAAI,MAAoC,CAAC;YACzC,IAAI;gBACA,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,EAAC,oBAAqB,GAAG,IAAI,CAAC;aACrC,CAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,EAAC,oBAAqB,GAAG,IAAI,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBAAE,MAAM,EAAE,iBAAiB;oBAAE,KAAK;gBAAA,CAAE,CAAC,CAAC;gBACzD,MAAM,KAAK,CAAC;aACf;YAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAAE,MAAM,EAAE,kBAAkB;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAE3D,IAAI,QAAQ,IAAI,MAAM,EAAE;gBACpB,uKAAO,UAAO,CAAC,IAAI,KAAC,sKAAA,AAAS,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;aACjD;YAED,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC,EAAE,CAAC;QAEL,OAAO,MAAM,IAAI,EAAC,oBAAqB,CAAC;IAC5C,CAAC;IAED;;;;;;OAMG,CACH,MAAM,GAAA;QACF,IAAI,IAAI,EAAC,QAAS,IAAI,IAAI,IAAI,IAAI,EAAC,QAAS,CAAC,OAAO,IAAI,IAAI,EAAE;YAAE,OAAO;SAAE;QAEzE,IAAI,EAAC,QAAS,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,EAAC,QAAS,GAAG,IAAI,CAAC;QAEtB,CAAC,KAAK,IAAI,EAAE;YAER,wBAAwB;YACxB,MAAO,IAAI,EAAC,OAAQ,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAE;gBAC7C,IAAI;oBACA,IAAI,EAAC,OAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;iBAC/C,CAAC,OAAO,KAAK,EAAE;oBACZ,IAAI,IAAI,CAAC,SAAS,EAAE;wBAAE,MAAM;qBAAE;oBAC9B,OAAO,CAAC,GAAG,CAAC,iIAAiI,CAAC,CAAC;oBAC/I,IAAI,CAAC,IAAI,CAAC,OAAO,iKAAE,YAAA,AAAS,EAAC,uCAAuC,EAAE,eAAe,EAAE;wBAAE,KAAK,EAAE,2BAA2B;wBAAE,IAAI,EAAE;4BAAE,KAAK;wBAAA,CAAE;oBAAA,CAAE,CAAC,CAAC,CAAC;oBACjJ,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;iBACrB;aACJ;YAED,6BAA6B;YAC7B,IAAI,EAAC,aAAc,EAAE,CAAC;QAC1B,CAAC,CAAC,EAAE,CAAC;IACT,CAAC;IAED;;;;OAIG,CACH,KAAK,CAAC,eAAe,GAAA;QACjB,IAAI,IAAI,EAAC,QAAS,IAAI,IAAI,EAAE;YAAE,OAAO;SAAE;QACvC,OAAO,MAAM,IAAI,EAAC,QAAS,CAAC,OAAO,CAAC;IACxC,CAAC;IAGD;;;;;OAKG,CACH,cAAc,CAAC,GAAiB,EAAA;QAE5B,8CAA8C;QAC9C,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE;YAAE,OAAO,mLAAI,4BAAyB,CAAC,IAAI,CAAC,CAAC;SAAE;QAE3E,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE;YACtB,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC5B,OAAO,iLAAI,0BAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;aACvD;YACD,OAAO,mLAAI,0BAAuB,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;SACxD;QAED,gEAAgE;QAChE,sCAAsC;QACtC,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;YAC3D,OAAO,IAAI,mMAAmB,CAAC,QAAQ,CAAC,CAAC;SAC5C;QAED,OAAO,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG,CACH,IAAI,KAAK,GAAA;QAAc,OAAO,IAAI,EAAC,QAAS,IAAI,IAAI,CAAC;IAAC,CAAC;IAEvD;;;;OAIG,CACH,iBAAiB,CAAC,EAAsB,EAAA;QACpC,MAAM,MAAM,GAA8B,CAAA,CAAE,CAAC;QAE7C,+DAA+D;QAC/D;YAAC,SAAS;YAAE,UAAU;YAAE,UAAU;YAAE,MAAM;YAAE,cAAc;YAAE,sBAAsB;YAAE,OAAO;YAAE,OAAO;SAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAClH,IAAU,EAAG,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;gBAAE,OAAO;aAAE;YACvC,IAAI,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,GAAG,KAAK,UAAU,EAAE;gBAAE,MAAM,GAAG,KAAK,CAAC;aAAE;YACrC,MAAO,CAAC,MAAM,CAAC,iKAAG,aAAU,AAAV,gKAAW,YAAA,AAAS,EAAO,EAAG,CAAC,GAAG,CAAC,EAAE,CAAA,GAAA,EAAO,GAAI,EAAE,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,6CAA6C;QAC7C;YAAC,MAAM;YAAE,IAAI;YAAE,MAAM;SAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnC,IAAU,EAAG,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;gBAAE,OAAO;aAAE;YACjC,MAAO,CAAC,GAAG,CAAC,OAAG,mKAAA,AAAO,EAAO,EAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,EAAE,CAAC,UAAU,EAAE;YACf,MAAM,CAAC,YAAY,CAAC,4KAAG,gBAAA,AAAa,EAAC,EAAE,CAAC,UAAU,CAAC,CAAC;SACvD;QAED,IAAI,EAAE,CAAC,mBAAmB,EAAE;YACxB,mEAAmE;YAC7D,MAAO,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;SAC3F;QAED,+DAA+D;QAC/D,kEAAkE;QAClE,iEAAiE;QACjE,cAAc;QAEd,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG,CACH,aAAa,CAAC,GAAyB,EAAA;QACnC,OAAQ,GAAG,CAAC,MAAM,EAAE;YAChB,KAAK,SAAS;gBACV,OAAO;oBAAE,MAAM,EAAE,aAAa;oBAAE,IAAI,EAAE,EAAG;gBAAA,CAAE,CAAC;YAEhD,KAAK,gBAAgB;gBACjB,OAAO;oBAAE,MAAM,EAAE,iBAAiB;oBAAE,IAAI,EAAE,EAAG;gBAAA,CAAE,CAAC;YAEpD,KAAK,aAAa;gBACd,OAAO;oBAAE,MAAM,EAAE,cAAc;oBAAE,IAAI,EAAE,EAAE;gBAAA,CAAE,CAAC;YAEhD,KAAK,gBAAgB;gBACjB,OAAO;oBAAE,MAAM,EAAE,0BAA0B;oBAAE,IAAI,EAAE,EAAG;gBAAA,CAAE,CAAC;YAE7D,KAAK,YAAY;gBACb,OAAO;oBACH,MAAM,EAAE,gBAAgB;oBACxB,IAAI,EAAE;wBAAE,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;wBAAE,GAAG,CAAC,QAAQ;qBAAE;iBACpD,CAAC;YAEN,KAAK,qBAAqB;gBACtB,OAAO;oBACH,MAAM,EAAE,yBAAyB;oBACjC,IAAI,EAAE;wBAAE,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;wBAAE,GAAG,CAAC,QAAQ;qBAAE;iBACpD,CAAC;YAEN,KAAK,SAAS;gBACV,OAAO;oBACH,MAAM,EAAE,aAAa;oBACrB,IAAI,EAAE;wBAAE,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;wBAAE,GAAG,CAAC,QAAQ;qBAAE;iBACpD,CAAC;YAEN,KAAK,YAAY;gBACb,OAAO;oBACH,MAAM,EAAE,kBAAkB;oBAC1B,IAAI,EAAE;wBACF,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;wBACxB,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;wBAClC,GAAG,CAAC,QAAQ;qBACf;iBACJ,CAAC;YAEN,KAAK,sBAAsB;gBACvB,OAAO;oBACH,MAAM,EAAE,wBAAwB;oBAChC,IAAI,EAAE;wBAAE,GAAG,CAAC,iBAAiB;qBAAE;iBAClC,CAAC;YAEN,KAAK,UAAU;gBACX,IAAI,UAAU,IAAI,GAAG,EAAE;oBACnB,OAAO;wBACH,MAAM,EAAE,sBAAsB;wBAC9B,IAAI,EAAE;4BAAE,GAAG,CAAC,QAAQ;4BAAE,CAAC,CAAC,GAAG,CAAC,mBAAmB;yBAAE;qBACpD,CAAC;iBACL,MAAM,IAAI,WAAW,IAAI,GAAG,EAAE;oBAC3B,OAAO;wBACH,MAAM,EAAE,oBAAoB;wBAC5B,IAAI,EAAE;4BAAE,GAAG,CAAC,SAAS;4BAAE,CAAC,CAAC,GAAG,CAAC,mBAAmB;yBAAE;qBACrD,CAAC;iBACL;gBACD,MAAM;YAEV,KAAK,gBAAgB;gBACjB,OAAO;oBACH,MAAM,EAAE,0BAA0B;oBAClC,IAAI,EAAE;wBAAE,GAAG,CAAC,IAAI;qBAAE;iBACrB,CAAC;YAEN,KAAK,uBAAuB;gBACxB,OAAO;oBACH,MAAM,EAAE,2BAA2B;oBACnC,IAAI,EAAE;wBAAE,GAAG,CAAC,IAAI;qBAAE;iBACrB,CAAC;YAEN,KAAK,MAAM;gBACP,OAAO;oBACH,MAAM,EAAE,UAAU;oBAClB,IAAI,EAAE;wBAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC;wBAAE,GAAG,CAAC,QAAQ;qBAAE;iBAClE,CAAC;YAEN,KAAK,aAAa,CAAC;gBAAC;oBAChB,OAAO;wBACH,MAAM,EAAE,iBAAiB;wBACzB,IAAI,EAAE;4BAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC;yBAAE;qBACpD,CAAC;iBACL;YAED,KAAK,SAAS;gBACV,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;oBAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;wBACnC,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;qBAC7D,MAAM;wBACH,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBACzD;iBACJ;gBACD,OAAO;oBAAE,MAAM,EAAE,aAAa;oBAAE,IAAI,EAAE;wBAAE,GAAG,CAAC,MAAM;qBAAE;gBAAA,CAAE,CAAC;SAC9D;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG,CACH,WAAW,CAAC,OAAuB,EAAE,MAAoB,EAAA;QACrD,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC3B,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAEzB,IAAI,MAAM,KAAK,iBAAiB,IAAI,KAAK,CAAC,OAAO,EAAE;YAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,qBAAqB,CAAC,EAAE;gBAC3D,sKAAO,YAAS,AAAT,EAAU,oBAAoB,EAAE,oBAAoB,EAAE;oBACzD,WAAW,EAAE,AAAO,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvC,IAAI,EAAE;wBAAE,OAAO;wBAAE,KAAK;oBAAA,CAAE;iBAC3B,CAAC,CAAC;aACN;SACJ;QAED,IAAI,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK,iBAAiB,EAAE;YACvD,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAElC,MAAM,CAAC,kKAAG,WAAQ,CAAC,uBAAuB,CACtC,AAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,AAAC,MAAM,CAAA,CAAC,CAAC,aAAa,EAC/C,AAAO,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACzB,CAAD,KAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAA,CAAC,CAAC,IAAI,CAAC,CAC/B,CAAC;YACF,CAAC,CAAC,IAAI,GAAG;gBAAE,KAAK;gBAAE,OAAO;YAAA,CAAE,CAAC;YAC5B,OAAO,CAAC,CAAC;SACZ;QAED,kFAAkF;QAClF,8BAA8B;QAE9B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAEtD,IAAI,OAAM,AAAC,KAAK,CAAC,OAAO,CAAC,IAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC,EAAE;YAC9F,MAAM,SAAS,GAA8G;gBACzH,QAAQ,EAAE,aAAa;gBACvB,aAAa,EAAE,aAAa;gBAC5B,oBAAoB,EAAE,eAAe;gBACrC,mBAAmB,EAAE,iBAAiB;gBACtC,mBAAmB,EAAE,iBAAiB;gBACtC,mBAAmB,EAAE,eAAe;gBACpC,sBAAsB,EAAE,eAAe;aAC1C,CAAC;YAEF,sKAAO,YAAA,AAAS,EAAC,CAAA,oBAAA,CAAsB,EAAE,iBAAiB,EAAE;gBACxD,MAAM,EAAE,AAAC,SAAS,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC;gBACxC,MAAM,EAAE,UAAU;gBAClB,IAAI,EAAE;oBAAE,OAAO;oBAAE,KAAK;gBAAA,CAAE;aAC3B,CAAC,CAAC;SACN;QAED,IAAI,MAAM,KAAK,wBAAwB,IAAI,MAAM,KAAK,qBAAqB,EAAE;YACzE,MAAM,WAAW,GAA4B,AAAO,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAExE,IAAI,OAAO,CAAC,KAAK,CAAC,gDAAgD,CAAC,EAAE;gBACjE,QAAO,0KAAA,AAAS,EAAC,mDAAmD,EAAE,oBAAoB,EAAE;oBACxF,WAAW;oBAAE,IAAI,EAAE;wBAAE,KAAK;oBAAA,CAAE;iBAC/B,CAAC,CAAC;aACN;YAED,IAAI,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtD,sKAAO,YAAA,AAAS,EAAC,6BAA6B,EAAE,eAAe,EAAE;oBAAE,WAAW;oBAAE,IAAI,EAAE;wBAAE,KAAK;oBAAA,CAAE;gBAAA,CAAE,CAAC,CAAC;aACtG;YAED,wCAAwC;YACxC,IAAI,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;gBAC5E,sKAAO,YAAA,AAAS,EAAC,yBAAyB,EAAE,yBAAyB,EAAE;oBAAE,WAAW;oBAAE,IAAI,EAAE;wBAAE,KAAK;oBAAA,CAAE;gBAAA,CAAE,CAAC,CAAC;aAC5G;YAED,IAAI,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE;gBACzC,sKAAO,YAAA,AAAS,EAAC,+CAA+C,EAAE,uBAAuB,EAAE;oBACvF,SAAS,EAAE,MAAM;oBAAE,IAAI,EAAE;wBAAE,WAAW;wBAAE,IAAI,EAAE;4BAAE,KAAK;wBAAA,CAAE;oBAAA,CAAE;iBAC5D,CAAC,CAAC;aACN;SACJ;QAED,IAAI,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,EAAE;YACd,IAAI,KAAK,IAAU,KAAM,CAAC,OAAO,IAAU,KAAM,CAAC,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE;gBAC1F,WAAW,GAAG,IAAI,CAAC;aACtB;SACJ;QAED,IAAI,WAAW,EAAE;YACb,QAAO,0KAAA,AAAS,EAAC,uBAAuB,EAAE,uBAAuB,EAAE;gBAC/D,SAAS,EAAE,OAAO,CAAC,MAAM;gBAAE,IAAI,EAAE;oBAAE,KAAK;oBAAE,OAAO;gBAAA,CAAE;aACtD,CAAC,CAAC;SACN;QAED,WAAO,uKAAA,AAAS,EAAC,0BAA0B,EAAE,eAAe,EAAE;YAAE,KAAK;YAAE,OAAO;QAAA,CAAE,CAAC,CAAC;IACtF,CAAC;IAGD;;;;;;;;;;;;OAYG,CACH,IAAI,CAAC,MAAc,EAAE,MAAwC,EAAA;QACzD,kDAAkD;QAElD,8DAA8D;QAC9D,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,OAAO,CAAC,MAAM,gKAAC,YAAA,AAAS,EAAC,uCAAuC,EAAE,uBAAuB,EAAE;gBAAE,SAAS,EAAE,MAAM;YAAA,CAAE,CAAC,CAAC,CAAC;SAC7H;QAED,MAAM,EAAE,GAAG,IAAI,EAAC,MAAO,EAAE,CAAC;QAC1B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAChB,OAAO;gBAAE,MAAM;gBACf,OAAO,EAAE;oBAAE,MAAM;oBAAE,MAAM;oBAAE,EAAE;oBAAE,OAAO,EAAE,KAAK;gBAAA,CAAE;aAClD,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,gDAAgD;QAChD,IAAI,EAAC,aAAc,EAAE,CAAC;QAEtB,OAA+B,OAAO,CAAC;IAC3C,CAAC;IAED;;;;;;;;;;;OAWG,CACH,KAAK,CAAC,SAAS,CAAC,OAAyB,EAAA;QACrC,IAAI,OAAO,IAAI,IAAI,EAAE;YAAE,OAAO,GAAG,CAAC,CAAC;SAAE;QAErC,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAG,CAAC,CAAC;QAEvD,gBAAgB;QAChB,IAAI,OAAM,AAAC,OAAO,CAAC,IAAK,QAAQ,EAAE;YAC9B,MAAM,QAAQ,GAAkB,AAAC,MAAM,eAAe,CAAC,CAAC;YACxD,IAAI,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aAAE;YACvE,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,yKAAM,oBAAA,AAAiB,EAAC;YACzC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,QAAQ,EAAE,eAAe;SAC5B,CAAC,CAAC;QAEH,kBAAkB;QAClB,OAAO,qKAAG,aAAA,AAAU,EAAC,OAAO,CAAC,CAAC;QAC9B,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAE;YAC5B,QAAI,2KAAA,AAAU,EAAC,OAAO,CAAC,KAAK,OAAO,EAAE;gBACjC,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC3C;SACJ;QAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,YAAY,GAAA;QACd,MAAM,QAAQ,GAAkB,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAG,CAAC,CAAC;QACrE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,GAAK,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,OAAO,GAAA;QAEH,2BAA2B;QAC3B,IAAI,IAAI,EAAC,UAAW,EAAE;YAClB,YAAY,CAAC,IAAI,EAAC,UAAW,CAAC,CAAC;YAC/B,IAAI,EAAC,UAAW,GAAG,IAAI,CAAC;SAC3B;QAED,8BAA8B;QAC9B,KAAK,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,IAAI,EAAC,QAAS,CAAE;YAC9C,MAAM,gKAAC,YAAA,AAAS,EAAC,uCAAuC,EAAE,uBAAuB,EAAE;gBAAE,SAAS,EAAE,OAAO,CAAC,MAAM;YAAA,CAAE,CAAC,CAAC,CAAC;SACtH;QAED,IAAI,EAAC,QAAS,GAAG,EAAG,CAAC;QAErB,kBAAkB;QAClB,KAAK,CAAC,OAAO,EAAE,CAAC;IAEpB,CAAC;CACJ;AAQK,MAAgB,yBAA0B,SAAQ,kBAAkB;KACtE,eAAgB,CAAS;IACzB,YAAY,OAAoB,EAAE,OAAmC,CAAA;QACjE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAExB,IAAI,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QACzD,IAAI,eAAe,IAAI,IAAI,EAAE;YAAE,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC;SAAE;QAElF,IAAI,EAAC,eAAgB,GAAG,eAAe,CAAC;IAC5C,CAAC;IAED,cAAc,CAAC,GAAiB,EAAA;QAC5B,MAAM,UAAU,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;YACxB,UAAU,CAAC,eAAe,GAAG,IAAI,EAAC,eAAgB,CAAC;SACtD;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG,CACH,IAAI,eAAe,GAAA;QAAa,OAAO,IAAI,EAAC,eAAgB,CAAC;IAAC,CAAC;IAC/D,IAAI,eAAe,CAAC,KAAa,EAAA;QAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;QACnF,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;YAC5B,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;gBACjB,GAAG,CAAC,eAAe,GAAG,IAAI,EAAC,eAAgB,CAAC;aAC/C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAUK,MAAO,eAAgB,SAAQ,yBAAyB;KAC1D,OAAQ,CAAe;IAEvB,YAAY,GAA2B,EAAE,OAAoB,EAAE,OAAmC,CAAA;QAC9F,IAAI,GAAG,IAAI,IAAI,EAAE;YAAE,GAAG,GAAG,wBAAwB,CAAC;SAAE;QACpD,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAExB,IAAI,OAAM,AAAC,GAAG,CAAC,IAAK,QAAQ,EAAE;YAC1B,IAAI,CAAC,QAAQ,GAAG,8JAAI,eAAY,CAAC,GAAG,CAAC,CAAC;SACzC,MAAM;YACH,IAAI,EAAC,OAAQ,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;SAC/B;IACL,CAAC;IAED,cAAc,GAAA;QACV,OAAO,IAAI,EAAC,OAAQ,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,MAAc,EAAE,MAAwC,EAAA;QAC/D,qEAAqE;QACrE,wEAAwE;QACxE,0EAA0E;QAC1E,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QAEpB,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAA+C,EAAA;QACvD,uDAAuD;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC,OAAO,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QACtC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAEpB,IAAI,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,GAAG;gBAAE,IAAI;aAAE,CAAC;SAAE;QAE9C,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAED,SAAS,WAAW,CAAC,KAAU;IAC3B,IAAI,KAAK,IAAI,IAAI,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IAEnC,4CAA4C;IAC5C,IAAI,OAAM,AAAC,KAAK,CAAC,OAAO,CAAC,IAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,iKAAI,cAAA,AAAW,EAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACjG,OAAO;YAAE,OAAO,EAAE,KAAK,CAAC,OAAO;YAAE,IAAI,EAAE,KAAK,CAAC,IAAI;QAAA,CAAE,CAAC;KACvD;IAED,qBAAqB;IACrB,IAAI,OAAM,AAAC,KAAK,CAAC,IAAK,QAAQ,EAAE;QAC5B,IAAK,MAAM,GAAG,IAAI,KAAK,CAAE;YACrB,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBAAE,OAAO,MAAM,CAAC;aAAE;SACjC;QACD,OAAO,IAAI,CAAC;KACf;IAED,mDAAmD;IACnD,IAAI,OAAM,AAAC,KAAK,CAAC,IAAK,QAAQ,EAAE;QAC5B,IAAI;YACA,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SACzC,CAAC,OAAO,KAAK,EAAE,CAAA,CAAG;KACtB;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAS,eAAe,CAAC,KAAU,EAAE,MAAqB;IACtD,IAAI,KAAK,IAAI,IAAI,EAAE;QAAE,OAAO;KAAE;IAE9B,4CAA4C;IAC5C,IAAI,OAAM,AAAC,KAAK,CAAC,OAAO,CAAC,IAAK,QAAQ,EAAE;QACpC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC9B;IAED,qBAAqB;IACrB,IAAI,OAAO,AAAD,KAAM,CAAC,IAAK,QAAQ,EAAE;QAC5B,IAAK,MAAM,GAAG,IAAI,KAAK,CAAE;YACrB,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;SACvC;KACJ;IAED,mDAAmD;IACnD,IAAI,OAAM,AAAC,KAAK,CAAC,IAAK,QAAQ,EAAE;QAC5B,IAAI;YACA,OAAO,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;SACrD,CAAC,OAAO,KAAK,EAAE,CAAA,CAAG;KACtB;AACL,CAAC;AAED,SAAS,cAAc,CAAC,KAAU;IAC9B,MAAM,MAAM,GAAkB,EAAG,CAAC;IAClC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC/B,OAAO,MAAM,CAAC;AAClB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 6103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6109, "column": 0}, "map": {"version":3,"file":"provider-alchemy.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-alchemy.ts"],"sourcesContent":["/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\n\nimport {\n    defineProperties, resolveProperties, assert, assertArgument,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"arbitrum-sepolia\":\n            return \"arb-sepolia.g.alchemy.com\";\n        case \"base\":\n            return \"base-mainnet.g.alchemy.com\";\n        case \"base-goerli\":\n            return \"base-goerli.g.alchemy.com\";\n        case \"base-sepolia\":\n            return \"base-sepolia.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n        case \"optimism-sepolia\":\n            return \"opt-sepolia.g.alchemy.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n    readonly apiKey!: string;\n\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<AlchemyProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [ req.hash ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) { return null; }\n\n            let data: undefined | string;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            } catch (error) { }\n\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n\n        return await super._perform(req);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getRequest(network: Network, apiKey?: string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v2/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            }\n        }\n\n        return request;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6264, "column": 0}, "map": {"version":3,"file":"provider-ankr.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-ankr.ts"],"sourcesContent":["/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB (``bnb``)\n *  - BNB Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { JsonRpcError, JsonRpcPayload } from \"./provider-jsonrpc.js\";\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"sepolia\":\n            return \"rpc.ankr.com/eth_sepolia\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n        case \"base\":\n            return \"rpc.ankr.com/base\";\n        case \"base-goerli\":\n            return \"rpc.ankr.com/base_goerli\";\n        case \"base-sepolia\":\n            return \"rpc.ankr.com/base_sepolia\";\n        case \"bnb\":\n            return \"rpc.ankr.com/bsc\";\n        case \"bnbt\":\n            return \"rpc.ankr.com/bsc_testnet_chapel\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"matic-mumbai\":\n            return \"rpc.ankr.com/polygon_mumbai\";\n        case \"optimism\":\n            return \"rpc.ankr.com/optimism\";\n        case \"optimism-goerli\":\n            return \"rpc.ankr.com/optimism_testnet\";\n        case \"optimism-sepolia\":\n            return \"rpc.ankr.com/optimism_sepolia\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The API key for the Ankr connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n\n        defineProperties<AnkrProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6402, "column": 0}, "map": {"version":3,"file":"provider-browser.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-browser.ts"],"sourcesContent":["import { assertArgument } from \"../utils/index.js\";\n\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n\nimport type {\n    JsonRpcApiProviderOptions,\n    JsonRpcError, JsonRpcPayload, JsonRpcResult,\n    JsonRpcSigner\n} from \"./provider-jsonrpc.js\";\nimport type { Network, Networkish } from \"./network.js\";\n\n/**\n *  The interface to an [[link-eip-1193]] provider, which is a standard\n *  used by most injected providers, which the [[BrowserProvider]] accepts\n *  and exposes the API of.\n */\nexport interface Eip1193Provider {\n    /**\n     *  See [[link-eip-1193]] for details on this method.\n     */\n    request(request: { method: string, params?: Array<any> | Record<string, any> }): Promise<any>;\n};\n\n/**\n *  The possible additional events dispatched when using the ``\"debug\"``\n *  event on a [[BrowserProvider]].\n */\nexport type DebugEventBrowserProvider = {\n    action: \"sendEip1193Payload\",\n    payload: { method: string, params: Array<any> }\n} | {\n    action: \"receiveEip1193Result\",\n    result: any\n} | {\n    action: \"receiveEip1193Error\",\n    error: Error\n};\n\nexport type BrowserProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | boolean | Network;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n    #request: (method: string, params: Array<any> | Record<string, any>) => Promise<any>;\n\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */\n    constructor(ethereum: Eip1193Provider, network?: Networkish, _options?: BrowserProviderOptions) {\n        // Copy the options\n        const options: JsonRpcApiProviderOptions = Object.assign({ },\n          ((_options != null) ? _options: { }),\n          { batchMaxCount: 1 });\n\n        assertArgument(ethereum && ethereum.request, \"invalid EIP-1193 provider\", \"ethereum\", ethereum);\n\n        super(network, options);\n\n        this.#request = async (method: string, params: Array<any> | Record<string, any>) => {\n            const payload = { method, params };\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\n                return result;\n            } catch (e: any) {\n                const error = new Error(e.message);\n                (<any>error).code = e.code;\n                (<any>error).data = e.data;\n                (<any>error).payload = payload;\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\n                throw error;\n            }\n        };\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n\n        try {\n            const result = await this.#request(payload.method, payload.params || [ ]);\n            return [ { id: payload.id, result } ];\n        } catch (e: any) {\n            return [ {\n                id: payload.id,\n                error: { code: e.code, data: e.data, message: e.message }\n            } ];\n        }\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n\n        error = JSON.parse(JSON.stringify(error));\n\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch (error.error.code || -1) {\n            case 4001:\n                error.error.message = `ethers-user-denied: ${ error.error.message }`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${ error.error.message }`;\n                break;\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */\n    async hasSigner(address: number | string): Promise<boolean> {\n        if (address == null) { address = 0; }\n\n        const accounts = await this.send(\"eth_accounts\", [ ]);\n        if (typeof(address) === \"number\") {\n            return (accounts.length > address);\n        }\n\n        address = address.toLowerCase();\n        return accounts.filter((a: string) => (a.toLowerCase() === address)).length !== 0;\n    }\n\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        if (!(await this.hasSigner(address))) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", [ ]);\n                //console.log(\"RESP\", resp);\n\n            } catch (error: any) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, { id: payload.id, error });\n            }\n        }\n\n        return await super.getSigner(address);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6531, "column": 0}, "map": {"version":3,"file":"provider-chainstack.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-chainstack.ts"],"sourcesContent":["/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nfunction getApiKey(name: string): string {\n    switch (name) {\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\"\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethereum-mainnet.core.chainstack.com\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.core.chainstack.com\";\n        case \"bnb\":\n            return \"bsc-mainnet.core.chainstack.com\";\n        case \"matic\":\n            return \"polygon-mainnet.core.chainstack.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Creates a new **ChainstackProvider**.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = ChainstackProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<ChainstackProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new ChainstackProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === getApiKey(this._network.name));\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === getApiKey(network.name)) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"ChainstackProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6637, "column": 0}, "map": {"version":3,"file":"provider-cloudflare.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-cloudflare.ts"],"sourcesContent":["/**\n *  About Cloudflare\n *\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\n */\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Networkish } from \"./network.js\";\n\n/**\n *  About Cloudflare...\n */\nexport class CloudflareProvider extends JsonRpcProvider {\n    constructor(_network?: Networkish) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        assertArgument(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\n        super(\"https:/\\/cloudflare-eth.com/\", network, { staticNetwork: network });\n    }\n}\n"],"names":[],"mappings":"AAAA;;;;GAIG;;;AAIH,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAFvC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAGnD,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;;;;AAOlD,MAAO,kBAAmB,qLAAQ,kBAAe;IACnD,YAAY,QAAqB,CAAA;QAC7B,IAAI,QAAQ,IAAI,IAAI,EAAE;YAAE,QAAQ,GAAG,SAAS,CAAC;SAAE;QAC/C,MAAM,OAAO,mKAAG,UAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;uKACvC,iBAAA,AAAc,EAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,qBAAqB,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvF,KAAK,CAAC,8BAA8B,EAAE,OAAO,EAAE;YAAE,aAAa,EAAE,OAAO;QAAA,CAAE,CAAC,CAAC;IAC/E,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 6662, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6668, "column": 0}, "map": {"version":3,"file":"provider-etherscan.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-etherscan.ts"],"sourcesContent":["/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Base (``base``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties,\n    hexlify, toQuantity,\n    FetchRequest,\n    assert, assertArgument, isError,\n//    parseUnits,\n    toUtf8String\n } from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\n\nimport { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\n//import type { } from \"./pagination\";\nimport type { TransactionRequest } from \"./provider.js\";\n\nconst THROTTLE = 2000;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\n\n/**\n *  When subscribing to the ``\"debug\"`` event on an Etherscan-based\n *  provider, the events receive a **DebugEventEtherscanProvider**\n *  payload.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport type DebugEventEtherscanProvider = {\n    action: \"sendRequest\",\n    id: number,\n    url: string,\n    payload: Record<string, any>\n} | {\n    action: \"receiveRequest\",\n    id: number,\n    result: any\n} | {\n    action: \"receiveError\",\n    id: number,\n    error: any\n};\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    readonly baseUrl!: string;\n\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl: string) {\n        super(EtherscanPluginId);\n        defineProperties<EtherscanPlugin>(this, { baseUrl });\n    }\n\n    clone(): EtherscanPlugin {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\n\nconst skipKeys = [ \"enableCcipRead\" ];\n\nlet nextId = 1;\n\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n\n    /**\n     *  The connected network.\n     */\n    readonly network!: Network;\n\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    readonly apiKey!: null | string;\n\n    readonly #plugin: null | EtherscanPlugin;\n\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network?: Networkish, _apiKey?: string) {\n        const apiKey = (_apiKey != null) ? _apiKey: null;\n\n        super();\n\n        const network = Network.from(_network);\n\n        this.#plugin = network.getPlugin<EtherscanPlugin>(EtherscanPluginId);\n\n        defineProperties<EtherscanProvider>(this, { apiKey, network });\n\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */\n    getBaseUrl(): string {\n        if (this.#plugin) { return this.#plugin.baseUrl; }\n\n        switch(this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"holesky\":\n                return \"https:/\\/api-holesky.etherscan.io\";\n\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n           case \"base\":\n                return \"https:/\\/api.basescan.org\";\n            case \"base-sepolia\":\n                return \"https:/\\/api-sepolia.basescan.org\";\n            case \"bnb\":\n                return \"https:/\\/api.bscscan.com\";\n            case \"bnbt\":\n                return \"https:/\\/api-testnet.bscscan.com\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-amoy\":\n                return \"https:/\\/api-amoy.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n\n            default:\n        }\n\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.getBaseUrl() }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl(): string {\n        return `${ this.getBaseUrl() }/api`;\n    }\n\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const id = nextId++;\n\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt: number) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)): { };\n            const throttle = ((typeof(result.result) === \"string\") ? result.result: \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${ k }=${ payload[k] }`).join(\"&\");\n        }\n\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n\n            if (result.status != 1 || (typeof(result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n        }\n    }\n\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n        const result: Record<string, string> = { };\n        for (let key in transaction) {\n            if (skipKeys.indexOf(key) >= 0) { continue; }\n\n            if ((<any>transaction)[key] == null) { continue; }\n            let value = (<any>transaction)[key];\n            if (key === \"type\" && value === 0) { continue; }\n            if (key === \"blockTag\" && value === \"latest\") { continue; }\n\n            // Quantity-types require no leading zero, unless 0\n            if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n                value = toQuantity(value);\n\n            } else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n                }).join(\",\") + \"]\";\n\n            } else if (key === \"blobVersionedHashes\") {\n                if (value.length === 0) { continue; }\n\n                // @TODO: update this once the API supports blobs\n                assert(false, \"Etherscan API does not support blobVersionedHashes\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"_getTransactionPostData\",\n                    info: { transaction }\n                });\n\n            } else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req: PerformActionRequest, error: Error, transaction: any): never {\n\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = (<any>error).info.result.error.message;\n            } catch (e) { }\n\n            if (!message) {\n                try {\n                    message = (<any>error).info.message;\n                } catch (e) { }\n            }\n        }\n\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = (<any>error).info.result.error.data;\n                } catch (error) { }\n\n                const e = AbiCoder.getBuiltinCallException(req.method, <any>req.transaction, data);\n                e.info = { request: req, error }\n                throw e;\n            }\n        }\n\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                       transaction\n                    });\n                }\n\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                       transaction\n                    });\n                }\n            }\n        }\n\n        // Something we could not process\n        throw error;\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getPriorityFee\":\n                // This is temporary until Etherscan completes support\n                if (this.network.name === \"mainnet\") {\n                    return \"1000000000\";\n                } else if (this.network.name === \"optimism\") {\n                    return \"1000000\";\n                } else {\n                    throw new Error(\"fallback onto the AbstractProvider default\");\n                }\n                /* Working with Etherscan to get this added:\n                try {\n                    const test = await this.fetch(\"proxy\", {\n                        action: \"eth_maxPriorityFeePerGas\"\n                    });\n                    console.log(test);\n                    return test;\n                } catch (e) {\n                    console.log(\"DEBUG\", e);\n                    throw e;\n                }\n                */\n                /* This might be safe; but due to rounding neither myself\n                   or Etherscan are necessarily comfortable with this. :)\n                try {\n                    const result = await this.fetch(\"gastracker\", { action: \"gasoracle\" });\n                    console.log(result);\n                    const gasPrice = parseUnits(result.SafeGasPrice, \"gwei\");\n                    const baseFee = parseUnits(result.suggestBaseFee, \"gwei\");\n                    const priorityFee = gasPrice - baseFee;\n                    if (priorityFee < 0) { throw new Error(\"negative priority fee; defer to abstract provider default\"); }\n                    return priorityFee;\n                } catch (error) {\n                    console.log(\"DEBUG\", error);\n                    throw error;\n                }\n                */\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n           case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, <Error>error, req.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n/*\n            case \"getLogs\": {\n                // Needs to complain if more than one address is passed in\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n*/\n            default:\n                break;\n        }\n\n        return super._perform(req);\n    }\n\n    async getNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice(): Promise<number> {\n        if (this.network.name !== \"mainnet\") { return 0.0; }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address: string): Promise<null | Contract> {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) { address = await address; }\n\n        try {\n            const resp = await this.fetch(\"contract\", {\n            action: \"getabi\", address });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7325, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7331, "column": 0}, "map": {"version":3,"file":"provider-fallback.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-fallback.ts"],"sourcesContent":["/**\n *  A **FallbackProvider** provides resilience, security and performance\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport {\n    assert, assertArgument, getBigInt, getNumber, isError\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\"\n\nimport type { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\"\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle<T = any>(array: Array<T>): void {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction stringify(value: any): string {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof(value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n\n/**\n *  A configuration entry for how to use a [[Provider]].\n */\nexport interface FallbackProviderConfig {\n\n    /**\n     *  The provider.\n     */\n    provider: AbstractProvider;\n\n    /**\n     *  The amount of time to wait before kicking off the next provider.\n     *\n     *  Any providers that have not responded can still respond and be\n     *  counted, but this ensures new providers start.\n     */\n    stallTimeout?: number;\n\n    /**\n     *  The priority. Lower priority providers are dispatched first.\n     */\n    priority?: number;\n\n    /**\n     *  The amount of weight a provider is given against the quorum.\n     */\n    weight?: number;\n};\n\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\n\n// We track a bunch of extra stuff that might help debug problems or\n// optimize infrastructure later on.\n/**\n *  The statistics and state maintained for a [[Provider]].\n */\nexport interface FallbackProviderState extends Required<FallbackProviderConfig> {\n\n    /**\n     *  The most recent blockNumber this provider has reported (-2 if none).\n     */\n    blockNumber: number;\n\n    /**\n     *  The number of total requests ever sent to this provider.\n     */\n    requests: number;\n\n    /**\n     *  The number of responses that errored.\n     */\n    errorResponses: number;\n\n    /**\n     *  The number of responses that occured after the result resolved.\n     */\n    lateResponses: number;\n\n    /**\n     *  How many times syncing was required to catch up the expected block.\n     */\n    outOfSync: number;\n\n    /**\n     *  The number of requests which reported unsupported operation.\n     */\n    unsupportedEvents: number;\n\n    /**\n     *  A rolling average (5% current duration) for response time.\n     */\n    rollingDuration: number;\n\n    /**\n     *  The ratio of quorum-agreed results to total.\n     */\n    score: number;\n}\n\ninterface Config extends FallbackProviderState {\n    _updateNumber: null | Promise<any>;\n    _network: null | Network;\n    _totalTime: number;\n    _lastFatalError: null | Error;\n    _lastFatalErrorTimestamp: number;\n}\n\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\n\n\nasync function waitForSync(config: Config, blockNumber: number): Promise<void> {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error: any) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) { break; }\n    }\n}\n\n/**\n *  Additional options to configure a [[FallbackProvider]].\n */\nexport type FallbackProviderOptions = {\n    // How many providers must agree on a value before reporting\n    // back the response\n    quorum?: number;\n\n    // How many providers must have reported the same event\n    // for it to be emitted (currently unimplmented)\n    eventQuorum?: number;\n\n    // How many providers to dispatch each event to simultaneously.\n    // Set this to 0 to use getLog polling, which implies eventQuorum\n    // is equal to quorum. (currently unimplemented)\n    eventWorkers?: number;\n\n    cacheTimeout?: number;\n\n    pollingInterval?: number;\n};\n\ntype RunnerResult = { result: any } | { error: Error };\n\ntype RunnerState = {\n    config: Config;\n    staller: null | Promise<void>;\n    didBump: boolean;\n    perform: null | Promise<any>;\n    result: null | RunnerResult;\n}\n\nfunction _normalize(value: any): string {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\": case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${ JSON.stringify(k) }:${ _normalize(value[k]) }`).join(\",\") + \"}\";\n        }\n    }\n\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(value: RunnerResult): { tag: string, value: any } {\n\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n\ntype TallyResult = {\n    tag: string;\n    value: any;\n    weight: number;\n};\n\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum: number, results: Array<TallyResult>): any | Error {\n    const tally: Map<string, { value: any, weight: number }> = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n\n    let best: null | { value: any, weight: number } = null;\n\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n\n    if (best) { return best.value; }\n\n    return undefined;\n}\n\nfunction getMedian(quorum: number, results: Array<TallyResult>): undefined | bigint | Error {\n    let resultWeight = 0;\n\n    const errorMap: Map<string, { weight: number, value: Error }> = new Map();\n    let bestError: null | { weight: number, value: Error } = null;\n\n    const values: Array<bigint> = [ ];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n\n            if (bestError == null || e.weight > bestError.weight) { bestError = e; }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) { return bestError.value; }\n\n        // We do not have quorum for a result\n        return undefined;\n    }\n\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1: (b > a) ? 1: 0));\n\n    const mid = Math.floor(values.length / 2);\n\n    // Odd-length; take the middle value\n    if (values.length % 2) { return values[mid]; }\n\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum: number, results: Array<TallyResult>): undefined | any | Error {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) { return result; }\n\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) { return r.value; }\n    }\n\n    // Nope!\n    return undefined;\n}\n\nfunction getFuzzyMode(quorum: number, results: Array<TallyResult>): undefined | number {\n    if (quorum === 1) { return getNumber(<bigint>getMedian(quorum, results), \"%internal\"); }\n\n    const tally: Map<number, { result: number, weight: number }> = new Map();\n    const add = (result: number, weight: number) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n\n    let bestWeight = 0;\n    let bestResult: undefined | number = undefined;\n\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n\n    return bestResult;\n}\n\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resilience by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    readonly quorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventQuorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventWorkers: number;\n\n    readonly #configs: Array<Config>;\n\n    #height: number;\n    #initialSyncPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers: Array<AbstractProvider | FallbackProviderConfig>, network?: Networkish, options?: FallbackProviderOptions) {\n        super(network, options);\n\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState );\n            } else {\n                return Object.assign({ }, defaultConfig, p, defaultState );\n            }\n        });\n\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        } else {\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0),\n            \"quorum exceed provider weight\", \"quorum\", this.quorum);\n    }\n\n    get providerConfigs(): Array<FallbackProviderState> {\n        return this.#configs.map((c) => {\n            const result: any = Object.assign({ }, c);\n            for (const key in result) {\n                if (key[0] === \"_\") { delete result[key]; }\n            }\n            return result;\n        });\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider: AbstractProvider, req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({ }, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash: req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getPriorityFee\":\n                return (await provider.getFeeData()).maxPriorityFeePerGas;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running: Set<RunnerState>): null | Config {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n\n        const configs = Array.from(running).map((r) => r.config)\n\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (a.priority - b.priority));\n\n        for (const config of allConfigs) {\n            if (config._lastFatalError) { continue; }\n            if (configs.indexOf(config) === -1) { return config; }\n        }\n\n        return null;\n    }\n\n    // Adds a new runner (if available) to running.\n    #addRunner(running: Set<RunnerState>, req: PerformActionRequest): null | RunnerState {\n        const config = this.#getNextConfig(running);\n\n        // No runners available\n        if (config == null) { return null; }\n\n        // Create a new runner\n        const runner: RunnerState = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n\n        const now = getTime();\n\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            } catch (error: any) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n\n            runner.perform = null;\n        })();\n\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n\n        running.add(runner);\n        return runner;\n    }\n\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync(): Promise<void> {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises: Array<Promise<any>> = [ ];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n\n                // Check all the networks match\n                let chainId: null | bigint = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) { continue; }\n                    const network = <Network>(config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n\n        await initialSync\n    }\n\n\n    async #checkQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        // Get all the result objects\n        const results: Array<TallyResult> = [ ];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(<bigint>getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) { return undefined; }\n                if (mode > this.#height) { this.#height = mode; }\n                return this.#height;\n            }\n\n            case \"getGasPrice\":\n            case \"getPriorityFee\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${ stringify((<any>req).method) })`\n        });\n    }\n\n    async #waitForQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        if (running.size === 0) { throw new Error(\"no runners?!\"); }\n\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting: Array<Promise<void>> = [ ];\n\n        let newRunners = 0;\n        for (const runner of running) {\n\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n\n            // This runner has already triggered another runner\n            if (runner.didBump) { continue; }\n\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) { throw value; }\n            return value;\n        }\n\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req);\n        }\n\n        // All providers have returned, and we have no result\n\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            // Once any broadcast provides a positive result, use it. No\n            // need to wait for anyone else\n            const results: Array<null | TallyResult> = this.#configs.map((c) => null);\n            const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {\n                try {\n                    const result = await provider._perform(req);\n                    results[index] = Object.assign(normalizeResult({ result }), { weight });\n                } catch (error: any) {\n                    results[index] = Object.assign(normalizeResult({ error }), { weight });\n                }\n            });\n\n            // As each promise finishes...\n            while (true) {\n                // Check for a valid broadcast result\n                const done = <Array<any>>results.filter((r) => (r != null));\n                for (const { value } of done) {\n                    if (!(value instanceof Error)) { return value; }\n                }\n\n                // Check for a legit broadcast error (one which we cannot\n                // recover from; some nodes may return the following red\n                // herring events:\n                // - alredy seend (UNKNOWN_ERROR)\n                // - NONCE_EXPIRED\n                // - REPLACEMENT_UNDERPRICED\n                const result = checkQuorum(this.quorum, <Array<any>>results.filter((r) => (r != null)));\n                if (isError(result, \"INSUFFICIENT_FUNDS\")) {\n                    throw result;\n                }\n\n                // Kick off the next provider (if any)\n                const waiting = broadcasts.filter((b, i) => (results[i] == null));\n                if (waiting.length === 0) { break; }\n                await Promise.race(waiting);\n            }\n\n            // Use standard quorum results; any result was returned above,\n            // so this will find any error that met quorum if any\n            const result = getAnyResult(this.quorum, <Array<any>>results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            })\n            if (result instanceof Error) { throw result; }\n            return result;\n        }\n\n        await this.#initialSync();\n\n        // Bootstrap enough runners to meet quorum\n        const running: Set<RunnerState> = new Set();\n        let inflightQuorum = 0;\n        while (true) {\n            const runner = this.#addRunner(running, req);\n            if (runner == null) { break; }\n            inflightQuorum += runner.config.weight;\n            if (inflightQuorum >= this.quorum) { break; }\n        }\n\n        const result = await this.#waitForQuorum(running, req);\n\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n\n        return result;\n    }\n\n    async destroy(): Promise<void> {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7997, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8003, "column": 0}, "map": {"version":3,"file":"ws-browser.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/ws-browser.ts"],"sourcesContent":["\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst _WebSocket = getGlobal().WebSocket;\n\nexport { _WebSocket as WebSocket };\n"],"names":[],"mappings":";;;AACA,SAAS,SAAS;IAChB,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IACjD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QAAE,OAAO,MAAM,CAAC;KAAE;IACrD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QAAE,OAAO,MAAM,CAAC;KAAE;IACrD,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACpD,CAAC;;AAED,MAAM,UAAU,GAAG,SAAS,EAAE,CAAC,SAAS,CAAC","ignoreList":[0]}},
    {"offset": {"line": 8022, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8028, "column": 0}, "map": {"version":3,"file":"provider-socket.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-socket.ts"],"sourcesContent":["/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\n\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type {\n    JsonRpcApiProviderOptions, JsonRpcError, JsonRpcPayload, JsonRpcResult\n} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n\ntype JsonRpcSubscription = {\n    method: string,\n    params: {\n        result: any,\n        subscription: string\n    }\n};\n\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber implements Subscriber {\n    #provider: SocketProvider;\n\n    #filter: string;\n\n    /**\n     *  The filter.\n     */\n    get filter(): Array<any> { return JSON.parse(this.#filter); }\n\n    #filterId: null | Promise<string |number>;\n    #paused: null | boolean;\n\n    #emitPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider: SocketProvider, filter: Array<any>) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n\n    start(): void {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n\n    stop(): void {\n        (<Promise<number>>(this.#filterId)).then((filterId) => {\n            if (this.#provider.destroyed) { return; }\n            this.#provider.send(\"eth_unsubscribe\", [ filterId ]);\n        });\n        this.#filterId = null;\n    }\n\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused?: boolean): void {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n\n    resume(): void {\n        this.#paused = null;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message: any): void {\n        if (this.#filterId == null) { return; }\n        if (this.#paused === null) {\n            let emitPromise: null | Promise<void> = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            } else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newHeads\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newPendingTransactions\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"pending\", message);\n    }\n}\n\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter: string;\n\n    /**\n     *  The filter.\n     */\n    get logFilter(): EventFilter { return JSON.parse(this.#logFilter); }\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider, filter: EventFilter) {\n        super(provider, [ \"logs\", filter ]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks: Map<number, { payload: JsonRpcPayload, resolve: (r: any) => void, reject: (e: Error) => void }>;\n\n    // Maps each filterId to its subscriber\n    #subs: Map<number | string, SocketSubscriber>;\n\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending: Map<number | string, Array<any>>;\n\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network?: Networkish, _options?: JsonRpcApiProviderOptions) {\n        // Copy the options\n        const options = Object.assign({ }, (_options != null) ? _options: { });\n\n        // Support for batches is generally not supported for\n        // connection-base providers; if this changes in the future\n        // the _send should be updated to reflect this\n        assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1,\n            \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n        options.batchMaxCount = 1;\n\n        // Socket-based Providers (generally) cannot change their network,\n        // since they have a long-lived connection; but let people override\n        // this if they have just cause.\n        if (options.staticNetwork == null) { options.staticNetwork = true; }\n\n        super(network, options);\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId: number | string, subscriber: SocketSubscriber): void {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n\n        // @TODO: stringify payloads here and store to prevent mutations\n\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n\n        return <Array<JsonRpcResult | JsonRpcError>>[ await promise ];\n    }\n\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message: string): Promise<void> {\n        const result = <JsonRpcResult | JsonRpcError | JsonRpcSubscription>(JSON.parse(message));\n\n        if (result && typeof(result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n\n            callback.resolve(result);\n\n        } else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [ ];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n\n        } else {\n            this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message: string): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8326, "column": 0}, "map": {"version":3,"file":"provider-websocket.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-websocket.ts"],"sourcesContent":["\n\nimport { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\n\nimport { SocketProvider } from \"./provider-socket.js\";\n\nimport type { JsonRpcApiProviderOptions} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n/**\n *  A generic interface to a Websocket-like object.\n */\nexport interface WebSocketLike {\n    onopen: null | ((...args: Array<any>) => any);\n    onmessage: null | ((...args: Array<any>) => any);\n    onerror: null | ((...args: Array<any>) => any);\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n/**\n *  A function which can be used to re-create a WebSocket connection\n *  on disconnect.\n */\nexport type WebSocketCreator = () => WebSocketLike;\n\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n    #connect: null | WebSocketCreator;\n\n    #websocket: null | WebSocketLike;\n    get websocket(): WebSocketLike {\n        if (this.#websocket == null) { throw new Error(\"websocket closed\"); }\n        return this.#websocket;\n    }\n\n    constructor(url: string | WebSocketLike | WebSocketCreator, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n        if (typeof(url) === \"string\") {\n            this.#connect = () => { return new _WebSocket(url); };\n            this.#websocket = this.#connect();\n        } else if (typeof(url) === \"function\") {\n            this.#connect = url;\n            this.#websocket = url();\n        } else {\n            this.#connect = null;\n            this.#websocket = url;\n        }\n\n        this.websocket.onopen = async () => {\n            try {\n                await this._start()\n                this.resume();\n            } catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n                // @TODO: now what? Attempt reconnect?\n            }\n        };\n\n        this.websocket.onmessage = (message: { data: string }) => {\n            this._processMessage(message.data);\n        };\n/*\n        this.websocket.onclose = (event) => {\n            // @TODO: What event.code should we reconnect on?\n            const reconnect = false;\n            if (reconnect) {\n                this.pause(true);\n                if (this.#connect) {\n                    this.#websocket = this.#connect();\n                    this.#websocket.onopen = ...\n                    // @TODO: this requires the super class to rebroadcast; move it there\n                }\n                this._reconnect();\n            }\n        };\n*/\n    }\n\n    async _write(message: string): Promise<void> {\n        this.websocket.send(message);\n    }\n\n    async destroy(): Promise<void> {\n        if (this.#websocket != null) {\n            this.#websocket.close();\n            this.#websocket = null;\n        }\n        super.destroy();\n    }\n}\n"],"names":[],"mappings":";;;AAEA,OAAO,EAAE,SAAS,IAAI,UAAU,EAAE,MAAM,SAAS,CAAC,2OAAC,UAAA,EAAY;AAE/D,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;;;AAmChD,MAAO,iBAAkB,oLAAQ,iBAAc;KACjD,OAAQ,CAA0B;KAElC,SAAU,CAAuB;IACjC,IAAI,SAAS,GAAA;QACT,IAAI,IAAI,EAAC,SAAU,IAAI,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;QACrE,OAAO,IAAI,EAAC,SAAU,CAAC;IAC3B,CAAC;IAED,YAAY,GAA8C,EAAE,OAAoB,EAAE,OAAmC,CAAA;QACjH,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxB,IAAI,OAAM,AAAC,GAAG,CAAC,IAAK,QAAQ,EAAE;YAC1B,IAAI,EAAC,OAAQ,GAAG,GAAG,EAAE;gBAAG,OAAO,0KAAI,YAAU,CAAC,GAAG,CAAC,CAAC;YAAC,CAAC,CAAC;YACtD,IAAI,EAAC,SAAU,GAAG,IAAI,EAAC,OAAQ,EAAE,CAAC;SACrC,MAAM,IAAI,OAAM,AAAC,GAAG,CAAC,IAAK,UAAU,EAAE;YACnC,IAAI,EAAC,OAAQ,GAAG,GAAG,CAAC;YACpB,IAAI,EAAC,SAAU,GAAG,GAAG,EAAE,CAAC;SAC3B,MAAM;YACH,IAAI,EAAC,OAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,EAAC,SAAU,GAAG,GAAG,CAAC;SACzB;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE;YAC/B,IAAI;gBACA,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;gBACnB,IAAI,CAAC,MAAM,EAAE,CAAC;aACjB,CAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACxD,sCAAsC;aACzC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,OAAyB,EAAE,EAAE;YACrD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC;IACV;;;;;;;;;;;;;;UAcE,CACE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAe,EAAA;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,OAAO,GAAA;QACT,IAAI,IAAI,EAAC,SAAU,IAAI,IAAI,EAAE;YACzB,IAAI,EAAC,SAAU,CAAC,KAAK,EAAE,CAAC;YACxB,IAAI,EAAC,SAAU,GAAG,IAAI,CAAC;SAC1B;QACD,KAAK,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 8394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8400, "column": 0}, "map": {"version":3,"file":"provider-infura.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-infura.ts"],"sourcesContent":["/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Linea (``linea``)\n *  - Linea Goerli Testnet (``linea-goerli``)\n *  - Linea Sepolia Testnet (``linea-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport {\n    defineProperties, FetchRequest, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"arbitrum-sepolia\":\n            return \"arbitrum-sepolia.infura.io\";\n        case \"base\":\n            return \"base-mainnet.infura.io\";\n        case \"base-goerlia\":\n            return \"base-goerli.infura.io\";\n        case \"base-sepolia\":\n            return \"base-sepolia.infura.io\";\n        case \"bnb\":\n            return \"bnbsmartchain-mainnet.infura.io\";\n        case \"bnbt\":\n            return \"bnbsmartchain-testnet.infura.io\";\n        case \"linea\":\n            return \"linea-mainnet.infura.io\";\n        case \"linea-goerli\":\n            return \"linea-goerli.infura.io\";\n        case \"linea-sepolia\":\n            return \"linea-sepolia.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n        case \"optimism-sepolia\":\n            return \"optimism-sepolia.infura.io\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    constructor(network?: Networkish, projectId?: string) {\n        const provider = new InfuraProvider(network, projectId);\n\n        const req = provider._getConnection();\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\n\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, provider._network);\n\n        defineProperties<InfuraWebSocketProvider>(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraProvider**.\n     */\n    constructor(_network?: Networkish, projectId?: null | string, projectSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<InfuraProvider>(this, { projectId, projectSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    static getWebSocketProvider(network?: Networkish, projectId?: string): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, projectId?: null | string, projectSecret?: null | string): FetchRequest {\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v3/${ projectId }`);\n        request.allowGzip = true;\n        if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"InfuraProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8589, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8595, "column": 0}, "map": {"version":3,"file":"provider-ipcsocket-browser.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-ipcsocket-browser.ts"],"sourcesContent":["const IpcSocketProvider = undefined;\n\nexport { IpcSocketProvider };\n"],"names":[],"mappings":";;;AAAA,MAAM,iBAAiB,GAAG,SAAS,CAAC","ignoreList":[0]}},
    {"offset": {"line": 8601, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8607, "column": 0}, "map": {"version":3,"file":"signer-noncemanager.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/signer-noncemanager.ts"],"sourcesContent":["import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer!: Signer;\n\n    #noncePromise: null | Promise<number>;\n    #delta: number;\n\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer: Signer) {\n        super(signer.provider);\n        defineProperties<NonceManager>(this, { signer });\n\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n\n    async getAddress(): Promise<string> {\n        return this.signer.getAddress();\n    }\n\n    connect(provider: null | Provider): NonceManager {\n        return new NonceManager(this.signer.connect(provider));\n    }\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n\n        return super.getNonce(blockTag);\n    }\n\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment(): void {\n        this.#delta++;\n    }\n\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset(): void {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n\n    signTransaction(tx: TransactionRequest): Promise<string> {\n        return this.signer.signTransaction(tx);\n    }\n\n    signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signer.signMessage(message);\n    }\n\n    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;;;AAehD,MAAO,YAAa,oLAAQ,iBAAc;IAC5C;;OAEG,CACH,MAAM,CAAU;KAEhB,YAAa,CAAyB;KACtC,KAAM,CAAS;IAEf;;OAEG,CACH,YAAY,MAAc,CAAA;QACtB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;2KACvB,mBAAA,AAAgB,EAAe,IAAI,EAAE;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAEjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,EAAC,KAAM,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IACpC,CAAC;IAED,OAAO,CAAC,QAAyB,EAAA;QAC7B,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAAmB,EAAA;QAC9B,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,IAAI,IAAI,EAAC,YAAa,IAAI,IAAI,EAAE;gBAC5B,IAAI,EAAC,YAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;aAClD;YAED,MAAM,KAAK,GAAG,IAAI,EAAC,KAAM,CAAC;YAC1B,OAAO,AAAC,MAAM,IAAI,EAAC,YAAa,CAAC,EAAG,KAAK,CAAC;SAC7C;QAED,OAAO,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG,CACH,SAAS,GAAA;QACL,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED;;;OAGG,CACH,KAAK,GAAA;QACD,IAAI,EAAC,KAAM,GAAG,CAAC,CAAC;QAChB,IAAI,EAAC,YAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAsB,EAAA;QACxC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAC/C,EAAE,CAAC,KAAK,GAAG,MAAM,YAAY,CAAC;QAE9B,sDAAsD;QACtD,wDAAwD;QACxD,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,eAAe,CAAC,EAAsB,EAAA;QAClC,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,WAAW,CAAC,OAA4B,EAAA;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,aAAa,CAAC,MAAuB,EAAE,KAA4C,EAAE,KAA0B,EAAA;QAC3G,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 8678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8684, "column": 0}, "map": {"version":3,"file":"provider-pocket.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-pocket.ts"],"sourcesContent":["/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return  \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    readonly applicationId!: string;\n\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    readonly applicationSecret!: null | string;\n\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n        if (applicationSecret == null) { applicationSecret = null; }\n\n        const options = { staticNetwork: network };\n\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\n        request.allowGzip = true;\n\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAOH,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AANvC,OAAO,EACH,gBAAgB,EAAE,YAAY,EAAE,cAAc,EACjD,MAAM,mBAAmB,CAAC;;AAG3B,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAErD,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;;;;;;AAKxD,MAAM,oBAAoB,GAAG,0BAA0B,CAAC;AAExD,SAAS,OAAO,CAAC,IAAY;IACzB,OAAQ,IAAI,EAAE;QACV,KAAK,SAAS;YACV,OAAQ,kCAAkC,CAAC;QAC/C,KAAK,QAAQ;YACT,OAAO,iCAAiC,CAAC;QAE7C,KAAK,OAAO;YACR,OAAO,mCAAmC,CAAC;QAC/C,KAAK,cAAc;YACf,OAAO,yCAAyC,CAAC;KACxD;mKAED,iBAAA,AAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AAClE,CAAC;AAYK,MAAO,cAAe,qLAAQ,kBAAe;IAE/C;;OAEG,CACM,aAAa,CAAU;IAEhC;;;OAGG,CACM,iBAAiB,CAAiB;IAE3C;;;;;OAKG,CACH,YAAY,QAAqB,EAAE,aAA6B,EAAE,iBAAiC,CAAA;QAC/F,IAAI,QAAQ,IAAI,IAAI,EAAE;YAAE,QAAQ,GAAG,SAAS,CAAC;SAAE;QAC/C,MAAM,OAAO,GAAG,0KAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,aAAa,IAAI,IAAI,EAAE;YAAE,aAAa,GAAG,oBAAoB,CAAC;SAAE;QACpE,IAAI,iBAAiB,IAAI,IAAI,EAAE;YAAE,iBAAiB,GAAG,IAAI,CAAC;SAAE;QAE5D,MAAM,OAAO,GAAG;YAAE,aAAa,EAAE,OAAO;QAAA,CAAE,CAAC;QAE3C,MAAM,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;QACrF,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;2KAEjC,mBAAA,AAAgB,EAAiB,IAAI,EAAE;YAAE,aAAa;YAAE,iBAAiB;QAAA,CAAE,CAAC,CAAC;IACjF,CAAC;IAED,YAAY,CAAC,OAAe,EAAA;QACxB,IAAI;YACA,OAAO,IAAI,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAClF,CAAC,OAAO,KAAK,EAAE,CAAA,CAAG;QACnB,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG,CACH,MAAM,CAAC,UAAU,CAAC,OAAgB,EAAE,aAA6B,EAAE,iBAAiC,EAAA;QAChG,IAAI,aAAa,IAAI,IAAI,EAAE;YAAE,aAAa,GAAG,oBAAoB,CAAC;SAAE;QAEpE,MAAM,OAAO,GAAG,8JAAI,eAAY,CAAC,CAAA,SAAA,EAAa,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,CAAA,OAAA,EAAW,aAAc,EAAE,CAAC,CAAC;QACjG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QAEzB,IAAI,iBAAiB,EAAE;YACnB,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;SACjD;QAED,IAAI,aAAa,KAAK,oBAAoB,EAAE;YACxC,OAAO,CAAC,SAAS,GAAG,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE;sLACrD,sBAAA,AAAmB,EAAC,gBAAgB,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC;SACL;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,mBAAmB,GAAA;QACf,OAAO,AAAC,IAAI,CAAC,aAAa,KAAK,oBAAoB,CAAC,CAAC;IACzD,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 8787, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8793, "column": 0}, "map": {"version":3,"file":"provider-quicknode.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/provider-quicknode.ts"],"sourcesContent":["/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base Mainnet (``base``);\n *  - Base Goerli Testnet (``base-goerli``);\n *  - Base Sepolia Testnet (``base-sepolia``);\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\n\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        case \"sepolia\":\n            return \"ethers.ethereum-sepolia.quiknode.pro\";\n        case \"holesky\":\n            return \"ethers.ethereum-holesky.quiknode.pro\";\n\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"arbitrum-sepolia\":\n            return \"ethers.arbitrum-sepolia.quiknode.pro\";\n        case \"base\":\n            return \"ethers.base-mainnet.quiknode.pro\";\n        case \"base-goerli\":\n            return \"ethers.base-goerli.quiknode.pro\";\n        case \"base-spolia\":\n            return \"ethers.base-sepolia.quiknode.pro\";\n        case \"bnb\":\n            return \"ethers.bsc.quiknode.pro\";\n        case \"bnbt\":\n            return \"ethers.bsc-testnet.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n        case \"optimism-sepolia\":\n            return \"ethers.optimism-sepolia.quiknode.pro\";\n        case \"xdai\":\n            return \"ethers.xdai.quiknode.pro\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/*\n@TODO:\n  These networks are not currently present in the Network\n  default included networks. Research them and ensure they\n  are EVM compatible and work with ethers\n\n  http://ethers.matic-amoy.quiknode.pro\n\n  http://ethers.avalanche-mainnet.quiknode.pro\n  http://ethers.avalanche-testnet.quiknode.pro\n  http://ethers.blast-sepolia.quiknode.pro\n  http://ethers.celo-mainnet.quiknode.pro\n  http://ethers.fantom.quiknode.pro\n  http://ethers.imx-demo.quiknode.pro\n  http://ethers.imx-mainnet.quiknode.pro\n  http://ethers.imx-testnet.quiknode.pro\n  http://ethers.near-mainnet.quiknode.pro\n  http://ethers.near-testnet.quiknode.pro\n  http://ethers.nova-mainnet.quiknode.pro\n  http://ethers.scroll-mainnet.quiknode.pro\n  http://ethers.scroll-testnet.quiknode.pro\n  http://ethers.tron-mainnet.quiknode.pro\n  http://ethers.zkevm-mainnet.quiknode.pro\n  http://ethers.zkevm-testnet.quiknode.pro\n  http://ethers.zksync-mainnet.quiknode.pro\n  http://ethers.zksync-testnet.quiknode.pro\n*/\n\n\n\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nexport class QuickNodeProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API token.\n     */\n    readonly token!: string;\n\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */\n    constructor(_network?: Networkish, token?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (token == null) { token = defaultToken; }\n\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<QuickNodeProvider>(this, { token });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.token === defaultToken);\n    }\n\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */\n    static getRequest(network: Network, token?: null | string): FetchRequest {\n        if (token == null) { token = defaultToken; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ token }`);\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8923, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8929, "column": 0}, "map": {"version":3,"file":"default-provider.js","sources":["file:///Users/hazobaykulov/www/reclaim/drops-dashboard/node_modules/ethers/src.ts/providers/default-provider.ts"],"sourcesContent":["\nimport { assert } from \"../utils/index.js\";\n\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { ChainstackProvider } from \"./provider-chainstack.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\n\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { Network } from \"./network.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport { WebSocketLike } from \"./provider-websocket.js\";\n\nfunction isWebSocketLike(value: any): value is WebSocketLike {\n    return (value && typeof(value.send) === \"function\" &&\n        typeof(value.close) === \"function\");\n}\n\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\n\n/**\n *  Returns a default provider for %%network%%.\n *\n *  If %%network%% is a [[WebSocketLike]] or string that begins with\n *  ``\"ws:\"`` or ``\"wss:\"``, a [[WebSocketProvider]] is returned backed\n *  by that WebSocket or URL.\n *\n *  If %%network%% is a string that begins with ``\"HTTP:\"`` or ``\"HTTPS:\"``,\n *  a [[JsonRpcProvider]] is returned connected to that URL.\n *\n *  Otherwise, a default provider is created backed by well-known public\n *  Web3 backends (such as [[link-infura]]) using community-provided API\n *  keys.\n *\n *  The %%options%% allows specifying custom API keys per backend (setting\n *  an API key to ``\"-\"`` will omit that provider) and ``options.exclusive``\n *  can be set to either a backend name or and array of backend names, which\n *  will whitelist **only** those backends.\n *\n *  Current backend strings supported are:\n *  - ``\"alchemy\"``\n *  - ``\"ankr\"``\n *  - ``\"cloudflare\"``\n *  - ``\"chainstack\"``\n *  - ``\"etherscan\"``\n *  - ``\"infura\"``\n *  - ``\"publicPolygon\"``\n *  - ``\"quicknode\"``\n *\n *  @example:\n *    // Connect to a local Geth node\n *    provider = getDefaultProvider(\"http://localhost:8545/\");\n *\n *    // Connect to Ethereum mainnet with any current and future\n *    // third-party services available\n *    provider = getDefaultProvider(\"mainnet\");\n *\n *    // Connect to Polygon, but only allow Etherscan and\n *    // INFURA and use \"MY_API_KEY\" in calls to Etherscan.\n *    provider = getDefaultProvider(\"matic\", {\n *      etherscan: \"MY_API_KEY\",\n *      exclusive: [ \"etherscan\", \"infura\" ]\n *    });\n */\nexport function getDefaultProvider(network?: string | Networkish | WebSocketLike, options?: any): AbstractProvider {\n    if (options == null) { options = { }; }\n\n    const allowService = (name: string) => {\n        if (options[name] === \"-\") { return false; }\n        if (typeof(options.exclusive) === \"string\") {\n            return (name === options.exclusive);\n        }\n        if (Array.isArray(options.exclusive)) {\n            return (options.exclusive.indexOf(name) !== -1);\n        }\n        return true;\n    };\n\n    if (typeof(network) === \"string\" && network.match(/^https?:/)) {\n        return new JsonRpcProvider(network);\n    }\n\n    if (typeof(network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new WebSocketProvider(network);\n    }\n\n    // Get the network and name, if possible\n    let staticNetwork: null | Network = null;\n    try {\n        staticNetwork = Network.from(network);\n    } catch (error) { }\n\n\n    const providers: Array<AbstractProvider> = [ ];\n\n    if (allowService(\"publicPolygon\") && staticNetwork) {\n        if (staticNetwork.name === \"matic\") {\n            providers.push(new JsonRpcProvider(\"https:/\\/polygon-rpc.com/\", staticNetwork, { staticNetwork }));\n        } else if (staticNetwork.name === \"matic-amoy\") {\n            providers.push(new JsonRpcProvider(\"https:/\\/rpc-amoy.polygon.technology/\", staticNetwork, { staticNetwork }));\n        }\n    }\n\n    if (allowService(\"alchemy\")) {\n        try {\n            providers.push(new AlchemyProvider(network, options.alchemy));\n        } catch (error) { }\n    }\n\n    if (allowService(\"ankr\") && options.ankr != null) {\n        try {\n            providers.push(new AnkrProvider(network, options.ankr));\n        } catch (error) { }\n    }\n\n    if (allowService(\"chainstack\")) {\n        try {\n            providers.push(new ChainstackProvider(network, options.chainstack));\n        } catch (error) { }\n    }\n\n    if (allowService(\"cloudflare\")) {\n        try {\n            providers.push(new CloudflareProvider(network));\n        } catch (error) { }\n    }\n\n    if (allowService(\"etherscan\")) {\n        try {\n            providers.push(new EtherscanProvider(network, options.etherscan));\n        } catch (error) { }\n    }\n\n    if (allowService(\"infura\")) {\n        try {\n            let projectId = options.infura;\n            let projectSecret: undefined | string = undefined;\n            if (typeof(projectId) === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new InfuraProvider(network, projectId, projectSecret));\n        } catch (error) { }\n    }\n/*\n    if (options.pocket !== \"-\") {\n        try {\n            let appId = options.pocket;\n            let secretKey: undefined | string = undefined;\n            let loadBalancer: undefined | boolean = undefined;\n            if (typeof(appId) === \"object\") {\n                loadBalancer = !!appId.loadBalancer;\n                secretKey = appId.secretKey;\n                appId = appId.appId;\n            }\n            providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n        } catch (error) { console.log(error); }\n    }\n*/\n    if (allowService(\"quicknode\")) {\n        try {\n            let token = options.quicknode;\n            providers.push(new QuickNodeProvider(network, token));\n        } catch (error) { }\n    }\n\n    assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n\n    // No need for a FallbackProvider\n    if (providers.length === 1) { return providers[0]; }\n\n    // We use the floor because public third-party providers can be unreliable,\n    // so a low number of providers with a large quorum will fail too often\n    let quorum = Math.floor(providers.length / 2);\n    if (quorum > 2) { quorum = 2; }\n\n    // Testnets don't need as strong a security gaurantee and speed is\n    // more useful during testing\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) { quorum = 1; }\n\n    // Provided override qorum takes priority\n    if (options && options.quorum) { quorum = options.quorum; }\n\n    return new FallbackProvider(providers, undefined, { quorum });\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9082, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}